pipeline {
    agent any

    environment {
        SONARQUBE_SCANNER_HOME = tool 'sonarqube' // Assumes SonarQube Scanner is configured in Jenkins
        SONARQUBE_URL = 'http://172.28.58.54:9000'
        SONARQUBE_PROJECT_KEY = 'sonarqube-nCompass'
        SONARQUBE_TOKEN = 'squ_5a288e1acbf7b6e43a496a4ac2e8ae1505ddd761'
        SONARQUBE_INSTALL_DIR = "${WORKSPACE}/sonar-scanner" // Use a directory within Jenkins workspace
    }

    stages {
        stage('Docker Login') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'DOCKER_CREDS', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh 'docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"'
                }
            }
        }
stage('Archiving') {
    steps {
        script {
            env.ARCHIVE_DIRECTORY = "${workspace}/.archive"
            dir(env.ARCHIVE_DIRECTORY) {
                deleteDir()
                sh "mkdir -p ${ARCHIVE_DIRECTORY}"
            }

            env.NCOMPASS_SRC = "${workspace}/src"
            sh "mkdir -p ${NCOMPASS_SRC}"

            dir(env.NCOMPASS_SRC) {
                // Check out nCompass src
                checkout scm
            }
        }
    }
}


stage('Setup Angular') {
    steps {
        script {
            // Create spot for angular unit test artifacts
            env.ANGULAR_TEST_ARTIFACTS = "${workspace}/src/.angular-test"
            dir(env.ANGULAR_TEST_ARTIFACTS) {
                deleteDir()
                sh "mkdir -p ${ANGULAR_TEST_ARTIFACTS}"
            }

            // Create spot for angular build artifacts
            env.ANGULAR_ARTIFACTS = "${workspace}/src/.angular"
            dir(env.ANGULAR_ARTIFACTS) {
                deleteDir()
                sh "mkdir -p ${ANGULAR_ARTIFACTS}"
            }

            // Create spot for angular application code
            env.ANGULAR_SRC = "${workspace}/src/angularsrc"
            sh "mkdir -p ${ANGULAR_SRC}"
        }
    }
}


        stage('Coverity') {
            steps {
                script {
                    // Install SonarQube Scanner if not installed
                    if (isUnix()) {
                        sh "mkdir -p ${SONARQUBE_INSTALL_DIR}"
                        sh "wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip"
                        sh "rm -rf ${SONARQUBE_INSTALL_DIR}"
                        sh "unzip sonar-scanner-cli-4.6.2.2472-linux.zip -d ${SONARQUBE_INSTALL_DIR}"
                        sh "export PATH=$PATH:${SONARQUBE_INSTALL_DIR}/sonar-scanner-4.6.2.2472-linux/bin"
                    } else {
                        error("This script only supports Unix-based systems.")
                    }
                }
            }
        }

        stage('Clone Git Repository') {
            steps {
                script {
                    // Clone your GitHub repository
                    checkout scm
                }
            }
        }

        stage('Code Quality Check via SonarQube') {
            steps {
                script {
                    withSonarQubeEnv("sonarqube-nCompass") {
                        sh "${SONARQUBE_INSTALL_DIR}/sonar-scanner-4.6.2.2472-linux/bin/sonar-scanner \
                            -Dsonar.projectKey=${SONARQUBE_PROJECT_KEY} \
                            -Dsonar.sources=. \
                            -Dsonar.host.url=${SONARQUBE_URL} \
                            -Dsonar.login=${SONARQUBE_TOKEN}"
                    }
                }
            }
        }
    }
}
