pipeline {
    agent any

    environment {
        SONARQUBE_SCANNER_HOME = tool 'sonarqube'
        SONARQUBE_URL = 'http://172.28.58.54:9000'
        SONARQUBE_PROJECT_KEY = 'sonarqube-nCompass'
        SONARQUBE_TOKEN = 'squ_5a288e1acbf7b6e43a496a4ac2e8ae1505ddd761'
        SONARQUBE_INSTALL_DIR = "${WORKSPACE}/sonar-scanner"
        DOCKER_IMAGE = 'lakeshsharma/us-west1-docker.pkg.dev:angular'
        DOCKER_COMPOSE_FILE = "${WORKSPACE}/src/angularsrc/docker-compose.yml"
    }
stages {
stage('Docker Login') {
    steps {
        withCredentials([usernamePassword(credentialsId: 'DOCKER_CREDS', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
            script {
                def registryCredentials = 'registry-1.docker.io'
                def dockerCmd = "docker login -u ${DOCKER_USERNAME} --password-stdin ${registryCredentials}"
                
                // Run the Docker login command with password provided via stdin
                sh "echo ${DOCKER_PASSWORD} | ${dockerCmd}"
            }
        }
    }
}

stage('Install Node.js') {
    steps {
        script {
            // Verify installation
            sh 'node -v'
            sh 'npm -v'
        }
    }
}
						stage('Clone Git Repository') {
							steps {
								script {
                    // Clone your GitHub repository
									checkout scm
									}
								}
							}
stage ('Install sonar-scanner'){					
steps {
									script {
                    // Install SonarQube Scanner if not installed
										if (isUnix()) {
											sh "mkdir -p ${SONARQUBE_INSTALL_DIR}"
											sh "wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip"
											sh "rm -rf ${SONARQUBE_INSTALL_DIR}"
											sh "unzip sonar-scanner-cli-4.6.2.2472-linux.zip -d ${SONARQUBE_INSTALL_DIR}"
											sh "export PATH=$PATH:${SONARQUBE_INSTALL_DIR}/sonar-scanner-4.6.2.2472-linux/bin"
										} else {
											bat 'echo "This script only supports Unix-based systems."'
											error("Unsupported OS")
											}
										}
									}
								}

                    stage('SonarQube') {
			steps{
                        script {
                            withSonarQubeEnv("sonarqube-nCompass") {
                                sh "${SONARQUBE_INSTALL_DIR}/sonar-scanner-4.6.2.2472-linux/bin/sonar-scanner \
                                    -Dsonar.projectKey=${SONARQUBE_PROJECT_KEY} \
                                    -Dsonar.sources=. \
                                    -Dsonar.host.url=${SONARQUBE_URL} \
                                    -Dsonar.login=${SONARQUBE_TOKEN}"
                            }
                        }
                    }
		}
stage('Save SonarQube Report') {
    steps {
        script {
            // Execute the command and save the output to sonarqube_report.json
            sh "sudo curl -u squ_5a288e1acbf7b6e43a496a4ac2e8ae1505ddd761: -X GET \"http://172.28.58.54:9000/api/issues/search?componentKeys=sonarqube-nCompass&ps=500\" | jq . > ${WORKSPACE}/sonarqube_report.json"
        }
    }
}

    }
post {
    success {
        echo "Pipeline succeeded! Application is deployed."

        // Capture the task report and echo it to the console
        script {
            def workspace = "${WORKSPACE}/"
            def reportTaskFile = sh(script: "find ${workspace} -name report-task.txt | head -n 1", returnStdout: true).trim()
            def taskReport = sh(script: "curl -u ${SONARQUBE_TOKEN}: -X GET \"${SONARQUBE_URL}/api/ce/task?id=${currentBuild.rawBuild.getId()}\"", returnStdout: true).trim()

            // Append the task report to recent-test-report.txt
            writeFile file: "${workspace}/recent-test-report.txt", text: taskReport, append: true
            echo "Task Report:\n${taskReport}"
        }
    }
}

}
