pipeline {
    agent any

    environment {
        SONARQUBE_SCANNER_HOME = tool 'sonarqube'; // Assumes SonarQube Scanner is configured in Jenkins
        SONARQUBE_URL = 'http://172.28.58.54:9000';
        SONARQUBE_PROJECT_KEY = 'sonarqube-nCompass';
        SONARQUBE_TOKEN = 'squ_5a288e1acbf7b6e43a496a4ac2e8ae1505ddd761';
        SONARQUBE_INSTALL_DIR = "${WORKSPACE}/sonar-scanner" // Use a directory within Jenkins workspace
    }
stages {
    stage('Install SonarQube Scanner') {
        steps {
            script {
                // Install SonarQube Scanner if not installed
                if (isUnix()) {
                    sh "mkdir -p ${SONARQUBE_INSTALL_DIR}"
                    sh "wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip"
                    sh "unzip sonar-scanner-cli-4.6.2.2472-linux.zip -d ${SONARQUBE_INSTALL_DIR}"
                    sh "export PATH=$PATH:${SONARQUBE_INSTALL_DIR}/bin"
                } else {
                    bat 'echo "This script only supports Unix-based systems."'
                    error("Unsupported OS")
                }
            }
        }
    }
        stage('Code Quality Check via SonarQube') {
            steps {
                script {
                    withSonarQubeEnv("sonarqube-nCompass") {
                        sh "${SONARQUBE_INSTALL_DIR}/bin/sonar-scanner \
                            -Dsonar.projectKey=${SONARQUBE_PROJECT_KEY} \
                            -Dsonar.sources=. \
                            -Dsonar.host.url=${SONARQUBE_URL} \
                            -Dsonar.login=${SONARQUBE_TOKEN}"
                    }
                }
            }
        }
    }
