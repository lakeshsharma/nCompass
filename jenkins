pipeline {
    agent any

    environment {
        SONARQUBE_SCANNER_HOME = tool 'sonarqube'
        SONARQUBE_URL = 'http://172.28.58.54:9000'
        SONARQUBE_PROJECT_KEY = 'sonarqube-nCompass'
        SONARQUBE_TOKEN = 'squ_5a288e1acbf7b6e43a496a4ac2e8ae1505ddd761'
        SONARQUBE_INSTALL_DIR = "${WORKSPACE}/sonar-scanner"
        DOCKER_IMAGE = 'lakeshsharma/us-west1-docker.pkg.dev:angular'
        DOCKER_COMPOSE_FILE = "${WORKSPACE}/src/angularsrc/docker-compose.yml"
    }
stages {
stage('Docker Login') {
    steps {
        withCredentials([usernamePassword(credentialsId: 'DOCKER_CREDS', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
            script {
                def registryCredentials = 'registry-1.docker.io'
                def dockerCmd = "docker login -u ${DOCKER_USERNAME} --password-stdin ${registryCredentials}"
                
                // Run the Docker login command with password provided via stdin
                sh "echo ${DOCKER_PASSWORD} | ${dockerCmd}"
            }
        }
    }
}


        stage('Archiving') {
            steps {
                script {
                    env.ARCHIVE_DIRECTORY = "${workspace}/.archive"
                    dir(env.ARCHIVE_DIRECTORY) {
                        deleteDir()
                        sh "mkdir -p ${ARCHIVE_DIRECTORY}"
                    }

                    env.NCOMPASS_SRC = "${workspace}/src"
                    sh "mkdir -p ${NCOMPASS_SRC}"

                    dir(env.NCOMPASS_SRC) {
                        checkout scm
                    }
                }
            }
        }
stage('Install Node.js') {
    steps {
        script {
            // Verify installation
            sh 'node -v'
            sh 'npm -v'
        }
    }
}

for (systemTarget in params.getOrDefault('JENKINS_SYSTEM_TARGETS', defaultSystemTargets).tokenize()) {
    stage(systemTarget + ' Pipeline') {
        steps {
            withEnv(['DOCKER_SYSTEM_TARGET=' + systemTarget]) {
                dir(systemTarget) {
                    stage(systemTarget + ' Checkout') {
                        checkout scm
                    }
                    sh '''
                        if [ -z "${JENKINS_SKIP_CLEAN:-}" ]; then
                            bash build-with-docker.sh clean
                        else
                            rm -rf build
                        fi
                        mkdir -p build
                    '''
                    stage(systemTarget + ' Build') {
                        warnError(systemTarget + ' build failed') {
                            sh 'bash build-with-docker.sh sentinel 2>&1 | tee -a build/sentinel-build.log'
                        }
                    }
                    // Continue with other stages...

                    // Replace Coverity stage with SonarQube stage
                    stage(systemTarget + ' SonarQube') {
                        script {
                            withSonarQubeEnv("sonarqube-nCompass") {
                                sh "${SONARQUBE_INSTALL_DIR}/sonar-scanner-4.6.2.2472-linux/bin/sonar-scanner \
                                    -Dsonar.projectKey=${SONARQUBE_PROJECT_KEY} \
                                    -Dsonar.sources=. \
                                    -Dsonar.host.url=${SONARQUBE_URL} \
                                    -Dsonar.login=${SONARQUBE_TOKEN}"
                            }
                        }
                    }
                }
            }
        }
    }
}

    post {
        success {
            echo "Pipeline succeeded! Application is deployed."
        }
    }
}
