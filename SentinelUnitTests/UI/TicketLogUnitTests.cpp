#include "stdafx.h"
#include "UI/TicketLog.h"

#include "Utilities.h"
#include "gtest/gtest.h"

using namespace std;

time_t TIME_T_MIN = std::numeric_limits<time_t>::min();
time_t TIME_T_MAX = std::numeric_limits<time_t>::max();

namespace SentinelNativeUnitTests
{
	const byte MEMSET_DEFAULT_VALUE = 0xcd;

		/// Code coverage and functional test for:
		///     CTicketLog::CTicketLog(const CTicket &)
		///     CTicket::CTicket()
		/// Code coverage:
		///     CTicketLog::~CTicketLog()
		/// Test for correct values when initialized with a default CTicket instance.
		/// </summary>
		TEST(TicketLog, CTicketLog_TicketDefaultTest)
		{
			// Expected results.
			const string ticketInActionTextExpected("Rejected");
			const __int64 amountExpected(-1);
			const bool ticketInExpected(true);
			const string validationNumExpected("");
			const string maskedValidationNumExpected("");
			const int sequenceNumExpected((WORD)-1);
			const TicketActionCode ticketActionCodeExpected(TicketActionCodeNoValue);
			

			// Setup.
			const int testIndex(0);
			const CTicket ticket;

			// Perform operation(s) to be tested.
			const CTicketLog ticketLog(ticket);

			// Test #1.
			{
				const string ticketInActionTextResult(ticketLog.GetTicketInActionText());
				const bool success(ticketInActionTextResult == ticketInActionTextExpected);
				if (!success)
				{
					string failedMsg;
					failedMsg = FormatString("ticketInActionTextResult=\"%s\" expected=\"%s\" testIndex=%d in %s(%d)",
						(ticketInActionTextResult.c_str()),
						(ticketInActionTextExpected.c_str()),
						testIndex,
						(__TFUNCTION__), __LINE__);
					ASSERT_TRUE(success) <<  failedMsg;
				}
			}

			// Test #2.
			{
				const __int64 amountResult(ticketLog.GetAmount());

				const bool success(amountResult == amountExpected);
				if (!success)
				{
					string failedMsg;
					failedMsg = FormatString("amountResult=%lld expected=%lld testIndex=%d in %s(%d)",
						(long long)amountResult,
						(long long)amountExpected,
						testIndex,
						(__TFUNCTION__), __LINE__);
					ASSERT_TRUE(success) <<  failedMsg;
				}
			}


			// Test #3.
			{
				const bool ticketInResult(ticketLog.GetTicketIn());
				const bool success(ticketInResult == ticketInExpected);
				if (!success)
				{
					string failedMsg;
					failedMsg = FormatString("ticketInResult=%d expected=%d testIndex=%d in %s(%d)",
						ticketInResult,
						ticketInExpected,
						testIndex,
						(__TFUNCTION__), __LINE__);
					ASSERT_TRUE(success) <<  failedMsg;
				}
			}

			// Test #4.
			{
				const string validationNumResult(ticketLog.GetValidationNum());
				const bool success(validationNumResult == validationNumExpected);
				if (!success)
				{
					string failedMsg;
					failedMsg = FormatString("validationNumResult=\"%s\" expected=\"%s\" testIndex=%d in %s(%d)",
						(validationNumResult.c_str()),
						(validationNumExpected.c_str()),
						testIndex,
						(__TFUNCTION__), __LINE__);
					ASSERT_TRUE(success) <<  failedMsg;
				}
			}

			// Test #5.
			{
				const string maskedValidationNumResult(ticketLog.GetMaskedValidationNum());
				const bool success(maskedValidationNumResult == maskedValidationNumExpected);
				if (!success)
				{
					string failedMsg;
					failedMsg = FormatString("maskedValidationNumResult=\"%s\" expected=\"%s\" testIndex=%d in %s(%d)",
						(maskedValidationNumResult.c_str()),
						(maskedValidationNumExpected.c_str()),
						testIndex,
						(__TFUNCTION__), __LINE__);
					ASSERT_TRUE(success) <<  failedMsg;
				}
			}

			// Test #6.
			{
				const int sequenceNumResult(ticketLog.GetSequenceNum());
				const bool success(sequenceNumResult == sequenceNumExpected);
				if (!success)
				{
					string failedMsg;
					failedMsg = FormatString("sequenceNumResult=%d expected=%d testIndex=%d in %s(%d)",
						sequenceNumResult,
						sequenceNumExpected,
						testIndex,
						(__TFUNCTION__), __LINE__);
					ASSERT_TRUE(success) <<  failedMsg;
				}
			}

			// Test #7.
			{
				const int sequenceNumResult(ticketLog.GetSequenceNum());
				const bool success(sequenceNumResult == sequenceNumExpected);
				if (!success)
				{
					string failedMsg;
					failedMsg = FormatString("sequenceNumResult=%d expected=%d testIndex=%d in %s(%d)",
						sequenceNumResult,
						sequenceNumExpected,
						testIndex,
						(__TFUNCTION__), __LINE__);
					ASSERT_TRUE(success) <<  failedMsg;
				}
			}

			// Test #8.
			{
				const TicketActionCode ticketActionCodeResult(ticketLog.GetTicketActionCode());
				const bool success(ticketActionCodeResult == ticketActionCodeExpected);
				if (!success)
				{
					string failedMsg;
					failedMsg = FormatString("ticketActionCodeResult=%d expected=%d testIndex=%d in %s(%d)",
						ticketActionCodeResult,
						ticketActionCodeExpected,
						testIndex,
						(__TFUNCTION__), __LINE__);
					ASSERT_TRUE(success) <<  failedMsg;
				}
			}

			// Test #9.
			{
                
				const time_t  dateTimeResult(ticketLog.GetDateTime());
                const time_t  dateTimeExpected(0);
				const bool success(dateTimeResult == dateTimeExpected);
				if (!success)
				{
					string failedMsg;
                    char buff_dateTimeResult[20],buff_dateTimeExpected[20];
                    strftime(buff_dateTimeResult, 20, "%Y-%m-%d %H:%M:%S", localtime(&dateTimeResult));
                    strftime(buff_dateTimeExpected, 20, "%Y-%m-%d %H:%M:%S", localtime(&dateTimeExpected));
					failedMsg = FormatString("dateTimeResult=%s expected=%s testIndex=%d in %s(%d)",
						buff_dateTimeResult,
						buff_dateTimeExpected,
						testIndex,
						(__TFUNCTION__), __LINE__);
					ASSERT_TRUE(success) <<  failedMsg;
				}
			}

			// Cleanup.
		}

		/// <summary>
		/// Code coverage and functional test for:
		///     CTicketLog::CTicketLog(const CTicket &)
		///     CTicket::CTicket()
		/// Code coverage:
		///     CTicketLog::~CTicketLog()
		/// Test for correct values when initialized with a CTicket instance.
		/// </summary>
		TEST(TicketLog, CTicketLog_TicketTest)
		{
			const byte validationNumber0[] = { 0 }; // Use length of 0.
			const byte validationNumber1[] = { 0x00 };
			const byte validationNumber2[] = { 0x99 };
			const byte validationNumber3[] = { 0x0a };
			const byte validationNumber4[] = { 0xa0 };
			const byte validationNumber5[] = { 0xaa };
			const byte validationNumber6[] = { 0xff };
			const byte validationNumber7[] = { 0x01, 0x23 };
			const byte validationNumber8[] = { 0x12, 0x34, 0x56 };
			const byte validationNumber9[] = { 0x23, 0x45, 0x67, 0x89 };
			const byte validationNumber10[] = { 0x00, 0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56 }; // Typical length of 18 digits, all byte have BCD values.
			const byte validationNumber11[] = { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0xa0, 0xa1 }; // One less than length limit.
			const byte validationNumber12[] = { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0xa0, 0xa1, 0xa2 }; // Length limit.
			const byte validationNumber13[] = { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0xa0, 0xa1, 0xa2, 0xa3 }; // One more than length limit.

			tm gameTm;
            gameTm.tm_year=2001;
            gameTm.tm_mon= 2;
            gameTm.tm_mday= 3;
            gameTm.tm_hour= 12;
            gameTm.tm_min= 34;
            gameTm.tm_sec= 56;
            time_t GameDate = mktime(&gameTm);

			typedef struct
			{
				// Inputs.
				const __int64 m_amount;
				const bool m_bTicketIn;
				const byte * const m_validationNumber;
				const  byte m_validationLength;

				const int m_number;
				const TicketActionCode m_ticketActionCode;
				const time_t  m_dateTime;

				// Expected results.
				const string m_ticketInActionTextExpected;
				const __int64 m_amountExpected;
				const bool m_ticketInExpected;
				const string m_validationNumExpected;
				const string m_maskedValidationNumExpected;
				const int m_sequenceNumExpected;
				const TicketActionCode m_ticketActionCodeExpected;
				const time_t  m_dateTimeExpected;
			} TestDataType;

			const TestDataType TEST_DATA[] =
			{
				// Test CTicketLog::GetTicketInActionText() and CTicketLog::GetTicketActionCode().
				{ -1, true, NULL, 0, -1, (TicketActionCode)-1, 0,
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)-1, 0 },
				{ -1, true, NULL, 0, -1, (TicketActionCode)0, 0,
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, 0 },
				{ -1, true, NULL, 0, -1, TicketActionCodeNoValue, 0,
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, TicketActionCodeNoValue, 0 },
				{ -1, true, NULL, 0, -1, VendComplete, 0,
					_T("Redeemed"), -1, true, _T(""), _T(""), (WORD)-1, VendComplete, 0 },
				{ -1, true, NULL, 0, -1, (TicketActionCode)(ValidatorFailure + 1), 0,
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)(ValidatorFailure + 1), 0 },
				{ -1, true, NULL, 0, -1, (TicketActionCode)(TicketVoucherStatusRequest - 1), 0,
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)(TicketVoucherStatusRequest - 1), 0 },
				{ -1, true, NULL, 0, WORD_MAX, TicketVoucherStatusRequest, 0,
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, TicketVoucherStatusRequest, 0 },
				{ -1, true, NULL, 0, -1, (TicketActionCode)(ActionCode192DeniedByDPU + 1), 0,
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)(ActionCode192DeniedByDPU + 1), 0 },
				{ -1, true, NULL, 0, -1, (TicketActionCode)INT_MAX, 0,
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)INT_MAX, 0 },
				{ -1, true, NULL, 0, -1, (TicketActionCode)INT_MIN, 0,
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)INT_MIN, 0 },
				{ -1, true, NULL, 0, -1, (TicketActionCode)UINT_MAX, 0,
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)UINT_MAX, 0 },

				// Test CTicketLog::GetAmount().
				{ -1, true, NULL, 0, -1, (TicketActionCode)0, 0,
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, 0 },
				{ 0, true, NULL, 0, -1, (TicketActionCode)0, 0,
					_T("Rejected"), 0, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, 0 },
				{ 1, true, NULL, 0, -1, (TicketActionCode)0, 0,
					_T("Rejected"), 1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, 0 },
				{ INT64_MAX, true, NULL, 0, -1, (TicketActionCode)0, 0,
					_T("Rejected"), INT64_MAX, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, 0 },
				{ INT64_MIN, true, NULL, 0, -1, (TicketActionCode)0, 0,
					_T("Rejected"), INT64_MIN, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, 0 },
				{ (__int64)UINT64_MAX, true, NULL, 0, -1, (TicketActionCode)0, 0,
					_T("Rejected"), (__int64)UINT64_MAX, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, 0 },

				// Test CTicketLog::GetValidationNum() and CTicketLog::GetMaskedValidationNum().
				{ -1, false, NULL, 0, -1, (TicketActionCode)0, 0,
					_T("Rejected"), -1, false, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, 0 },
				{ -1, false, NULL, 33, -1, (TicketActionCode)0, 0,
					_T("Rejected"), -1, false, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, 0 },
				{ -1, false, NULL, UCHAR_MAX, -1, (TicketActionCode)0, 0,
					_T("Rejected"), -1, false, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, 0 },
				{ -1, false, validationNumber0, 0, -1, (TicketActionCode)0, 0,
					_T("Rejected"), -1, false, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, 0 },
				{ -1, false, validationNumber1, sizeof(validationNumber1), -1, (TicketActionCode)0, 0,
					_T("Rejected"), -1, false, _T("00"), _T("00"), (WORD)-1, (TicketActionCode)0, 0 },
				{ -1, false, validationNumber2, sizeof(validationNumber2), -1, (TicketActionCode)0, 0,
					_T("Rejected"), -1, false, _T("99"), _T("99"), (WORD)-1, (TicketActionCode)0, 0 },
				{ -1, false, validationNumber3, sizeof(validationNumber3), -1, (TicketActionCode)0, 0,
					_T("Rejected"), -1, false, _T("0A"), _T("0A"), (WORD)-1, (TicketActionCode)0, 0 },
				{ -1, false, validationNumber4, sizeof(validationNumber4), -1, (TicketActionCode)0, 0,
					_T("Rejected"), -1, false, _T("A0"), _T("A0"), (WORD)-1, (TicketActionCode)0, 0 },
				{ -1, false, validationNumber5, sizeof(validationNumber5), -1, (TicketActionCode)0, 0,
					_T("Rejected"), -1, false, _T("AA"), _T("AA"), (WORD)-1, (TicketActionCode)0, 0 },
				{ -1, false, validationNumber6, sizeof(validationNumber6), -1, (TicketActionCode)0, 0,
					_T("Rejected"), -1, false, _T("FF"), _T("FF"), (WORD)-1, (TicketActionCode)0, 0 },
				{ -1, false, validationNumber7, sizeof(validationNumber7), -1, (TicketActionCode)0, 0,
					_T("Rejected"), -1, false, _T("0123"), _T("0123"), (WORD)-1, (TicketActionCode)0, 0 },
				{ -1, false, validationNumber8, sizeof(validationNumber8), -1, (TicketActionCode)0, 0,
					_T("Rejected"), -1, false, _T("123456"), _T("*23456"), (WORD)-1, (TicketActionCode)0, 0 },
				{ -1, false, validationNumber9, sizeof(validationNumber9), -1, (TicketActionCode)0, 0,
					_T("Rejected"), -1, false, _T("23456789"), _T("***56789"), (WORD)-1, (TicketActionCode)0, 0 },
				{ -1, false, validationNumber10, sizeof(validationNumber10), -1, (TicketActionCode)0, 0,
					_T("Rejected"), -1, false, _T("001234567890123456"), _T("*************23456"), (WORD)-1, (TicketActionCode)0, 0 },
				{ -1, false, validationNumber11, sizeof(validationNumber11), -1, (TicketActionCode)0, 0,
					_T("Rejected"), -1, false, _T("00112233445566778899AABBCCDDEEFFA0A1"), _T("*******************************FA0A1"), (WORD)-1, (TicketActionCode)0, 0 },
				{ -1, false, validationNumber12, sizeof(validationNumber12), -1, (TicketActionCode)0, 0,
					_T("Rejected"), -1, false, _T("00112233445566778899AABBCCDDEEFFA0A1A2"), _T("*********************************0A1A2"), (WORD)-1, (TicketActionCode)0, 0 },
				{ -1, false, validationNumber13, sizeof(validationNumber13), -1, (TicketActionCode)0, 0,
					_T("Rejected"), -1, false, _T("00112233445566778899AABBCCDDEEFFA0A1A2"), _T("*********************************0A1A2"), (WORD)-1, (TicketActionCode)0, 0 },

				// Test CTicketLog::GetTicketIn().
				{ -1, false, NULL, 0, -1, (TicketActionCode)0, 0,
					_T("Rejected"), -1, false, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, 0 },
				{ -1, true, NULL, 0, -1, (TicketActionCode)0, 0,
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, 0 },

				// Test CTicketLog::GetSequenceNum().
				{ -1, true, NULL, 0, -1, (TicketActionCode)0, 0,
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, 0 },
				{ -1, true, NULL, 0, 0, (TicketActionCode)0, 0,
					_T("Rejected"), -1, true, _T(""), _T(""), 0, (TicketActionCode)0, 0 },
				{ -1, true, NULL, 0, 1, (TicketActionCode)0, 0,
					_T("Rejected"), -1, true, _T(""), _T(""), 1, (TicketActionCode)0, 0 },
				{ -1, true, NULL, 0, SHRT_MAX, (TicketActionCode)0, 0,
					_T("Rejected"), -1, true, _T(""), _T(""), SHRT_MAX, (TicketActionCode)0, 0 },
				{ -1, true, NULL, 0, SHRT_MIN, (TicketActionCode)0, 0,
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)SHRT_MIN, (TicketActionCode)0, 0 },
				{ -1, true, NULL, 0, WORD_MAX, (TicketActionCode)0, 0,
					_T("Rejected"), -1, true, _T(""), _T(""), WORD_MAX, (TicketActionCode)0, 0 },
				{ -1, true, NULL, 0, INT_MAX, (TicketActionCode)0, 0,
					_T("Rejected"), -1, true, _T(""), _T(""), WORD_MAX, (TicketActionCode)0, 0 },
				{ -1, true, NULL, 0, INT_MIN, (TicketActionCode)0, 0,
					_T("Rejected"), -1, true, _T(""), _T(""), 0, (TicketActionCode)0, 0 },
				{ -1, true, NULL, 0, (int)UINT_MAX, (TicketActionCode)0, 0,
					_T("Rejected"), -1, true, _T(""), _T(""), WORD_MAX, (TicketActionCode)0, 0 },

				// Test CTicketLog::GetDateTime().
				{ -1, true, NULL, 0, -1, (TicketActionCode)0, -1,
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, -1 },
				{ -1, true, NULL, 0, -1, (TicketActionCode)0, 0,
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, 0 },
				{ -1, true, NULL, 0, -1, (TicketActionCode)0, 1,
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, 1 },
/*
                { -1, true, NULL, 0, -1, (TicketActionCode)0, GameDate,                                  
                    _T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, 981232496 },
*/
                { -1, true, NULL, 0, -1, (TicketActionCode)0, GameDate,
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, GameDate },
				{ -1, true, NULL, 0, -1, (TicketActionCode)0, TIME_T_MAX,
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, TIME_T_MAX },
				{ -1, true, NULL, 0, -1, (TicketActionCode)0, TIME_T_MIN,
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, TIME_T_MIN },

                { -1, true, NULL, 0, -1, (TicketActionCode)0, TIME_T_MAX,
                    _T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, TIME_T_MAX },

			};

			// Inputs -- same for all iterations.
			TicketType ticketType(TicketTypeNoValue);

			for (int testIndex = 0; testIndex < _countof(TEST_DATA); ++testIndex)
			{
				// Setup.
				CTicket varTicket;
				varTicket.SetActionCode(TEST_DATA[testIndex].m_ticketActionCode);
				varTicket.SetAmount(TEST_DATA[testIndex].m_amount);
				varTicket.SetType(ticketType, TEST_DATA[testIndex].m_bTicketIn);
				varTicket.SetValidationNumber(TEST_DATA[testIndex].m_validationNumber, TEST_DATA[testIndex].m_validationLength);
				varTicket.SetTicketNumber(TEST_DATA[testIndex].m_number);
				varTicket.SetGameDateTime(TEST_DATA[testIndex].m_dateTime);
				const CTicket &ticket(varTicket);

				// Perform operation(s) to be tested.
				const CTicketLog ticketLog(ticket);

				// Test #1.
				{
					const string ticketInActionTextResult(ticketLog.GetTicketInActionText());
					const bool success(ticketInActionTextResult == TEST_DATA[testIndex].m_ticketInActionTextExpected);
					if (!success)
					{
						string failedMsg;
						failedMsg = FormatString("ticketInActionTextResult=\"%s\" expected=\"%s\" testIndex=%d in %s(%d)",
							(ticketInActionTextResult.c_str()),
							(TEST_DATA[testIndex].m_ticketInActionTextExpected.c_str()),
							testIndex,
							(__TFUNCTION__), __LINE__);
						ASSERT_TRUE(success) <<  failedMsg;
					}
				}

				// Test #2.
				{
					const __int64 amountResult(ticketLog.GetAmount());

					const bool success(amountResult == TEST_DATA[testIndex].m_amountExpected);
					if (!success)
					{
						string failedMsg;
						failedMsg = FormatString("amountResult=%lld expected=%lld testIndex=%d in %s(%d)",
							(long long)amountResult,
							(long long)TEST_DATA[testIndex].m_amountExpected,
							testIndex,
							(__TFUNCTION__), __LINE__);
						ASSERT_TRUE(success) <<  failedMsg;
					}
				}


				// Test #3.
				{
					const bool ticketInResult(ticketLog.GetTicketIn());
					const bool success(ticketInResult == TEST_DATA[testIndex].m_ticketInExpected);
					if (!success)
					{
						string failedMsg;
						failedMsg = FormatString("ticketInResult=%d expected=%d testIndex=%d in %s(%d)",
							ticketInResult,
							TEST_DATA[testIndex].m_ticketInExpected,
							testIndex,
							(__TFUNCTION__), __LINE__);
						ASSERT_TRUE(success) <<  failedMsg;
					}
				}

				// Test #4.
				{
					const string validationNumResult(ticketLog.GetValidationNum());
					const bool success(validationNumResult == TEST_DATA[testIndex].m_validationNumExpected);
					if (!success)
					{
						string failedMsg;
						failedMsg = FormatString("validationNumResult=\"%s\" expected=\"%s\" testIndex=%d in %s(%d)",
							(validationNumResult.c_str()),
							(TEST_DATA[testIndex].m_validationNumExpected.c_str()),
							testIndex,
							(__TFUNCTION__), __LINE__);
						ASSERT_TRUE(success) <<  failedMsg;
					}
				}

				// Test #5.
				{
					const string maskedValidationNumResult(ticketLog.GetMaskedValidationNum());
					const bool success(maskedValidationNumResult == TEST_DATA[testIndex].m_maskedValidationNumExpected);
					if (!success)
					{
						string failedMsg;
						failedMsg = FormatString("maskedValidationNumResult=\"%s\" expected=\"%s\" testIndex=%d in %s(%d)",
							(maskedValidationNumResult.c_str()),
							(TEST_DATA[testIndex].m_maskedValidationNumExpected.c_str()),
							testIndex,
							(__TFUNCTION__), __LINE__);
						ASSERT_TRUE(success) <<  failedMsg;
					}
				}

				// Test #6.
				{
					const int sequenceNumResult(ticketLog.GetSequenceNum());
					const bool success(sequenceNumResult == TEST_DATA[testIndex].m_sequenceNumExpected);
					if (!success)
					{
						string failedMsg;
						failedMsg = FormatString("sequenceNumResult=%d expected=%d testIndex=%d in %s(%d)",
							sequenceNumResult,
							TEST_DATA[testIndex].m_sequenceNumExpected,
							testIndex,
							(__TFUNCTION__), __LINE__);
						ASSERT_TRUE(success) <<  failedMsg;
					}
				}

				// Test #7.
				{
					const TicketActionCode ticketActionCodeResult(ticketLog.GetTicketActionCode());
					const bool success(ticketActionCodeResult == TEST_DATA[testIndex].m_ticketActionCodeExpected);
					if (!success)
					{
						string failedMsg;
						failedMsg = FormatString("ticketActionCodeResult=%d expected=%d testIndex=%d in %s(%d)",
							ticketActionCodeResult,
							TEST_DATA[testIndex].m_ticketActionCodeExpected,
							testIndex,
							(__TFUNCTION__), __LINE__);
						ASSERT_TRUE(success) <<  failedMsg;
					}
				}

				// Test #8.
				{
					const time_t  dateTimeResult(ticketLog.GetDateTime());
					const bool success(dateTimeResult == TEST_DATA[testIndex].m_dateTimeExpected);
					if (!success)
					{
						string failedMsg;
                        char buff_dateTimeResult[20],buff_dateTimeExpected[20];
                        strftime(buff_dateTimeResult, 20, "%Y-%m-%d %H:%M:%S", localtime(&dateTimeResult));
                        strftime(buff_dateTimeExpected, 20, "%Y-%m-%d %H:%M:%S", localtime(&TEST_DATA[testIndex].m_dateTimeExpected));
						failedMsg = FormatString("dateTimeResult=%s expected=%s testIndex=%d in %s(%d)",
							buff_dateTimeResult,
							buff_dateTimeExpected,
							testIndex,
							(__TFUNCTION__), __LINE__);
						ASSERT_TRUE(success) <<  failedMsg;
					}
				}

				// Cleanup.
			}
		}

		/// <summary>
		/// Code coverage and functional test for:
		///     CTicketLog::CTicketLog(const CTicket &)
		///     CTicketLog::CTicketLog(const CTicketLog &)
		/// Code coverage:
		///     CTicketLog::~CTicketLog()
		/// Test for correct values when initialized with a CTicket instance.
		/// </summary>
		TEST(TicketLog, CTicketLog_CopyTest)
		{
			const byte validationNumber0[] = { 0 }; // Use length of 0.
			const byte validationNumber1[] = { 0x00 };
			const byte validationNumber2[] = { 0x99 };
			const byte validationNumber3[] = { 0x0a };
			const byte validationNumber4[] = { 0xa0 };
			const byte validationNumber5[] = { 0xaa };
			const byte validationNumber6[] = { 0xff };
			const byte validationNumber7[] = { 0x01, 0x23 };
			const byte validationNumber8[] = { 0x12, 0x34, 0x56 };
			const byte validationNumber9[] = { 0x23, 0x45, 0x67, 0x89 };
			const byte validationNumber10[] = { 0x00, 0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56 }; // Typical length of 18 digits, all byte have BCD values.
			const byte validationNumber11[] = { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0xa0, 0xa1 }; // One less than length limit.
			const byte validationNumber12[] = { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0xa0, 0xa1, 0xa2 }; // Length limit.
			const byte validationNumber13[] = { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0xa0, 0xa1, 0xa2, 0xa3 }; // One more than length limit.

			tm gameTm;
			gameTm.tm_year=2001;
			gameTm.tm_mon= 2;
			gameTm.tm_mday= 3;
			gameTm.tm_hour= 12;
			gameTm.tm_min= 34;
			gameTm.tm_sec= 56;
			time_t GameDate = mktime(&gameTm);

			typedef struct
			{
				// Inputs.
				const __int64 m_amount;
				const bool m_bTicketIn;
				const byte * const m_validationNumber;
				const  byte m_validationLength;

				const int m_number;
				const TicketActionCode m_ticketActionCode;
				const time_t  m_dateTime;

				// Expected results.
				const string m_ticketInActionTextExpected;
				const __int64 m_amountExpected;
				const bool m_ticketInExpected;
				const string m_validationNumExpected;
				const string m_maskedValidationNumExpected;
				const int m_sequenceNumExpected;
				const TicketActionCode m_ticketActionCodeExpected;
				const time_t  m_dateTimeExpected;
			} TestDataType;

			const TestDataType TEST_DATA[] =
			{
				// Test CTicketLog::GetTicketInActionText() and CTicketLog::GetTicketActionCode().
				{ -1, true, NULL, 0, -1, (TicketActionCode)-1, 0,
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)-1, 0 },
				{ -1, true, NULL, 0, -1, (TicketActionCode)0, 0,
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, 0 },
				{ -1, true, NULL, 0, -1, TicketActionCodeNoValue, 0,
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, TicketActionCodeNoValue, 0 },
				{ -1, true, NULL, 0, -1, VendComplete, 0,
					_T("Redeemed"), -1, true, _T(""), _T(""), (WORD)-1, VendComplete, 0 },
				{ -1, true, NULL, 0, -1, (TicketActionCode)(ValidatorFailure + 1), 0,
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)(ValidatorFailure + 1), 0 },
				{ -1, true, NULL, 0, -1, (TicketActionCode)(TicketVoucherStatusRequest - 1), 0,
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)(TicketVoucherStatusRequest - 1), 0 },
				{ -1, true, NULL, 0, WORD_MAX, TicketVoucherStatusRequest, 0,
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, TicketVoucherStatusRequest, 0 },
				{ -1, true, NULL, 0, -1, (TicketActionCode)(ActionCode192DeniedByDPU + 1), 0,
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)(ActionCode192DeniedByDPU + 1), 0 },
				{ -1, true, NULL, 0, -1, (TicketActionCode)INT_MAX, 0,
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)INT_MAX, 0 },
				{ -1, true, NULL, 0, -1, (TicketActionCode)INT_MIN, 0,
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)INT_MIN, 0 },
				{ -1, true, NULL, 0, -1, (TicketActionCode)UINT_MAX, 0,
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)UINT_MAX, 0 },

				// Test CTicketLog::GetAmount().
				{ -1, true, NULL, 0, -1, (TicketActionCode)0, 0,
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, 0 },
				{ 0, true, NULL, 0, -1, (TicketActionCode)0, 0,
					_T("Rejected"), 0, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, 0 },
				{ 1, true, NULL, 0, -1, (TicketActionCode)0, 0,
					_T("Rejected"), 1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, 0 },
				{ INT64_MAX, true, NULL, 0, -1, (TicketActionCode)0, 0,
					_T("Rejected"), INT64_MAX, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, 0 },
				{ INT64_MIN, true, NULL, 0, -1, (TicketActionCode)0, 0,
					_T("Rejected"), INT64_MIN, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, 0 },
				{ (__int64)UINT64_MAX, true, NULL, 0, -1, (TicketActionCode)0, 0,
					_T("Rejected"), (__int64)UINT64_MAX, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, 0 },

				// Test CTicketLog::GetValidationNum() and CTicketLog::GetMaskedValidationNum().
				{ -1, false, NULL, 0, -1, (TicketActionCode)0, 0,
					_T("Rejected"), -1, false, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, 0 },
				{ -1, false, NULL, 33, -1, (TicketActionCode)0, 0,
					_T("Rejected"), -1, false, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, 0 },
				{ -1, false, NULL, UCHAR_MAX, -1, (TicketActionCode)0, 0,
					_T("Rejected"), -1, false, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, 0 },
				{ -1, false, validationNumber0, 0, -1, (TicketActionCode)0, 0,
					_T("Rejected"), -1, false, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, 0 },
				{ -1, false, validationNumber1, sizeof(validationNumber1), -1, (TicketActionCode)0, 0,
					_T("Rejected"), -1, false, _T("00"), _T("00"), (WORD)-1, (TicketActionCode)0, 0 },
				{ -1, false, validationNumber2, sizeof(validationNumber2), -1, (TicketActionCode)0, 0,
					_T("Rejected"), -1, false, _T("99"), _T("99"), (WORD)-1, (TicketActionCode)0, 0 },
				{ -1, false, validationNumber3, sizeof(validationNumber3), -1, (TicketActionCode)0, 0,
					_T("Rejected"), -1, false, _T("0A"), _T("0A"), (WORD)-1, (TicketActionCode)0, 0 },
				{ -1, false, validationNumber4, sizeof(validationNumber4), -1, (TicketActionCode)0, 0,
					_T("Rejected"), -1, false, _T("A0"), _T("A0"), (WORD)-1, (TicketActionCode)0, 0 },
				{ -1, false, validationNumber5, sizeof(validationNumber5), -1, (TicketActionCode)0, 0,
					_T("Rejected"), -1, false, _T("AA"), _T("AA"), (WORD)-1, (TicketActionCode)0, 0 },
				{ -1, false, validationNumber6, sizeof(validationNumber6), -1, (TicketActionCode)0, 0,
					_T("Rejected"), -1, false, _T("FF"), _T("FF"), (WORD)-1, (TicketActionCode)0, 0 },
				{ -1, false, validationNumber7, sizeof(validationNumber7), -1, (TicketActionCode)0, 0,
					_T("Rejected"), -1, false, _T("0123"), _T("0123"), (WORD)-1, (TicketActionCode)0, 0 },
				{ -1, false, validationNumber8, sizeof(validationNumber8), -1, (TicketActionCode)0, 0,
					_T("Rejected"), -1, false, _T("123456"), _T("*23456"), (WORD)-1, (TicketActionCode)0, 0 },
				{ -1, false, validationNumber9, sizeof(validationNumber9), -1, (TicketActionCode)0, 0,
					_T("Rejected"), -1, false, _T("23456789"), _T("***56789"), (WORD)-1, (TicketActionCode)0, 0 },
				{ -1, false, validationNumber10, sizeof(validationNumber10), -1, (TicketActionCode)0, 0,
					_T("Rejected"), -1, false, _T("001234567890123456"), _T("*************23456"), (WORD)-1, (TicketActionCode)0, 0 },
				{ -1, false, validationNumber11, sizeof(validationNumber11), -1, (TicketActionCode)0, 0,
					_T("Rejected"), -1, false, _T("00112233445566778899AABBCCDDEEFFA0A1"), _T("*******************************FA0A1"), (WORD)-1, (TicketActionCode)0, 0 },
				{ -1, false, validationNumber12, sizeof(validationNumber12), -1, (TicketActionCode)0, 0,
					_T("Rejected"), -1, false, _T("00112233445566778899AABBCCDDEEFFA0A1A2"), _T("*********************************0A1A2"), (WORD)-1, (TicketActionCode)0, 0 },
				{ -1, false, validationNumber13, sizeof(validationNumber13), -1, (TicketActionCode)0, 0,
					_T("Rejected"), -1, false, _T("00112233445566778899AABBCCDDEEFFA0A1A2"), _T("*********************************0A1A2"), (WORD)-1, (TicketActionCode)0, 0 },

				// Test CTicketLog::GetTicketIn().
				{ -1, false, NULL, 0, -1, (TicketActionCode)0, 0,
					_T("Rejected"), -1, false, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, 0 },
				{ -1, true, NULL, 0, -1, (TicketActionCode)0, 0,
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, 0 },

				// Test CTicketLog::GetSequenceNum().
				{ -1, true, NULL, 0, -1, (TicketActionCode)0, 0,
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, 0 },
				{ -1, true, NULL, 0, 0, (TicketActionCode)0, 0,
					_T("Rejected"), -1, true, _T(""), _T(""), 0, (TicketActionCode)0, 0 },
				{ -1, true, NULL, 0, 1, (TicketActionCode)0, 0,
					_T("Rejected"), -1, true, _T(""), _T(""), 1, (TicketActionCode)0, 0 },
				{ -1, true, NULL, 0, SHRT_MAX, (TicketActionCode)0, 0,
					_T("Rejected"), -1, true, _T(""), _T(""), SHRT_MAX, (TicketActionCode)0, 0 },
				{ -1, true, NULL, 0, SHRT_MIN, (TicketActionCode)0, 0,
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)SHRT_MIN, (TicketActionCode)0, 0 },
				{ -1, true, NULL, 0, WORD_MAX, (TicketActionCode)0, 0,
					_T("Rejected"), -1, true, _T(""), _T(""), WORD_MAX, (TicketActionCode)0, 0 },
				{ -1, true, NULL, 0, INT_MAX, (TicketActionCode)0, 0,
					_T("Rejected"), -1, true, _T(""), _T(""), WORD_MAX, (TicketActionCode)0, 0 },
				{ -1, true, NULL, 0, INT_MIN, (TicketActionCode)0, 0,
					_T("Rejected"), -1, true, _T(""), _T(""), 0, (TicketActionCode)0, 0 },
				{ -1, true, NULL, 0, (int)UINT_MAX, (TicketActionCode)0, 0,
					_T("Rejected"), -1, true, _T(""), _T(""), WORD_MAX, (TicketActionCode)0, 0 },

				// Test CTicketLog::GetDateTime().
				{ -1, true, NULL, 0, -1, (TicketActionCode)0, -1,
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, -1 },
				{ -1, true, NULL, 0, -1, (TicketActionCode)0, 0,
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, 0 },
				{ -1, true, NULL, 0, -1, (TicketActionCode)0, 1,
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, 1 },
/*
                { -1, true, NULL, 0, -1, (TicketActionCode)0, GameDate,                                  
                    _T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, 981232496 },
*/
                { -1, true, NULL, 0, -1, (TicketActionCode)0, GameDate,
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, GameDate },
				{ -1, true, NULL, 0, -1, (TicketActionCode)0, TIME_T_MAX,
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, TIME_T_MAX },
				{ -1, true, NULL, 0, -1, (TicketActionCode)0, TIME_T_MIN,
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, TIME_T_MIN },
				{ -1, true, NULL, 0, -1, (TicketActionCode)0, TIME_T_MAX,
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, TIME_T_MAX },
			};

			// Inputs -- same for all iterations.
			TicketType ticketType(TicketTypeNoValue);

			for (int testIndex = 0; testIndex < _countof(TEST_DATA); ++testIndex)
			{
				// Setup.
				CTicket varTicket;
				varTicket.SetActionCode(TEST_DATA[testIndex].m_ticketActionCode);
				varTicket.SetAmount(TEST_DATA[testIndex].m_amount);
				varTicket.SetType(ticketType, TEST_DATA[testIndex].m_bTicketIn);
				varTicket.SetValidationNumber(TEST_DATA[testIndex].m_validationNumber, TEST_DATA[testIndex].m_validationLength);
				varTicket.SetTicketNumber(TEST_DATA[testIndex].m_number);
				varTicket.SetGameDateTime(TEST_DATA[testIndex].m_dateTime);
				const CTicket &ticket(varTicket);
				const CTicketLog ticketLog1(ticket);

				// Perform operation(s) to be tested.
				const CTicketLog ticketLog(ticketLog1);

				// Test #1.
				{
					const string ticketInActionTextResult(ticketLog.GetTicketInActionText());
					const bool success(ticketInActionTextResult == TEST_DATA[testIndex].m_ticketInActionTextExpected);
					if (!success)
					{
						string failedMsg;
						failedMsg = FormatString("ticketInActionTextResult=\"%s\" expected=\"%s\" testIndex=%d in %s(%d)",
							(ticketInActionTextResult.c_str()),
							(TEST_DATA[testIndex].m_ticketInActionTextExpected.c_str()),
							testIndex,
							(__TFUNCTION__), __LINE__);
						ASSERT_TRUE(success) <<  failedMsg;
					}
				}

				// Test #2.
				{
					const __int64 amountResult(ticketLog.GetAmount());

					const bool success(amountResult == TEST_DATA[testIndex].m_amountExpected);
					if (!success)
					{
						string failedMsg;
						failedMsg = FormatString("amountResult=%lld expected=%lld testIndex=%d in %s(%d)",
							(long long)amountResult,
							(long long)TEST_DATA[testIndex].m_amountExpected,
							testIndex,
							(__TFUNCTION__), __LINE__);
						ASSERT_TRUE(success) <<  failedMsg;
					}
				}


				// Test #3.
				{
					const bool ticketInResult(ticketLog.GetTicketIn());
					const bool success(ticketInResult == TEST_DATA[testIndex].m_ticketInExpected);
					if (!success)
					{
						string failedMsg;
						failedMsg = FormatString("ticketInResult=%d expected=%d testIndex=%d in %s(%d)",
							ticketInResult,
							TEST_DATA[testIndex].m_ticketInExpected,
							testIndex,
							(__TFUNCTION__), __LINE__);
						ASSERT_TRUE(success) <<  failedMsg;
					}
				}

				// Test #4.
				{
					const string validationNumResult(ticketLog.GetValidationNum());
					const bool success(validationNumResult == TEST_DATA[testIndex].m_validationNumExpected);
					if (!success)
					{
						string failedMsg;
						failedMsg = FormatString("validationNumResult=\"%s\" expected=\"%s\" testIndex=%d in %s(%d)",
							(validationNumResult.c_str()),
							(TEST_DATA[testIndex].m_validationNumExpected.c_str()),
							testIndex,
							(__TFUNCTION__), __LINE__);
						ASSERT_TRUE(success) <<  failedMsg;
					}
				}

				// Test #5.
				{
					const string maskedValidationNumResult(ticketLog.GetMaskedValidationNum());
					const bool success(maskedValidationNumResult == TEST_DATA[testIndex].m_maskedValidationNumExpected);
					if (!success)
					{
						string failedMsg;
						failedMsg = FormatString("maskedValidationNumResult=\"%s\" expected=\"%s\" testIndex=%d in %s(%d)",
							(maskedValidationNumResult.c_str()),
							(TEST_DATA[testIndex].m_maskedValidationNumExpected.c_str()),
							testIndex,
							(__TFUNCTION__), __LINE__);
						ASSERT_TRUE(success) <<  failedMsg;
					}
				}

				// Test #6.
				{
					const int sequenceNumResult(ticketLog.GetSequenceNum());
					const bool success(sequenceNumResult == TEST_DATA[testIndex].m_sequenceNumExpected);
					if (!success)
					{
						string failedMsg;
						failedMsg = FormatString("sequenceNumResult=%d expected=%d testIndex=%d in %s(%d)",
							sequenceNumResult,
							TEST_DATA[testIndex].m_sequenceNumExpected,
							testIndex,
							(__TFUNCTION__), __LINE__);
						ASSERT_TRUE(success) <<  failedMsg;
					}
				}

				// Test #7.
				{
					const TicketActionCode ticketActionCodeResult(ticketLog.GetTicketActionCode());
					const bool success(ticketActionCodeResult == TEST_DATA[testIndex].m_ticketActionCodeExpected);
					if (!success)
					{
						string failedMsg;
						failedMsg = FormatString("ticketActionCodeResult=%d expected=%d testIndex=%d in %s(%d)",
							ticketActionCodeResult,
							TEST_DATA[testIndex].m_ticketActionCodeExpected,
							testIndex,
							(__TFUNCTION__), __LINE__);
						ASSERT_TRUE(success) <<  failedMsg;
					}
				}

				// Test #8.
				{
					const time_t  dateTimeResult(ticketLog.GetDateTime());
					const bool success(dateTimeResult == TEST_DATA[testIndex].m_dateTimeExpected);
					if (!success)
					{
						string failedMsg;
                        char buff_dateTimeResult[20],buff_dateTimeExpected[20];
                        strftime(buff_dateTimeResult, 20, "%Y-%m-%d %H:%M:%S", localtime(&dateTimeResult));
                        strftime(buff_dateTimeExpected, 20, "%Y-%m-%d %H:%M:%S", localtime(&TEST_DATA[testIndex].m_dateTimeExpected));

						failedMsg = FormatString("dateTimeResult=%s expected=%s testIndex=%d in %s(%d)",
							buff_dateTimeResult,
							buff_dateTimeExpected,
							testIndex,
							(__TFUNCTION__), __LINE__);
						ASSERT_TRUE(success) <<  failedMsg;
					}
				}

				// Cleanup.
			}
		}

		/// <summary>
		/// Code coverage and functional test for:
		///     CTicketLog::CTicketLog(const CTicket)
		///     CTicket::CTicket()
		///     CTicketLog::GetNvramBuffer()
		/// Code coverage:
		///     CTicketLog::~CTicketLog()
		/// Test for correct values when initialized with a CTicket instance.
		/// </summary>
		TEST(TicketLog, GetNvramBuffer_TicketTest)
		{
			// Allocate extra memory before and after target buffer to check for unwanted overwrites.
			const UINT64 HeaderValue = 0xcdcdcdcdcdcdcdcd; // Each byte the same as MEMSET_DEFAULT_VALUE; 
			const size_t HeaderSize = sizeof(HeaderValue);
			const UINT64 TrailerValue = HeaderValue;
			const size_t TrailerSize = sizeof(TrailerValue);
			const int nvramBufferLength = 60;
			const int nvramBufferLengthGot = 58; // GetNvramBuffer() only sets 58 bytes, but we initialize all 60, so it is okay to verify all 60.

			// Inputs -- validation numbers.
			const byte validationNumber0[] = { 0 }; // Use length of 0.
			const byte validationNumber1[] = { 0x00 };
			const byte validationNumber2[] = { 0x99 };
			const byte validationNumber3[] = { 0x0a };
			const byte validationNumber4[] = { 0xa0 };
			const byte validationNumber5[] = { 0xaa };
			const byte validationNumber6[] = { 0xff };
			const byte validationNumber7[] = { 0x01, 0x23 };
			const byte validationNumber8[] = { 0x12, 0x34, 0x56 };
			const byte validationNumber9[] = { 0x23, 0x45, 0x67, 0x89 };
			const byte validationNumber10[] = { 0x00, 0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56 }; // Typical length of 18 digits, all byte have BCD values.
			const byte validationNumber11[] = { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0xa0, 0xa1 }; // One less than length limit.
			const byte validationNumber12[] = { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0xa0, 0xa1, 0xa2 }; // Length limit.
			const byte validationNumber13[] = { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0xa0, 0xa1, 0xa2, 0xa3 }; // One more than length limit.

			tm gameTm;
			gameTm.tm_year=2001;
			gameTm.tm_mon= 2;
			gameTm.tm_mday= 3;
			gameTm.tm_hour= 12;
			gameTm.tm_min= 34;
			gameTm.tm_sec= 56;
			time_t GameDate = mktime(&gameTm);

			typedef struct
			{
				// Inputs.
				const __int64 m_amount;
				const bool m_bTicketIn;
				const byte * const m_validationNumber;
				const  byte m_validationLength;

				const int m_number;
				const TicketActionCode m_ticketActionCode;
				const time_t  m_dateTime;

				// Expected results.
				const byte m_nvramBufferExpected[nvramBufferLength];
			} TestDataType;

			const TestDataType TEST_DATA[] =
			{
				// Test CTicketLog::GetTicketInActionText() and CTicketLog::GetTicketActionCode().
				{ -1, true, NULL, 0, -1, (TicketActionCode)-1, 0,
					{ 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd } },
				{ -1, true, NULL, 0, -1, (TicketActionCode)0, 0,
					{ 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd } },
				{ -1, true, NULL, 0, -1, TicketActionCodeNoValue, 0,
					{ 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd } },
				{ -1, true, NULL, 0, -1, RequestValditionNumber, 0,
					{ 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd } },
				{ -1, true, NULL, 0, -1, VendComplete, 0,
					{ 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd } },
				{ -1, true, NULL, 0, -1, (TicketActionCode)(ValidatorFailure + 1), 0,
					{ 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd } },
				{ -1, true, NULL, 0, -1, (TicketActionCode)(TicketVoucherStatusRequest - 1), 0,
					{ 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd } },
				{ -1, true, NULL, 0, WORD_MAX, TicketVoucherStatusRequest, 0,
					{ 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd } },
				{ -1, true, NULL, 0, -1, (TicketActionCode)(ActionCode192DeniedByDPU + 1), 0,
					{ 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0xeb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd } },
				{ -1, true, NULL, 0, -1, (TicketActionCode)INT_MAX, 0,
					{ 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd } },
				{ -1, true, NULL, 0, -1, (TicketActionCode)INT_MIN, 0,
					{ 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd } },
				{ -1, true, NULL, 0, -1, (TicketActionCode)UINT_MAX, 0,
					{ 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd } },

				// Test CTicketLog::GetAmount().
				{ -1, true, NULL, 0, -1, (TicketActionCode)0, 0,
					{ 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd } },
				{ 0, true, NULL, 0, -1, (TicketActionCode)0, 0,
					{ 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd } },
				{ 1, true, NULL, 0, -1, (TicketActionCode)0, 0,
					{ 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd } },
				{ INT64_MAX, true, NULL, 0, -1, (TicketActionCode)0, 0,
					{ 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f,
						0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd } },
				{ INT64_MIN, true, NULL, 0, -1, (TicketActionCode)0, 0,
					{ 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
						0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd } },
				{ (__int64)UINT64_MAX, true, NULL, 0, -1, (TicketActionCode)0, 0,
					{ 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd } },

				// Test CTicketLog::GetValidationNum() and CTicketLog::GetMaskedValidationNum().
				{ -1, false, NULL, 0, -1, (TicketActionCode)0, 0,
					{ 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd } },
				{ -1, false, NULL, 33, -1, (TicketActionCode)0, 0,
					{ 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd } },
				{ -1, false, NULL, UCHAR_MAX, -1, (TicketActionCode)0, 0,
					{ 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd } },
				{ -1, false, validationNumber0, 0, -1, (TicketActionCode)0, 0,
					{ 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd } },
				{ -1, false, validationNumber1, sizeof(validationNumber1), -1, (TicketActionCode)0, 0,
					{ 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd } },
				{ -1, false, validationNumber2, sizeof(validationNumber2), -1, (TicketActionCode)0, 0,
					{ 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd } },
				{ -1, false, validationNumber3, sizeof(validationNumber3), -1, (TicketActionCode)0, 0,
					{ 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd } },
				{ -1, false, validationNumber4, sizeof(validationNumber4), -1, (TicketActionCode)0, 0,
					{ 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd } },
				{ -1, false, validationNumber5, sizeof(validationNumber5), -1, (TicketActionCode)0, 0,
					{ 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd } },
				{ -1, false, validationNumber6, sizeof(validationNumber6), -1, (TicketActionCode)0, 0,
					{ 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd } },
				{ -1, false, validationNumber7, sizeof(validationNumber7), -1, (TicketActionCode)0, 0,
					{ 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x31, 0x32, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd } },
				{ -1, false, validationNumber8, sizeof(validationNumber8), -1, (TicketActionCode)0, 0,
					{ 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd } },
				{ -1, false, validationNumber9, sizeof(validationNumber9), -1, (TicketActionCode)0, 0,
					{ 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd } },
				{ -1, false, validationNumber10, sizeof(validationNumber10), -1, (TicketActionCode)0, 0,
					{ 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
						0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x00, 0xff, 0xff, 0xcd, 0xcd } },
				{ -1, false, validationNumber11, sizeof(validationNumber11), -1, (TicketActionCode)0, 0,
					{ 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x31, 0x31, 0x32, 0x32, 0x33, 0x33, 0x34, 0x34, 0x35,
						0x35, 0x36, 0x36, 0x37, 0x37, 0x38, 0x38, 0x00, 0xff, 0xff, 0xcd, 0xcd } },
				{ -1, false, validationNumber12, sizeof(validationNumber12), -1, (TicketActionCode)0, 0,
					{ 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x31, 0x31, 0x32, 0x32, 0x33, 0x33, 0x34, 0x34, 0x35,
						0x35, 0x36, 0x36, 0x37, 0x37, 0x38, 0x38, 0x00, 0xff, 0xff, 0xcd, 0xcd } },
				{ -1, false, validationNumber13, sizeof(validationNumber13), -1, (TicketActionCode)0, 0,
					{ 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x31, 0x31, 0x32, 0x32, 0x33, 0x33, 0x34, 0x34, 0x35,
						0x35, 0x36, 0x36, 0x37, 0x37, 0x38, 0x38, 0x00, 0xff, 0xff, 0xcd, 0xcd } },

				// Test CTicketLog::GetTicketIn().
				{ -1, false, NULL, 0, -1, (TicketActionCode)0, 0,
					{ 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd } },
				{ -1, true, NULL, 0, -1, (TicketActionCode)0, 0,
					{ 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd } },

				// Test CTicketLog::GetSequenceNum().
				{ -1, true, NULL, 0, -1, (TicketActionCode)0, 0,
					{ 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd } },
				{ -1, true, NULL, 0, 0, (TicketActionCode)0, 0,
					{ 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcd, 0xcd } },
				{ -1, true, NULL, 0, 1, (TicketActionCode)0, 0,
					{ 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xcd, 0xcd } },
				{ -1, true, NULL, 0, SHRT_MAX, (TicketActionCode)0, 0,
					{ 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x7f, 0xcd, 0xcd } },
				{ -1, true, NULL, 0, SHRT_MIN, (TicketActionCode)0, 0,
					{ 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xcd, 0xcd } },
				{ -1, true, NULL, 0, WORD_MAX, (TicketActionCode)0, 0,
					{ 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd } },
				{ -1, true, NULL, 0, INT_MAX, (TicketActionCode)0, 0,
					{ 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd } },
				{ -1, true, NULL, 0, INT_MIN, (TicketActionCode)0, 0,
					{ 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcd, 0xcd } },
				{ -1, true, NULL, 0, (int)UINT_MAX, (TicketActionCode)0, 0,
					{ 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd } },

				// Test CTicketLog::GetDateTime().
				{ -1, true, NULL, 0, -1, (TicketActionCode)0, -1,
					{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
						0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd } },
				{ -1, true, NULL, 0, -1, (TicketActionCode)0, 0,
					{ 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd } },
				{ -1, true, NULL, 0, -1, (TicketActionCode)0, 1,
					{ 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd } },
				{ -1, true, NULL, 0, -1, (TicketActionCode)0, GameDate,
					{ 0xd1, 0x07, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
						0x22, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd } },
				{ -1, true, NULL, 0, -1, (TicketActionCode)0, TIME_T_MAX,
					{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
						0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd } },
				{ -1, true, NULL, 0, -1, (TicketActionCode)0, TIME_T_MIN,
					{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
						0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd } },
				{ -1, true, NULL, 0, -1, (TicketActionCode)0, TIME_T_MAX,
					{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
						0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd } },
			};

			// Inputs -- same for all iterations.
			TicketType ticketType(TicketTypeNoValue);

			// Outputs -- same for all iterations.
			const int nvramBufferLengthExpected = nvramBufferLengthGot;

			for (int testIndex = 0; testIndex < _countof(TEST_DATA); ++testIndex)
			{
				// Setup ticketLog.
				CTicket varTicket;
				varTicket.SetActionCode(TEST_DATA[testIndex].m_ticketActionCode);
				varTicket.SetAmount(TEST_DATA[testIndex].m_amount);
				varTicket.SetType(ticketType, TEST_DATA[testIndex].m_bTicketIn);
				varTicket.SetValidationNumber(TEST_DATA[testIndex].m_validationNumber, TEST_DATA[testIndex].m_validationLength);
				varTicket.SetTicketNumber(TEST_DATA[testIndex].m_number);
				varTicket.SetGameDateTime(TEST_DATA[testIndex].m_dateTime);
				const CTicket &ticket(varTicket);
				const CTicketLog ticketLog(ticket);

				// Setup nvramBuffer.
				size_t bufferRawSize = HeaderSize + (unsigned)nvramBufferLength + TrailerSize;
				byte *bufferRaw = new byte[bufferRawSize];
				memset(bufferRaw, MEMSET_DEFAULT_VALUE, bufferRawSize);
				byte *nvramBuffer = bufferRaw + HeaderSize; // Target buffer.

				// Perform operation(s) to be tested.
				const int nvramBufferLengthResult = ticketLog.GetNvramBuffer(nvramBuffer, nvramBufferLength);

				// Test #1.
				{
					const bool success(nvramBufferLengthResult == nvramBufferLengthExpected);
					if (!success)
					{
						string failedMsg;
						failedMsg = FormatString("nvramBufferLengthResult=%d expected=%d testIndex=%d in %s(%d)",
							nvramBufferLengthResult,
							nvramBufferLengthExpected,
							testIndex,
							(__TFUNCTION__), __LINE__);
						ASSERT_TRUE(success) <<  failedMsg;
					}
				}

				// Test #2.
				{
					 // Verify that the header was not overwritten.
					const int headerMemcmpResult = memcmp(bufferRaw, &HeaderValue, HeaderSize);

					bool areEqual(headerMemcmpResult == MEMCMP_EQUAL);
					string failedMsg;
					const string headerStr = CUtilities::ToHexString(bufferRaw, HeaderSize);
					const string expectedStr = CUtilities::ToHexString((const byte *)&HeaderValue, HeaderSize);
					failedMsg = FormatString("FAILED headerMemcmpResult=%d expected=%d header=[%s] expected=[%s] testIndex=%d in %s",
						headerMemcmpResult,
						MEMCMP_EQUAL,
						(headerStr.c_str()),
						(expectedStr.c_str()),
						testIndex,
						(__TFUNCTION__));
					ASSERT_TRUE(areEqual) <<  failedMsg;
				}

				// Test #3.
				{
					 // Verify that the trailer was not overwritten.
					const int trailerMemcmpResult = memcmp(bufferRaw + bufferRawSize - TrailerSize, &HeaderValue, HeaderSize);

					bool areEqual(trailerMemcmpResult == MEMCMP_EQUAL);
					string failedMsg;
					const string trailerStr = CUtilities::ToHexString(bufferRaw + bufferRawSize - TrailerSize, HeaderSize);
					const string expectedStr = CUtilities::ToHexString((const byte *)&HeaderValue, HeaderSize);
					failedMsg = FormatString("FAILED trailerMemcmpResult=%d expected=%d trailer=[%s] expected=[%s] testIndex=%d in %s",
						trailerMemcmpResult,
						MEMCMP_EQUAL,
						(trailerStr.c_str()),
						(expectedStr.c_str()),
						testIndex,
						(__TFUNCTION__));
					ASSERT_TRUE(areEqual) <<  failedMsg;
				}

#if 0 // NVRAM buffer is in local time (i.e., it depends on the operating system(?) time zone) so skip this test.
				// Test #4.
				{
					 // Verify that the target buffer is as expected.
					const int bufferMemcmpResult = memcmp(nvramBuffer, TEST_DATA[testIndex].m_nvramBufferExpected, nvramBufferLength);

					bool areEqual(bufferMemcmpResult == MEMCMP_EQUAL);
					string failedMsg;
					const string bufferStr = CUtilities::ToHexString(nvramBuffer, nvramBufferLength);
					const string expectedStr = CUtilities::ToHexString(TEST_DATA[testIndex].m_nvramBufferExpected, sizeof(TEST_DATA[testIndex].m_nvramBufferExpected));
					failedMsg = FormatString("FAILED bufferMemcmpResult=%d expected=%d nvramBuffer=[%s] expected=[%s] testIndex=%d in %s",
						bufferMemcmpResult,
						MEMCMP_EQUAL,
						(bufferStr),
						(expectedStr),
						testIndex,
						(__TFUNCTION__));
					ASSERT_TRUE(areEqual) <<  failedMsg;
				}
#endif

				// Test #5.  Test NVRAM buffer, but skip the CTime memory.
				{
					 // Verify that the target buffer is as expected.
					const int bufferMemcmpResult = memcmp(nvramBuffer + NVRAM_TIME_SIZE,
						TEST_DATA[testIndex].m_nvramBufferExpected + NVRAM_TIME_SIZE,
						nvramBufferLength - NVRAM_TIME_SIZE);

					bool areEqual(bufferMemcmpResult == MEMCMP_EQUAL);
					string failedMsg;
					const string bufferStr = CUtilities::ToHexString(nvramBuffer + NVRAM_TIME_SIZE,
						nvramBufferLength - NVRAM_TIME_SIZE);
					const string expectedStr = CUtilities::ToHexString(TEST_DATA[testIndex].m_nvramBufferExpected + NVRAM_TIME_SIZE,
						sizeof(TEST_DATA[testIndex].m_nvramBufferExpected) - NVRAM_TIME_SIZE);
					failedMsg = FormatString("FAILED bufferMemcmpResult=%d expected=%d (nvramBuffer+NVRAM_CTIME_SIZE)=[%s] expected=[%s] testIndex=%d in %s",
						bufferMemcmpResult,
						MEMCMP_EQUAL,
						(bufferStr.c_str()),
						(expectedStr.c_str()),
						testIndex,
						(__TFUNCTION__));
					ASSERT_TRUE(areEqual) <<  failedMsg;
				}

				// Cleanup.
				delete bufferRaw;
			}
		}

		/// <summary>
		/// Code coverage and functional test for:
		///     CTicketLog::CTicketLog(const CTicket)
		///     CTicket::CTicket()
		///     CTicketLog::GetNvramBuffer()
		/// Code coverage:
		///     CTicketLog::~CTicketLog()
		/// Test with a NULL buffer.
		/// </summary>
		TEST(TicketLog, GetNvramBuffer_TicketNullTest)
		{
			const int nvramBufferLength = 60;
			const int nvramBufferLengthGot = 58; // GetNvramBuffer() normally sets (only) 58 bytes, but we initialize all 60, so it is okay to verify all 60.

			typedef struct
			{
				// Inputs.
				const int m_nvramBufferLengthInput;

				// Expected results.
			} TestDataType;

			const TestDataType TEST_DATA[] =
			{
				-33,
				0,
				1,
				2,
				nvramBufferLength - 2,
				nvramBufferLength - 1,
				nvramBufferLength,
				nvramBufferLength + 1,
			};

			// Outputs -- same for all iterations.
			const int nvramBufferLengthExpected(0);
			byte * const nvramBuffer(NULL);

			for (int testIndex = 0; testIndex < _countof(TEST_DATA); ++testIndex)
			{
				// Setup ticketLog.
				const CTicket ticket;
				const CTicketLog ticketLog(ticket);

				// Perform operation(s) to be tested.
				const int nvramBufferLengthResult = ticketLog.GetNvramBuffer(nvramBuffer, TEST_DATA[testIndex].m_nvramBufferLengthInput);

				// Test #1.
				{
					const bool success(nvramBufferLengthResult == nvramBufferLengthExpected);
					if (!success)
					{
						string failedMsg;
						failedMsg = FormatString("nvramBufferLengthResult=%d expected=%d testIndex=%d in %s(%d)",
							nvramBufferLengthResult,
							nvramBufferLengthExpected,
							testIndex,
							(__TFUNCTION__), __LINE__);
						ASSERT_TRUE(success) <<  failedMsg;
					}
				}
			}
		}

		/// <summary>
		/// Code coverage and functional test for:
		///     CTicketLog::CTicketLog(const CTicket)
		///     CTicket::CTicket()
		///     CTicketLog::GetNvramBuffer()
		/// Code coverage:
		///     CTicketLog::~CTicketLog()
		/// Test that buffer is not changed.
		/// </summary>
		TEST(TicketLog, GetNvramBuffer_TicketNoChangeTest)
		{
			// Allocate extra memory before and after target buffer to check for unwanted overwrites.
			const UINT64 HeaderValue = 0xcdcdcdcdcdcdcdcd; // Each byte the same as MEMSET_DEFAULT_VALUE; 
			const size_t HeaderSize = sizeof(HeaderValue);
			const UINT64 TrailerValue = HeaderValue;
			const size_t TrailerSize = sizeof(TrailerValue);
			const int nvramBufferLength = 60;
			const int nvramBufferLengthGot = 58; // GetNvramBuffer() normally sets (only) 58 bytes, but we initialize all 60, so it is okay to verify all 60.

			typedef struct
			{
				// Inputs.
				const int m_nvramBufferLengthInput;

				// Expected results.
			} TestDataType;

			const TestDataType TEST_DATA[] =
			{
				-33,
				0,
				1,
				2,
				nvramBufferLength - 2,
				nvramBufferLength - 1,
			};

			// Outputs -- same for all iterations.
			const int nvramBufferLengthExpected(0);
			const byte nvramBufferExpected[nvramBufferLength] = {
				0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
				0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
				0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
				0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd };


			for (int testIndex = 0; testIndex < _countof(TEST_DATA); ++testIndex)
			{
				// Setup ticketLog.
				const CTicket ticket;
				const CTicketLog ticketLog(ticket);

				// Setup nvramBuffer.
				size_t bufferRawSize = HeaderSize + (unsigned)nvramBufferLength + TrailerSize;
				byte *bufferRaw = new byte[bufferRawSize];
				memset(bufferRaw, MEMSET_DEFAULT_VALUE, bufferRawSize);
				byte *nvramBuffer = bufferRaw + HeaderSize; // Target buffer.

				// Perform operation(s) to be tested.
				const int nvramBufferLengthResult = ticketLog.GetNvramBuffer(nvramBuffer, TEST_DATA[testIndex].m_nvramBufferLengthInput);

				// Test #1.
				{
					const bool success(nvramBufferLengthResult == nvramBufferLengthExpected);
					if (!success)
					{
						string failedMsg;
						failedMsg = FormatString("nvramBufferLengthResult=%d expected=%d testIndex=%d in %s(%d)",
							nvramBufferLengthResult,
							nvramBufferLengthExpected,
							testIndex,
							(__TFUNCTION__), __LINE__);
						ASSERT_TRUE(success) <<  failedMsg;
					}
				}

				// Test #2.
				{
					 // Verify that the header was not overwritten.
					const int headerMemcmpResult = memcmp(bufferRaw, &HeaderValue, HeaderSize);

					bool areEqual(headerMemcmpResult == MEMCMP_EQUAL);
					string failedMsg;
					const string headerStr = CUtilities::ToHexString(bufferRaw, HeaderSize);
					const string expectedStr = CUtilities::ToHexString((const byte *)&HeaderValue, HeaderSize);
					failedMsg = FormatString("FAILED headerMemcmpResult=%d expected=%d header=[%s] expected=[%s] testIndex=%d in %s",
						headerMemcmpResult,
						MEMCMP_EQUAL,
						(headerStr.c_str()),
						(expectedStr.c_str()),
						testIndex,
						(__TFUNCTION__));
					ASSERT_TRUE(areEqual) <<  failedMsg;
				}

				// Test #3.
				{
					 // Verify that the trailer was not overwritten.
					const int trailerMemcmpResult = memcmp(bufferRaw + bufferRawSize - TrailerSize, &HeaderValue, HeaderSize);

					bool areEqual(trailerMemcmpResult == MEMCMP_EQUAL);
					string failedMsg;
					const string trailerStr = CUtilities::ToHexString(bufferRaw + bufferRawSize - TrailerSize, HeaderSize);
					const string expectedStr = CUtilities::ToHexString((const byte *)&HeaderValue, HeaderSize);
					failedMsg = FormatString("FAILED trailerMemcmpResult=%d expected=%d trailer=[%s] expected=[%s] testIndex=%d in %s",
						trailerMemcmpResult,
						MEMCMP_EQUAL,
						(trailerStr.c_str()),
						(expectedStr.c_str()),
						testIndex,
						(__TFUNCTION__));
					ASSERT_TRUE(areEqual) <<  failedMsg;
				}

				// Test #4.
				{
					 // Verify that the target buffer is as expected.
					const int bufferMemcmpResult = memcmp(nvramBuffer, nvramBufferExpected, nvramBufferLength);

					bool areEqual(bufferMemcmpResult == MEMCMP_EQUAL);
					string failedMsg;
					const string bufferStr = CUtilities::ToHexString(nvramBuffer, nvramBufferLength);
					const string expectedStr = CUtilities::ToHexString(nvramBufferExpected, sizeof(nvramBufferExpected));
					failedMsg = FormatString("FAILED bufferMemcmpResult=%d expected=%d nvramBuffer=[%s] expected=[%s] testIndex=%d in %s",
						bufferMemcmpResult,
						MEMCMP_EQUAL,
						(bufferStr.c_str()),
						(expectedStr.c_str()),
						testIndex,
						(__TFUNCTION__));
					ASSERT_TRUE(areEqual) <<  failedMsg;
				}

				// Cleanup.
				delete bufferRaw;
			}
		}

		/// <summary>
		/// Code coverage and functional test for:
		///     CTicketLog::CTicketLog(const byte *)
		/// Code coverage:
		///     CTicketLog::~CTicketLog()
		/// Test for correct values when initialized from an NVRAM buffer.
		/// </summary>
		TEST(TicketLog, CTicketLog_BufferTestLoop)
		{
			// Inputs -- same for all loop iterations.
			const int nvramBufferLength = 60;
			const int nvramBufferLengthUse = 58; // CTicketLog(const byte *) only uses 58 bytes, but we initialize all 60.

			const time_t  ctime1972(2 * 365 * 24 * 60 * 60);
			const time_t  ctime1972s1(2 * 365 * 24 * 60 * 60 + 1);
//			const time_t  ctime2001(31 * 365 * 24 * 60 * 60);

			typedef struct
			{
				// Inputs.
				const byte filler; // To simplify compile-time issues.
				const byte m_nvramBuffer[nvramBufferLength];

				// Expected results.
				const string m_ticketInActionTextExpected;
				const __int64 m_amountExpected;
				const bool m_ticketInExpected;
				const string m_validationNumExpected;
				const string m_maskedValidationNumExpected;
				const int m_sequenceNumExpected;
				const TicketActionCode m_ticketActionCodeExpected;
				const time_t  m_dateTimeExpected;
			} TestDataType;

			const TestDataType TEST_DATA[] =
			{
				// Test CTicketLog::GetTicketInActionText() and CTicketLog::GetTicketActionCode().
				{ 0, { 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd },
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)-1, ctime1972 },
				{ 0, { 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd },
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, ctime1972 },
				{ 0, { 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd },
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, TicketActionCodeNoValue, ctime1972 },
				{ 0, { 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd },
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, RequestValditionNumber, ctime1972 },
				{ 0, { 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd },
					_T("Redeemed"), -1, true, _T(""), _T(""), (WORD)-1, VendComplete, ctime1972 },
				{ 0, { 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd },
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)(ValidatorFailure + 1), ctime1972 },
				{ 0, { 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd },
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)(TicketVoucherStatusRequest - 1), ctime1972 },
				{ 0, { 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd },
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, TicketVoucherStatusRequest, ctime1972 },
				{ 0, { 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0xeb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd },
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)(ActionCode192DeniedByDPU + 1), ctime1972 },
				{ 0, { 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd },
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)INT_MAX, ctime1972 },
				{ 0, { 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd },
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)INT_MIN, ctime1972 },
				{ 0, { 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd },
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)UINT_MAX, ctime1972 },

				// Test CTicketLog::GetAmount().
				{ 0, { 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd },
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, ctime1972 },
				{ 0, { 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd },
					_T("Rejected"), 0, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, ctime1972 },
				{ 0, { 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd },
					_T("Rejected"), 1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, ctime1972 },
				{ 0, { 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f,
						0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd },
					_T("Rejected"), INT64_MAX, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, ctime1972 },
				{ 0, { 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
						0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd },
					_T("Rejected"), INT64_MIN, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, ctime1972 },
				{ 0, { 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd },
					_T("Rejected"), (__int64)UINT64_MAX, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, ctime1972 },

				// Test CTicketLog::GetValidationNum() and CTicketLog::GetMaskedValidationNum().
				{ 0, { 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd },
					_T("Rejected"), -1, false, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, ctime1972 },
				{ 0, { 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd },
					_T("Rejected"), -1, false, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, ctime1972 },
				{ 0, { 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd },
					_T("Rejected"), -1, false, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, ctime1972 },
				{ 0, { 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd },
					_T("Rejected"), -1, false, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, ctime1972 },
				{ 0, { 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd },
					_T("Rejected"), -1, false, _T("00"), _T("00"), (WORD)-1, (TicketActionCode)0, ctime1972 },
				{ 0, { 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd },
					_T("Rejected"), -1, false, _T("99"), _T("99"), (WORD)-1, (TicketActionCode)0, ctime1972 },
				{ 0, { 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd },
					_T("Rejected"), -1, false, _T("0A"), _T("0A"), (WORD)-1, (TicketActionCode)0, ctime1972 },
				{ 0, { 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd },
					_T("Rejected"), -1, false, _T("A0"), _T("A0"), (WORD)-1, (TicketActionCode)0, ctime1972 },
				{ 0, { 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd },
					_T("Rejected"), -1, false, _T("AA"), _T("AA"), (WORD)-1, (TicketActionCode)0, ctime1972 },
				{ 0, { 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd },
					_T("Rejected"), -1, false, _T("FF"), _T("FF"), (WORD)-1, (TicketActionCode)0, ctime1972 },
				{0, { 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x31, 0x32, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd },
					_T("Rejected"), -1, false, _T("0123"), _T("0123"), (WORD)-1, (TicketActionCode)0, ctime1972 },
				{ 0, { 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd },
					_T("Rejected"), -1, false, _T("123456"), _T("*23456"), (WORD)-1, (TicketActionCode)0, ctime1972 },
				{ 0, { 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd },
					_T("Rejected"), -1, false, _T("23456789"), _T("***56789"), (WORD)-1, (TicketActionCode)0, ctime1972 },
				{ 0, { 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
						0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x00, 0xff, 0xff, 0xcd, 0xcd },
					_T("Rejected"), -1, false, _T("001234567890123456"), _T("*************23456"), (WORD)-1, (TicketActionCode)0, ctime1972 },
				{ 0, { 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x31, 0x31, 0x32, 0x32, 0x33, 0x33, 0x34, 0x34, 0x35,
						0x35, 0x36, 0x36, 0x37, 0x37, 0x38, 0x38, 0x00, 0xff, 0xff, 0xcd, 0xcd },
					_T("Rejected"), -1, false, _T("001122334455667788"), _T("*************67788"), (WORD)-1, (TicketActionCode)0, ctime1972 },

				// Test CTicketLog::GetTicketIn().
				{ 0, { 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd },
					_T("Rejected"), -1, false, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, ctime1972 },
				{ 0, { 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd },
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, ctime1972 },

				// Test CTicketLog::GetSequenceNum().
				{ 0, { 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd },
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, ctime1972 },
				{ 0, { 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcd, 0xcd },
					_T("Rejected"), -1, true, _T(""), _T(""), 0, (TicketActionCode)0, ctime1972 },
				{ 0, { 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xcd, 0xcd },
					_T("Rejected"), -1, true, _T(""), _T(""), 1, (TicketActionCode)0, ctime1972 },
				{ 0, { 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x7f, 0xcd, 0xcd },
					_T("Rejected"), -1, true, _T(""), _T(""), SHRT_MAX, (TicketActionCode)0, ctime1972 },
				{ 0, { 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xcd, 0xcd },
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)SHRT_MIN, (TicketActionCode)0, 63072000 },
				{ 0, { 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd },
					_T("Rejected"), -1, true, _T(""), _T(""), WORD_MAX, (TicketActionCode)0, ctime1972 },
				{ 0, { 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd },
					_T("Rejected"), -1, true, _T(""), _T(""), WORD_MAX, (TicketActionCode)0, ctime1972 },
				{ 0, { 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcd, 0xcd },
					_T("Rejected"), -1, true, _T(""), _T(""), 0, (TicketActionCode)0, ctime1972 },
				{ 0, { 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd },
					_T("Rejected"), -1, true, _T(""), _T(""), WORD_MAX, (TicketActionCode)0, ctime1972 },

				// Test CTicketLog::GetDateTime().
				{ 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
						0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd },
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, 31564800 },
				{ 0, { 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd },
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, ctime1972 },
				{ 0, { 0xb1, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd },
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, ctime1972s1 },
				{ 0, { 0xd1, 0x07, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
						0x22, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd },
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, 981232496 },
				{ 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
						0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd },
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, 31564800 },
				{ 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
						0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd },
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, 31564800 },
				{ 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
						0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd },
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, 31564800 },
				{ 0, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd },
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, 31564800 },
				{ 0, { 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
						0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd },
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, 946713600 },
				{ 0, { 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0x11, 0xcd,
						0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd },
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, 31564800 },
				{ 0, { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
						0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xcd },
					_T("Rejected"), -1, true, _T(""), _T(""), (WORD)-1, (TicketActionCode)0, 31564800 },
			};

			// Inputs -- same for all iterations.
			TicketType ticketType(TicketTypeNoValue);

			for (int testIndex = 0; testIndex < _countof(TEST_DATA); ++testIndex)
			{
				// Setup.

				// Perform operation(s) to be tested.
				const CTicketLog ticketLog(TEST_DATA[testIndex].m_nvramBuffer);

				// Test #1.
				{
					const string ticketInActionTextResult(ticketLog.GetTicketInActionText());
					const bool success(ticketInActionTextResult == TEST_DATA[testIndex].m_ticketInActionTextExpected);
					if (!success)
					{
						string failedMsg;
						failedMsg = FormatString("ticketInActionTextResult=\"%s\" expected=\"%s\" testIndex=%d in %s(%d)",
							(ticketInActionTextResult.c_str()),
							(TEST_DATA[testIndex].m_ticketInActionTextExpected.c_str()),
							testIndex,
							(__TFUNCTION__), __LINE__);
						ASSERT_TRUE(success) <<  failedMsg;
					}
				}

				// Test #2.
				{
					const __int64 amountResult(ticketLog.GetAmount());

					const bool success(amountResult == TEST_DATA[testIndex].m_amountExpected);
					if (!success)
					{
						string failedMsg;
						failedMsg = FormatString("amountResult=%lld expected=%lld testIndex=%d in %s(%d)",
							(long long)amountResult,
							(long long)TEST_DATA[testIndex].m_amountExpected,
							testIndex,
							(__TFUNCTION__), __LINE__);
						ASSERT_TRUE(success) <<  failedMsg;
					}
				}


				// Test #3.
				{
					const bool ticketInResult(ticketLog.GetTicketIn());
					const bool success(ticketInResult == TEST_DATA[testIndex].m_ticketInExpected);
					if (!success)
					{
						string failedMsg;
						failedMsg = FormatString("ticketInResult=%d expected=%d testIndex=%d in %s(%d)",
							ticketInResult,
							TEST_DATA[testIndex].m_ticketInExpected,
							testIndex,
							(__TFUNCTION__), __LINE__);
						ASSERT_TRUE(success) <<  failedMsg;
					}
				}

				// Test #4.
				{
					const string validationNumResult(ticketLog.GetValidationNum());
					const bool success(validationNumResult == TEST_DATA[testIndex].m_validationNumExpected);
					if (!success)
					{
						string failedMsg;
						failedMsg = FormatString("validationNumResult=\"%s\" expected=\"%s\" testIndex=%d in %s(%d)",
							(validationNumResult.c_str()),
							(TEST_DATA[testIndex].m_validationNumExpected.c_str()),
							testIndex,
							(__TFUNCTION__), __LINE__);
						ASSERT_TRUE(success) <<  failedMsg;
					}
				}

				// Test #5.
				{
					const string maskedValidationNumResult(ticketLog.GetMaskedValidationNum());
					const bool success(maskedValidationNumResult == TEST_DATA[testIndex].m_maskedValidationNumExpected);
					if (!success)
					{
						string failedMsg;
						failedMsg = FormatString("maskedValidationNumResult=\"%s\" expected=\"%s\" testIndex=%d in %s(%d)",
							(maskedValidationNumResult.c_str()),
							(TEST_DATA[testIndex].m_maskedValidationNumExpected.c_str()),
							testIndex,
							(__TFUNCTION__), __LINE__);
						ASSERT_TRUE(success) <<  failedMsg;
					}
				}

				// Test #6.
				{
					const int sequenceNumResult(ticketLog.GetSequenceNum());
					const bool success(sequenceNumResult == TEST_DATA[testIndex].m_sequenceNumExpected);
					if (!success)
					{
						string failedMsg;
						failedMsg = FormatString("sequenceNumResult=%d expected=%d testIndex=%d in %s(%d)",
							sequenceNumResult,
							TEST_DATA[testIndex].m_sequenceNumExpected,
							testIndex,
							(__TFUNCTION__), __LINE__);
						ASSERT_TRUE(success) <<  failedMsg;
					}
				}

				// Test #7.
				{
					const TicketActionCode ticketActionCodeResult(ticketLog.GetTicketActionCode());
					const bool success(ticketActionCodeResult == TEST_DATA[testIndex].m_ticketActionCodeExpected);
					if (!success)
					{
						string failedMsg;
						failedMsg = FormatString("ticketActionCodeResult=%d expected=%d testIndex=%d in %s(%d)",
							ticketActionCodeResult,
							TEST_DATA[testIndex].m_ticketActionCodeExpected,
							testIndex,
							(__TFUNCTION__), __LINE__);
						ASSERT_TRUE(success) <<  failedMsg;
					}
				}

#if 0 // NVRAM buffer is in local time (i.e., it depends on the operating system(?) time zone) so skip this test.
				// Test #8.
				{
					const time_t  dateTimeResult(ticketLog.GetDateTime());
					const bool success(dateTimeResult == TEST_DATA[testIndex].m_dateTimeExpected);
					if (!success)
					{
						string failedMsg;
						failedMsg = FormatString("dateTimeResult=%lld expected=%lld testIndex=%d in %s(%d)",
							(long long)dateTimeResult.GetTime(),
							(long long)TEST_DATA[testIndex].m_dateTimeExpected.GetTime(),
							testIndex,
							(__TFUNCTION__), __LINE__);
						ASSERT_TRUE(success) <<  failedMsg;
					}
				}
#endif

				// Cleanup.
			}
		}
}
