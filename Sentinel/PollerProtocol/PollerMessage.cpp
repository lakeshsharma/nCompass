#include "stdafx.h"
#include "PollerMessage.h"
#include "Logging/LogString.h"

CPollerMessage::CPollerMessage()
{
	ZeroMemory(&MessageHeader, sizeof(MessageHeader));
	m_lpBuffer = NULL;
	m_bufferSize = 0;
}

CPollerMessage::~CPollerMessage()
{
	delete [] m_lpBuffer;
}

byte *CPollerMessage::GetReadWriteBuffer(long &bufferSize)
{
	bufferSize = m_bufferSize;
	return m_lpBuffer;
}

#define CASETOSTRING( x ) case x: retString = #x; break;
std::string CPollerMessage::TransactionTypeToString( TransactionType aType )
{
	std::string retString = "";

	switch( aType ){
		CASETOSTRING( NONE_SPECIFIED )
		CASETOSTRING( SENTINEL_ON_MEM_BAD_CODE )
		CASETOSTRING( PLAYER_CARD_IN_CODE )
		CASETOSTRING( EXTERNAL_BONUS_CODE )
		CASETOSTRING( DOOR_OPEN_CODE )
		CASETOSTRING( DOOR_CLOSED_CODE )
		CASETOSTRING( DROP_DOOR_OPEN_CODE )
		CASETOSTRING( DROP_DOOR_CLOSED_CODE )
		CASETOSTRING( LOGIC_DOOR_OPEN_CODE )
		CASETOSTRING( LOGIC_DOOR_CLOSED_CODE )
		CASETOSTRING( CHANGE_LIGHT_ON_CODE )
		CASETOSTRING( CHANGE_LIGHT_OFF_CODE )
		CASETOSTRING( ILLEGAL_DOOR_OPEN_CODE )
		CASETOSTRING( PBT_RESET_PIN )
		CASETOSTRING( SLOT_DOOR_OPEN_CODE )
		CASETOSTRING( SLOT_DOOR_CLOSED_CODE )
		CASETOSTRING( BELLY_DOOR_OPEN_CODE )
		CASETOSTRING( BELLY_DOOR_CLOSED_CODE )
		CASETOSTRING( SLOT_POWER_OFF_CODE )
		CASETOSTRING( SLOT_POWER_ON_CODE )
		CASETOSTRING( SENTINEL_ON_MEM_OK_CODE )
		CASETOSTRING( CONTROLLED_REBOOT_WARNING_CODE )
		CASETOSTRING( CONTROLLED_REBOOT_CODE )
		CASETOSTRING( AUTO_UPLOAD_CANCELED_BY_USER )
		CASETOSTRING( CHASSIS_DOOR_OPEN_CODE )
		CASETOSTRING( CHASSIS_DOOR_CLOSED_CODE )
		CASETOSTRING( BILL_ACCEPTED_CODE )
		CASETOSTRING( MAINTENANCE_CODE )
		CASETOSTRING( PLAYER_CARD_OUT_CODE )
		CASETOSTRING( GAME_INFO_CODE )
		CASETOSTRING( JACKPOT_FILL_CODE )
		CASETOSTRING( PLAYER_UPDATE_CODE )
		CASETOSTRING( FAILURE_CODE )
		CASETOSTRING( MECHANIC_CARD_IN_CODE )
		CASETOSTRING( MECHANIC_CARD_OUT_CODE )
		CASETOSTRING( FLOOR_CARD_IN_CODE )
		CASETOSTRING( FLOOR_CARD_OUT_CODE )
		CASETOSTRING( POSSIBLE_BAD_CARD_READER_CODE )
		CASETOSTRING( METER_RUNAWAY_CODE )
		CASETOSTRING( CASH_DOOR_OPEN_CODE )
		CASETOSTRING( CASH_DOOR_CLOSED_CODE )
		CASETOSTRING( STACKER_REMOVED_CODE )
		CASETOSTRING( STACKER_INSTALLED_CODE )
		CASETOSTRING( MACHINE_ONLINE_CODE )
		CASETOSTRING( MACHINE_MOVE_COMPLETE_CODE )
		CASETOSTRING( BEGIN_MACHINE_MOVE_CODE )
		CASETOSTRING( MACHINE_OFFLINE_CODE )
		CASETOSTRING( PROGRESSIVE_JP_HOPPER_CODE )
		CASETOSTRING( PERSONAL_BANKER_CODE )
		CASETOSTRING( GAME_COMM_DOWN_CODE )
		CASETOSTRING( COMPOSITE_JACKPOT_CODE )
		CASETOSTRING( COMPOSITE_TILT )
		CASETOSTRING( ONE_TIME_BONUS_EVENT_CODE )
		CASETOSTRING( ONE_LINK_AWARD_HIT )
		CASETOSTRING( ONE_LINK_AWARD_STATUS )
		CASETOSTRING( GAME_COMM_UP_CODE )
		CASETOSTRING( FILL_DOOR_OPEN_CODE )
		CASETOSTRING( FILL_DOOR_CLOSED_CODE )
		CASETOSTRING( TICKET_CODE )
		CASETOSTRING( WITNESS_CODE )
		CASETOSTRING( CASH_TRANSFER_TRACKING_CODE )
		CASETOSTRING( GLOBAL_CARD_IN_CODE )
		CASETOSTRING( GLOBAL_CARD_OUT_CODE )
		CASETOSTRING( CURRENCY_CARD_IN_CODE )
		CASETOSTRING( CURRENCY_CARD_OUT_CODE )
		CASETOSTRING( METER_CARD_IN_CODE )
		CASETOSTRING( METER_CARD_OUT_CODE )
		CASETOSTRING( PROGRESSIVE_JP_SCANNER_CODE )
		CASETOSTRING( CONFIG_CHANGE_CODE )
		CASETOSTRING( EGM_SNAPSHOT_CODE )
		CASETOSTRING( SUBGAME_SNAPSHOT_CODE )
		CASETOSTRING( MULTIPLE_BONUS_EVENT_CODE )
		CASETOSTRING( CHANGE_SLOTMAST_ID_CODE )
		CASETOSTRING( AUTHORIZE_PIN )
		CASETOSTRING( UNATTENDED_JACKPOT_RESULT )
		CASETOSTRING( GAME_SESSION_CHANGE )
		CASETOSTRING( CHASSIS_DOOR_OPEN_POWER_DOWN_CODE )
		CASETOSTRING( EXCESSIVE_TICKET_OUT )
		CASETOSTRING( CARDLESS_SESSION_START_CODE )
		CASETOSTRING( CARDLESS_SESSION_END_CODE )
		CASETOSTRING( EGM_LOCK_ACK )
		CASETOSTRING( EGM_UNLOCK_ACK )
		CASETOSTRING( EGM_LOCK_NACK )
		CASETOSTRING( EGM_UNLOCK_NACK )
		CASETOSTRING( VIRTUAL_SESSION_STARTED )
		CASETOSTRING( PROXIMITY_REQUEST_BEACON_SCAN_LIST )
		CASETOSTRING( MOBILE_CONNECT_PAIRING_SETTINGS_REQUEST )
		CASETOSTRING( MOBILE_CONNECT_PAIRING_REQUEST )
		CASETOSTRING( MOBILE_CONNECT_PAIRING_STATUS )
		CASETOSTRING( MOBILE_CONNECT_PLAYER_CHANGE )
		CASETOSTRING( MOBILE_CONNECT_CARD_CHANGE )
		CASETOSTRING( MOBILE_CONNECT_PLAYER_SESSION_CHANGE )
		CASETOSTRING( MOBILE_CONNECT_PBT_BALANCE )
		CASETOSTRING( MOBILE_CONNECT_PBT_FUNDS_TRANSFER )
		CASETOSTRING( MOBILE_CONNECT_END_PBT_SESSION )
		CASETOSTRING( PROXIMITY_SETTINGS_REQUEST )
		CASETOSTRING( PROXIMITY_STATUS )
	default:
		retString = "Unknown transaction type";
		break;
	}
	return retString;
}

std::string CPollerMessage::PollerMsgTypeToString( PollerMsgType aMsgType )
{
	std::string retString = "";

	switch( aMsgType ){
			CASETOSTRING( POLLER_MSG_NONE )
			CASETOSTRING( POLLER_MSG_SENTINEL_HEARTBEAT )
			CASETOSTRING( POLLER_MSG_REQUEST_CONFIG )
			CASETOSTRING( POLLER_MSG_SLOTMASTID_CHANGE )
			CASETOSTRING( POLLER_MSG_SENTINEL_STATUS )
			CASETOSTRING( POLLER_MSG_METERS )
			CASETOSTRING( POLLER_MSG_SUBGAME_METERS )
			CASETOSTRING( POLLER_MSG_SENTINEL_TIME )
			CASETOSTRING( POLLER_MSG_GLOBAL_PASSWORD )
			CASETOSTRING( POLLER_MSG_DISPLAY_MESSAGE )
			CASETOSTRING( POLLER_MSG_PLAYER_UPDATE_EVENTS )
			CASETOSTRING( POLLER_MSG_TRANSACTION )
			CASETOSTRING( POLLER_MSG_ALL_GAME_LIST )
			CASETOSTRING( POLLER_MSG_SUBGAME_SELECTION )
			CASETOSTRING( POLLER_MSG_SENTINEL_HEARTBEAT_RESP )
			CASETOSTRING( POLLER_MSG_SENTINEL_CONFIG )
			CASETOSTRING( POLLER_MSG_TRANSACTION_ACK )
			CASETOSTRING( POLLER_MSG_PLAYER_RESPONSE )
			CASETOSTRING( POLLER_MSG_PLAYER_BONUS_EVENTS )
			CASETOSTRING( POLLER_MSG_SLOTMASTID_CHANGE_RESP )
			CASETOSTRING( POLLER_MSG_TICKET )
			CASETOSTRING( POLLER_MSG_PBT_RESPONSE )
			CASETOSTRING( POLLER_MSG_EMPLOYEE_RESPONSE )
			CASETOSTRING( POLLER_MSG_FLASH_INITIALIZE )
			CASETOSTRING( POLLER_MSG_FLASH_DATA_BLOCK )
			CASETOSTRING( POLLER_MSG_FLASH_STATUS )
			CASETOSTRING( POLLER_MSG_FLASH_BURN )
			CASETOSTRING( POLLER_MSG_FLASH_STATUS_RESPONSE )
			CASETOSTRING( POLLER_MSG_FLASH_INITIALIZE_RESPONSE )
			CASETOSTRING( POLLER_MSG_REQUEST_LOSS_LIMIT_BALANCE_UPDATE )
			CASETOSTRING( POLLER_MSG_LOSS_LIMIT_BALANCE_UPDATE )
			CASETOSTRING( POLLER_MSG_GLOBAL_BALANCE )
			CASETOSTRING( POLLER_MSG_AUTHORIZATION_RESPONSE )
			CASETOSTRING( POLLER_MSG_PROCESS_UNATTENDED_JACKPOT )
			CASETOSTRING( POLLER_MSG_AUTHORIZE_PIN_RESPONSE )
			CASETOSTRING( POLLER_MSG_SUBGAME_SELECTION_RESPONSE )
			CASETOSTRING( POLLER_MSG_REBOOT_REQUEST )
			CASETOSTRING( POLLER_MSG_PIN_RESET_RESPONSE )
			CASETOSTRING( POLLER_MSG_PROXIMITY_BEACON_SCAN_LIST_RESPONSE )
			CASETOSTRING( POLLER_MSG_MOBILE_CONNECT_RESPONSE )
	default:
		retString = "Unknown transaction type";
		break;
	}
	return retString;
}

int CPollerMessage::AppendUTCTimeStamp(int offset)
{
	SYSTEMTIME timestamp;
	CUtilities::GetUTCSystemTime(&timestamp);
	memcpy_s(m_lpBuffer + offset, m_bufferSize - offset, &timestamp, sizeof(timestamp));
	return offset + sizeof(timestamp);
}

int CPollerMessage::AppendUTCTimeStamp(int offset, SYSTEMTIME timestamp)
{
	memcpy_s(m_lpBuffer + offset, m_bufferSize - offset, &timestamp, sizeof(timestamp));
	return offset + sizeof(timestamp);
}

bool  CPollerMessage::IsPMTDependent(void)
{
	bool bPMTDependent = true;
	byte transactionCode=0;
	WORD PacketVersion=0;
	memcpy(&transactionCode, m_lpBuffer + SIZE_OF_MESSAGE_HEADER, sizeof(byte));
	memcpy(&PacketVersion, m_lpBuffer + PACKET_VERSION_OFFSET, sizeof(WORD));
	if ((transactionCode == TICKET_CODE) && (PacketVersion >= PACKET_VERSION_VOUCHER_SEPARATION))
	{
		bPMTDependent = false;
	}

	return bPMTDependent;
}

