#pragma once

#include <map>
#include <cstddef>

typedef enum
{
	INT_MSG_CONTENT_NONE = 0,
	INT_MSG_CONTENT_METERS,
	INT_MSG_CONTENT_TICKET,
	INT_MSG_CONTENT_GAMES,
	INT_MSG_CONTENT_CONFIGFIELDS,
	INT_MSG_CONTENT_TIME,
	INT_MSG_CONTENT_CONNECTION,
	INT_MSG_CONTENT_PLAYERINFO,
	INT_MSG_CONTENT_GLOBALBALANCE,
	INT_MSG_CONTENT_EMPLOYEE,
	INT_MSG_CONTENT_PLAYER,
	INT_MSG_CONTENT_BONUSEVENTS,
	INT_MSG_CONTENT_TRANSACTIONMETERS,
	INT_MSG_CONTENT_TICKETINGINFO,
	INT_MSG_CONTENT_PERSONALBANKERINFO,
	INT_MSG_CONTENT_PERSONALBANKERTRANSFER,
	INT_MSG_CONTENT_LOGS,
	INT_MSG_CONTENT_HARDPINS,
	INT_MSG_CONTENT_EGMCONFIG,
	INT_MSG_CONTENT_JACKPOT,
	INT_MSG_CONTENT_FLASHSTATUS,
	INT_MSG_CONTENT_FILELIST,
	INT_MSG_CONTENT_THIRDPARTYMESSAGE,
	INT_MSG_CONTENT_LAST,
	INT_MSG_CONTENT_PERSIST,
	INT_MSG_CONTENT_TOUCH_SCREEN_PROTOCOLS,
	INT_MSG_CONTENT_VIDEO_MODE_CONFIG,
	INT_MSG_CONTENT_FIRMWARE_VERSIONS,
	INT_MSG_CONTENT_VIDEOMIXER_UPGRADE,
	INT_MSG_CONTENT_CARRIER_UPGRADE,
	INT_MSG_CONTENT_MEDIAWINDOW_PLAYERSTATE_UPDATE,
	INT_MSG_CONTENT_MEDIAWINDOW_CONFIG,
	INT_MSG_CONTENT_PACKAGE_LIST,
	INT_MSG_CONTENT_THIRD_PARTY_UI_CONFIG,
	INT_MSG_CONTENT_PROGRESSIVE_JACKPOT_ANNOUNCEMENT,
	INT_MSG_CONTENT_PROGRESSIVE_TOTALIZER_ANNOUNCEMENT,
	INT_MSG_CONTENT_PROGRESSIVE_ANNOUNCEMENT_CONFIGURATION,
	INT_MSG_CONTENT_PROGRESSIVE_CONFIG,
	INT_MSG_CONTENT_PROGRESSIVE_CONNECTION_INFO,
	INT_MSG_CONTENT_PROGRESSIVE_FORWARD,
	INT_MSG_CONTENT_PROGRESSIVE_LEVEL_CONFIGURATION,
	INT_MSG_CONTENT_PROGRESSIVE_LEVEL_BROADCAST,
	INT_MSG_CONTENT_GAME_END,
	INT_MSG_CONTENT_PROGRESSIVE_HOST,
	INT_MSG_CONTENT_EGM_AWARD,
	INT_MSG_CONTENT_ATTRACTOR_SEQUENCE_ITEM,
	INT_MSG_CONTENT_UI_CONFIG,
	INT_MSG_CONTENT_PROGRESSIVE_PLAYLIST,
	INT_MSG_CONTENT_PROGRESSIVE_WINNER_PICK,
	INT_MSG_CONTENT_PROGRESSIVE_WINNER_PICKED,
	INT_MSG_CONTENT_PROGRESSIVE_BONUSING_AVAILABLE,
	INT_MSG_CONTENT_PROGRESSIVE_CLAIMABLE_AWARD,
	INT_MSG_CONTENT_POKER_HAND,
	INT_MSG_CONTENT_SUBSCRIPTION,
	INT_MSG_CONTENT_PROGRESSIVE_ELIGIBLE_LEVELS_INFO,
	INT_MSG_CONTENT_PROGRESSIVE_PATRON_SESSION_INFO,
	INT_MSG_CONTENT_SCREEN_INFO,
	INT_MSG_CONTENT_SUBGAME_SESSION_PARAMS,
	INT_MSG_CONTENT_SUBGAME_SELECTION_RESPONSE,
	INT_MSG_CONTENT_PAIRING_SETTINGS_REQUEST,
	INT_MSG_CONTENT_PAIRING_SETTINGS_EVENT,
	INT_MSG_CONTENT_PAIRING_REQUEST,
	INT_MSG_CONTENT_PAIRING_EVENT,
	INT_MSG_CONTENT_PAIRING_STATUS_EVENT,
	INT_MSG_CONTENT_CARD_CHANGE_REQUEST,
	INT_MSG_CONTENT_CARD_CHANGE_EVENT,
	INT_MSG_CONTENT_PLAYER_CHANGE_EVENT,
	INT_MSG_CONTENT_PLAYER_SESSION_CHANGE_EVENT,
	INT_MSG_CONTENT_FUNDS_TRANSFER_BALANCE_REQUEST,
	INT_MSG_CONTENT_FUNDS_TRANSFER_BALANCE_EVENT,
	INT_MSG_CONTENT_FUNDS_TRANSFER_REQUEST,
	INT_MSG_CONTENT_FUNDS_TRANSFER_EVENT,
	INT_MSG_CONTENT_PROMOGAME_REQUEST,
	INT_MSG_CONTENT_PROMOGAME_ACCEPTANCE_STATUS,
	INT_MSG_CONTENT_PAYOUT,
	INT_MSG_CONTENT_FIRMWARE_PACKAGE,
	INT_MSG_CONTENT_MISC_FILES_PACKAGE,
	INT_MSG_CONTENT_CAMPAIGN_PACKAGE,
	INT_MSG_CONTENT_SKIN_PACKAGE,
	INT_MSG_CONTENT_CAMPAIGN_VERIFICATION,
	INT_MSG_CONTENT_SKIN_VERIFICATION,
	INT_MSG_CONTENT_PROXIMITY_SETTINGS_EVENT,
	INT_MSG_CONTENT_PROXIMITY_STATUS_EVENT
} InternalMsgContentType;

class IInternalMsgContent
{
public:
	virtual InternalMsgContentType GetContentType() const = 0;
	virtual ~IInternalMsgContent() {}

	virtual bool IsWrapper() const = 0;
	virtual void ReleaseData() = 0;
};


template<InternalMsgContentType contentType>
class CInternalMsgContent :
	public IInternalMsgContent
{
public:
	static InternalMsgContentType MsgContentType() { return contentType; }
	InternalMsgContentType GetContentType() const { return contentType; }
	bool IsWrapper() const { return false; }
	void ReleaseData() { }
};

template<class T, InternalMsgContentType contentType>
class CInternalMsgContentWrapper :
	public CInternalMsgContent<contentType>
{
public:
	CInternalMsgContentWrapper(T *data) : m_data(data) {}
	~CInternalMsgContentWrapper()
	{
		if (NULL != m_data)
			delete m_data;
	}

	bool IsWrapper() const { return true; }

	void ReleaseData()
	{
		// Assumes old content data will be cleaned up by invoker
		m_data = NULL;
	}

	T* GetData() { return m_data; }
	const T* GetData() const { return m_data; }

private:
	T *m_data;
};

class CInternalMsgContentStore
{
public:
	void SetContent(IInternalMsgContent* content, InternalMsgContentType contentType);
	void SetContent(IInternalMsgContent& content) { SetContent(&content, content.GetContentType()); }
	void RemoveContent(InternalMsgContentType contentType, bool releaseData);

	IInternalMsgContent* GetContent(InternalMsgContentType contentType);
	const IInternalMsgContent* GetContent(InternalMsgContentType contentType) const;

    void ClearAllContent();

private:
	typedef std::map<InternalMsgContentType, IInternalMsgContent*> ContentMap;

	ContentMap m_contentMap;
};


