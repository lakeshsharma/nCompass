/* soapH.h
   Generated by gSOAP 2.8.40 for cacheservice.h

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_xsd__byte_DEFINED
#define SOAP_TYPE_xsd__byte_DEFINED

inline void soap_default_xsd__byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_xsd__byte
	*a = SOAP_DEFAULT_xsd__byte;
#else
	*a = (char)0;
#endif
}

#define soap_xsd__byte2s soap_byte2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__byte(struct soap*, const char*, int, const char *, const char*);

#define soap_s2xsd__byte soap_s2byte

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_xsd__byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_xsd__byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_xsd__byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__byte(soap, p, "xsd:byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_xsd__byte(soap, p, "xsd:byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_xsd__byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_xsd__byte(soap, p, "xsd:byte", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_xsd__byte(struct soap*, char *, const char*, const char*);

inline int soap_read_xsd__byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__byte(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__byte(struct soap *soap, char *p)
{
	if (soap_read_xsd__byte(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_byte(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (soap_read_byte(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_short_DEFINED
#define SOAP_TYPE_short_DEFINED

inline void soap_default_short(struct soap *soap, short *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_short
	*a = SOAP_DEFAULT_short;
#else
	*a = (short)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_short(struct soap*, const char*, int, const short *, const char*);
SOAP_FMAC3 short * SOAP_FMAC4 soap_in_short(struct soap*, const char*, short *, const char*);

SOAP_FMAC3 short * SOAP_FMAC4 soap_new_short(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_short(struct soap*, const short *, const char*, const char*);

inline int soap_write_short(struct soap *soap, short const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_short(soap, p, "short", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_short(struct soap *soap, const char *URL, short const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_short(soap, p, "short", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_short(struct soap *soap, const char *URL, short const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_short(soap, p, "short", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 short * SOAP_FMAC4 soap_get_short(struct soap*, short *, const char*, const char*);

inline int soap_read_short(struct soap *soap, short *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_short(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_short(struct soap *soap, const char *URL, short *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_short(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_short(struct soap *soap, short *p)
{
	if (soap_read_short(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns4__char_DEFINED
#define SOAP_TYPE_ns4__char_DEFINED

inline void soap_default_ns4__char(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns4__char
	*a = SOAP_DEFAULT_ns4__char;
#else
	*a = (int)0;
#endif
}

#define soap_ns4__char2s soap_int2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__char(struct soap*, const char*, int, const int *, const char*);

#define soap_s2ns4__char soap_s2int

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_ns4__char(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_ns4__char(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__char(struct soap*, const int *, const char*, const char*);

inline int soap_write_ns4__char(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns4__char(soap, p, "ns4:char", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns4__char(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_ns4__char(soap, p, "ns4:char", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns4__char(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_ns4__char(soap, p, "ns4:char", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_ns4__char(struct soap*, int *, const char*, const char*);

inline int soap_read_ns4__char(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns4__char(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__char(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns4__char(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns4__char(struct soap *soap, int *p)
{
	if (soap_read_ns4__char(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_int(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (soap_read_int(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_LONG64_DEFINED
#define SOAP_TYPE_LONG64_DEFINED

inline void soap_default_LONG64(struct soap *soap, LONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_LONG64
	*a = SOAP_DEFAULT_LONG64;
#else
	*a = (LONG64)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap*, const char*, int, const LONG64 *, const char*);
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap*, const char*, LONG64 *, const char*);

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_new_LONG64(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap*, const LONG64 *, const char*, const char*);

inline int soap_write_LONG64(struct soap *soap, LONG64 const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_LONG64(soap, p, "long", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_LONG64(struct soap *soap, const char *URL, LONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_LONG64(soap, p, "long", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_LONG64(struct soap *soap, const char *URL, LONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_LONG64(soap, p, "long", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap*, LONG64 *, const char*, const char*);

inline int soap_read_LONG64(struct soap *soap, LONG64 *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_LONG64(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_LONG64(struct soap *soap, const char *URL, LONG64 *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_LONG64(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_LONG64(struct soap *soap, LONG64 *p)
{
	if (soap_read_LONG64(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_float_DEFINED
#define SOAP_TYPE_float_DEFINED

inline void soap_default_float(struct soap *soap, float *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_float
	*a = SOAP_DEFAULT_float;
#else
	*a = (float)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap*, const char*, int, const float *, const char*);
SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap*, const char*, float *, const char*);

SOAP_FMAC3 float * SOAP_FMAC4 soap_new_float(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap*, const float *, const char*, const char*);

inline int soap_write_float(struct soap *soap, float const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_float(soap, p, "float", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_float(struct soap *soap, const char *URL, float const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_float(soap, p, "float", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_float(struct soap *soap, const char *URL, float const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_float(soap, p, "float", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap*, float *, const char*, const char*);

inline int soap_read_float(struct soap *soap, float *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_float(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_float(struct soap *soap, const char *URL, float *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_float(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_float(struct soap *soap, float *p)
{
	if (soap_read_float(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_double_DEFINED
#define SOAP_TYPE_double_DEFINED

inline void soap_default_double(struct soap *soap, double *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_double
	*a = SOAP_DEFAULT_double;
#else
	*a = (double)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap*, const char*, double *, const char*);

SOAP_FMAC3 double * SOAP_FMAC4 soap_new_double(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap*, const double *, const char*, const char*);

inline int soap_write_double(struct soap *soap, double const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_double(soap, p, "double", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_double(soap, p, "double", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_double(soap, p, "double", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap*, double *, const char*, const char*);

inline int soap_read_double(struct soap *soap, double *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_double(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_double(struct soap *soap, const char *URL, double *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_double(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_double(struct soap *soap, double *p)
{
	if (soap_read_double(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__unsignedByte_DEFINED
#define SOAP_TYPE_xsd__unsignedByte_DEFINED

inline void soap_default_xsd__unsignedByte(struct soap *soap, unsigned char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_xsd__unsignedByte
	*a = SOAP_DEFAULT_xsd__unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}

#define soap_xsd__unsignedByte2s soap_unsignedByte2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);

#define soap_s2xsd__unsignedByte soap_s2unsignedByte

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_xsd__unsignedByte(struct soap*, const char*, unsigned char *, const char*);

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_new_xsd__unsignedByte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

inline int soap_write_xsd__unsignedByte(struct soap *soap, unsigned char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__unsignedByte(soap, p, "xsd:unsignedByte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_xsd__unsignedByte(soap, p, "xsd:unsignedByte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_xsd__unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_xsd__unsignedByte(soap, p, "xsd:unsignedByte", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_xsd__unsignedByte(struct soap*, unsigned char *, const char*, const char*);

inline int soap_read_xsd__unsignedByte(struct soap *soap, unsigned char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__unsignedByte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__unsignedByte(struct soap *soap, const char *URL, unsigned char *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__unsignedByte(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__unsignedByte(struct soap *soap, unsigned char *p)
{
	if (soap_read_xsd__unsignedByte(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_unsignedByte_DEFINED
#define SOAP_TYPE_unsignedByte_DEFINED

inline void soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap*, const char*, unsigned char *, const char*);

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_new_unsignedByte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

inline int soap_write_unsignedByte(struct soap *soap, unsigned char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap*, unsigned char *, const char*, const char*);

inline int soap_read_unsignedByte(struct soap *soap, unsigned char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_unsignedByte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_unsignedByte(struct soap *soap, const char *URL, unsigned char *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_unsignedByte(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_unsignedByte(struct soap *soap, unsigned char *p)
{
	if (soap_read_unsignedByte(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_unsignedShort_DEFINED
#define SOAP_TYPE_unsignedShort_DEFINED

inline void soap_default_unsignedShort(struct soap *soap, unsigned short *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedShort
	*a = SOAP_DEFAULT_unsignedShort;
#else
	*a = (unsigned short)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedShort(struct soap*, const char*, int, const unsigned short *, const char*);
SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_in_unsignedShort(struct soap*, const char*, unsigned short *, const char*);

SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_new_unsignedShort(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedShort(struct soap*, const unsigned short *, const char*, const char*);

inline int soap_write_unsignedShort(struct soap *soap, unsigned short const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_unsignedShort(soap, p, "unsignedShort", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_unsignedShort(struct soap *soap, const char *URL, unsigned short const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_unsignedShort(soap, p, "unsignedShort", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_unsignedShort(struct soap *soap, const char *URL, unsigned short const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_unsignedShort(soap, p, "unsignedShort", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_get_unsignedShort(struct soap*, unsigned short *, const char*, const char*);

inline int soap_read_unsignedShort(struct soap *soap, unsigned short *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_unsignedShort(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_unsignedShort(struct soap *soap, const char *URL, unsigned short *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_unsignedShort(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_unsignedShort(struct soap *soap, unsigned short *p)
{
	if (soap_read_unsignedShort(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_unsignedInt_DEFINED
#define SOAP_TYPE_unsignedInt_DEFINED

inline void soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap*, const char*, unsigned int *, const char*);

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_new_unsignedInt(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap*, const unsigned int *, const char*, const char*);

inline int soap_write_unsignedInt(struct soap *soap, unsigned int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap*, unsigned int *, const char*, const char*);

inline int soap_read_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_unsignedInt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_unsignedInt(struct soap *soap, const char *URL, unsigned int *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_unsignedInt(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (soap_read_unsignedInt(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ULONG64_DEFINED
#define SOAP_TYPE_ULONG64_DEFINED

inline void soap_default_ULONG64(struct soap *soap, ULONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ULONG64
	*a = SOAP_DEFAULT_ULONG64;
#else
	*a = (ULONG64)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ULONG64(struct soap*, const char*, int, const ULONG64 *, const char*);
SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_in_ULONG64(struct soap*, const char*, ULONG64 *, const char*);

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_new_ULONG64(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ULONG64(struct soap*, const ULONG64 *, const char*, const char*);

inline int soap_write_ULONG64(struct soap *soap, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ULONG64(soap, p, "unsignedLong", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ULONG64(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_ULONG64(soap, p, "unsignedLong", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ULONG64(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_ULONG64(soap, p, "unsignedLong", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_get_ULONG64(struct soap*, ULONG64 *, const char*, const char*);

inline int soap_read_ULONG64(struct soap *soap, ULONG64 *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ULONG64(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ULONG64(struct soap *soap, const char *URL, ULONG64 *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ULONG64(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ULONG64(struct soap *soap, ULONG64 *p)
{
	if (soap_read_ULONG64(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_dateTime_DEFINED
#define SOAP_TYPE_dateTime_DEFINED

inline void soap_default_dateTime(struct soap *soap, time_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_dateTime
	*a = SOAP_DEFAULT_dateTime;
#else
	*a = (time_t)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_dateTime(struct soap*, const char*, int, const time_t *, const char*);
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_dateTime(struct soap*, const char*, time_t *, const char*);

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_new_dateTime(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_dateTime(struct soap*, const time_t *, const char*, const char*);

inline int soap_write_dateTime(struct soap *soap, time_t const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_dateTime(struct soap*, time_t *, const char*, const char*);

inline int soap_read_dateTime(struct soap *soap, time_t *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_dateTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_dateTime(struct soap *soap, const char *URL, time_t *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_dateTime(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_dateTime(struct soap *soap, time_t *p)
{
	if (soap_read_dateTime(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_saml2__DecisionType_DEFINED
#define SOAP_TYPE_saml2__DecisionType_DEFINED

inline void soap_default_saml2__DecisionType(struct soap *soap, enum saml2__DecisionType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_saml2__DecisionType
	*a = SOAP_DEFAULT_saml2__DecisionType;
#else
	*a = (enum saml2__DecisionType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__DecisionType(struct soap*, const char*, int, const enum saml2__DecisionType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_saml2__DecisionType2s(struct soap*, enum saml2__DecisionType);
SOAP_FMAC3 enum saml2__DecisionType * SOAP_FMAC4 soap_in_saml2__DecisionType(struct soap*, const char*, enum saml2__DecisionType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2saml2__DecisionType(struct soap*, const char*, enum saml2__DecisionType *);

SOAP_FMAC3 enum saml2__DecisionType * SOAP_FMAC4 soap_new_saml2__DecisionType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__DecisionType(struct soap*, const enum saml2__DecisionType *, const char*, const char*);

inline int soap_write_saml2__DecisionType(struct soap *soap, enum saml2__DecisionType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_saml2__DecisionType(soap, p, "saml2:DecisionType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_saml2__DecisionType(struct soap *soap, const char *URL, enum saml2__DecisionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_saml2__DecisionType(soap, p, "saml2:DecisionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_saml2__DecisionType(struct soap *soap, const char *URL, enum saml2__DecisionType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_saml2__DecisionType(soap, p, "saml2:DecisionType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 enum saml2__DecisionType * SOAP_FMAC4 soap_get_saml2__DecisionType(struct soap*, enum saml2__DecisionType *, const char*, const char*);

inline int soap_read_saml2__DecisionType(struct soap *soap, enum saml2__DecisionType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_saml2__DecisionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__DecisionType(struct soap *soap, const char *URL, enum saml2__DecisionType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_saml2__DecisionType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_saml2__DecisionType(struct soap *soap, enum saml2__DecisionType *p)
{
	if (soap_read_saml2__DecisionType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_saml1__DecisionType_DEFINED
#define SOAP_TYPE_saml1__DecisionType_DEFINED

inline void soap_default_saml1__DecisionType(struct soap *soap, enum saml1__DecisionType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_saml1__DecisionType
	*a = SOAP_DEFAULT_saml1__DecisionType;
#else
	*a = (enum saml1__DecisionType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__DecisionType(struct soap*, const char*, int, const enum saml1__DecisionType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_saml1__DecisionType2s(struct soap*, enum saml1__DecisionType);
SOAP_FMAC3 enum saml1__DecisionType * SOAP_FMAC4 soap_in_saml1__DecisionType(struct soap*, const char*, enum saml1__DecisionType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2saml1__DecisionType(struct soap*, const char*, enum saml1__DecisionType *);

SOAP_FMAC3 enum saml1__DecisionType * SOAP_FMAC4 soap_new_saml1__DecisionType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__DecisionType(struct soap*, const enum saml1__DecisionType *, const char*, const char*);

inline int soap_write_saml1__DecisionType(struct soap *soap, enum saml1__DecisionType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_saml1__DecisionType(soap, p, "saml1:DecisionType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_saml1__DecisionType(struct soap *soap, const char *URL, enum saml1__DecisionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_saml1__DecisionType(soap, p, "saml1:DecisionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_saml1__DecisionType(struct soap *soap, const char *URL, enum saml1__DecisionType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_saml1__DecisionType(soap, p, "saml1:DecisionType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 enum saml1__DecisionType * SOAP_FMAC4 soap_get_saml1__DecisionType(struct soap*, enum saml1__DecisionType *, const char*, const char*);

inline int soap_read_saml1__DecisionType(struct soap *soap, enum saml1__DecisionType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_saml1__DecisionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__DecisionType(struct soap *soap, const char *URL, enum saml1__DecisionType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_saml1__DecisionType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_saml1__DecisionType(struct soap *soap, enum saml1__DecisionType *p)
{
	if (soap_read_saml1__DecisionType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsc__FaultCodeType_DEFINED
#define SOAP_TYPE_wsc__FaultCodeType_DEFINED

inline void soap_default_wsc__FaultCodeType(struct soap *soap, enum wsc__FaultCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wsc__FaultCodeType
	*a = SOAP_DEFAULT_wsc__FaultCodeType;
#else
	*a = (enum wsc__FaultCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsc__FaultCodeType(struct soap*, const char*, int, const enum wsc__FaultCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsc__FaultCodeType2s(struct soap*, enum wsc__FaultCodeType);
SOAP_FMAC3 enum wsc__FaultCodeType * SOAP_FMAC4 soap_in_wsc__FaultCodeType(struct soap*, const char*, enum wsc__FaultCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsc__FaultCodeType(struct soap*, const char*, enum wsc__FaultCodeType *);

SOAP_FMAC3 enum wsc__FaultCodeType * SOAP_FMAC4 soap_new_wsc__FaultCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsc__FaultCodeType(struct soap*, const enum wsc__FaultCodeType *, const char*, const char*);

inline int soap_write_wsc__FaultCodeType(struct soap *soap, enum wsc__FaultCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_wsc__FaultCodeType(soap, p, "wsc:FaultCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wsc__FaultCodeType(struct soap *soap, const char *URL, enum wsc__FaultCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_wsc__FaultCodeType(soap, p, "wsc:FaultCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_wsc__FaultCodeType(struct soap *soap, const char *URL, enum wsc__FaultCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_wsc__FaultCodeType(soap, p, "wsc:FaultCodeType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 enum wsc__FaultCodeType * SOAP_FMAC4 soap_get_wsc__FaultCodeType(struct soap*, enum wsc__FaultCodeType *, const char*, const char*);

inline int soap_read_wsc__FaultCodeType(struct soap *soap, enum wsc__FaultCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_wsc__FaultCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsc__FaultCodeType(struct soap *soap, const char *URL, enum wsc__FaultCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_wsc__FaultCodeType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_wsc__FaultCodeType(struct soap *soap, enum wsc__FaultCodeType *p)
{
	if (soap_read_wsc__FaultCodeType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsse__FaultcodeEnum_DEFINED
#define SOAP_TYPE_wsse__FaultcodeEnum_DEFINED

inline void soap_default_wsse__FaultcodeEnum(struct soap *soap, enum wsse__FaultcodeEnum *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wsse__FaultcodeEnum
	*a = SOAP_DEFAULT_wsse__FaultcodeEnum;
#else
	*a = (enum wsse__FaultcodeEnum)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsse__FaultcodeEnum(struct soap*, const char*, int, const enum wsse__FaultcodeEnum *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsse__FaultcodeEnum2s(struct soap*, enum wsse__FaultcodeEnum);
SOAP_FMAC3 enum wsse__FaultcodeEnum * SOAP_FMAC4 soap_in_wsse__FaultcodeEnum(struct soap*, const char*, enum wsse__FaultcodeEnum *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsse__FaultcodeEnum(struct soap*, const char*, enum wsse__FaultcodeEnum *);

SOAP_FMAC3 enum wsse__FaultcodeEnum * SOAP_FMAC4 soap_new_wsse__FaultcodeEnum(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsse__FaultcodeEnum(struct soap*, const enum wsse__FaultcodeEnum *, const char*, const char*);

inline int soap_write_wsse__FaultcodeEnum(struct soap *soap, enum wsse__FaultcodeEnum const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_wsse__FaultcodeEnum(soap, p, "wsse:FaultcodeEnum", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wsse__FaultcodeEnum(struct soap *soap, const char *URL, enum wsse__FaultcodeEnum const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_wsse__FaultcodeEnum(soap, p, "wsse:FaultcodeEnum", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_wsse__FaultcodeEnum(struct soap *soap, const char *URL, enum wsse__FaultcodeEnum const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_wsse__FaultcodeEnum(soap, p, "wsse:FaultcodeEnum", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 enum wsse__FaultcodeEnum * SOAP_FMAC4 soap_get_wsse__FaultcodeEnum(struct soap*, enum wsse__FaultcodeEnum *, const char*, const char*);

inline int soap_read_wsse__FaultcodeEnum(struct soap *soap, enum wsse__FaultcodeEnum *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_wsse__FaultcodeEnum(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsse__FaultcodeEnum(struct soap *soap, const char *URL, enum wsse__FaultcodeEnum *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_wsse__FaultcodeEnum(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_wsse__FaultcodeEnum(struct soap *soap, enum wsse__FaultcodeEnum *p)
{
	if (soap_read_wsse__FaultcodeEnum(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsu__tTimestampFault_DEFINED
#define SOAP_TYPE_wsu__tTimestampFault_DEFINED

inline void soap_default_wsu__tTimestampFault(struct soap *soap, enum wsu__tTimestampFault *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wsu__tTimestampFault
	*a = SOAP_DEFAULT_wsu__tTimestampFault;
#else
	*a = (enum wsu__tTimestampFault)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsu__tTimestampFault(struct soap*, const char*, int, const enum wsu__tTimestampFault *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsu__tTimestampFault2s(struct soap*, enum wsu__tTimestampFault);
SOAP_FMAC3 enum wsu__tTimestampFault * SOAP_FMAC4 soap_in_wsu__tTimestampFault(struct soap*, const char*, enum wsu__tTimestampFault *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsu__tTimestampFault(struct soap*, const char*, enum wsu__tTimestampFault *);

SOAP_FMAC3 enum wsu__tTimestampFault * SOAP_FMAC4 soap_new_wsu__tTimestampFault(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsu__tTimestampFault(struct soap*, const enum wsu__tTimestampFault *, const char*, const char*);

inline int soap_write_wsu__tTimestampFault(struct soap *soap, enum wsu__tTimestampFault const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_wsu__tTimestampFault(soap, p, "wsu:tTimestampFault", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wsu__tTimestampFault(struct soap *soap, const char *URL, enum wsu__tTimestampFault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_wsu__tTimestampFault(soap, p, "wsu:tTimestampFault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_wsu__tTimestampFault(struct soap *soap, const char *URL, enum wsu__tTimestampFault const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_wsu__tTimestampFault(soap, p, "wsu:tTimestampFault", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 enum wsu__tTimestampFault * SOAP_FMAC4 soap_get_wsu__tTimestampFault(struct soap*, enum wsu__tTimestampFault *, const char*, const char*);

inline int soap_read_wsu__tTimestampFault(struct soap *soap, enum wsu__tTimestampFault *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_wsu__tTimestampFault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsu__tTimestampFault(struct soap *soap, const char *URL, enum wsu__tTimestampFault *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_wsu__tTimestampFault(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_wsu__tTimestampFault(struct soap *soap, enum wsu__tTimestampFault *p)
{
	if (soap_read_wsu__tTimestampFault(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__EventData_x002eCustomMessageJustificationType_DEFINED
#define SOAP_TYPE_ns3__EventData_x002eCustomMessageJustificationType_DEFINED

inline void soap_default_ns3__EventData_x002eCustomMessageJustificationType(struct soap *soap, enum ns3__EventData_x002eCustomMessageJustificationType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__EventData_x002eCustomMessageJustificationType
	*a = SOAP_DEFAULT_ns3__EventData_x002eCustomMessageJustificationType;
#else
	*a = (enum ns3__EventData_x002eCustomMessageJustificationType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__EventData_x002eCustomMessageJustificationType(struct soap*, const char*, int, const enum ns3__EventData_x002eCustomMessageJustificationType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__EventData_x002eCustomMessageJustificationType2s(struct soap*, enum ns3__EventData_x002eCustomMessageJustificationType);
SOAP_FMAC3 enum ns3__EventData_x002eCustomMessageJustificationType * SOAP_FMAC4 soap_in_ns3__EventData_x002eCustomMessageJustificationType(struct soap*, const char*, enum ns3__EventData_x002eCustomMessageJustificationType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__EventData_x002eCustomMessageJustificationType(struct soap*, const char*, enum ns3__EventData_x002eCustomMessageJustificationType *);

SOAP_FMAC3 enum ns3__EventData_x002eCustomMessageJustificationType * SOAP_FMAC4 soap_new_ns3__EventData_x002eCustomMessageJustificationType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__EventData_x002eCustomMessageJustificationType(struct soap*, const enum ns3__EventData_x002eCustomMessageJustificationType *, const char*, const char*);

inline int soap_write_ns3__EventData_x002eCustomMessageJustificationType(struct soap *soap, enum ns3__EventData_x002eCustomMessageJustificationType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns3__EventData_x002eCustomMessageJustificationType(soap, p, "ns3:EventData.CustomMessageJustificationType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__EventData_x002eCustomMessageJustificationType(struct soap *soap, const char *URL, enum ns3__EventData_x002eCustomMessageJustificationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_ns3__EventData_x002eCustomMessageJustificationType(soap, p, "ns3:EventData.CustomMessageJustificationType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns3__EventData_x002eCustomMessageJustificationType(struct soap *soap, const char *URL, enum ns3__EventData_x002eCustomMessageJustificationType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_ns3__EventData_x002eCustomMessageJustificationType(soap, p, "ns3:EventData.CustomMessageJustificationType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__EventData_x002eCustomMessageJustificationType * SOAP_FMAC4 soap_get_ns3__EventData_x002eCustomMessageJustificationType(struct soap*, enum ns3__EventData_x002eCustomMessageJustificationType *, const char*, const char*);

inline int soap_read_ns3__EventData_x002eCustomMessageJustificationType(struct soap *soap, enum ns3__EventData_x002eCustomMessageJustificationType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns3__EventData_x002eCustomMessageJustificationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__EventData_x002eCustomMessageJustificationType(struct soap *soap, const char *URL, enum ns3__EventData_x002eCustomMessageJustificationType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__EventData_x002eCustomMessageJustificationType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__EventData_x002eCustomMessageJustificationType(struct soap *soap, enum ns3__EventData_x002eCustomMessageJustificationType *p)
{
	if (soap_read_ns3__EventData_x002eCustomMessageJustificationType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_bool_DEFINED
#define SOAP_TYPE_bool_DEFINED

inline void soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

inline int soap_write_bool(struct soap *soap, bool const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

inline int soap_read_bool(struct soap *soap, bool *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_bool(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_bool(struct soap *soap, const char *URL, bool *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_bool(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_bool(struct soap *soap, bool *p)
{
	if (soap_read_bool(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring_DEFINED
#define SOAP_TYPE__ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(struct soap*, const char*, int, const _ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring *, const char*);
SOAP_FMAC3 _ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring * SOAP_FMAC4 soap_in__ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(struct soap*, const char*, _ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring *, const char*);
SOAP_FMAC1 _ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring * SOAP_FMAC2 soap_instantiate__ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring * soap_new__ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(soap, n, NULL, NULL, NULL);
}

inline _ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring * soap_new_req__ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(
	struct soap *soap,
	char *Key,
	char *Value)
{
	_ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring *_p = soap_new__ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring::Key = Key;
		_p->_ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring::Value = Value;
	}
	return _p;
}

inline _ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring * soap_new_set__ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(
	struct soap *soap,
	char *Key,
	char *Value)
{
	_ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring *_p = soap_new__ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring::Key = Key;
		_p->_ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring::Value = Value;
	}
	return _p;
}

inline int soap_write__ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(struct soap *soap, _ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ArrayOfKeyValueOfstringstring-KeyValueOfstringstring", p->soap_type() == SOAP_TYPE__ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(struct soap *soap, const char *URL, _ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ArrayOfKeyValueOfstringstring-KeyValueOfstringstring", p->soap_type() == SOAP_TYPE__ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(struct soap *soap, const char *URL, _ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ArrayOfKeyValueOfstringstring-KeyValueOfstringstring", p->soap_type() == SOAP_TYPE__ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring * SOAP_FMAC4 soap_get__ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(struct soap*, _ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring *, const char*, const char*);

inline int soap_read__ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(struct soap *soap, _ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(struct soap *soap, const char *URL, _ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(struct soap *soap, _ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring *p)
{
	if (soap_read__ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns4__guid___DEFINED
#define SOAP_TYPE_ns4__guid___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__guid__(struct soap*, const char*, int, const ns4__guid__ *, const char*);
SOAP_FMAC3 ns4__guid__ * SOAP_FMAC4 soap_in_ns4__guid__(struct soap*, const char*, ns4__guid__ *, const char*);
SOAP_FMAC1 ns4__guid__ * SOAP_FMAC2 soap_instantiate_ns4__guid__(struct soap*, int, const char*, const char*, size_t*);

inline ns4__guid__ * soap_new_ns4__guid__(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__guid__(soap, n, NULL, NULL, NULL);
}

inline ns4__guid__ * soap_new_req_ns4__guid__(
	struct soap *soap)
{
	ns4__guid__ *_p = soap_new_ns4__guid__(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns4__guid__ * soap_new_set_ns4__guid__(
	struct soap *soap,
	char *__item,
	char *__item__1)
{
	ns4__guid__ *_p = soap_new_ns4__guid__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__guid__::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns4__guid__(struct soap *soap, ns4__guid__ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:guid", p->soap_type() == SOAP_TYPE_ns4__guid__ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__guid__(struct soap *soap, const char *URL, ns4__guid__ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:guid", p->soap_type() == SOAP_TYPE_ns4__guid__ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns4__guid__(struct soap *soap, const char *URL, ns4__guid__ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:guid", p->soap_type() == SOAP_TYPE_ns4__guid__ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns4__guid__ * SOAP_FMAC4 soap_get_ns4__guid__(struct soap*, ns4__guid__ *, const char*, const char*);

inline int soap_read_ns4__guid__(struct soap *soap, ns4__guid__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns4__guid__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__guid__(struct soap *soap, const char *URL, ns4__guid__ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns4__guid__(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns4__guid__(struct soap *soap, ns4__guid__ *p)
{
	if (soap_read_ns4__guid__(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns4__duration___DEFINED
#define SOAP_TYPE_ns4__duration___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__duration__(struct soap*, const char*, int, const ns4__duration__ *, const char*);
SOAP_FMAC3 ns4__duration__ * SOAP_FMAC4 soap_in_ns4__duration__(struct soap*, const char*, ns4__duration__ *, const char*);
SOAP_FMAC1 ns4__duration__ * SOAP_FMAC2 soap_instantiate_ns4__duration__(struct soap*, int, const char*, const char*, size_t*);

inline ns4__duration__ * soap_new_ns4__duration__(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__duration__(soap, n, NULL, NULL, NULL);
}

inline ns4__duration__ * soap_new_req_ns4__duration__(
	struct soap *soap)
{
	ns4__duration__ *_p = soap_new_ns4__duration__(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns4__duration__ * soap_new_set_ns4__duration__(
	struct soap *soap,
	char *__item,
	char *__item__1)
{
	ns4__duration__ *_p = soap_new_ns4__duration__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__duration__::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns4__duration__(struct soap *soap, ns4__duration__ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:duration", p->soap_type() == SOAP_TYPE_ns4__duration__ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__duration__(struct soap *soap, const char *URL, ns4__duration__ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:duration", p->soap_type() == SOAP_TYPE_ns4__duration__ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns4__duration__(struct soap *soap, const char *URL, ns4__duration__ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:duration", p->soap_type() == SOAP_TYPE_ns4__duration__ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns4__duration__ * SOAP_FMAC4 soap_get_ns4__duration__(struct soap*, ns4__duration__ *, const char*, const char*);

inline int soap_read_ns4__duration__(struct soap *soap, ns4__duration__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns4__duration__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__duration__(struct soap *soap, const char *URL, ns4__duration__ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns4__duration__(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns4__duration__(struct soap *soap, ns4__duration__ *p)
{
	if (soap_read_ns4__duration__(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns4__char___DEFINED
#define SOAP_TYPE_ns4__char___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__char__(struct soap*, const char*, int, const ns4__char__ *, const char*);
SOAP_FMAC3 ns4__char__ * SOAP_FMAC4 soap_in_ns4__char__(struct soap*, const char*, ns4__char__ *, const char*);
SOAP_FMAC1 ns4__char__ * SOAP_FMAC2 soap_instantiate_ns4__char__(struct soap*, int, const char*, const char*, size_t*);

inline ns4__char__ * soap_new_ns4__char__(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__char__(soap, n, NULL, NULL, NULL);
}

inline ns4__char__ * soap_new_req_ns4__char__(
	struct soap *soap,
	int __item)
{
	ns4__char__ *_p = soap_new_ns4__char__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__char__::__item = __item;
	}
	return _p;
}

inline ns4__char__ * soap_new_set_ns4__char__(
	struct soap *soap,
	int __item,
	char *__item__1)
{
	ns4__char__ *_p = soap_new_ns4__char__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__char__::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns4__char__(struct soap *soap, ns4__char__ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:char", p->soap_type() == SOAP_TYPE_ns4__char__ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__char__(struct soap *soap, const char *URL, ns4__char__ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:char", p->soap_type() == SOAP_TYPE_ns4__char__ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns4__char__(struct soap *soap, const char *URL, ns4__char__ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:char", p->soap_type() == SOAP_TYPE_ns4__char__ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns4__char__ * SOAP_FMAC4 soap_get_ns4__char__(struct soap*, ns4__char__ *, const char*, const char*);

inline int soap_read_ns4__char__(struct soap *soap, ns4__char__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns4__char__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__char__(struct soap *soap, const char *URL, ns4__char__ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns4__char__(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns4__char__(struct soap *soap, ns4__char__ *p)
{
	if (soap_read_ns4__char__(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__EventData_x002eCustomMessageJustificationType__DEFINED
#define SOAP_TYPE_ns3__EventData_x002eCustomMessageJustificationType__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__EventData_x002eCustomMessageJustificationType_(struct soap*, const char*, int, const ns3__EventData_x002eCustomMessageJustificationType_ *, const char*);
SOAP_FMAC3 ns3__EventData_x002eCustomMessageJustificationType_ * SOAP_FMAC4 soap_in_ns3__EventData_x002eCustomMessageJustificationType_(struct soap*, const char*, ns3__EventData_x002eCustomMessageJustificationType_ *, const char*);
SOAP_FMAC1 ns3__EventData_x002eCustomMessageJustificationType_ * SOAP_FMAC2 soap_instantiate_ns3__EventData_x002eCustomMessageJustificationType_(struct soap*, int, const char*, const char*, size_t*);

inline ns3__EventData_x002eCustomMessageJustificationType_ * soap_new_ns3__EventData_x002eCustomMessageJustificationType_(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__EventData_x002eCustomMessageJustificationType_(soap, n, NULL, NULL, NULL);
}

inline ns3__EventData_x002eCustomMessageJustificationType_ * soap_new_req_ns3__EventData_x002eCustomMessageJustificationType_(
	struct soap *soap,
	enum ns3__EventData_x002eCustomMessageJustificationType __item)
{
	ns3__EventData_x002eCustomMessageJustificationType_ *_p = soap_new_ns3__EventData_x002eCustomMessageJustificationType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__EventData_x002eCustomMessageJustificationType_::__item = __item;
	}
	return _p;
}

inline ns3__EventData_x002eCustomMessageJustificationType_ * soap_new_set_ns3__EventData_x002eCustomMessageJustificationType_(
	struct soap *soap,
	enum ns3__EventData_x002eCustomMessageJustificationType __item,
	char *__item__1)
{
	ns3__EventData_x002eCustomMessageJustificationType_ *_p = soap_new_ns3__EventData_x002eCustomMessageJustificationType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__EventData_x002eCustomMessageJustificationType_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns3__EventData_x002eCustomMessageJustificationType_(struct soap *soap, ns3__EventData_x002eCustomMessageJustificationType_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:EventData.CustomMessageJustificationType", p->soap_type() == SOAP_TYPE_ns3__EventData_x002eCustomMessageJustificationType_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__EventData_x002eCustomMessageJustificationType_(struct soap *soap, const char *URL, ns3__EventData_x002eCustomMessageJustificationType_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:EventData.CustomMessageJustificationType", p->soap_type() == SOAP_TYPE_ns3__EventData_x002eCustomMessageJustificationType_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns3__EventData_x002eCustomMessageJustificationType_(struct soap *soap, const char *URL, ns3__EventData_x002eCustomMessageJustificationType_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:EventData.CustomMessageJustificationType", p->soap_type() == SOAP_TYPE_ns3__EventData_x002eCustomMessageJustificationType_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns3__EventData_x002eCustomMessageJustificationType_ * SOAP_FMAC4 soap_get_ns3__EventData_x002eCustomMessageJustificationType_(struct soap*, ns3__EventData_x002eCustomMessageJustificationType_ *, const char*, const char*);

inline int soap_read_ns3__EventData_x002eCustomMessageJustificationType_(struct soap *soap, ns3__EventData_x002eCustomMessageJustificationType_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__EventData_x002eCustomMessageJustificationType_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__EventData_x002eCustomMessageJustificationType_(struct soap *soap, const char *URL, ns3__EventData_x002eCustomMessageJustificationType_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__EventData_x002eCustomMessageJustificationType_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__EventData_x002eCustomMessageJustificationType_(struct soap *soap, ns3__EventData_x002eCustomMessageJustificationType_ *p)
{
	if (soap_read_ns3__EventData_x002eCustomMessageJustificationType_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__CustomMessageLine_DEFINED
#define SOAP_TYPE_ns3__CustomMessageLine_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__CustomMessageLine(struct soap*, const char*, int, const ns3__CustomMessageLine *, const char*);
SOAP_FMAC3 ns3__CustomMessageLine * SOAP_FMAC4 soap_in_ns3__CustomMessageLine(struct soap*, const char*, ns3__CustomMessageLine *, const char*);
SOAP_FMAC1 ns3__CustomMessageLine * SOAP_FMAC2 soap_instantiate_ns3__CustomMessageLine(struct soap*, int, const char*, const char*, size_t*);

inline ns3__CustomMessageLine * soap_new_ns3__CustomMessageLine(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__CustomMessageLine(soap, n, NULL, NULL, NULL);
}

inline ns3__CustomMessageLine * soap_new_req_ns3__CustomMessageLine(
	struct soap *soap)
{
	ns3__CustomMessageLine *_p = soap_new_ns3__CustomMessageLine(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__CustomMessageLine * soap_new_set_ns3__CustomMessageLine(
	struct soap *soap,
	bool *Bold,
	bool *DropShadow,
	char *FontName,
	int *FontSize,
	unsigned int *ForegroundColor,
	bool *Italic,
	enum ns3__EventData_x002eCustomMessageJustificationType *JustificationType,
	char *Text,
	bool *Underline,
	int *X1,
	int *X2,
	int *Y1,
	int *Y2,
	char *__item__1)
{
	ns3__CustomMessageLine *_p = soap_new_ns3__CustomMessageLine(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__CustomMessageLine::Bold = Bold;
		_p->ns3__CustomMessageLine::DropShadow = DropShadow;
		_p->ns3__CustomMessageLine::FontName = FontName;
		_p->ns3__CustomMessageLine::FontSize = FontSize;
		_p->ns3__CustomMessageLine::ForegroundColor = ForegroundColor;
		_p->ns3__CustomMessageLine::Italic = Italic;
		_p->ns3__CustomMessageLine::JustificationType = JustificationType;
		_p->ns3__CustomMessageLine::Text = Text;
		_p->ns3__CustomMessageLine::Underline = Underline;
		_p->ns3__CustomMessageLine::X1 = X1;
		_p->ns3__CustomMessageLine::X2 = X2;
		_p->ns3__CustomMessageLine::Y1 = Y1;
		_p->ns3__CustomMessageLine::Y2 = Y2;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns3__CustomMessageLine(struct soap *soap, ns3__CustomMessageLine const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CustomMessageLine", p->soap_type() == SOAP_TYPE_ns3__CustomMessageLine ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__CustomMessageLine(struct soap *soap, const char *URL, ns3__CustomMessageLine const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CustomMessageLine", p->soap_type() == SOAP_TYPE_ns3__CustomMessageLine ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns3__CustomMessageLine(struct soap *soap, const char *URL, ns3__CustomMessageLine const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CustomMessageLine", p->soap_type() == SOAP_TYPE_ns3__CustomMessageLine ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns3__CustomMessageLine * SOAP_FMAC4 soap_get_ns3__CustomMessageLine(struct soap*, ns3__CustomMessageLine *, const char*, const char*);

inline int soap_read_ns3__CustomMessageLine(struct soap *soap, ns3__CustomMessageLine *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__CustomMessageLine(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__CustomMessageLine(struct soap *soap, const char *URL, ns3__CustomMessageLine *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__CustomMessageLine(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__CustomMessageLine(struct soap *soap, ns3__CustomMessageLine *p)
{
	if (soap_read_ns3__CustomMessageLine(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__ArrayOfCustomMessageLine_DEFINED
#define SOAP_TYPE_ns3__ArrayOfCustomMessageLine_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ArrayOfCustomMessageLine(struct soap*, const char*, int, const ns3__ArrayOfCustomMessageLine *, const char*);
SOAP_FMAC3 ns3__ArrayOfCustomMessageLine * SOAP_FMAC4 soap_in_ns3__ArrayOfCustomMessageLine(struct soap*, const char*, ns3__ArrayOfCustomMessageLine *, const char*);
SOAP_FMAC1 ns3__ArrayOfCustomMessageLine * SOAP_FMAC2 soap_instantiate_ns3__ArrayOfCustomMessageLine(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ArrayOfCustomMessageLine * soap_new_ns3__ArrayOfCustomMessageLine(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ArrayOfCustomMessageLine(soap, n, NULL, NULL, NULL);
}

inline ns3__ArrayOfCustomMessageLine * soap_new_req_ns3__ArrayOfCustomMessageLine(
	struct soap *soap,
	int __sizeCustomMessageLine,
	ns3__CustomMessageLine **CustomMessageLine)
{
	ns3__ArrayOfCustomMessageLine *_p = soap_new_ns3__ArrayOfCustomMessageLine(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ArrayOfCustomMessageLine::__sizeCustomMessageLine = __sizeCustomMessageLine;
		_p->ns3__ArrayOfCustomMessageLine::CustomMessageLine = CustomMessageLine;
	}
	return _p;
}

inline ns3__ArrayOfCustomMessageLine * soap_new_set_ns3__ArrayOfCustomMessageLine(
	struct soap *soap,
	int __sizeCustomMessageLine,
	ns3__CustomMessageLine **CustomMessageLine,
	char *__item__1)
{
	ns3__ArrayOfCustomMessageLine *_p = soap_new_ns3__ArrayOfCustomMessageLine(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ArrayOfCustomMessageLine::__sizeCustomMessageLine = __sizeCustomMessageLine;
		_p->ns3__ArrayOfCustomMessageLine::CustomMessageLine = CustomMessageLine;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns3__ArrayOfCustomMessageLine(struct soap *soap, ns3__ArrayOfCustomMessageLine const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfCustomMessageLine", p->soap_type() == SOAP_TYPE_ns3__ArrayOfCustomMessageLine ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ArrayOfCustomMessageLine(struct soap *soap, const char *URL, ns3__ArrayOfCustomMessageLine const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfCustomMessageLine", p->soap_type() == SOAP_TYPE_ns3__ArrayOfCustomMessageLine ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ArrayOfCustomMessageLine(struct soap *soap, const char *URL, ns3__ArrayOfCustomMessageLine const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfCustomMessageLine", p->soap_type() == SOAP_TYPE_ns3__ArrayOfCustomMessageLine ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ArrayOfCustomMessageLine * SOAP_FMAC4 soap_get_ns3__ArrayOfCustomMessageLine(struct soap*, ns3__ArrayOfCustomMessageLine *, const char*, const char*);

inline int soap_read_ns3__ArrayOfCustomMessageLine(struct soap *soap, ns3__ArrayOfCustomMessageLine *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__ArrayOfCustomMessageLine(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ArrayOfCustomMessageLine(struct soap *soap, const char *URL, ns3__ArrayOfCustomMessageLine *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__ArrayOfCustomMessageLine(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__ArrayOfCustomMessageLine(struct soap *soap, ns3__ArrayOfCustomMessageLine *p)
{
	if (soap_read_ns3__ArrayOfCustomMessageLine(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns3__CustomMessageScreen_DEFINED
#define SOAP_TYPE_ns3__CustomMessageScreen_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__CustomMessageScreen(struct soap*, const char*, int, const ns3__CustomMessageScreen *, const char*);
SOAP_FMAC3 ns3__CustomMessageScreen * SOAP_FMAC4 soap_in_ns3__CustomMessageScreen(struct soap*, const char*, ns3__CustomMessageScreen *, const char*);
SOAP_FMAC1 ns3__CustomMessageScreen * SOAP_FMAC2 soap_instantiate_ns3__CustomMessageScreen(struct soap*, int, const char*, const char*, size_t*);

inline ns3__CustomMessageScreen * soap_new_ns3__CustomMessageScreen(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__CustomMessageScreen(soap, n, NULL, NULL, NULL);
}

inline ns3__CustomMessageScreen * soap_new_req_ns3__CustomMessageScreen(
	struct soap *soap)
{
	ns3__CustomMessageScreen *_p = soap_new_ns3__CustomMessageScreen(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__CustomMessageScreen * soap_new_set_ns3__CustomMessageScreen(
	struct soap *soap,
	ns3__ArrayOfCustomMessageLine *MessageLines,
	char *ScreenType,
	char *__item__1)
{
	ns3__CustomMessageScreen *_p = soap_new_ns3__CustomMessageScreen(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__CustomMessageScreen::MessageLines = MessageLines;
		_p->ns3__CustomMessageScreen::ScreenType = ScreenType;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns3__CustomMessageScreen(struct soap *soap, ns3__CustomMessageScreen const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CustomMessageScreen", p->soap_type() == SOAP_TYPE_ns3__CustomMessageScreen ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__CustomMessageScreen(struct soap *soap, const char *URL, ns3__CustomMessageScreen const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CustomMessageScreen", p->soap_type() == SOAP_TYPE_ns3__CustomMessageScreen ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns3__CustomMessageScreen(struct soap *soap, const char *URL, ns3__CustomMessageScreen const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CustomMessageScreen", p->soap_type() == SOAP_TYPE_ns3__CustomMessageScreen ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns3__CustomMessageScreen * SOAP_FMAC4 soap_get_ns3__CustomMessageScreen(struct soap*, ns3__CustomMessageScreen *, const char*, const char*);

inline int soap_read_ns3__CustomMessageScreen(struct soap *soap, ns3__CustomMessageScreen *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns3__CustomMessageScreen(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__CustomMessageScreen(struct soap *soap, const char *URL, ns3__CustomMessageScreen *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns3__CustomMessageScreen(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns3__CustomMessageScreen(struct soap *soap, ns3__CustomMessageScreen *p)
{
	if (soap_read_ns3__CustomMessageScreen(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__ArrayOfstring_DEFINED
#define SOAP_TYPE_ns2__ArrayOfstring_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ArrayOfstring(struct soap*, const char*, int, const ns2__ArrayOfstring *, const char*);
SOAP_FMAC3 ns2__ArrayOfstring * SOAP_FMAC4 soap_in_ns2__ArrayOfstring(struct soap*, const char*, ns2__ArrayOfstring *, const char*);
SOAP_FMAC1 ns2__ArrayOfstring * SOAP_FMAC2 soap_instantiate_ns2__ArrayOfstring(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ArrayOfstring * soap_new_ns2__ArrayOfstring(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__ArrayOfstring(soap, n, NULL, NULL, NULL);
}

inline ns2__ArrayOfstring * soap_new_req_ns2__ArrayOfstring(
	struct soap *soap,
	int __sizestring,
	char **string)
{
	ns2__ArrayOfstring *_p = soap_new_ns2__ArrayOfstring(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ArrayOfstring::__sizestring = __sizestring;
		_p->ns2__ArrayOfstring::string = string;
	}
	return _p;
}

inline ns2__ArrayOfstring * soap_new_set_ns2__ArrayOfstring(
	struct soap *soap,
	int __sizestring,
	char **string,
	char *__item__1)
{
	ns2__ArrayOfstring *_p = soap_new_ns2__ArrayOfstring(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ArrayOfstring::__sizestring = __sizestring;
		_p->ns2__ArrayOfstring::string = string;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns2__ArrayOfstring(struct soap *soap, ns2__ArrayOfstring const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ArrayOfstring", p->soap_type() == SOAP_TYPE_ns2__ArrayOfstring ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__ArrayOfstring(struct soap *soap, const char *URL, ns2__ArrayOfstring const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ArrayOfstring", p->soap_type() == SOAP_TYPE_ns2__ArrayOfstring ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns2__ArrayOfstring(struct soap *soap, const char *URL, ns2__ArrayOfstring const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ArrayOfstring", p->soap_type() == SOAP_TYPE_ns2__ArrayOfstring ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns2__ArrayOfstring * SOAP_FMAC4 soap_get_ns2__ArrayOfstring(struct soap*, ns2__ArrayOfstring *, const char*, const char*);

inline int soap_read_ns2__ArrayOfstring(struct soap *soap, ns2__ArrayOfstring *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns2__ArrayOfstring(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__ArrayOfstring(struct soap *soap, const char *URL, ns2__ArrayOfstring *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns2__ArrayOfstring(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__ArrayOfstring(struct soap *soap, ns2__ArrayOfstring *p)
{
	if (soap_read_ns2__ArrayOfstring(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__ArrayOfKeyValueOfstringstring_DEFINED
#define SOAP_TYPE_ns2__ArrayOfKeyValueOfstringstring_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ArrayOfKeyValueOfstringstring(struct soap*, const char*, int, const ns2__ArrayOfKeyValueOfstringstring *, const char*);
SOAP_FMAC3 ns2__ArrayOfKeyValueOfstringstring * SOAP_FMAC4 soap_in_ns2__ArrayOfKeyValueOfstringstring(struct soap*, const char*, ns2__ArrayOfKeyValueOfstringstring *, const char*);
SOAP_FMAC1 ns2__ArrayOfKeyValueOfstringstring * SOAP_FMAC2 soap_instantiate_ns2__ArrayOfKeyValueOfstringstring(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ArrayOfKeyValueOfstringstring * soap_new_ns2__ArrayOfKeyValueOfstringstring(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__ArrayOfKeyValueOfstringstring(soap, n, NULL, NULL, NULL);
}

inline ns2__ArrayOfKeyValueOfstringstring * soap_new_req_ns2__ArrayOfKeyValueOfstringstring(
	struct soap *soap,
	int __sizeKeyValueOfstringstring,
	_ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring *KeyValueOfstringstring)
{
	ns2__ArrayOfKeyValueOfstringstring *_p = soap_new_ns2__ArrayOfKeyValueOfstringstring(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ArrayOfKeyValueOfstringstring::__sizeKeyValueOfstringstring = __sizeKeyValueOfstringstring;
		_p->ns2__ArrayOfKeyValueOfstringstring::KeyValueOfstringstring = KeyValueOfstringstring;
	}
	return _p;
}

inline ns2__ArrayOfKeyValueOfstringstring * soap_new_set_ns2__ArrayOfKeyValueOfstringstring(
	struct soap *soap,
	int __sizeKeyValueOfstringstring,
	_ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring *KeyValueOfstringstring,
	char *__item__1)
{
	ns2__ArrayOfKeyValueOfstringstring *_p = soap_new_ns2__ArrayOfKeyValueOfstringstring(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ArrayOfKeyValueOfstringstring::__sizeKeyValueOfstringstring = __sizeKeyValueOfstringstring;
		_p->ns2__ArrayOfKeyValueOfstringstring::KeyValueOfstringstring = KeyValueOfstringstring;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns2__ArrayOfKeyValueOfstringstring(struct soap *soap, ns2__ArrayOfKeyValueOfstringstring const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ArrayOfKeyValueOfstringstring", p->soap_type() == SOAP_TYPE_ns2__ArrayOfKeyValueOfstringstring ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__ArrayOfKeyValueOfstringstring(struct soap *soap, const char *URL, ns2__ArrayOfKeyValueOfstringstring const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ArrayOfKeyValueOfstringstring", p->soap_type() == SOAP_TYPE_ns2__ArrayOfKeyValueOfstringstring ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns2__ArrayOfKeyValueOfstringstring(struct soap *soap, const char *URL, ns2__ArrayOfKeyValueOfstringstring const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ArrayOfKeyValueOfstringstring", p->soap_type() == SOAP_TYPE_ns2__ArrayOfKeyValueOfstringstring ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns2__ArrayOfKeyValueOfstringstring * SOAP_FMAC4 soap_get_ns2__ArrayOfKeyValueOfstringstring(struct soap*, ns2__ArrayOfKeyValueOfstringstring *, const char*, const char*);

inline int soap_read_ns2__ArrayOfKeyValueOfstringstring(struct soap *soap, ns2__ArrayOfKeyValueOfstringstring *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns2__ArrayOfKeyValueOfstringstring(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__ArrayOfKeyValueOfstringstring(struct soap *soap, const char *URL, ns2__ArrayOfKeyValueOfstringstring *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns2__ArrayOfKeyValueOfstringstring(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__ArrayOfKeyValueOfstringstring(struct soap *soap, ns2__ArrayOfKeyValueOfstringstring *p)
{
	if (soap_read_ns2__ArrayOfKeyValueOfstringstring(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__ArrayOflong_DEFINED
#define SOAP_TYPE_ns2__ArrayOflong_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ArrayOflong(struct soap*, const char*, int, const ns2__ArrayOflong *, const char*);
SOAP_FMAC3 ns2__ArrayOflong * SOAP_FMAC4 soap_in_ns2__ArrayOflong(struct soap*, const char*, ns2__ArrayOflong *, const char*);
SOAP_FMAC1 ns2__ArrayOflong * SOAP_FMAC2 soap_instantiate_ns2__ArrayOflong(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ArrayOflong * soap_new_ns2__ArrayOflong(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__ArrayOflong(soap, n, NULL, NULL, NULL);
}

inline ns2__ArrayOflong * soap_new_req_ns2__ArrayOflong(
	struct soap *soap,
	int __sizelong_,
	LONG64 *long_)
{
	ns2__ArrayOflong *_p = soap_new_ns2__ArrayOflong(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ArrayOflong::__sizelong_ = __sizelong_;
		_p->ns2__ArrayOflong::long_ = long_;
	}
	return _p;
}

inline ns2__ArrayOflong * soap_new_set_ns2__ArrayOflong(
	struct soap *soap,
	int __sizelong_,
	LONG64 *long_,
	char *__item__1)
{
	ns2__ArrayOflong *_p = soap_new_ns2__ArrayOflong(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ArrayOflong::__sizelong_ = __sizelong_;
		_p->ns2__ArrayOflong::long_ = long_;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns2__ArrayOflong(struct soap *soap, ns2__ArrayOflong const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ArrayOflong", p->soap_type() == SOAP_TYPE_ns2__ArrayOflong ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__ArrayOflong(struct soap *soap, const char *URL, ns2__ArrayOflong const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ArrayOflong", p->soap_type() == SOAP_TYPE_ns2__ArrayOflong ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns2__ArrayOflong(struct soap *soap, const char *URL, ns2__ArrayOflong const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ArrayOflong", p->soap_type() == SOAP_TYPE_ns2__ArrayOflong ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns2__ArrayOflong * SOAP_FMAC4 soap_get_ns2__ArrayOflong(struct soap*, ns2__ArrayOflong *, const char*, const char*);

inline int soap_read_ns2__ArrayOflong(struct soap *soap, ns2__ArrayOflong *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns2__ArrayOflong(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__ArrayOflong(struct soap *soap, const char *URL, ns2__ArrayOflong *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns2__ArrayOflong(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__ArrayOflong(struct soap *soap, ns2__ArrayOflong *p)
{
	if (soap_read_ns2__ArrayOflong(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__ArrayOfint_DEFINED
#define SOAP_TYPE_ns2__ArrayOfint_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ArrayOfint(struct soap*, const char*, int, const ns2__ArrayOfint *, const char*);
SOAP_FMAC3 ns2__ArrayOfint * SOAP_FMAC4 soap_in_ns2__ArrayOfint(struct soap*, const char*, ns2__ArrayOfint *, const char*);
SOAP_FMAC1 ns2__ArrayOfint * SOAP_FMAC2 soap_instantiate_ns2__ArrayOfint(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ArrayOfint * soap_new_ns2__ArrayOfint(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__ArrayOfint(soap, n, NULL, NULL, NULL);
}

inline ns2__ArrayOfint * soap_new_req_ns2__ArrayOfint(
	struct soap *soap,
	int __sizeint_,
	int *int_)
{
	ns2__ArrayOfint *_p = soap_new_ns2__ArrayOfint(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ArrayOfint::__sizeint_ = __sizeint_;
		_p->ns2__ArrayOfint::int_ = int_;
	}
	return _p;
}

inline ns2__ArrayOfint * soap_new_set_ns2__ArrayOfint(
	struct soap *soap,
	int __sizeint_,
	int *int_,
	char *__item__1)
{
	ns2__ArrayOfint *_p = soap_new_ns2__ArrayOfint(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ArrayOfint::__sizeint_ = __sizeint_;
		_p->ns2__ArrayOfint::int_ = int_;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns2__ArrayOfint(struct soap *soap, ns2__ArrayOfint const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ArrayOfint", p->soap_type() == SOAP_TYPE_ns2__ArrayOfint ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__ArrayOfint(struct soap *soap, const char *URL, ns2__ArrayOfint const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ArrayOfint", p->soap_type() == SOAP_TYPE_ns2__ArrayOfint ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns2__ArrayOfint(struct soap *soap, const char *URL, ns2__ArrayOfint const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ArrayOfint", p->soap_type() == SOAP_TYPE_ns2__ArrayOfint ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns2__ArrayOfint * SOAP_FMAC4 soap_get_ns2__ArrayOfint(struct soap*, ns2__ArrayOfint *, const char*, const char*);

inline int soap_read_ns2__ArrayOfint(struct soap *soap, ns2__ArrayOfint *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns2__ArrayOfint(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__ArrayOfint(struct soap *soap, const char *URL, ns2__ArrayOfint *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns2__ArrayOfint(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__ArrayOfint(struct soap *soap, ns2__ArrayOfint *p)
{
	if (soap_read_ns2__ArrayOfint(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__ArrayOfbase64Binary_DEFINED
#define SOAP_TYPE_ns2__ArrayOfbase64Binary_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ArrayOfbase64Binary(struct soap*, const char*, int, const ns2__ArrayOfbase64Binary *, const char*);
SOAP_FMAC3 ns2__ArrayOfbase64Binary * SOAP_FMAC4 soap_in_ns2__ArrayOfbase64Binary(struct soap*, const char*, ns2__ArrayOfbase64Binary *, const char*);
SOAP_FMAC1 ns2__ArrayOfbase64Binary * SOAP_FMAC2 soap_instantiate_ns2__ArrayOfbase64Binary(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ArrayOfbase64Binary * soap_new_ns2__ArrayOfbase64Binary(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__ArrayOfbase64Binary(soap, n, NULL, NULL, NULL);
}

inline ns2__ArrayOfbase64Binary * soap_new_req_ns2__ArrayOfbase64Binary(
	struct soap *soap,
	int __sizebase64Binary,
	xsd__base64Binary *base64Binary)
{
	ns2__ArrayOfbase64Binary *_p = soap_new_ns2__ArrayOfbase64Binary(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ArrayOfbase64Binary::__sizebase64Binary = __sizebase64Binary;
		_p->ns2__ArrayOfbase64Binary::base64Binary = base64Binary;
	}
	return _p;
}

inline ns2__ArrayOfbase64Binary * soap_new_set_ns2__ArrayOfbase64Binary(
	struct soap *soap,
	int __sizebase64Binary,
	xsd__base64Binary *base64Binary,
	char *__item__1)
{
	ns2__ArrayOfbase64Binary *_p = soap_new_ns2__ArrayOfbase64Binary(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ArrayOfbase64Binary::__sizebase64Binary = __sizebase64Binary;
		_p->ns2__ArrayOfbase64Binary::base64Binary = base64Binary;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns2__ArrayOfbase64Binary(struct soap *soap, ns2__ArrayOfbase64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ArrayOfbase64Binary", p->soap_type() == SOAP_TYPE_ns2__ArrayOfbase64Binary ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__ArrayOfbase64Binary(struct soap *soap, const char *URL, ns2__ArrayOfbase64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ArrayOfbase64Binary", p->soap_type() == SOAP_TYPE_ns2__ArrayOfbase64Binary ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns2__ArrayOfbase64Binary(struct soap *soap, const char *URL, ns2__ArrayOfbase64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ArrayOfbase64Binary", p->soap_type() == SOAP_TYPE_ns2__ArrayOfbase64Binary ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns2__ArrayOfbase64Binary * SOAP_FMAC4 soap_get_ns2__ArrayOfbase64Binary(struct soap*, ns2__ArrayOfbase64Binary *, const char*, const char*);

inline int soap_read_ns2__ArrayOfbase64Binary(struct soap *soap, ns2__ArrayOfbase64Binary *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns2__ArrayOfbase64Binary(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__ArrayOfbase64Binary(struct soap *soap, const char *URL, ns2__ArrayOfbase64Binary *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns2__ArrayOfbase64Binary(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__ArrayOfbase64Binary(struct soap *soap, ns2__ArrayOfbase64Binary *p)
{
	if (soap_read_ns2__ArrayOfbase64Binary(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetCacheMethodListResponse_DEFINED
#define SOAP_TYPE__ns1__GetCacheMethodListResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetCacheMethodListResponse(struct soap*, const char*, int, const _ns1__GetCacheMethodListResponse *, const char*);
SOAP_FMAC3 _ns1__GetCacheMethodListResponse * SOAP_FMAC4 soap_in__ns1__GetCacheMethodListResponse(struct soap*, const char*, _ns1__GetCacheMethodListResponse *, const char*);
SOAP_FMAC1 _ns1__GetCacheMethodListResponse * SOAP_FMAC2 soap_instantiate__ns1__GetCacheMethodListResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetCacheMethodListResponse * soap_new__ns1__GetCacheMethodListResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetCacheMethodListResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetCacheMethodListResponse * soap_new_req__ns1__GetCacheMethodListResponse(
	struct soap *soap)
{
	_ns1__GetCacheMethodListResponse *_p = soap_new__ns1__GetCacheMethodListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetCacheMethodListResponse * soap_new_set__ns1__GetCacheMethodListResponse(
	struct soap *soap,
	bool *GetCacheMethodListResult,
	ns2__ArrayOfstring *methodNames)
{
	_ns1__GetCacheMethodListResponse *_p = soap_new__ns1__GetCacheMethodListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetCacheMethodListResponse::GetCacheMethodListResult = GetCacheMethodListResult;
		_p->_ns1__GetCacheMethodListResponse::methodNames = methodNames;
	}
	return _p;
}

inline int soap_write__ns1__GetCacheMethodListResponse(struct soap *soap, _ns1__GetCacheMethodListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCacheMethodListResponse", p->soap_type() == SOAP_TYPE__ns1__GetCacheMethodListResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetCacheMethodListResponse(struct soap *soap, const char *URL, _ns1__GetCacheMethodListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCacheMethodListResponse", p->soap_type() == SOAP_TYPE__ns1__GetCacheMethodListResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetCacheMethodListResponse(struct soap *soap, const char *URL, _ns1__GetCacheMethodListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCacheMethodListResponse", p->soap_type() == SOAP_TYPE__ns1__GetCacheMethodListResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetCacheMethodListResponse * SOAP_FMAC4 soap_get__ns1__GetCacheMethodListResponse(struct soap*, _ns1__GetCacheMethodListResponse *, const char*, const char*);

inline int soap_read__ns1__GetCacheMethodListResponse(struct soap *soap, _ns1__GetCacheMethodListResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetCacheMethodListResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetCacheMethodListResponse(struct soap *soap, const char *URL, _ns1__GetCacheMethodListResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetCacheMethodListResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetCacheMethodListResponse(struct soap *soap, _ns1__GetCacheMethodListResponse *p)
{
	if (soap_read__ns1__GetCacheMethodListResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetCacheMethodList_DEFINED
#define SOAP_TYPE__ns1__GetCacheMethodList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetCacheMethodList(struct soap*, const char*, int, const _ns1__GetCacheMethodList *, const char*);
SOAP_FMAC3 _ns1__GetCacheMethodList * SOAP_FMAC4 soap_in__ns1__GetCacheMethodList(struct soap*, const char*, _ns1__GetCacheMethodList *, const char*);
SOAP_FMAC1 _ns1__GetCacheMethodList * SOAP_FMAC2 soap_instantiate__ns1__GetCacheMethodList(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetCacheMethodList * soap_new__ns1__GetCacheMethodList(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetCacheMethodList(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetCacheMethodList * soap_new_req__ns1__GetCacheMethodList(
	struct soap *soap)
{
	_ns1__GetCacheMethodList *_p = soap_new__ns1__GetCacheMethodList(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetCacheMethodList * soap_new_set__ns1__GetCacheMethodList(
	struct soap *soap)
{
	_ns1__GetCacheMethodList *_p = soap_new__ns1__GetCacheMethodList(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__GetCacheMethodList(struct soap *soap, _ns1__GetCacheMethodList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCacheMethodList", p->soap_type() == SOAP_TYPE__ns1__GetCacheMethodList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetCacheMethodList(struct soap *soap, const char *URL, _ns1__GetCacheMethodList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCacheMethodList", p->soap_type() == SOAP_TYPE__ns1__GetCacheMethodList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetCacheMethodList(struct soap *soap, const char *URL, _ns1__GetCacheMethodList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCacheMethodList", p->soap_type() == SOAP_TYPE__ns1__GetCacheMethodList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetCacheMethodList * SOAP_FMAC4 soap_get__ns1__GetCacheMethodList(struct soap*, _ns1__GetCacheMethodList *, const char*, const char*);

inline int soap_read__ns1__GetCacheMethodList(struct soap *soap, _ns1__GetCacheMethodList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetCacheMethodList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetCacheMethodList(struct soap *soap, const char *URL, _ns1__GetCacheMethodList *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetCacheMethodList(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetCacheMethodList(struct soap *soap, _ns1__GetCacheMethodList *p)
{
	if (soap_read__ns1__GetCacheMethodList(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetCasinoChallengeAwardNotificationCustomWithMediaDataResponse_DEFINED
#define SOAP_TYPE__ns1__GetCasinoChallengeAwardNotificationCustomWithMediaDataResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetCasinoChallengeAwardNotificationCustomWithMediaDataResponse(struct soap*, const char*, int, const _ns1__GetCasinoChallengeAwardNotificationCustomWithMediaDataResponse *, const char*);
SOAP_FMAC3 _ns1__GetCasinoChallengeAwardNotificationCustomWithMediaDataResponse * SOAP_FMAC4 soap_in__ns1__GetCasinoChallengeAwardNotificationCustomWithMediaDataResponse(struct soap*, const char*, _ns1__GetCasinoChallengeAwardNotificationCustomWithMediaDataResponse *, const char*);
SOAP_FMAC1 _ns1__GetCasinoChallengeAwardNotificationCustomWithMediaDataResponse * SOAP_FMAC2 soap_instantiate__ns1__GetCasinoChallengeAwardNotificationCustomWithMediaDataResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetCasinoChallengeAwardNotificationCustomWithMediaDataResponse * soap_new__ns1__GetCasinoChallengeAwardNotificationCustomWithMediaDataResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetCasinoChallengeAwardNotificationCustomWithMediaDataResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetCasinoChallengeAwardNotificationCustomWithMediaDataResponse * soap_new_req__ns1__GetCasinoChallengeAwardNotificationCustomWithMediaDataResponse(
	struct soap *soap)
{
	_ns1__GetCasinoChallengeAwardNotificationCustomWithMediaDataResponse *_p = soap_new__ns1__GetCasinoChallengeAwardNotificationCustomWithMediaDataResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetCasinoChallengeAwardNotificationCustomWithMediaDataResponse * soap_new_set__ns1__GetCasinoChallengeAwardNotificationCustomWithMediaDataResponse(
	struct soap *soap,
	bool *GetCasinoChallengeAwardNotificationCustomWithMediaDataResult,
	int *triggeredEventID,
	double *awardAmount,
	ns3__CustomMessageScreen *customAwardScreen,
	int *currentGoalLevel,
	char *mediaData)
{
	_ns1__GetCasinoChallengeAwardNotificationCustomWithMediaDataResponse *_p = soap_new__ns1__GetCasinoChallengeAwardNotificationCustomWithMediaDataResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetCasinoChallengeAwardNotificationCustomWithMediaDataResponse::GetCasinoChallengeAwardNotificationCustomWithMediaDataResult = GetCasinoChallengeAwardNotificationCustomWithMediaDataResult;
		_p->_ns1__GetCasinoChallengeAwardNotificationCustomWithMediaDataResponse::triggeredEventID = triggeredEventID;
		_p->_ns1__GetCasinoChallengeAwardNotificationCustomWithMediaDataResponse::awardAmount = awardAmount;
		_p->_ns1__GetCasinoChallengeAwardNotificationCustomWithMediaDataResponse::customAwardScreen = customAwardScreen;
		_p->_ns1__GetCasinoChallengeAwardNotificationCustomWithMediaDataResponse::currentGoalLevel = currentGoalLevel;
		_p->_ns1__GetCasinoChallengeAwardNotificationCustomWithMediaDataResponse::mediaData = mediaData;
	}
	return _p;
}

inline int soap_write__ns1__GetCasinoChallengeAwardNotificationCustomWithMediaDataResponse(struct soap *soap, _ns1__GetCasinoChallengeAwardNotificationCustomWithMediaDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCasinoChallengeAwardNotificationCustomWithMediaDataResponse", p->soap_type() == SOAP_TYPE__ns1__GetCasinoChallengeAwardNotificationCustomWithMediaDataResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetCasinoChallengeAwardNotificationCustomWithMediaDataResponse(struct soap *soap, const char *URL, _ns1__GetCasinoChallengeAwardNotificationCustomWithMediaDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCasinoChallengeAwardNotificationCustomWithMediaDataResponse", p->soap_type() == SOAP_TYPE__ns1__GetCasinoChallengeAwardNotificationCustomWithMediaDataResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetCasinoChallengeAwardNotificationCustomWithMediaDataResponse(struct soap *soap, const char *URL, _ns1__GetCasinoChallengeAwardNotificationCustomWithMediaDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCasinoChallengeAwardNotificationCustomWithMediaDataResponse", p->soap_type() == SOAP_TYPE__ns1__GetCasinoChallengeAwardNotificationCustomWithMediaDataResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetCasinoChallengeAwardNotificationCustomWithMediaDataResponse * SOAP_FMAC4 soap_get__ns1__GetCasinoChallengeAwardNotificationCustomWithMediaDataResponse(struct soap*, _ns1__GetCasinoChallengeAwardNotificationCustomWithMediaDataResponse *, const char*, const char*);

inline int soap_read__ns1__GetCasinoChallengeAwardNotificationCustomWithMediaDataResponse(struct soap *soap, _ns1__GetCasinoChallengeAwardNotificationCustomWithMediaDataResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetCasinoChallengeAwardNotificationCustomWithMediaDataResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetCasinoChallengeAwardNotificationCustomWithMediaDataResponse(struct soap *soap, const char *URL, _ns1__GetCasinoChallengeAwardNotificationCustomWithMediaDataResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetCasinoChallengeAwardNotificationCustomWithMediaDataResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetCasinoChallengeAwardNotificationCustomWithMediaDataResponse(struct soap *soap, _ns1__GetCasinoChallengeAwardNotificationCustomWithMediaDataResponse *p)
{
	if (soap_read__ns1__GetCasinoChallengeAwardNotificationCustomWithMediaDataResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData_DEFINED
#define SOAP_TYPE__ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData(struct soap*, const char*, int, const _ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData *, const char*);
SOAP_FMAC3 _ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData * SOAP_FMAC4 soap_in__ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData(struct soap*, const char*, _ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData *, const char*);
SOAP_FMAC1 _ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData * SOAP_FMAC2 soap_instantiate__ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData * soap_new__ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData * soap_new_req__ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData(
	struct soap *soap)
{
	_ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData *_p = soap_new__ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData * soap_new_set__ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData(
	struct soap *soap,
	xsd__base64Binary *lastTimeStamp,
	int *ID,
	int *slotmastID,
	char *ocr)
{
	_ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData *_p = soap_new__ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData::lastTimeStamp = lastTimeStamp;
		_p->_ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData::ID = ID;
		_p->_ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData::slotmastID = slotmastID;
		_p->_ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData::ocr = ocr;
	}
	return _p;
}

inline int soap_write__ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData(struct soap *soap, _ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCasinoChallengeAwardNotificationCustomWithMediaData", p->soap_type() == SOAP_TYPE__ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData(struct soap *soap, const char *URL, _ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCasinoChallengeAwardNotificationCustomWithMediaData", p->soap_type() == SOAP_TYPE__ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData(struct soap *soap, const char *URL, _ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCasinoChallengeAwardNotificationCustomWithMediaData", p->soap_type() == SOAP_TYPE__ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData * SOAP_FMAC4 soap_get__ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData(struct soap*, _ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData *, const char*, const char*);

inline int soap_read__ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData(struct soap *soap, _ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData(struct soap *soap, const char *URL, _ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData(struct soap *soap, _ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData *p)
{
	if (soap_read__ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetCasinoChallengeAwardNotificationCustomResponse_DEFINED
#define SOAP_TYPE__ns1__GetCasinoChallengeAwardNotificationCustomResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetCasinoChallengeAwardNotificationCustomResponse(struct soap*, const char*, int, const _ns1__GetCasinoChallengeAwardNotificationCustomResponse *, const char*);
SOAP_FMAC3 _ns1__GetCasinoChallengeAwardNotificationCustomResponse * SOAP_FMAC4 soap_in__ns1__GetCasinoChallengeAwardNotificationCustomResponse(struct soap*, const char*, _ns1__GetCasinoChallengeAwardNotificationCustomResponse *, const char*);
SOAP_FMAC1 _ns1__GetCasinoChallengeAwardNotificationCustomResponse * SOAP_FMAC2 soap_instantiate__ns1__GetCasinoChallengeAwardNotificationCustomResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetCasinoChallengeAwardNotificationCustomResponse * soap_new__ns1__GetCasinoChallengeAwardNotificationCustomResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetCasinoChallengeAwardNotificationCustomResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetCasinoChallengeAwardNotificationCustomResponse * soap_new_req__ns1__GetCasinoChallengeAwardNotificationCustomResponse(
	struct soap *soap)
{
	_ns1__GetCasinoChallengeAwardNotificationCustomResponse *_p = soap_new__ns1__GetCasinoChallengeAwardNotificationCustomResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetCasinoChallengeAwardNotificationCustomResponse * soap_new_set__ns1__GetCasinoChallengeAwardNotificationCustomResponse(
	struct soap *soap,
	bool *GetCasinoChallengeAwardNotificationCustomResult,
	int *triggeredEventID,
	double *awardAmount,
	ns3__CustomMessageScreen *customAwardScreen,
	int *currentGoalLevel)
{
	_ns1__GetCasinoChallengeAwardNotificationCustomResponse *_p = soap_new__ns1__GetCasinoChallengeAwardNotificationCustomResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetCasinoChallengeAwardNotificationCustomResponse::GetCasinoChallengeAwardNotificationCustomResult = GetCasinoChallengeAwardNotificationCustomResult;
		_p->_ns1__GetCasinoChallengeAwardNotificationCustomResponse::triggeredEventID = triggeredEventID;
		_p->_ns1__GetCasinoChallengeAwardNotificationCustomResponse::awardAmount = awardAmount;
		_p->_ns1__GetCasinoChallengeAwardNotificationCustomResponse::customAwardScreen = customAwardScreen;
		_p->_ns1__GetCasinoChallengeAwardNotificationCustomResponse::currentGoalLevel = currentGoalLevel;
	}
	return _p;
}

inline int soap_write__ns1__GetCasinoChallengeAwardNotificationCustomResponse(struct soap *soap, _ns1__GetCasinoChallengeAwardNotificationCustomResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCasinoChallengeAwardNotificationCustomResponse", p->soap_type() == SOAP_TYPE__ns1__GetCasinoChallengeAwardNotificationCustomResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetCasinoChallengeAwardNotificationCustomResponse(struct soap *soap, const char *URL, _ns1__GetCasinoChallengeAwardNotificationCustomResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCasinoChallengeAwardNotificationCustomResponse", p->soap_type() == SOAP_TYPE__ns1__GetCasinoChallengeAwardNotificationCustomResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetCasinoChallengeAwardNotificationCustomResponse(struct soap *soap, const char *URL, _ns1__GetCasinoChallengeAwardNotificationCustomResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCasinoChallengeAwardNotificationCustomResponse", p->soap_type() == SOAP_TYPE__ns1__GetCasinoChallengeAwardNotificationCustomResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetCasinoChallengeAwardNotificationCustomResponse * SOAP_FMAC4 soap_get__ns1__GetCasinoChallengeAwardNotificationCustomResponse(struct soap*, _ns1__GetCasinoChallengeAwardNotificationCustomResponse *, const char*, const char*);

inline int soap_read__ns1__GetCasinoChallengeAwardNotificationCustomResponse(struct soap *soap, _ns1__GetCasinoChallengeAwardNotificationCustomResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetCasinoChallengeAwardNotificationCustomResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetCasinoChallengeAwardNotificationCustomResponse(struct soap *soap, const char *URL, _ns1__GetCasinoChallengeAwardNotificationCustomResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetCasinoChallengeAwardNotificationCustomResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetCasinoChallengeAwardNotificationCustomResponse(struct soap *soap, _ns1__GetCasinoChallengeAwardNotificationCustomResponse *p)
{
	if (soap_read__ns1__GetCasinoChallengeAwardNotificationCustomResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetCasinoChallengeAwardNotificationCustom_DEFINED
#define SOAP_TYPE__ns1__GetCasinoChallengeAwardNotificationCustom_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetCasinoChallengeAwardNotificationCustom(struct soap*, const char*, int, const _ns1__GetCasinoChallengeAwardNotificationCustom *, const char*);
SOAP_FMAC3 _ns1__GetCasinoChallengeAwardNotificationCustom * SOAP_FMAC4 soap_in__ns1__GetCasinoChallengeAwardNotificationCustom(struct soap*, const char*, _ns1__GetCasinoChallengeAwardNotificationCustom *, const char*);
SOAP_FMAC1 _ns1__GetCasinoChallengeAwardNotificationCustom * SOAP_FMAC2 soap_instantiate__ns1__GetCasinoChallengeAwardNotificationCustom(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetCasinoChallengeAwardNotificationCustom * soap_new__ns1__GetCasinoChallengeAwardNotificationCustom(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetCasinoChallengeAwardNotificationCustom(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetCasinoChallengeAwardNotificationCustom * soap_new_req__ns1__GetCasinoChallengeAwardNotificationCustom(
	struct soap *soap)
{
	_ns1__GetCasinoChallengeAwardNotificationCustom *_p = soap_new__ns1__GetCasinoChallengeAwardNotificationCustom(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetCasinoChallengeAwardNotificationCustom * soap_new_set__ns1__GetCasinoChallengeAwardNotificationCustom(
	struct soap *soap,
	xsd__base64Binary *lastTimeStamp,
	int *ID,
	int *slotmastID,
	char *ocr)
{
	_ns1__GetCasinoChallengeAwardNotificationCustom *_p = soap_new__ns1__GetCasinoChallengeAwardNotificationCustom(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetCasinoChallengeAwardNotificationCustom::lastTimeStamp = lastTimeStamp;
		_p->_ns1__GetCasinoChallengeAwardNotificationCustom::ID = ID;
		_p->_ns1__GetCasinoChallengeAwardNotificationCustom::slotmastID = slotmastID;
		_p->_ns1__GetCasinoChallengeAwardNotificationCustom::ocr = ocr;
	}
	return _p;
}

inline int soap_write__ns1__GetCasinoChallengeAwardNotificationCustom(struct soap *soap, _ns1__GetCasinoChallengeAwardNotificationCustom const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCasinoChallengeAwardNotificationCustom", p->soap_type() == SOAP_TYPE__ns1__GetCasinoChallengeAwardNotificationCustom ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetCasinoChallengeAwardNotificationCustom(struct soap *soap, const char *URL, _ns1__GetCasinoChallengeAwardNotificationCustom const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCasinoChallengeAwardNotificationCustom", p->soap_type() == SOAP_TYPE__ns1__GetCasinoChallengeAwardNotificationCustom ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetCasinoChallengeAwardNotificationCustom(struct soap *soap, const char *URL, _ns1__GetCasinoChallengeAwardNotificationCustom const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCasinoChallengeAwardNotificationCustom", p->soap_type() == SOAP_TYPE__ns1__GetCasinoChallengeAwardNotificationCustom ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetCasinoChallengeAwardNotificationCustom * SOAP_FMAC4 soap_get__ns1__GetCasinoChallengeAwardNotificationCustom(struct soap*, _ns1__GetCasinoChallengeAwardNotificationCustom *, const char*, const char*);

inline int soap_read__ns1__GetCasinoChallengeAwardNotificationCustom(struct soap *soap, _ns1__GetCasinoChallengeAwardNotificationCustom *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetCasinoChallengeAwardNotificationCustom(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetCasinoChallengeAwardNotificationCustom(struct soap *soap, const char *URL, _ns1__GetCasinoChallengeAwardNotificationCustom *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetCasinoChallengeAwardNotificationCustom(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetCasinoChallengeAwardNotificationCustom(struct soap *soap, _ns1__GetCasinoChallengeAwardNotificationCustom *p)
{
	if (soap_read__ns1__GetCasinoChallengeAwardNotificationCustom(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetCasinoChallangeEventEndNotificationCustomResponse_DEFINED
#define SOAP_TYPE__ns1__GetCasinoChallangeEventEndNotificationCustomResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetCasinoChallangeEventEndNotificationCustomResponse(struct soap*, const char*, int, const _ns1__GetCasinoChallangeEventEndNotificationCustomResponse *, const char*);
SOAP_FMAC3 _ns1__GetCasinoChallangeEventEndNotificationCustomResponse * SOAP_FMAC4 soap_in__ns1__GetCasinoChallangeEventEndNotificationCustomResponse(struct soap*, const char*, _ns1__GetCasinoChallangeEventEndNotificationCustomResponse *, const char*);
SOAP_FMAC1 _ns1__GetCasinoChallangeEventEndNotificationCustomResponse * SOAP_FMAC2 soap_instantiate__ns1__GetCasinoChallangeEventEndNotificationCustomResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetCasinoChallangeEventEndNotificationCustomResponse * soap_new__ns1__GetCasinoChallangeEventEndNotificationCustomResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetCasinoChallangeEventEndNotificationCustomResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetCasinoChallangeEventEndNotificationCustomResponse * soap_new_req__ns1__GetCasinoChallangeEventEndNotificationCustomResponse(
	struct soap *soap)
{
	_ns1__GetCasinoChallangeEventEndNotificationCustomResponse *_p = soap_new__ns1__GetCasinoChallangeEventEndNotificationCustomResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetCasinoChallangeEventEndNotificationCustomResponse * soap_new_set__ns1__GetCasinoChallangeEventEndNotificationCustomResponse(
	struct soap *soap,
	bool *GetCasinoChallangeEventEndNotificationCustomResult,
	int *eventId,
	int *triggeredEventId,
	double *totalAwardAmount,
	bool *isFiveMinuteWindow,
	ns3__CustomMessageScreen *customEndScreen)
{
	_ns1__GetCasinoChallangeEventEndNotificationCustomResponse *_p = soap_new__ns1__GetCasinoChallangeEventEndNotificationCustomResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetCasinoChallangeEventEndNotificationCustomResponse::GetCasinoChallangeEventEndNotificationCustomResult = GetCasinoChallangeEventEndNotificationCustomResult;
		_p->_ns1__GetCasinoChallangeEventEndNotificationCustomResponse::eventId = eventId;
		_p->_ns1__GetCasinoChallangeEventEndNotificationCustomResponse::triggeredEventId = triggeredEventId;
		_p->_ns1__GetCasinoChallangeEventEndNotificationCustomResponse::totalAwardAmount = totalAwardAmount;
		_p->_ns1__GetCasinoChallangeEventEndNotificationCustomResponse::isFiveMinuteWindow = isFiveMinuteWindow;
		_p->_ns1__GetCasinoChallangeEventEndNotificationCustomResponse::customEndScreen = customEndScreen;
	}
	return _p;
}

inline int soap_write__ns1__GetCasinoChallangeEventEndNotificationCustomResponse(struct soap *soap, _ns1__GetCasinoChallangeEventEndNotificationCustomResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCasinoChallangeEventEndNotificationCustomResponse", p->soap_type() == SOAP_TYPE__ns1__GetCasinoChallangeEventEndNotificationCustomResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetCasinoChallangeEventEndNotificationCustomResponse(struct soap *soap, const char *URL, _ns1__GetCasinoChallangeEventEndNotificationCustomResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCasinoChallangeEventEndNotificationCustomResponse", p->soap_type() == SOAP_TYPE__ns1__GetCasinoChallangeEventEndNotificationCustomResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetCasinoChallangeEventEndNotificationCustomResponse(struct soap *soap, const char *URL, _ns1__GetCasinoChallangeEventEndNotificationCustomResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCasinoChallangeEventEndNotificationCustomResponse", p->soap_type() == SOAP_TYPE__ns1__GetCasinoChallangeEventEndNotificationCustomResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetCasinoChallangeEventEndNotificationCustomResponse * SOAP_FMAC4 soap_get__ns1__GetCasinoChallangeEventEndNotificationCustomResponse(struct soap*, _ns1__GetCasinoChallangeEventEndNotificationCustomResponse *, const char*, const char*);

inline int soap_read__ns1__GetCasinoChallangeEventEndNotificationCustomResponse(struct soap *soap, _ns1__GetCasinoChallangeEventEndNotificationCustomResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetCasinoChallangeEventEndNotificationCustomResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetCasinoChallangeEventEndNotificationCustomResponse(struct soap *soap, const char *URL, _ns1__GetCasinoChallangeEventEndNotificationCustomResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetCasinoChallangeEventEndNotificationCustomResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetCasinoChallangeEventEndNotificationCustomResponse(struct soap *soap, _ns1__GetCasinoChallangeEventEndNotificationCustomResponse *p)
{
	if (soap_read__ns1__GetCasinoChallangeEventEndNotificationCustomResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetCasinoChallangeEventEndNotificationCustom_DEFINED
#define SOAP_TYPE__ns1__GetCasinoChallangeEventEndNotificationCustom_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetCasinoChallangeEventEndNotificationCustom(struct soap*, const char*, int, const _ns1__GetCasinoChallangeEventEndNotificationCustom *, const char*);
SOAP_FMAC3 _ns1__GetCasinoChallangeEventEndNotificationCustom * SOAP_FMAC4 soap_in__ns1__GetCasinoChallangeEventEndNotificationCustom(struct soap*, const char*, _ns1__GetCasinoChallangeEventEndNotificationCustom *, const char*);
SOAP_FMAC1 _ns1__GetCasinoChallangeEventEndNotificationCustom * SOAP_FMAC2 soap_instantiate__ns1__GetCasinoChallangeEventEndNotificationCustom(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetCasinoChallangeEventEndNotificationCustom * soap_new__ns1__GetCasinoChallangeEventEndNotificationCustom(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetCasinoChallangeEventEndNotificationCustom(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetCasinoChallangeEventEndNotificationCustom * soap_new_req__ns1__GetCasinoChallangeEventEndNotificationCustom(
	struct soap *soap)
{
	_ns1__GetCasinoChallangeEventEndNotificationCustom *_p = soap_new__ns1__GetCasinoChallangeEventEndNotificationCustom(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetCasinoChallangeEventEndNotificationCustom * soap_new_set__ns1__GetCasinoChallangeEventEndNotificationCustom(
	struct soap *soap,
	xsd__base64Binary *lastTimeStamp,
	int *ID,
	int *slotmastID,
	char *ocr)
{
	_ns1__GetCasinoChallangeEventEndNotificationCustom *_p = soap_new__ns1__GetCasinoChallangeEventEndNotificationCustom(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetCasinoChallangeEventEndNotificationCustom::lastTimeStamp = lastTimeStamp;
		_p->_ns1__GetCasinoChallangeEventEndNotificationCustom::ID = ID;
		_p->_ns1__GetCasinoChallangeEventEndNotificationCustom::slotmastID = slotmastID;
		_p->_ns1__GetCasinoChallangeEventEndNotificationCustom::ocr = ocr;
	}
	return _p;
}

inline int soap_write__ns1__GetCasinoChallangeEventEndNotificationCustom(struct soap *soap, _ns1__GetCasinoChallangeEventEndNotificationCustom const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCasinoChallangeEventEndNotificationCustom", p->soap_type() == SOAP_TYPE__ns1__GetCasinoChallangeEventEndNotificationCustom ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetCasinoChallangeEventEndNotificationCustom(struct soap *soap, const char *URL, _ns1__GetCasinoChallangeEventEndNotificationCustom const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCasinoChallangeEventEndNotificationCustom", p->soap_type() == SOAP_TYPE__ns1__GetCasinoChallangeEventEndNotificationCustom ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetCasinoChallangeEventEndNotificationCustom(struct soap *soap, const char *URL, _ns1__GetCasinoChallangeEventEndNotificationCustom const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCasinoChallangeEventEndNotificationCustom", p->soap_type() == SOAP_TYPE__ns1__GetCasinoChallangeEventEndNotificationCustom ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetCasinoChallangeEventEndNotificationCustom * SOAP_FMAC4 soap_get__ns1__GetCasinoChallangeEventEndNotificationCustom(struct soap*, _ns1__GetCasinoChallangeEventEndNotificationCustom *, const char*, const char*);

inline int soap_read__ns1__GetCasinoChallangeEventEndNotificationCustom(struct soap *soap, _ns1__GetCasinoChallangeEventEndNotificationCustom *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetCasinoChallangeEventEndNotificationCustom(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetCasinoChallangeEventEndNotificationCustom(struct soap *soap, const char *URL, _ns1__GetCasinoChallangeEventEndNotificationCustom *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetCasinoChallangeEventEndNotificationCustom(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetCasinoChallangeEventEndNotificationCustom(struct soap *soap, _ns1__GetCasinoChallangeEventEndNotificationCustom *p)
{
	if (soap_read__ns1__GetCasinoChallangeEventEndNotificationCustom(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetCasinoChallangeIncrementNotificationResponse_DEFINED
#define SOAP_TYPE__ns1__GetCasinoChallangeIncrementNotificationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetCasinoChallangeIncrementNotificationResponse(struct soap*, const char*, int, const _ns1__GetCasinoChallangeIncrementNotificationResponse *, const char*);
SOAP_FMAC3 _ns1__GetCasinoChallangeIncrementNotificationResponse * SOAP_FMAC4 soap_in__ns1__GetCasinoChallangeIncrementNotificationResponse(struct soap*, const char*, _ns1__GetCasinoChallangeIncrementNotificationResponse *, const char*);
SOAP_FMAC1 _ns1__GetCasinoChallangeIncrementNotificationResponse * SOAP_FMAC2 soap_instantiate__ns1__GetCasinoChallangeIncrementNotificationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetCasinoChallangeIncrementNotificationResponse * soap_new__ns1__GetCasinoChallangeIncrementNotificationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetCasinoChallangeIncrementNotificationResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetCasinoChallangeIncrementNotificationResponse * soap_new_req__ns1__GetCasinoChallangeIncrementNotificationResponse(
	struct soap *soap)
{
	_ns1__GetCasinoChallangeIncrementNotificationResponse *_p = soap_new__ns1__GetCasinoChallangeIncrementNotificationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetCasinoChallangeIncrementNotificationResponse * soap_new_set__ns1__GetCasinoChallangeIncrementNotificationResponse(
	struct soap *soap,
	bool *GetCasinoChallangeIncrementNotificationResult,
	int *eventId,
	int *triggeredEventId,
	double *currentPercentage,
	double *nextGoalPercentage,
	int *currentGoalLevel)
{
	_ns1__GetCasinoChallangeIncrementNotificationResponse *_p = soap_new__ns1__GetCasinoChallangeIncrementNotificationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetCasinoChallangeIncrementNotificationResponse::GetCasinoChallangeIncrementNotificationResult = GetCasinoChallangeIncrementNotificationResult;
		_p->_ns1__GetCasinoChallangeIncrementNotificationResponse::eventId = eventId;
		_p->_ns1__GetCasinoChallangeIncrementNotificationResponse::triggeredEventId = triggeredEventId;
		_p->_ns1__GetCasinoChallangeIncrementNotificationResponse::currentPercentage = currentPercentage;
		_p->_ns1__GetCasinoChallangeIncrementNotificationResponse::nextGoalPercentage = nextGoalPercentage;
		_p->_ns1__GetCasinoChallangeIncrementNotificationResponse::currentGoalLevel = currentGoalLevel;
	}
	return _p;
}

inline int soap_write__ns1__GetCasinoChallangeIncrementNotificationResponse(struct soap *soap, _ns1__GetCasinoChallangeIncrementNotificationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCasinoChallangeIncrementNotificationResponse", p->soap_type() == SOAP_TYPE__ns1__GetCasinoChallangeIncrementNotificationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetCasinoChallangeIncrementNotificationResponse(struct soap *soap, const char *URL, _ns1__GetCasinoChallangeIncrementNotificationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCasinoChallangeIncrementNotificationResponse", p->soap_type() == SOAP_TYPE__ns1__GetCasinoChallangeIncrementNotificationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetCasinoChallangeIncrementNotificationResponse(struct soap *soap, const char *URL, _ns1__GetCasinoChallangeIncrementNotificationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCasinoChallangeIncrementNotificationResponse", p->soap_type() == SOAP_TYPE__ns1__GetCasinoChallangeIncrementNotificationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetCasinoChallangeIncrementNotificationResponse * SOAP_FMAC4 soap_get__ns1__GetCasinoChallangeIncrementNotificationResponse(struct soap*, _ns1__GetCasinoChallangeIncrementNotificationResponse *, const char*, const char*);

inline int soap_read__ns1__GetCasinoChallangeIncrementNotificationResponse(struct soap *soap, _ns1__GetCasinoChallangeIncrementNotificationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetCasinoChallangeIncrementNotificationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetCasinoChallangeIncrementNotificationResponse(struct soap *soap, const char *URL, _ns1__GetCasinoChallangeIncrementNotificationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetCasinoChallangeIncrementNotificationResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetCasinoChallangeIncrementNotificationResponse(struct soap *soap, _ns1__GetCasinoChallangeIncrementNotificationResponse *p)
{
	if (soap_read__ns1__GetCasinoChallangeIncrementNotificationResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetCasinoChallangeIncrementNotification_DEFINED
#define SOAP_TYPE__ns1__GetCasinoChallangeIncrementNotification_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetCasinoChallangeIncrementNotification(struct soap*, const char*, int, const _ns1__GetCasinoChallangeIncrementNotification *, const char*);
SOAP_FMAC3 _ns1__GetCasinoChallangeIncrementNotification * SOAP_FMAC4 soap_in__ns1__GetCasinoChallangeIncrementNotification(struct soap*, const char*, _ns1__GetCasinoChallangeIncrementNotification *, const char*);
SOAP_FMAC1 _ns1__GetCasinoChallangeIncrementNotification * SOAP_FMAC2 soap_instantiate__ns1__GetCasinoChallangeIncrementNotification(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetCasinoChallangeIncrementNotification * soap_new__ns1__GetCasinoChallangeIncrementNotification(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetCasinoChallangeIncrementNotification(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetCasinoChallangeIncrementNotification * soap_new_req__ns1__GetCasinoChallangeIncrementNotification(
	struct soap *soap)
{
	_ns1__GetCasinoChallangeIncrementNotification *_p = soap_new__ns1__GetCasinoChallangeIncrementNotification(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetCasinoChallangeIncrementNotification * soap_new_set__ns1__GetCasinoChallangeIncrementNotification(
	struct soap *soap,
	xsd__base64Binary *lastTimeStamp,
	int *ID,
	int *slotmastID,
	char *ocr)
{
	_ns1__GetCasinoChallangeIncrementNotification *_p = soap_new__ns1__GetCasinoChallangeIncrementNotification(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetCasinoChallangeIncrementNotification::lastTimeStamp = lastTimeStamp;
		_p->_ns1__GetCasinoChallangeIncrementNotification::ID = ID;
		_p->_ns1__GetCasinoChallangeIncrementNotification::slotmastID = slotmastID;
		_p->_ns1__GetCasinoChallangeIncrementNotification::ocr = ocr;
	}
	return _p;
}

inline int soap_write__ns1__GetCasinoChallangeIncrementNotification(struct soap *soap, _ns1__GetCasinoChallangeIncrementNotification const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCasinoChallangeIncrementNotification", p->soap_type() == SOAP_TYPE__ns1__GetCasinoChallangeIncrementNotification ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetCasinoChallangeIncrementNotification(struct soap *soap, const char *URL, _ns1__GetCasinoChallangeIncrementNotification const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCasinoChallangeIncrementNotification", p->soap_type() == SOAP_TYPE__ns1__GetCasinoChallangeIncrementNotification ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetCasinoChallangeIncrementNotification(struct soap *soap, const char *URL, _ns1__GetCasinoChallangeIncrementNotification const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCasinoChallangeIncrementNotification", p->soap_type() == SOAP_TYPE__ns1__GetCasinoChallangeIncrementNotification ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetCasinoChallangeIncrementNotification * SOAP_FMAC4 soap_get__ns1__GetCasinoChallangeIncrementNotification(struct soap*, _ns1__GetCasinoChallangeIncrementNotification *, const char*, const char*);

inline int soap_read__ns1__GetCasinoChallangeIncrementNotification(struct soap *soap, _ns1__GetCasinoChallangeIncrementNotification *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetCasinoChallangeIncrementNotification(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetCasinoChallangeIncrementNotification(struct soap *soap, const char *URL, _ns1__GetCasinoChallangeIncrementNotification *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetCasinoChallangeIncrementNotification(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetCasinoChallangeIncrementNotification(struct soap *soap, _ns1__GetCasinoChallangeIncrementNotification *p)
{
	if (soap_read__ns1__GetCasinoChallangeIncrementNotification(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetCasinoChallengeTriggeredEventNotificationCustomResponse_DEFINED
#define SOAP_TYPE__ns1__GetCasinoChallengeTriggeredEventNotificationCustomResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetCasinoChallengeTriggeredEventNotificationCustomResponse(struct soap*, const char*, int, const _ns1__GetCasinoChallengeTriggeredEventNotificationCustomResponse *, const char*);
SOAP_FMAC3 _ns1__GetCasinoChallengeTriggeredEventNotificationCustomResponse * SOAP_FMAC4 soap_in__ns1__GetCasinoChallengeTriggeredEventNotificationCustomResponse(struct soap*, const char*, _ns1__GetCasinoChallengeTriggeredEventNotificationCustomResponse *, const char*);
SOAP_FMAC1 _ns1__GetCasinoChallengeTriggeredEventNotificationCustomResponse * SOAP_FMAC2 soap_instantiate__ns1__GetCasinoChallengeTriggeredEventNotificationCustomResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetCasinoChallengeTriggeredEventNotificationCustomResponse * soap_new__ns1__GetCasinoChallengeTriggeredEventNotificationCustomResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetCasinoChallengeTriggeredEventNotificationCustomResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetCasinoChallengeTriggeredEventNotificationCustomResponse * soap_new_req__ns1__GetCasinoChallengeTriggeredEventNotificationCustomResponse(
	struct soap *soap)
{
	_ns1__GetCasinoChallengeTriggeredEventNotificationCustomResponse *_p = soap_new__ns1__GetCasinoChallengeTriggeredEventNotificationCustomResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetCasinoChallengeTriggeredEventNotificationCustomResponse * soap_new_set__ns1__GetCasinoChallengeTriggeredEventNotificationCustomResponse(
	struct soap *soap,
	bool *GetCasinoChallengeTriggeredEventNotificationCustomResult,
	int *eventId,
	int *triggeredEventId,
	double *initialPercentage,
	double *nextGoalPercentage,
	bool *showStart,
	int *currentGoalLevel,
	int *totalNumGoals,
	ns3__CustomMessageScreen *customWelcomeScreen)
{
	_ns1__GetCasinoChallengeTriggeredEventNotificationCustomResponse *_p = soap_new__ns1__GetCasinoChallengeTriggeredEventNotificationCustomResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetCasinoChallengeTriggeredEventNotificationCustomResponse::GetCasinoChallengeTriggeredEventNotificationCustomResult = GetCasinoChallengeTriggeredEventNotificationCustomResult;
		_p->_ns1__GetCasinoChallengeTriggeredEventNotificationCustomResponse::eventId = eventId;
		_p->_ns1__GetCasinoChallengeTriggeredEventNotificationCustomResponse::triggeredEventId = triggeredEventId;
		_p->_ns1__GetCasinoChallengeTriggeredEventNotificationCustomResponse::initialPercentage = initialPercentage;
		_p->_ns1__GetCasinoChallengeTriggeredEventNotificationCustomResponse::nextGoalPercentage = nextGoalPercentage;
		_p->_ns1__GetCasinoChallengeTriggeredEventNotificationCustomResponse::showStart = showStart;
		_p->_ns1__GetCasinoChallengeTriggeredEventNotificationCustomResponse::currentGoalLevel = currentGoalLevel;
		_p->_ns1__GetCasinoChallengeTriggeredEventNotificationCustomResponse::totalNumGoals = totalNumGoals;
		_p->_ns1__GetCasinoChallengeTriggeredEventNotificationCustomResponse::customWelcomeScreen = customWelcomeScreen;
	}
	return _p;
}

inline int soap_write__ns1__GetCasinoChallengeTriggeredEventNotificationCustomResponse(struct soap *soap, _ns1__GetCasinoChallengeTriggeredEventNotificationCustomResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCasinoChallengeTriggeredEventNotificationCustomResponse", p->soap_type() == SOAP_TYPE__ns1__GetCasinoChallengeTriggeredEventNotificationCustomResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetCasinoChallengeTriggeredEventNotificationCustomResponse(struct soap *soap, const char *URL, _ns1__GetCasinoChallengeTriggeredEventNotificationCustomResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCasinoChallengeTriggeredEventNotificationCustomResponse", p->soap_type() == SOAP_TYPE__ns1__GetCasinoChallengeTriggeredEventNotificationCustomResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetCasinoChallengeTriggeredEventNotificationCustomResponse(struct soap *soap, const char *URL, _ns1__GetCasinoChallengeTriggeredEventNotificationCustomResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCasinoChallengeTriggeredEventNotificationCustomResponse", p->soap_type() == SOAP_TYPE__ns1__GetCasinoChallengeTriggeredEventNotificationCustomResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetCasinoChallengeTriggeredEventNotificationCustomResponse * SOAP_FMAC4 soap_get__ns1__GetCasinoChallengeTriggeredEventNotificationCustomResponse(struct soap*, _ns1__GetCasinoChallengeTriggeredEventNotificationCustomResponse *, const char*, const char*);

inline int soap_read__ns1__GetCasinoChallengeTriggeredEventNotificationCustomResponse(struct soap *soap, _ns1__GetCasinoChallengeTriggeredEventNotificationCustomResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetCasinoChallengeTriggeredEventNotificationCustomResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetCasinoChallengeTriggeredEventNotificationCustomResponse(struct soap *soap, const char *URL, _ns1__GetCasinoChallengeTriggeredEventNotificationCustomResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetCasinoChallengeTriggeredEventNotificationCustomResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetCasinoChallengeTriggeredEventNotificationCustomResponse(struct soap *soap, _ns1__GetCasinoChallengeTriggeredEventNotificationCustomResponse *p)
{
	if (soap_read__ns1__GetCasinoChallengeTriggeredEventNotificationCustomResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetCasinoChallengeTriggeredEventNotificationCustom_DEFINED
#define SOAP_TYPE__ns1__GetCasinoChallengeTriggeredEventNotificationCustom_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetCasinoChallengeTriggeredEventNotificationCustom(struct soap*, const char*, int, const _ns1__GetCasinoChallengeTriggeredEventNotificationCustom *, const char*);
SOAP_FMAC3 _ns1__GetCasinoChallengeTriggeredEventNotificationCustom * SOAP_FMAC4 soap_in__ns1__GetCasinoChallengeTriggeredEventNotificationCustom(struct soap*, const char*, _ns1__GetCasinoChallengeTriggeredEventNotificationCustom *, const char*);
SOAP_FMAC1 _ns1__GetCasinoChallengeTriggeredEventNotificationCustom * SOAP_FMAC2 soap_instantiate__ns1__GetCasinoChallengeTriggeredEventNotificationCustom(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetCasinoChallengeTriggeredEventNotificationCustom * soap_new__ns1__GetCasinoChallengeTriggeredEventNotificationCustom(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetCasinoChallengeTriggeredEventNotificationCustom(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetCasinoChallengeTriggeredEventNotificationCustom * soap_new_req__ns1__GetCasinoChallengeTriggeredEventNotificationCustom(
	struct soap *soap)
{
	_ns1__GetCasinoChallengeTriggeredEventNotificationCustom *_p = soap_new__ns1__GetCasinoChallengeTriggeredEventNotificationCustom(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetCasinoChallengeTriggeredEventNotificationCustom * soap_new_set__ns1__GetCasinoChallengeTriggeredEventNotificationCustom(
	struct soap *soap,
	xsd__base64Binary *lastTimeStamp,
	int *ID,
	int *slotmastID,
	char *ocr)
{
	_ns1__GetCasinoChallengeTriggeredEventNotificationCustom *_p = soap_new__ns1__GetCasinoChallengeTriggeredEventNotificationCustom(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetCasinoChallengeTriggeredEventNotificationCustom::lastTimeStamp = lastTimeStamp;
		_p->_ns1__GetCasinoChallengeTriggeredEventNotificationCustom::ID = ID;
		_p->_ns1__GetCasinoChallengeTriggeredEventNotificationCustom::slotmastID = slotmastID;
		_p->_ns1__GetCasinoChallengeTriggeredEventNotificationCustom::ocr = ocr;
	}
	return _p;
}

inline int soap_write__ns1__GetCasinoChallengeTriggeredEventNotificationCustom(struct soap *soap, _ns1__GetCasinoChallengeTriggeredEventNotificationCustom const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCasinoChallengeTriggeredEventNotificationCustom", p->soap_type() == SOAP_TYPE__ns1__GetCasinoChallengeTriggeredEventNotificationCustom ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetCasinoChallengeTriggeredEventNotificationCustom(struct soap *soap, const char *URL, _ns1__GetCasinoChallengeTriggeredEventNotificationCustom const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCasinoChallengeTriggeredEventNotificationCustom", p->soap_type() == SOAP_TYPE__ns1__GetCasinoChallengeTriggeredEventNotificationCustom ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetCasinoChallengeTriggeredEventNotificationCustom(struct soap *soap, const char *URL, _ns1__GetCasinoChallengeTriggeredEventNotificationCustom const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCasinoChallengeTriggeredEventNotificationCustom", p->soap_type() == SOAP_TYPE__ns1__GetCasinoChallengeTriggeredEventNotificationCustom ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetCasinoChallengeTriggeredEventNotificationCustom * SOAP_FMAC4 soap_get__ns1__GetCasinoChallengeTriggeredEventNotificationCustom(struct soap*, _ns1__GetCasinoChallengeTriggeredEventNotificationCustom *, const char*, const char*);

inline int soap_read__ns1__GetCasinoChallengeTriggeredEventNotificationCustom(struct soap *soap, _ns1__GetCasinoChallengeTriggeredEventNotificationCustom *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetCasinoChallengeTriggeredEventNotificationCustom(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetCasinoChallengeTriggeredEventNotificationCustom(struct soap *soap, const char *URL, _ns1__GetCasinoChallengeTriggeredEventNotificationCustom *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetCasinoChallengeTriggeredEventNotificationCustom(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetCasinoChallengeTriggeredEventNotificationCustom(struct soap *soap, _ns1__GetCasinoChallengeTriggeredEventNotificationCustom *p)
{
	if (soap_read__ns1__GetCasinoChallengeTriggeredEventNotificationCustom(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetEventTriggerNotificationResponse_DEFINED
#define SOAP_TYPE__ns1__GetEventTriggerNotificationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetEventTriggerNotificationResponse(struct soap*, const char*, int, const _ns1__GetEventTriggerNotificationResponse *, const char*);
SOAP_FMAC3 _ns1__GetEventTriggerNotificationResponse * SOAP_FMAC4 soap_in__ns1__GetEventTriggerNotificationResponse(struct soap*, const char*, _ns1__GetEventTriggerNotificationResponse *, const char*);
SOAP_FMAC1 _ns1__GetEventTriggerNotificationResponse * SOAP_FMAC2 soap_instantiate__ns1__GetEventTriggerNotificationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetEventTriggerNotificationResponse * soap_new__ns1__GetEventTriggerNotificationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetEventTriggerNotificationResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetEventTriggerNotificationResponse * soap_new_req__ns1__GetEventTriggerNotificationResponse(
	struct soap *soap)
{
	_ns1__GetEventTriggerNotificationResponse *_p = soap_new__ns1__GetEventTriggerNotificationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetEventTriggerNotificationResponse * soap_new_set__ns1__GetEventTriggerNotificationResponse(
	struct soap *soap,
	bool *GetEventTriggerNotificationResult,
	int *eventId,
	int *lastTriggeredEventId)
{
	_ns1__GetEventTriggerNotificationResponse *_p = soap_new__ns1__GetEventTriggerNotificationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetEventTriggerNotificationResponse::GetEventTriggerNotificationResult = GetEventTriggerNotificationResult;
		_p->_ns1__GetEventTriggerNotificationResponse::eventId = eventId;
		_p->_ns1__GetEventTriggerNotificationResponse::lastTriggeredEventId = lastTriggeredEventId;
	}
	return _p;
}

inline int soap_write__ns1__GetEventTriggerNotificationResponse(struct soap *soap, _ns1__GetEventTriggerNotificationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetEventTriggerNotificationResponse", p->soap_type() == SOAP_TYPE__ns1__GetEventTriggerNotificationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetEventTriggerNotificationResponse(struct soap *soap, const char *URL, _ns1__GetEventTriggerNotificationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetEventTriggerNotificationResponse", p->soap_type() == SOAP_TYPE__ns1__GetEventTriggerNotificationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetEventTriggerNotificationResponse(struct soap *soap, const char *URL, _ns1__GetEventTriggerNotificationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetEventTriggerNotificationResponse", p->soap_type() == SOAP_TYPE__ns1__GetEventTriggerNotificationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetEventTriggerNotificationResponse * SOAP_FMAC4 soap_get__ns1__GetEventTriggerNotificationResponse(struct soap*, _ns1__GetEventTriggerNotificationResponse *, const char*, const char*);

inline int soap_read__ns1__GetEventTriggerNotificationResponse(struct soap *soap, _ns1__GetEventTriggerNotificationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetEventTriggerNotificationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetEventTriggerNotificationResponse(struct soap *soap, const char *URL, _ns1__GetEventTriggerNotificationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetEventTriggerNotificationResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetEventTriggerNotificationResponse(struct soap *soap, _ns1__GetEventTriggerNotificationResponse *p)
{
	if (soap_read__ns1__GetEventTriggerNotificationResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetEventTriggerNotification_DEFINED
#define SOAP_TYPE__ns1__GetEventTriggerNotification_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetEventTriggerNotification(struct soap*, const char*, int, const _ns1__GetEventTriggerNotification *, const char*);
SOAP_FMAC3 _ns1__GetEventTriggerNotification * SOAP_FMAC4 soap_in__ns1__GetEventTriggerNotification(struct soap*, const char*, _ns1__GetEventTriggerNotification *, const char*);
SOAP_FMAC1 _ns1__GetEventTriggerNotification * SOAP_FMAC2 soap_instantiate__ns1__GetEventTriggerNotification(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetEventTriggerNotification * soap_new__ns1__GetEventTriggerNotification(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetEventTriggerNotification(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetEventTriggerNotification * soap_new_req__ns1__GetEventTriggerNotification(
	struct soap *soap)
{
	_ns1__GetEventTriggerNotification *_p = soap_new__ns1__GetEventTriggerNotification(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetEventTriggerNotification * soap_new_set__ns1__GetEventTriggerNotification(
	struct soap *soap,
	xsd__base64Binary *lastTimeStamp,
	int *ID,
	int *slotmastID,
	char *ocr)
{
	_ns1__GetEventTriggerNotification *_p = soap_new__ns1__GetEventTriggerNotification(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetEventTriggerNotification::lastTimeStamp = lastTimeStamp;
		_p->_ns1__GetEventTriggerNotification::ID = ID;
		_p->_ns1__GetEventTriggerNotification::slotmastID = slotmastID;
		_p->_ns1__GetEventTriggerNotification::ocr = ocr;
	}
	return _p;
}

inline int soap_write__ns1__GetEventTriggerNotification(struct soap *soap, _ns1__GetEventTriggerNotification const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetEventTriggerNotification", p->soap_type() == SOAP_TYPE__ns1__GetEventTriggerNotification ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetEventTriggerNotification(struct soap *soap, const char *URL, _ns1__GetEventTriggerNotification const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetEventTriggerNotification", p->soap_type() == SOAP_TYPE__ns1__GetEventTriggerNotification ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetEventTriggerNotification(struct soap *soap, const char *URL, _ns1__GetEventTriggerNotification const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetEventTriggerNotification", p->soap_type() == SOAP_TYPE__ns1__GetEventTriggerNotification ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetEventTriggerNotification * SOAP_FMAC4 soap_get__ns1__GetEventTriggerNotification(struct soap*, _ns1__GetEventTriggerNotification *, const char*, const char*);

inline int soap_read__ns1__GetEventTriggerNotification(struct soap *soap, _ns1__GetEventTriggerNotification *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetEventTriggerNotification(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetEventTriggerNotification(struct soap *soap, const char *URL, _ns1__GetEventTriggerNotification *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetEventTriggerNotification(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetEventTriggerNotification(struct soap *soap, _ns1__GetEventTriggerNotification *p)
{
	if (soap_read__ns1__GetEventTriggerNotification(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SendBlobToThirdPartyResponse_DEFINED
#define SOAP_TYPE__ns1__SendBlobToThirdPartyResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SendBlobToThirdPartyResponse(struct soap*, const char*, int, const _ns1__SendBlobToThirdPartyResponse *, const char*);
SOAP_FMAC3 _ns1__SendBlobToThirdPartyResponse * SOAP_FMAC4 soap_in__ns1__SendBlobToThirdPartyResponse(struct soap*, const char*, _ns1__SendBlobToThirdPartyResponse *, const char*);
SOAP_FMAC1 _ns1__SendBlobToThirdPartyResponse * SOAP_FMAC2 soap_instantiate__ns1__SendBlobToThirdPartyResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SendBlobToThirdPartyResponse * soap_new__ns1__SendBlobToThirdPartyResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SendBlobToThirdPartyResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__SendBlobToThirdPartyResponse * soap_new_req__ns1__SendBlobToThirdPartyResponse(
	struct soap *soap)
{
	_ns1__SendBlobToThirdPartyResponse *_p = soap_new__ns1__SendBlobToThirdPartyResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SendBlobToThirdPartyResponse * soap_new_set__ns1__SendBlobToThirdPartyResponse(
	struct soap *soap,
	bool *SendBlobToThirdPartyResult)
{
	_ns1__SendBlobToThirdPartyResponse *_p = soap_new__ns1__SendBlobToThirdPartyResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SendBlobToThirdPartyResponse::SendBlobToThirdPartyResult = SendBlobToThirdPartyResult;
	}
	return _p;
}

inline int soap_write__ns1__SendBlobToThirdPartyResponse(struct soap *soap, _ns1__SendBlobToThirdPartyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SendBlobToThirdPartyResponse", p->soap_type() == SOAP_TYPE__ns1__SendBlobToThirdPartyResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__SendBlobToThirdPartyResponse(struct soap *soap, const char *URL, _ns1__SendBlobToThirdPartyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SendBlobToThirdPartyResponse", p->soap_type() == SOAP_TYPE__ns1__SendBlobToThirdPartyResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__SendBlobToThirdPartyResponse(struct soap *soap, const char *URL, _ns1__SendBlobToThirdPartyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SendBlobToThirdPartyResponse", p->soap_type() == SOAP_TYPE__ns1__SendBlobToThirdPartyResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SendBlobToThirdPartyResponse * SOAP_FMAC4 soap_get__ns1__SendBlobToThirdPartyResponse(struct soap*, _ns1__SendBlobToThirdPartyResponse *, const char*, const char*);

inline int soap_read__ns1__SendBlobToThirdPartyResponse(struct soap *soap, _ns1__SendBlobToThirdPartyResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SendBlobToThirdPartyResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__SendBlobToThirdPartyResponse(struct soap *soap, const char *URL, _ns1__SendBlobToThirdPartyResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__SendBlobToThirdPartyResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__SendBlobToThirdPartyResponse(struct soap *soap, _ns1__SendBlobToThirdPartyResponse *p)
{
	if (soap_read__ns1__SendBlobToThirdPartyResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SendBlobToThirdParty_DEFINED
#define SOAP_TYPE__ns1__SendBlobToThirdParty_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SendBlobToThirdParty(struct soap*, const char*, int, const _ns1__SendBlobToThirdParty *, const char*);
SOAP_FMAC3 _ns1__SendBlobToThirdParty * SOAP_FMAC4 soap_in__ns1__SendBlobToThirdParty(struct soap*, const char*, _ns1__SendBlobToThirdParty *, const char*);
SOAP_FMAC1 _ns1__SendBlobToThirdParty * SOAP_FMAC2 soap_instantiate__ns1__SendBlobToThirdParty(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SendBlobToThirdParty * soap_new__ns1__SendBlobToThirdParty(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SendBlobToThirdParty(soap, n, NULL, NULL, NULL);
}

inline _ns1__SendBlobToThirdParty * soap_new_req__ns1__SendBlobToThirdParty(
	struct soap *soap)
{
	_ns1__SendBlobToThirdParty *_p = soap_new__ns1__SendBlobToThirdParty(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SendBlobToThirdParty * soap_new_set__ns1__SendBlobToThirdParty(
	struct soap *soap,
	char *sessionId,
	int *slotmastId,
	xsd__base64Binary *blob)
{
	_ns1__SendBlobToThirdParty *_p = soap_new__ns1__SendBlobToThirdParty(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SendBlobToThirdParty::sessionId = sessionId;
		_p->_ns1__SendBlobToThirdParty::slotmastId = slotmastId;
		_p->_ns1__SendBlobToThirdParty::blob = blob;
	}
	return _p;
}

inline int soap_write__ns1__SendBlobToThirdParty(struct soap *soap, _ns1__SendBlobToThirdParty const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SendBlobToThirdParty", p->soap_type() == SOAP_TYPE__ns1__SendBlobToThirdParty ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__SendBlobToThirdParty(struct soap *soap, const char *URL, _ns1__SendBlobToThirdParty const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SendBlobToThirdParty", p->soap_type() == SOAP_TYPE__ns1__SendBlobToThirdParty ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__SendBlobToThirdParty(struct soap *soap, const char *URL, _ns1__SendBlobToThirdParty const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SendBlobToThirdParty", p->soap_type() == SOAP_TYPE__ns1__SendBlobToThirdParty ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SendBlobToThirdParty * SOAP_FMAC4 soap_get__ns1__SendBlobToThirdParty(struct soap*, _ns1__SendBlobToThirdParty *, const char*, const char*);

inline int soap_read__ns1__SendBlobToThirdParty(struct soap *soap, _ns1__SendBlobToThirdParty *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SendBlobToThirdParty(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__SendBlobToThirdParty(struct soap *soap, const char *URL, _ns1__SendBlobToThirdParty *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__SendBlobToThirdParty(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__SendBlobToThirdParty(struct soap *soap, _ns1__SendBlobToThirdParty *p)
{
	if (soap_read__ns1__SendBlobToThirdParty(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetThirdPartyBlobResponse_DEFINED
#define SOAP_TYPE__ns1__GetThirdPartyBlobResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetThirdPartyBlobResponse(struct soap*, const char*, int, const _ns1__GetThirdPartyBlobResponse *, const char*);
SOAP_FMAC3 _ns1__GetThirdPartyBlobResponse * SOAP_FMAC4 soap_in__ns1__GetThirdPartyBlobResponse(struct soap*, const char*, _ns1__GetThirdPartyBlobResponse *, const char*);
SOAP_FMAC1 _ns1__GetThirdPartyBlobResponse * SOAP_FMAC2 soap_instantiate__ns1__GetThirdPartyBlobResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetThirdPartyBlobResponse * soap_new__ns1__GetThirdPartyBlobResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetThirdPartyBlobResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetThirdPartyBlobResponse * soap_new_req__ns1__GetThirdPartyBlobResponse(
	struct soap *soap)
{
	_ns1__GetThirdPartyBlobResponse *_p = soap_new__ns1__GetThirdPartyBlobResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetThirdPartyBlobResponse * soap_new_set__ns1__GetThirdPartyBlobResponse(
	struct soap *soap,
	bool *GetThirdPartyBlobResult,
	char *sessionId,
	int *vendorId,
	int *apiNotificationType,
	int *playerType,
	xsd__base64Binary *blob)
{
	_ns1__GetThirdPartyBlobResponse *_p = soap_new__ns1__GetThirdPartyBlobResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetThirdPartyBlobResponse::GetThirdPartyBlobResult = GetThirdPartyBlobResult;
		_p->_ns1__GetThirdPartyBlobResponse::sessionId = sessionId;
		_p->_ns1__GetThirdPartyBlobResponse::vendorId = vendorId;
		_p->_ns1__GetThirdPartyBlobResponse::apiNotificationType = apiNotificationType;
		_p->_ns1__GetThirdPartyBlobResponse::playerType = playerType;
		_p->_ns1__GetThirdPartyBlobResponse::blob = blob;
	}
	return _p;
}

inline int soap_write__ns1__GetThirdPartyBlobResponse(struct soap *soap, _ns1__GetThirdPartyBlobResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetThirdPartyBlobResponse", p->soap_type() == SOAP_TYPE__ns1__GetThirdPartyBlobResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetThirdPartyBlobResponse(struct soap *soap, const char *URL, _ns1__GetThirdPartyBlobResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetThirdPartyBlobResponse", p->soap_type() == SOAP_TYPE__ns1__GetThirdPartyBlobResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetThirdPartyBlobResponse(struct soap *soap, const char *URL, _ns1__GetThirdPartyBlobResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetThirdPartyBlobResponse", p->soap_type() == SOAP_TYPE__ns1__GetThirdPartyBlobResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetThirdPartyBlobResponse * SOAP_FMAC4 soap_get__ns1__GetThirdPartyBlobResponse(struct soap*, _ns1__GetThirdPartyBlobResponse *, const char*, const char*);

inline int soap_read__ns1__GetThirdPartyBlobResponse(struct soap *soap, _ns1__GetThirdPartyBlobResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetThirdPartyBlobResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetThirdPartyBlobResponse(struct soap *soap, const char *URL, _ns1__GetThirdPartyBlobResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetThirdPartyBlobResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetThirdPartyBlobResponse(struct soap *soap, _ns1__GetThirdPartyBlobResponse *p)
{
	if (soap_read__ns1__GetThirdPartyBlobResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetThirdPartyBlob_DEFINED
#define SOAP_TYPE__ns1__GetThirdPartyBlob_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetThirdPartyBlob(struct soap*, const char*, int, const _ns1__GetThirdPartyBlob *, const char*);
SOAP_FMAC3 _ns1__GetThirdPartyBlob * SOAP_FMAC4 soap_in__ns1__GetThirdPartyBlob(struct soap*, const char*, _ns1__GetThirdPartyBlob *, const char*);
SOAP_FMAC1 _ns1__GetThirdPartyBlob * SOAP_FMAC2 soap_instantiate__ns1__GetThirdPartyBlob(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetThirdPartyBlob * soap_new__ns1__GetThirdPartyBlob(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetThirdPartyBlob(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetThirdPartyBlob * soap_new_req__ns1__GetThirdPartyBlob(
	struct soap *soap)
{
	_ns1__GetThirdPartyBlob *_p = soap_new__ns1__GetThirdPartyBlob(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetThirdPartyBlob * soap_new_set__ns1__GetThirdPartyBlob(
	struct soap *soap,
	xsd__base64Binary *lastTimeStamp,
	int *ID,
	int *slotmastID)
{
	_ns1__GetThirdPartyBlob *_p = soap_new__ns1__GetThirdPartyBlob(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetThirdPartyBlob::lastTimeStamp = lastTimeStamp;
		_p->_ns1__GetThirdPartyBlob::ID = ID;
		_p->_ns1__GetThirdPartyBlob::slotmastID = slotmastID;
	}
	return _p;
}

inline int soap_write__ns1__GetThirdPartyBlob(struct soap *soap, _ns1__GetThirdPartyBlob const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetThirdPartyBlob", p->soap_type() == SOAP_TYPE__ns1__GetThirdPartyBlob ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetThirdPartyBlob(struct soap *soap, const char *URL, _ns1__GetThirdPartyBlob const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetThirdPartyBlob", p->soap_type() == SOAP_TYPE__ns1__GetThirdPartyBlob ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetThirdPartyBlob(struct soap *soap, const char *URL, _ns1__GetThirdPartyBlob const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetThirdPartyBlob", p->soap_type() == SOAP_TYPE__ns1__GetThirdPartyBlob ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetThirdPartyBlob * SOAP_FMAC4 soap_get__ns1__GetThirdPartyBlob(struct soap*, _ns1__GetThirdPartyBlob *, const char*, const char*);

inline int soap_read__ns1__GetThirdPartyBlob(struct soap *soap, _ns1__GetThirdPartyBlob *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetThirdPartyBlob(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetThirdPartyBlob(struct soap *soap, const char *URL, _ns1__GetThirdPartyBlob *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetThirdPartyBlob(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetThirdPartyBlob(struct soap *soap, _ns1__GetThirdPartyBlob *p)
{
	if (soap_read__ns1__GetThirdPartyBlob(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ReportSentinelInformation25Response_DEFINED
#define SOAP_TYPE__ns1__ReportSentinelInformation25Response_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ReportSentinelInformation25Response(struct soap*, const char*, int, const _ns1__ReportSentinelInformation25Response *, const char*);
SOAP_FMAC3 _ns1__ReportSentinelInformation25Response * SOAP_FMAC4 soap_in__ns1__ReportSentinelInformation25Response(struct soap*, const char*, _ns1__ReportSentinelInformation25Response *, const char*);
SOAP_FMAC1 _ns1__ReportSentinelInformation25Response * SOAP_FMAC2 soap_instantiate__ns1__ReportSentinelInformation25Response(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ReportSentinelInformation25Response * soap_new__ns1__ReportSentinelInformation25Response(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ReportSentinelInformation25Response(soap, n, NULL, NULL, NULL);
}

inline _ns1__ReportSentinelInformation25Response * soap_new_req__ns1__ReportSentinelInformation25Response(
	struct soap *soap)
{
	_ns1__ReportSentinelInformation25Response *_p = soap_new__ns1__ReportSentinelInformation25Response(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ReportSentinelInformation25Response * soap_new_set__ns1__ReportSentinelInformation25Response(
	struct soap *soap,
	bool *ReportSentinelInformation25Result)
{
	_ns1__ReportSentinelInformation25Response *_p = soap_new__ns1__ReportSentinelInformation25Response(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ReportSentinelInformation25Response::ReportSentinelInformation25Result = ReportSentinelInformation25Result;
	}
	return _p;
}

inline int soap_write__ns1__ReportSentinelInformation25Response(struct soap *soap, _ns1__ReportSentinelInformation25Response const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReportSentinelInformation25Response", p->soap_type() == SOAP_TYPE__ns1__ReportSentinelInformation25Response ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ReportSentinelInformation25Response(struct soap *soap, const char *URL, _ns1__ReportSentinelInformation25Response const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReportSentinelInformation25Response", p->soap_type() == SOAP_TYPE__ns1__ReportSentinelInformation25Response ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ReportSentinelInformation25Response(struct soap *soap, const char *URL, _ns1__ReportSentinelInformation25Response const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReportSentinelInformation25Response", p->soap_type() == SOAP_TYPE__ns1__ReportSentinelInformation25Response ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ReportSentinelInformation25Response * SOAP_FMAC4 soap_get__ns1__ReportSentinelInformation25Response(struct soap*, _ns1__ReportSentinelInformation25Response *, const char*, const char*);

inline int soap_read__ns1__ReportSentinelInformation25Response(struct soap *soap, _ns1__ReportSentinelInformation25Response *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__ReportSentinelInformation25Response(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ReportSentinelInformation25Response(struct soap *soap, const char *URL, _ns1__ReportSentinelInformation25Response *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__ReportSentinelInformation25Response(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__ReportSentinelInformation25Response(struct soap *soap, _ns1__ReportSentinelInformation25Response *p)
{
	if (soap_read__ns1__ReportSentinelInformation25Response(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ReportSentinelInformation25_DEFINED
#define SOAP_TYPE__ns1__ReportSentinelInformation25_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ReportSentinelInformation25(struct soap*, const char*, int, const _ns1__ReportSentinelInformation25 *, const char*);
SOAP_FMAC3 _ns1__ReportSentinelInformation25 * SOAP_FMAC4 soap_in__ns1__ReportSentinelInformation25(struct soap*, const char*, _ns1__ReportSentinelInformation25 *, const char*);
SOAP_FMAC1 _ns1__ReportSentinelInformation25 * SOAP_FMAC2 soap_instantiate__ns1__ReportSentinelInformation25(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ReportSentinelInformation25 * soap_new__ns1__ReportSentinelInformation25(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ReportSentinelInformation25(soap, n, NULL, NULL, NULL);
}

inline _ns1__ReportSentinelInformation25 * soap_new_req__ns1__ReportSentinelInformation25(
	struct soap *soap)
{
	_ns1__ReportSentinelInformation25 *_p = soap_new__ns1__ReportSentinelInformation25(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ReportSentinelInformation25 * soap_new_set__ns1__ReportSentinelInformation25(
	struct soap *soap,
	int *slotMastId,
	char *OSVersion,
	char *EXEVersion,
	char *SkinName,
	int *ExternalBonusType)
{
	_ns1__ReportSentinelInformation25 *_p = soap_new__ns1__ReportSentinelInformation25(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ReportSentinelInformation25::slotMastId = slotMastId;
		_p->_ns1__ReportSentinelInformation25::OSVersion = OSVersion;
		_p->_ns1__ReportSentinelInformation25::EXEVersion = EXEVersion;
		_p->_ns1__ReportSentinelInformation25::SkinName = SkinName;
		_p->_ns1__ReportSentinelInformation25::ExternalBonusType = ExternalBonusType;
	}
	return _p;
}

inline int soap_write__ns1__ReportSentinelInformation25(struct soap *soap, _ns1__ReportSentinelInformation25 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReportSentinelInformation25", p->soap_type() == SOAP_TYPE__ns1__ReportSentinelInformation25 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ReportSentinelInformation25(struct soap *soap, const char *URL, _ns1__ReportSentinelInformation25 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReportSentinelInformation25", p->soap_type() == SOAP_TYPE__ns1__ReportSentinelInformation25 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ReportSentinelInformation25(struct soap *soap, const char *URL, _ns1__ReportSentinelInformation25 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReportSentinelInformation25", p->soap_type() == SOAP_TYPE__ns1__ReportSentinelInformation25 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ReportSentinelInformation25 * SOAP_FMAC4 soap_get__ns1__ReportSentinelInformation25(struct soap*, _ns1__ReportSentinelInformation25 *, const char*, const char*);

inline int soap_read__ns1__ReportSentinelInformation25(struct soap *soap, _ns1__ReportSentinelInformation25 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__ReportSentinelInformation25(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ReportSentinelInformation25(struct soap *soap, const char *URL, _ns1__ReportSentinelInformation25 *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__ReportSentinelInformation25(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__ReportSentinelInformation25(struct soap *soap, _ns1__ReportSentinelInformation25 *p)
{
	if (soap_read__ns1__ReportSentinelInformation25(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ReportSentinelInformationExResponse_DEFINED
#define SOAP_TYPE__ns1__ReportSentinelInformationExResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ReportSentinelInformationExResponse(struct soap*, const char*, int, const _ns1__ReportSentinelInformationExResponse *, const char*);
SOAP_FMAC3 _ns1__ReportSentinelInformationExResponse * SOAP_FMAC4 soap_in__ns1__ReportSentinelInformationExResponse(struct soap*, const char*, _ns1__ReportSentinelInformationExResponse *, const char*);
SOAP_FMAC1 _ns1__ReportSentinelInformationExResponse * SOAP_FMAC2 soap_instantiate__ns1__ReportSentinelInformationExResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ReportSentinelInformationExResponse * soap_new__ns1__ReportSentinelInformationExResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ReportSentinelInformationExResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__ReportSentinelInformationExResponse * soap_new_req__ns1__ReportSentinelInformationExResponse(
	struct soap *soap)
{
	_ns1__ReportSentinelInformationExResponse *_p = soap_new__ns1__ReportSentinelInformationExResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ReportSentinelInformationExResponse * soap_new_set__ns1__ReportSentinelInformationExResponse(
	struct soap *soap,
	bool *ReportSentinelInformationExResult)
{
	_ns1__ReportSentinelInformationExResponse *_p = soap_new__ns1__ReportSentinelInformationExResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ReportSentinelInformationExResponse::ReportSentinelInformationExResult = ReportSentinelInformationExResult;
	}
	return _p;
}

inline int soap_write__ns1__ReportSentinelInformationExResponse(struct soap *soap, _ns1__ReportSentinelInformationExResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReportSentinelInformationExResponse", p->soap_type() == SOAP_TYPE__ns1__ReportSentinelInformationExResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ReportSentinelInformationExResponse(struct soap *soap, const char *URL, _ns1__ReportSentinelInformationExResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReportSentinelInformationExResponse", p->soap_type() == SOAP_TYPE__ns1__ReportSentinelInformationExResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ReportSentinelInformationExResponse(struct soap *soap, const char *URL, _ns1__ReportSentinelInformationExResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReportSentinelInformationExResponse", p->soap_type() == SOAP_TYPE__ns1__ReportSentinelInformationExResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ReportSentinelInformationExResponse * SOAP_FMAC4 soap_get__ns1__ReportSentinelInformationExResponse(struct soap*, _ns1__ReportSentinelInformationExResponse *, const char*, const char*);

inline int soap_read__ns1__ReportSentinelInformationExResponse(struct soap *soap, _ns1__ReportSentinelInformationExResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__ReportSentinelInformationExResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ReportSentinelInformationExResponse(struct soap *soap, const char *URL, _ns1__ReportSentinelInformationExResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__ReportSentinelInformationExResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__ReportSentinelInformationExResponse(struct soap *soap, _ns1__ReportSentinelInformationExResponse *p)
{
	if (soap_read__ns1__ReportSentinelInformationExResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ReportSentinelInformationEx_DEFINED
#define SOAP_TYPE__ns1__ReportSentinelInformationEx_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ReportSentinelInformationEx(struct soap*, const char*, int, const _ns1__ReportSentinelInformationEx *, const char*);
SOAP_FMAC3 _ns1__ReportSentinelInformationEx * SOAP_FMAC4 soap_in__ns1__ReportSentinelInformationEx(struct soap*, const char*, _ns1__ReportSentinelInformationEx *, const char*);
SOAP_FMAC1 _ns1__ReportSentinelInformationEx * SOAP_FMAC2 soap_instantiate__ns1__ReportSentinelInformationEx(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ReportSentinelInformationEx * soap_new__ns1__ReportSentinelInformationEx(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ReportSentinelInformationEx(soap, n, NULL, NULL, NULL);
}

inline _ns1__ReportSentinelInformationEx * soap_new_req__ns1__ReportSentinelInformationEx(
	struct soap *soap)
{
	_ns1__ReportSentinelInformationEx *_p = soap_new__ns1__ReportSentinelInformationEx(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ReportSentinelInformationEx * soap_new_set__ns1__ReportSentinelInformationEx(
	struct soap *soap,
	int *slotMastId,
	ns2__ArrayOfKeyValueOfstringstring *parameters)
{
	_ns1__ReportSentinelInformationEx *_p = soap_new__ns1__ReportSentinelInformationEx(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ReportSentinelInformationEx::slotMastId = slotMastId;
		_p->_ns1__ReportSentinelInformationEx::parameters = parameters;
	}
	return _p;
}

inline int soap_write__ns1__ReportSentinelInformationEx(struct soap *soap, _ns1__ReportSentinelInformationEx const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReportSentinelInformationEx", p->soap_type() == SOAP_TYPE__ns1__ReportSentinelInformationEx ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ReportSentinelInformationEx(struct soap *soap, const char *URL, _ns1__ReportSentinelInformationEx const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReportSentinelInformationEx", p->soap_type() == SOAP_TYPE__ns1__ReportSentinelInformationEx ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ReportSentinelInformationEx(struct soap *soap, const char *URL, _ns1__ReportSentinelInformationEx const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReportSentinelInformationEx", p->soap_type() == SOAP_TYPE__ns1__ReportSentinelInformationEx ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ReportSentinelInformationEx * SOAP_FMAC4 soap_get__ns1__ReportSentinelInformationEx(struct soap*, _ns1__ReportSentinelInformationEx *, const char*, const char*);

inline int soap_read__ns1__ReportSentinelInformationEx(struct soap *soap, _ns1__ReportSentinelInformationEx *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__ReportSentinelInformationEx(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ReportSentinelInformationEx(struct soap *soap, const char *URL, _ns1__ReportSentinelInformationEx *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__ReportSentinelInformationEx(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__ReportSentinelInformationEx(struct soap *soap, _ns1__ReportSentinelInformationEx *p)
{
	if (soap_read__ns1__ReportSentinelInformationEx(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ReportSentinelInformationWithOrientationResponse_DEFINED
#define SOAP_TYPE__ns1__ReportSentinelInformationWithOrientationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ReportSentinelInformationWithOrientationResponse(struct soap*, const char*, int, const _ns1__ReportSentinelInformationWithOrientationResponse *, const char*);
SOAP_FMAC3 _ns1__ReportSentinelInformationWithOrientationResponse * SOAP_FMAC4 soap_in__ns1__ReportSentinelInformationWithOrientationResponse(struct soap*, const char*, _ns1__ReportSentinelInformationWithOrientationResponse *, const char*);
SOAP_FMAC1 _ns1__ReportSentinelInformationWithOrientationResponse * SOAP_FMAC2 soap_instantiate__ns1__ReportSentinelInformationWithOrientationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ReportSentinelInformationWithOrientationResponse * soap_new__ns1__ReportSentinelInformationWithOrientationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ReportSentinelInformationWithOrientationResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__ReportSentinelInformationWithOrientationResponse * soap_new_req__ns1__ReportSentinelInformationWithOrientationResponse(
	struct soap *soap)
{
	_ns1__ReportSentinelInformationWithOrientationResponse *_p = soap_new__ns1__ReportSentinelInformationWithOrientationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ReportSentinelInformationWithOrientationResponse * soap_new_set__ns1__ReportSentinelInformationWithOrientationResponse(
	struct soap *soap,
	bool *ReportSentinelInformationWithOrientationResult)
{
	_ns1__ReportSentinelInformationWithOrientationResponse *_p = soap_new__ns1__ReportSentinelInformationWithOrientationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ReportSentinelInformationWithOrientationResponse::ReportSentinelInformationWithOrientationResult = ReportSentinelInformationWithOrientationResult;
	}
	return _p;
}

inline int soap_write__ns1__ReportSentinelInformationWithOrientationResponse(struct soap *soap, _ns1__ReportSentinelInformationWithOrientationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReportSentinelInformationWithOrientationResponse", p->soap_type() == SOAP_TYPE__ns1__ReportSentinelInformationWithOrientationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ReportSentinelInformationWithOrientationResponse(struct soap *soap, const char *URL, _ns1__ReportSentinelInformationWithOrientationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReportSentinelInformationWithOrientationResponse", p->soap_type() == SOAP_TYPE__ns1__ReportSentinelInformationWithOrientationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ReportSentinelInformationWithOrientationResponse(struct soap *soap, const char *URL, _ns1__ReportSentinelInformationWithOrientationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReportSentinelInformationWithOrientationResponse", p->soap_type() == SOAP_TYPE__ns1__ReportSentinelInformationWithOrientationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ReportSentinelInformationWithOrientationResponse * SOAP_FMAC4 soap_get__ns1__ReportSentinelInformationWithOrientationResponse(struct soap*, _ns1__ReportSentinelInformationWithOrientationResponse *, const char*, const char*);

inline int soap_read__ns1__ReportSentinelInformationWithOrientationResponse(struct soap *soap, _ns1__ReportSentinelInformationWithOrientationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__ReportSentinelInformationWithOrientationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ReportSentinelInformationWithOrientationResponse(struct soap *soap, const char *URL, _ns1__ReportSentinelInformationWithOrientationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__ReportSentinelInformationWithOrientationResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__ReportSentinelInformationWithOrientationResponse(struct soap *soap, _ns1__ReportSentinelInformationWithOrientationResponse *p)
{
	if (soap_read__ns1__ReportSentinelInformationWithOrientationResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ReportSentinelInformationWithOrientation_DEFINED
#define SOAP_TYPE__ns1__ReportSentinelInformationWithOrientation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ReportSentinelInformationWithOrientation(struct soap*, const char*, int, const _ns1__ReportSentinelInformationWithOrientation *, const char*);
SOAP_FMAC3 _ns1__ReportSentinelInformationWithOrientation * SOAP_FMAC4 soap_in__ns1__ReportSentinelInformationWithOrientation(struct soap*, const char*, _ns1__ReportSentinelInformationWithOrientation *, const char*);
SOAP_FMAC1 _ns1__ReportSentinelInformationWithOrientation * SOAP_FMAC2 soap_instantiate__ns1__ReportSentinelInformationWithOrientation(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ReportSentinelInformationWithOrientation * soap_new__ns1__ReportSentinelInformationWithOrientation(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ReportSentinelInformationWithOrientation(soap, n, NULL, NULL, NULL);
}

inline _ns1__ReportSentinelInformationWithOrientation * soap_new_req__ns1__ReportSentinelInformationWithOrientation(
	struct soap *soap)
{
	_ns1__ReportSentinelInformationWithOrientation *_p = soap_new__ns1__ReportSentinelInformationWithOrientation(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ReportSentinelInformationWithOrientation * soap_new_set__ns1__ReportSentinelInformationWithOrientation(
	struct soap *soap,
	int *slotMastId,
	char *OSVersion,
	char *EXEVersion,
	char *SkinName,
	unsigned char *DisplayOrientation)
{
	_ns1__ReportSentinelInformationWithOrientation *_p = soap_new__ns1__ReportSentinelInformationWithOrientation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ReportSentinelInformationWithOrientation::slotMastId = slotMastId;
		_p->_ns1__ReportSentinelInformationWithOrientation::OSVersion = OSVersion;
		_p->_ns1__ReportSentinelInformationWithOrientation::EXEVersion = EXEVersion;
		_p->_ns1__ReportSentinelInformationWithOrientation::SkinName = SkinName;
		_p->_ns1__ReportSentinelInformationWithOrientation::DisplayOrientation = DisplayOrientation;
	}
	return _p;
}

inline int soap_write__ns1__ReportSentinelInformationWithOrientation(struct soap *soap, _ns1__ReportSentinelInformationWithOrientation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReportSentinelInformationWithOrientation", p->soap_type() == SOAP_TYPE__ns1__ReportSentinelInformationWithOrientation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ReportSentinelInformationWithOrientation(struct soap *soap, const char *URL, _ns1__ReportSentinelInformationWithOrientation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReportSentinelInformationWithOrientation", p->soap_type() == SOAP_TYPE__ns1__ReportSentinelInformationWithOrientation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ReportSentinelInformationWithOrientation(struct soap *soap, const char *URL, _ns1__ReportSentinelInformationWithOrientation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReportSentinelInformationWithOrientation", p->soap_type() == SOAP_TYPE__ns1__ReportSentinelInformationWithOrientation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ReportSentinelInformationWithOrientation * SOAP_FMAC4 soap_get__ns1__ReportSentinelInformationWithOrientation(struct soap*, _ns1__ReportSentinelInformationWithOrientation *, const char*, const char*);

inline int soap_read__ns1__ReportSentinelInformationWithOrientation(struct soap *soap, _ns1__ReportSentinelInformationWithOrientation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__ReportSentinelInformationWithOrientation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ReportSentinelInformationWithOrientation(struct soap *soap, const char *URL, _ns1__ReportSentinelInformationWithOrientation *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__ReportSentinelInformationWithOrientation(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__ReportSentinelInformationWithOrientation(struct soap *soap, _ns1__ReportSentinelInformationWithOrientation *p)
{
	if (soap_read__ns1__ReportSentinelInformationWithOrientation(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ReportSentinelInformationResponse_DEFINED
#define SOAP_TYPE__ns1__ReportSentinelInformationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ReportSentinelInformationResponse(struct soap*, const char*, int, const _ns1__ReportSentinelInformationResponse *, const char*);
SOAP_FMAC3 _ns1__ReportSentinelInformationResponse * SOAP_FMAC4 soap_in__ns1__ReportSentinelInformationResponse(struct soap*, const char*, _ns1__ReportSentinelInformationResponse *, const char*);
SOAP_FMAC1 _ns1__ReportSentinelInformationResponse * SOAP_FMAC2 soap_instantiate__ns1__ReportSentinelInformationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ReportSentinelInformationResponse * soap_new__ns1__ReportSentinelInformationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ReportSentinelInformationResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__ReportSentinelInformationResponse * soap_new_req__ns1__ReportSentinelInformationResponse(
	struct soap *soap)
{
	_ns1__ReportSentinelInformationResponse *_p = soap_new__ns1__ReportSentinelInformationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ReportSentinelInformationResponse * soap_new_set__ns1__ReportSentinelInformationResponse(
	struct soap *soap,
	bool *ReportSentinelInformationResult)
{
	_ns1__ReportSentinelInformationResponse *_p = soap_new__ns1__ReportSentinelInformationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ReportSentinelInformationResponse::ReportSentinelInformationResult = ReportSentinelInformationResult;
	}
	return _p;
}

inline int soap_write__ns1__ReportSentinelInformationResponse(struct soap *soap, _ns1__ReportSentinelInformationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReportSentinelInformationResponse", p->soap_type() == SOAP_TYPE__ns1__ReportSentinelInformationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ReportSentinelInformationResponse(struct soap *soap, const char *URL, _ns1__ReportSentinelInformationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReportSentinelInformationResponse", p->soap_type() == SOAP_TYPE__ns1__ReportSentinelInformationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ReportSentinelInformationResponse(struct soap *soap, const char *URL, _ns1__ReportSentinelInformationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReportSentinelInformationResponse", p->soap_type() == SOAP_TYPE__ns1__ReportSentinelInformationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ReportSentinelInformationResponse * SOAP_FMAC4 soap_get__ns1__ReportSentinelInformationResponse(struct soap*, _ns1__ReportSentinelInformationResponse *, const char*, const char*);

inline int soap_read__ns1__ReportSentinelInformationResponse(struct soap *soap, _ns1__ReportSentinelInformationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__ReportSentinelInformationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ReportSentinelInformationResponse(struct soap *soap, const char *URL, _ns1__ReportSentinelInformationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__ReportSentinelInformationResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__ReportSentinelInformationResponse(struct soap *soap, _ns1__ReportSentinelInformationResponse *p)
{
	if (soap_read__ns1__ReportSentinelInformationResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ReportSentinelInformation_DEFINED
#define SOAP_TYPE__ns1__ReportSentinelInformation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ReportSentinelInformation(struct soap*, const char*, int, const _ns1__ReportSentinelInformation *, const char*);
SOAP_FMAC3 _ns1__ReportSentinelInformation * SOAP_FMAC4 soap_in__ns1__ReportSentinelInformation(struct soap*, const char*, _ns1__ReportSentinelInformation *, const char*);
SOAP_FMAC1 _ns1__ReportSentinelInformation * SOAP_FMAC2 soap_instantiate__ns1__ReportSentinelInformation(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ReportSentinelInformation * soap_new__ns1__ReportSentinelInformation(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ReportSentinelInformation(soap, n, NULL, NULL, NULL);
}

inline _ns1__ReportSentinelInformation * soap_new_req__ns1__ReportSentinelInformation(
	struct soap *soap)
{
	_ns1__ReportSentinelInformation *_p = soap_new__ns1__ReportSentinelInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ReportSentinelInformation * soap_new_set__ns1__ReportSentinelInformation(
	struct soap *soap,
	int *slotMastId,
	char *OSVersion,
	char *EXEVersion,
	char *SkinName)
{
	_ns1__ReportSentinelInformation *_p = soap_new__ns1__ReportSentinelInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ReportSentinelInformation::slotMastId = slotMastId;
		_p->_ns1__ReportSentinelInformation::OSVersion = OSVersion;
		_p->_ns1__ReportSentinelInformation::EXEVersion = EXEVersion;
		_p->_ns1__ReportSentinelInformation::SkinName = SkinName;
	}
	return _p;
}

inline int soap_write__ns1__ReportSentinelInformation(struct soap *soap, _ns1__ReportSentinelInformation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReportSentinelInformation", p->soap_type() == SOAP_TYPE__ns1__ReportSentinelInformation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ReportSentinelInformation(struct soap *soap, const char *URL, _ns1__ReportSentinelInformation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReportSentinelInformation", p->soap_type() == SOAP_TYPE__ns1__ReportSentinelInformation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ReportSentinelInformation(struct soap *soap, const char *URL, _ns1__ReportSentinelInformation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReportSentinelInformation", p->soap_type() == SOAP_TYPE__ns1__ReportSentinelInformation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ReportSentinelInformation * SOAP_FMAC4 soap_get__ns1__ReportSentinelInformation(struct soap*, _ns1__ReportSentinelInformation *, const char*, const char*);

inline int soap_read__ns1__ReportSentinelInformation(struct soap *soap, _ns1__ReportSentinelInformation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__ReportSentinelInformation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ReportSentinelInformation(struct soap *soap, const char *URL, _ns1__ReportSentinelInformation *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__ReportSentinelInformation(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__ReportSentinelInformation(struct soap *soap, _ns1__ReportSentinelInformation *p)
{
	if (soap_read__ns1__ReportSentinelInformation(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ReportStatusResponse_DEFINED
#define SOAP_TYPE__ns1__ReportStatusResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ReportStatusResponse(struct soap*, const char*, int, const _ns1__ReportStatusResponse *, const char*);
SOAP_FMAC3 _ns1__ReportStatusResponse * SOAP_FMAC4 soap_in__ns1__ReportStatusResponse(struct soap*, const char*, _ns1__ReportStatusResponse *, const char*);
SOAP_FMAC1 _ns1__ReportStatusResponse * SOAP_FMAC2 soap_instantiate__ns1__ReportStatusResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ReportStatusResponse * soap_new__ns1__ReportStatusResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ReportStatusResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__ReportStatusResponse * soap_new_req__ns1__ReportStatusResponse(
	struct soap *soap)
{
	_ns1__ReportStatusResponse *_p = soap_new__ns1__ReportStatusResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ReportStatusResponse * soap_new_set__ns1__ReportStatusResponse(
	struct soap *soap,
	bool *ReportStatusResult)
{
	_ns1__ReportStatusResponse *_p = soap_new__ns1__ReportStatusResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ReportStatusResponse::ReportStatusResult = ReportStatusResult;
	}
	return _p;
}

inline int soap_write__ns1__ReportStatusResponse(struct soap *soap, _ns1__ReportStatusResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReportStatusResponse", p->soap_type() == SOAP_TYPE__ns1__ReportStatusResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ReportStatusResponse(struct soap *soap, const char *URL, _ns1__ReportStatusResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReportStatusResponse", p->soap_type() == SOAP_TYPE__ns1__ReportStatusResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ReportStatusResponse(struct soap *soap, const char *URL, _ns1__ReportStatusResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReportStatusResponse", p->soap_type() == SOAP_TYPE__ns1__ReportStatusResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ReportStatusResponse * SOAP_FMAC4 soap_get__ns1__ReportStatusResponse(struct soap*, _ns1__ReportStatusResponse *, const char*, const char*);

inline int soap_read__ns1__ReportStatusResponse(struct soap *soap, _ns1__ReportStatusResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__ReportStatusResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ReportStatusResponse(struct soap *soap, const char *URL, _ns1__ReportStatusResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__ReportStatusResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__ReportStatusResponse(struct soap *soap, _ns1__ReportStatusResponse *p)
{
	if (soap_read__ns1__ReportStatusResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ReportStatus_DEFINED
#define SOAP_TYPE__ns1__ReportStatus_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ReportStatus(struct soap*, const char*, int, const _ns1__ReportStatus *, const char*);
SOAP_FMAC3 _ns1__ReportStatus * SOAP_FMAC4 soap_in__ns1__ReportStatus(struct soap*, const char*, _ns1__ReportStatus *, const char*);
SOAP_FMAC1 _ns1__ReportStatus * SOAP_FMAC2 soap_instantiate__ns1__ReportStatus(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ReportStatus * soap_new__ns1__ReportStatus(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ReportStatus(soap, n, NULL, NULL, NULL);
}

inline _ns1__ReportStatus * soap_new_req__ns1__ReportStatus(
	struct soap *soap)
{
	_ns1__ReportStatus *_p = soap_new__ns1__ReportStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ReportStatus * soap_new_set__ns1__ReportStatus(
	struct soap *soap,
	int *slotMastId,
	char *status)
{
	_ns1__ReportStatus *_p = soap_new__ns1__ReportStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ReportStatus::slotMastId = slotMastId;
		_p->_ns1__ReportStatus::status = status;
	}
	return _p;
}

inline int soap_write__ns1__ReportStatus(struct soap *soap, _ns1__ReportStatus const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReportStatus", p->soap_type() == SOAP_TYPE__ns1__ReportStatus ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ReportStatus(struct soap *soap, const char *URL, _ns1__ReportStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReportStatus", p->soap_type() == SOAP_TYPE__ns1__ReportStatus ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ReportStatus(struct soap *soap, const char *URL, _ns1__ReportStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReportStatus", p->soap_type() == SOAP_TYPE__ns1__ReportStatus ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ReportStatus * SOAP_FMAC4 soap_get__ns1__ReportStatus(struct soap*, _ns1__ReportStatus *, const char*, const char*);

inline int soap_read__ns1__ReportStatus(struct soap *soap, _ns1__ReportStatus *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__ReportStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ReportStatus(struct soap *soap, const char *URL, _ns1__ReportStatus *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__ReportStatus(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__ReportStatus(struct soap *soap, _ns1__ReportStatus *p)
{
	if (soap_read__ns1__ReportStatus(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__AcknowledgeExternalPaidResponse_DEFINED
#define SOAP_TYPE__ns1__AcknowledgeExternalPaidResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AcknowledgeExternalPaidResponse(struct soap*, const char*, int, const _ns1__AcknowledgeExternalPaidResponse *, const char*);
SOAP_FMAC3 _ns1__AcknowledgeExternalPaidResponse * SOAP_FMAC4 soap_in__ns1__AcknowledgeExternalPaidResponse(struct soap*, const char*, _ns1__AcknowledgeExternalPaidResponse *, const char*);
SOAP_FMAC1 _ns1__AcknowledgeExternalPaidResponse * SOAP_FMAC2 soap_instantiate__ns1__AcknowledgeExternalPaidResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__AcknowledgeExternalPaidResponse * soap_new__ns1__AcknowledgeExternalPaidResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__AcknowledgeExternalPaidResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__AcknowledgeExternalPaidResponse * soap_new_req__ns1__AcknowledgeExternalPaidResponse(
	struct soap *soap)
{
	_ns1__AcknowledgeExternalPaidResponse *_p = soap_new__ns1__AcknowledgeExternalPaidResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__AcknowledgeExternalPaidResponse * soap_new_set__ns1__AcknowledgeExternalPaidResponse(
	struct soap *soap,
	bool *AcknowledgeExternalPaidResult)
{
	_ns1__AcknowledgeExternalPaidResponse *_p = soap_new__ns1__AcknowledgeExternalPaidResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__AcknowledgeExternalPaidResponse::AcknowledgeExternalPaidResult = AcknowledgeExternalPaidResult;
	}
	return _p;
}

inline int soap_write__ns1__AcknowledgeExternalPaidResponse(struct soap *soap, _ns1__AcknowledgeExternalPaidResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AcknowledgeExternalPaidResponse", p->soap_type() == SOAP_TYPE__ns1__AcknowledgeExternalPaidResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__AcknowledgeExternalPaidResponse(struct soap *soap, const char *URL, _ns1__AcknowledgeExternalPaidResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AcknowledgeExternalPaidResponse", p->soap_type() == SOAP_TYPE__ns1__AcknowledgeExternalPaidResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__AcknowledgeExternalPaidResponse(struct soap *soap, const char *URL, _ns1__AcknowledgeExternalPaidResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AcknowledgeExternalPaidResponse", p->soap_type() == SOAP_TYPE__ns1__AcknowledgeExternalPaidResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__AcknowledgeExternalPaidResponse * SOAP_FMAC4 soap_get__ns1__AcknowledgeExternalPaidResponse(struct soap*, _ns1__AcknowledgeExternalPaidResponse *, const char*, const char*);

inline int soap_read__ns1__AcknowledgeExternalPaidResponse(struct soap *soap, _ns1__AcknowledgeExternalPaidResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__AcknowledgeExternalPaidResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__AcknowledgeExternalPaidResponse(struct soap *soap, const char *URL, _ns1__AcknowledgeExternalPaidResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__AcknowledgeExternalPaidResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__AcknowledgeExternalPaidResponse(struct soap *soap, _ns1__AcknowledgeExternalPaidResponse *p)
{
	if (soap_read__ns1__AcknowledgeExternalPaidResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__AcknowledgeExternalPaid_DEFINED
#define SOAP_TYPE__ns1__AcknowledgeExternalPaid_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AcknowledgeExternalPaid(struct soap*, const char*, int, const _ns1__AcknowledgeExternalPaid *, const char*);
SOAP_FMAC3 _ns1__AcknowledgeExternalPaid * SOAP_FMAC4 soap_in__ns1__AcknowledgeExternalPaid(struct soap*, const char*, _ns1__AcknowledgeExternalPaid *, const char*);
SOAP_FMAC1 _ns1__AcknowledgeExternalPaid * SOAP_FMAC2 soap_instantiate__ns1__AcknowledgeExternalPaid(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__AcknowledgeExternalPaid * soap_new__ns1__AcknowledgeExternalPaid(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__AcknowledgeExternalPaid(soap, n, NULL, NULL, NULL);
}

inline _ns1__AcknowledgeExternalPaid * soap_new_req__ns1__AcknowledgeExternalPaid(
	struct soap *soap)
{
	_ns1__AcknowledgeExternalPaid *_p = soap_new__ns1__AcknowledgeExternalPaid(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__AcknowledgeExternalPaid * soap_new_set__ns1__AcknowledgeExternalPaid(
	struct soap *soap,
	int *awardID,
	int *slotMastId,
	char *OCR,
	int *amountPaid,
	int *awardResult,
	int *awardType,
	char *transactionID,
	LONG64 *coinIn,
	LONG64 *coinOut,
	LONG64 *progCoinIn,
	LONG64 *initialExternalBonusingMachinePayout,
	LONG64 *initialExternalBonusingAttendantPayout,
	LONG64 *currentExternalBonusingMachinePayout,
	LONG64 *currentExternalBonusingAttendantPayout)
{
	_ns1__AcknowledgeExternalPaid *_p = soap_new__ns1__AcknowledgeExternalPaid(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__AcknowledgeExternalPaid::awardID = awardID;
		_p->_ns1__AcknowledgeExternalPaid::slotMastId = slotMastId;
		_p->_ns1__AcknowledgeExternalPaid::OCR = OCR;
		_p->_ns1__AcknowledgeExternalPaid::amountPaid = amountPaid;
		_p->_ns1__AcknowledgeExternalPaid::awardResult = awardResult;
		_p->_ns1__AcknowledgeExternalPaid::awardType = awardType;
		_p->_ns1__AcknowledgeExternalPaid::transactionID = transactionID;
		_p->_ns1__AcknowledgeExternalPaid::coinIn = coinIn;
		_p->_ns1__AcknowledgeExternalPaid::coinOut = coinOut;
		_p->_ns1__AcknowledgeExternalPaid::progCoinIn = progCoinIn;
		_p->_ns1__AcknowledgeExternalPaid::initialExternalBonusingMachinePayout = initialExternalBonusingMachinePayout;
		_p->_ns1__AcknowledgeExternalPaid::initialExternalBonusingAttendantPayout = initialExternalBonusingAttendantPayout;
		_p->_ns1__AcknowledgeExternalPaid::currentExternalBonusingMachinePayout = currentExternalBonusingMachinePayout;
		_p->_ns1__AcknowledgeExternalPaid::currentExternalBonusingAttendantPayout = currentExternalBonusingAttendantPayout;
	}
	return _p;
}

inline int soap_write__ns1__AcknowledgeExternalPaid(struct soap *soap, _ns1__AcknowledgeExternalPaid const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AcknowledgeExternalPaid", p->soap_type() == SOAP_TYPE__ns1__AcknowledgeExternalPaid ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__AcknowledgeExternalPaid(struct soap *soap, const char *URL, _ns1__AcknowledgeExternalPaid const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AcknowledgeExternalPaid", p->soap_type() == SOAP_TYPE__ns1__AcknowledgeExternalPaid ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__AcknowledgeExternalPaid(struct soap *soap, const char *URL, _ns1__AcknowledgeExternalPaid const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AcknowledgeExternalPaid", p->soap_type() == SOAP_TYPE__ns1__AcknowledgeExternalPaid ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__AcknowledgeExternalPaid * SOAP_FMAC4 soap_get__ns1__AcknowledgeExternalPaid(struct soap*, _ns1__AcknowledgeExternalPaid *, const char*, const char*);

inline int soap_read__ns1__AcknowledgeExternalPaid(struct soap *soap, _ns1__AcknowledgeExternalPaid *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__AcknowledgeExternalPaid(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__AcknowledgeExternalPaid(struct soap *soap, const char *URL, _ns1__AcknowledgeExternalPaid *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__AcknowledgeExternalPaid(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__AcknowledgeExternalPaid(struct soap *soap, _ns1__AcknowledgeExternalPaid *p)
{
	if (soap_read__ns1__AcknowledgeExternalPaid(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ReportGameStartResponse_DEFINED
#define SOAP_TYPE__ns1__ReportGameStartResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ReportGameStartResponse(struct soap*, const char*, int, const _ns1__ReportGameStartResponse *, const char*);
SOAP_FMAC3 _ns1__ReportGameStartResponse * SOAP_FMAC4 soap_in__ns1__ReportGameStartResponse(struct soap*, const char*, _ns1__ReportGameStartResponse *, const char*);
SOAP_FMAC1 _ns1__ReportGameStartResponse * SOAP_FMAC2 soap_instantiate__ns1__ReportGameStartResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ReportGameStartResponse * soap_new__ns1__ReportGameStartResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ReportGameStartResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__ReportGameStartResponse * soap_new_req__ns1__ReportGameStartResponse(
	struct soap *soap)
{
	_ns1__ReportGameStartResponse *_p = soap_new__ns1__ReportGameStartResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ReportGameStartResponse * soap_new_set__ns1__ReportGameStartResponse(
	struct soap *soap,
	bool *ReportGameStartResult)
{
	_ns1__ReportGameStartResponse *_p = soap_new__ns1__ReportGameStartResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ReportGameStartResponse::ReportGameStartResult = ReportGameStartResult;
	}
	return _p;
}

inline int soap_write__ns1__ReportGameStartResponse(struct soap *soap, _ns1__ReportGameStartResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReportGameStartResponse", p->soap_type() == SOAP_TYPE__ns1__ReportGameStartResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ReportGameStartResponse(struct soap *soap, const char *URL, _ns1__ReportGameStartResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReportGameStartResponse", p->soap_type() == SOAP_TYPE__ns1__ReportGameStartResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ReportGameStartResponse(struct soap *soap, const char *URL, _ns1__ReportGameStartResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReportGameStartResponse", p->soap_type() == SOAP_TYPE__ns1__ReportGameStartResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ReportGameStartResponse * SOAP_FMAC4 soap_get__ns1__ReportGameStartResponse(struct soap*, _ns1__ReportGameStartResponse *, const char*, const char*);

inline int soap_read__ns1__ReportGameStartResponse(struct soap *soap, _ns1__ReportGameStartResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__ReportGameStartResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ReportGameStartResponse(struct soap *soap, const char *URL, _ns1__ReportGameStartResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__ReportGameStartResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__ReportGameStartResponse(struct soap *soap, _ns1__ReportGameStartResponse *p)
{
	if (soap_read__ns1__ReportGameStartResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ReportGameStart_DEFINED
#define SOAP_TYPE__ns1__ReportGameStart_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ReportGameStart(struct soap*, const char*, int, const _ns1__ReportGameStart *, const char*);
SOAP_FMAC3 _ns1__ReportGameStart * SOAP_FMAC4 soap_in__ns1__ReportGameStart(struct soap*, const char*, _ns1__ReportGameStart *, const char*);
SOAP_FMAC1 _ns1__ReportGameStart * SOAP_FMAC2 soap_instantiate__ns1__ReportGameStart(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ReportGameStart * soap_new__ns1__ReportGameStart(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ReportGameStart(soap, n, NULL, NULL, NULL);
}

inline _ns1__ReportGameStart * soap_new_req__ns1__ReportGameStart(
	struct soap *soap)
{
	_ns1__ReportGameStart *_p = soap_new__ns1__ReportGameStart(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ReportGameStart * soap_new_set__ns1__ReportGameStart(
	struct soap *soap,
	LONG64 *CoinInMeterCents,
	int *slotMastId,
	xsd__base64Binary *timeStamp)
{
	_ns1__ReportGameStart *_p = soap_new__ns1__ReportGameStart(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ReportGameStart::CoinInMeterCents = CoinInMeterCents;
		_p->_ns1__ReportGameStart::slotMastId = slotMastId;
		_p->_ns1__ReportGameStart::timeStamp = timeStamp;
	}
	return _p;
}

inline int soap_write__ns1__ReportGameStart(struct soap *soap, _ns1__ReportGameStart const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReportGameStart", p->soap_type() == SOAP_TYPE__ns1__ReportGameStart ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ReportGameStart(struct soap *soap, const char *URL, _ns1__ReportGameStart const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReportGameStart", p->soap_type() == SOAP_TYPE__ns1__ReportGameStart ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ReportGameStart(struct soap *soap, const char *URL, _ns1__ReportGameStart const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReportGameStart", p->soap_type() == SOAP_TYPE__ns1__ReportGameStart ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ReportGameStart * SOAP_FMAC4 soap_get__ns1__ReportGameStart(struct soap*, _ns1__ReportGameStart *, const char*, const char*);

inline int soap_read__ns1__ReportGameStart(struct soap *soap, _ns1__ReportGameStart *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__ReportGameStart(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ReportGameStart(struct soap *soap, const char *URL, _ns1__ReportGameStart *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__ReportGameStart(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__ReportGameStart(struct soap *soap, _ns1__ReportGameStart *p)
{
	if (soap_read__ns1__ReportGameStart(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ReportEventMeterDeltasResponse_DEFINED
#define SOAP_TYPE__ns1__ReportEventMeterDeltasResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ReportEventMeterDeltasResponse(struct soap*, const char*, int, const _ns1__ReportEventMeterDeltasResponse *, const char*);
SOAP_FMAC3 _ns1__ReportEventMeterDeltasResponse * SOAP_FMAC4 soap_in__ns1__ReportEventMeterDeltasResponse(struct soap*, const char*, _ns1__ReportEventMeterDeltasResponse *, const char*);
SOAP_FMAC1 _ns1__ReportEventMeterDeltasResponse * SOAP_FMAC2 soap_instantiate__ns1__ReportEventMeterDeltasResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ReportEventMeterDeltasResponse * soap_new__ns1__ReportEventMeterDeltasResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ReportEventMeterDeltasResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__ReportEventMeterDeltasResponse * soap_new_req__ns1__ReportEventMeterDeltasResponse(
	struct soap *soap)
{
	_ns1__ReportEventMeterDeltasResponse *_p = soap_new__ns1__ReportEventMeterDeltasResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ReportEventMeterDeltasResponse * soap_new_set__ns1__ReportEventMeterDeltasResponse(
	struct soap *soap,
	bool *ReportEventMeterDeltasResult)
{
	_ns1__ReportEventMeterDeltasResponse *_p = soap_new__ns1__ReportEventMeterDeltasResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ReportEventMeterDeltasResponse::ReportEventMeterDeltasResult = ReportEventMeterDeltasResult;
	}
	return _p;
}

inline int soap_write__ns1__ReportEventMeterDeltasResponse(struct soap *soap, _ns1__ReportEventMeterDeltasResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReportEventMeterDeltasResponse", p->soap_type() == SOAP_TYPE__ns1__ReportEventMeterDeltasResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ReportEventMeterDeltasResponse(struct soap *soap, const char *URL, _ns1__ReportEventMeterDeltasResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReportEventMeterDeltasResponse", p->soap_type() == SOAP_TYPE__ns1__ReportEventMeterDeltasResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ReportEventMeterDeltasResponse(struct soap *soap, const char *URL, _ns1__ReportEventMeterDeltasResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReportEventMeterDeltasResponse", p->soap_type() == SOAP_TYPE__ns1__ReportEventMeterDeltasResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ReportEventMeterDeltasResponse * SOAP_FMAC4 soap_get__ns1__ReportEventMeterDeltasResponse(struct soap*, _ns1__ReportEventMeterDeltasResponse *, const char*, const char*);

inline int soap_read__ns1__ReportEventMeterDeltasResponse(struct soap *soap, _ns1__ReportEventMeterDeltasResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__ReportEventMeterDeltasResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ReportEventMeterDeltasResponse(struct soap *soap, const char *URL, _ns1__ReportEventMeterDeltasResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__ReportEventMeterDeltasResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__ReportEventMeterDeltasResponse(struct soap *soap, _ns1__ReportEventMeterDeltasResponse *p)
{
	if (soap_read__ns1__ReportEventMeterDeltasResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ReportEventMeterDeltas_DEFINED
#define SOAP_TYPE__ns1__ReportEventMeterDeltas_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ReportEventMeterDeltas(struct soap*, const char*, int, const _ns1__ReportEventMeterDeltas *, const char*);
SOAP_FMAC3 _ns1__ReportEventMeterDeltas * SOAP_FMAC4 soap_in__ns1__ReportEventMeterDeltas(struct soap*, const char*, _ns1__ReportEventMeterDeltas *, const char*);
SOAP_FMAC1 _ns1__ReportEventMeterDeltas * SOAP_FMAC2 soap_instantiate__ns1__ReportEventMeterDeltas(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ReportEventMeterDeltas * soap_new__ns1__ReportEventMeterDeltas(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ReportEventMeterDeltas(soap, n, NULL, NULL, NULL);
}

inline _ns1__ReportEventMeterDeltas * soap_new_req__ns1__ReportEventMeterDeltas(
	struct soap *soap)
{
	_ns1__ReportEventMeterDeltas *_p = soap_new__ns1__ReportEventMeterDeltas(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ReportEventMeterDeltas * soap_new_set__ns1__ReportEventMeterDeltas(
	struct soap *soap,
	int *eventID,
	int *triggeredEventID,
	LONG64 *jackpotAmount,
	xsd__base64Binary *timeStamp,
	int *slotMastId,
	char *OCR,
	LONG64 *splashdownPoints,
	LONG64 *coinInDelta,
	LONG64 *coinOutDelta,
	LONG64 *jackpotHandpayDelta,
	LONG64 *externalBonusingMachinePayoutDelta,
	LONG64 *externalBonusingAttendantPayoutDelta,
	LONG64 *attendantPayProgressivePayoutDelta,
	LONG64 *machinePayProgressivePayoutDelta,
	LONG64 *millisecondsPlayedDelta,
	int *jackpotType,
	double *denomination,
	double *par)
{
	_ns1__ReportEventMeterDeltas *_p = soap_new__ns1__ReportEventMeterDeltas(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ReportEventMeterDeltas::eventID = eventID;
		_p->_ns1__ReportEventMeterDeltas::triggeredEventID = triggeredEventID;
		_p->_ns1__ReportEventMeterDeltas::jackpotAmount = jackpotAmount;
		_p->_ns1__ReportEventMeterDeltas::timeStamp = timeStamp;
		_p->_ns1__ReportEventMeterDeltas::slotMastId = slotMastId;
		_p->_ns1__ReportEventMeterDeltas::OCR = OCR;
		_p->_ns1__ReportEventMeterDeltas::splashdownPoints = splashdownPoints;
		_p->_ns1__ReportEventMeterDeltas::coinInDelta = coinInDelta;
		_p->_ns1__ReportEventMeterDeltas::coinOutDelta = coinOutDelta;
		_p->_ns1__ReportEventMeterDeltas::jackpotHandpayDelta = jackpotHandpayDelta;
		_p->_ns1__ReportEventMeterDeltas::externalBonusingMachinePayoutDelta = externalBonusingMachinePayoutDelta;
		_p->_ns1__ReportEventMeterDeltas::externalBonusingAttendantPayoutDelta = externalBonusingAttendantPayoutDelta;
		_p->_ns1__ReportEventMeterDeltas::attendantPayProgressivePayoutDelta = attendantPayProgressivePayoutDelta;
		_p->_ns1__ReportEventMeterDeltas::machinePayProgressivePayoutDelta = machinePayProgressivePayoutDelta;
		_p->_ns1__ReportEventMeterDeltas::millisecondsPlayedDelta = millisecondsPlayedDelta;
		_p->_ns1__ReportEventMeterDeltas::jackpotType = jackpotType;
		_p->_ns1__ReportEventMeterDeltas::denomination = denomination;
		_p->_ns1__ReportEventMeterDeltas::par = par;
	}
	return _p;
}

inline int soap_write__ns1__ReportEventMeterDeltas(struct soap *soap, _ns1__ReportEventMeterDeltas const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReportEventMeterDeltas", p->soap_type() == SOAP_TYPE__ns1__ReportEventMeterDeltas ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ReportEventMeterDeltas(struct soap *soap, const char *URL, _ns1__ReportEventMeterDeltas const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReportEventMeterDeltas", p->soap_type() == SOAP_TYPE__ns1__ReportEventMeterDeltas ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ReportEventMeterDeltas(struct soap *soap, const char *URL, _ns1__ReportEventMeterDeltas const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReportEventMeterDeltas", p->soap_type() == SOAP_TYPE__ns1__ReportEventMeterDeltas ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ReportEventMeterDeltas * SOAP_FMAC4 soap_get__ns1__ReportEventMeterDeltas(struct soap*, _ns1__ReportEventMeterDeltas *, const char*, const char*);

inline int soap_read__ns1__ReportEventMeterDeltas(struct soap *soap, _ns1__ReportEventMeterDeltas *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__ReportEventMeterDeltas(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ReportEventMeterDeltas(struct soap *soap, const char *URL, _ns1__ReportEventMeterDeltas *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__ReportEventMeterDeltas(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__ReportEventMeterDeltas(struct soap *soap, _ns1__ReportEventMeterDeltas *p)
{
	if (soap_read__ns1__ReportEventMeterDeltas(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InTriggeredEventTriggerResponse_DEFINED
#define SOAP_TYPE__ns1__InTriggeredEventTriggerResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InTriggeredEventTriggerResponse(struct soap*, const char*, int, const _ns1__InTriggeredEventTriggerResponse *, const char*);
SOAP_FMAC3 _ns1__InTriggeredEventTriggerResponse * SOAP_FMAC4 soap_in__ns1__InTriggeredEventTriggerResponse(struct soap*, const char*, _ns1__InTriggeredEventTriggerResponse *, const char*);
SOAP_FMAC1 _ns1__InTriggeredEventTriggerResponse * SOAP_FMAC2 soap_instantiate__ns1__InTriggeredEventTriggerResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InTriggeredEventTriggerResponse * soap_new__ns1__InTriggeredEventTriggerResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InTriggeredEventTriggerResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__InTriggeredEventTriggerResponse * soap_new_req__ns1__InTriggeredEventTriggerResponse(
	struct soap *soap)
{
	_ns1__InTriggeredEventTriggerResponse *_p = soap_new__ns1__InTriggeredEventTriggerResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InTriggeredEventTriggerResponse * soap_new_set__ns1__InTriggeredEventTriggerResponse(
	struct soap *soap,
	bool *InTriggeredEventTriggerResult)
{
	_ns1__InTriggeredEventTriggerResponse *_p = soap_new__ns1__InTriggeredEventTriggerResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InTriggeredEventTriggerResponse::InTriggeredEventTriggerResult = InTriggeredEventTriggerResult;
	}
	return _p;
}

inline int soap_write__ns1__InTriggeredEventTriggerResponse(struct soap *soap, _ns1__InTriggeredEventTriggerResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InTriggeredEventTriggerResponse", p->soap_type() == SOAP_TYPE__ns1__InTriggeredEventTriggerResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InTriggeredEventTriggerResponse(struct soap *soap, const char *URL, _ns1__InTriggeredEventTriggerResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InTriggeredEventTriggerResponse", p->soap_type() == SOAP_TYPE__ns1__InTriggeredEventTriggerResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InTriggeredEventTriggerResponse(struct soap *soap, const char *URL, _ns1__InTriggeredEventTriggerResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InTriggeredEventTriggerResponse", p->soap_type() == SOAP_TYPE__ns1__InTriggeredEventTriggerResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InTriggeredEventTriggerResponse * SOAP_FMAC4 soap_get__ns1__InTriggeredEventTriggerResponse(struct soap*, _ns1__InTriggeredEventTriggerResponse *, const char*, const char*);

inline int soap_read__ns1__InTriggeredEventTriggerResponse(struct soap *soap, _ns1__InTriggeredEventTriggerResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InTriggeredEventTriggerResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InTriggeredEventTriggerResponse(struct soap *soap, const char *URL, _ns1__InTriggeredEventTriggerResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InTriggeredEventTriggerResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InTriggeredEventTriggerResponse(struct soap *soap, _ns1__InTriggeredEventTriggerResponse *p)
{
	if (soap_read__ns1__InTriggeredEventTriggerResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InTriggeredEventTrigger_DEFINED
#define SOAP_TYPE__ns1__InTriggeredEventTrigger_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InTriggeredEventTrigger(struct soap*, const char*, int, const _ns1__InTriggeredEventTrigger *, const char*);
SOAP_FMAC3 _ns1__InTriggeredEventTrigger * SOAP_FMAC4 soap_in__ns1__InTriggeredEventTrigger(struct soap*, const char*, _ns1__InTriggeredEventTrigger *, const char*);
SOAP_FMAC1 _ns1__InTriggeredEventTrigger * SOAP_FMAC2 soap_instantiate__ns1__InTriggeredEventTrigger(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InTriggeredEventTrigger * soap_new__ns1__InTriggeredEventTrigger(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InTriggeredEventTrigger(soap, n, NULL, NULL, NULL);
}

inline _ns1__InTriggeredEventTrigger * soap_new_req__ns1__InTriggeredEventTrigger(
	struct soap *soap)
{
	_ns1__InTriggeredEventTrigger *_p = soap_new__ns1__InTriggeredEventTrigger(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InTriggeredEventTrigger * soap_new_set__ns1__InTriggeredEventTrigger(
	struct soap *soap,
	int *eventID,
	int *triggeredEventID,
	int *pointsEarned,
	LONG64 *jackpotAmount,
	xsd__base64Binary *initialTimeStamp,
	xsd__base64Binary *currentTimeStamp,
	int *slotMastId,
	char *OCR,
	LONG64 *initialCoinIn,
	LONG64 *initialCoinOut,
	LONG64 *initialJackpotHandpay,
	LONG64 *initialExternalBonusingMachinePayout,
	LONG64 *initialExternalBonusingAttendantPayout,
	LONG64 *initialAttendantPayProgressivePayout,
	LONG64 *initialMachinePayProgressivePayout,
	LONG64 *currentCoinIn,
	LONG64 *currentCoinOut,
	LONG64 *currentJackpotHandpay,
	LONG64 *currentExternalBonusingMachinePayout,
	LONG64 *currentExternalBonusingAttendantPayout,
	LONG64 *currentAttendantPayProgressivePayout,
	LONG64 *currentMachinePayProgressivePayout)
{
	_ns1__InTriggeredEventTrigger *_p = soap_new__ns1__InTriggeredEventTrigger(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InTriggeredEventTrigger::eventID = eventID;
		_p->_ns1__InTriggeredEventTrigger::triggeredEventID = triggeredEventID;
		_p->_ns1__InTriggeredEventTrigger::pointsEarned = pointsEarned;
		_p->_ns1__InTriggeredEventTrigger::jackpotAmount = jackpotAmount;
		_p->_ns1__InTriggeredEventTrigger::initialTimeStamp = initialTimeStamp;
		_p->_ns1__InTriggeredEventTrigger::currentTimeStamp = currentTimeStamp;
		_p->_ns1__InTriggeredEventTrigger::slotMastId = slotMastId;
		_p->_ns1__InTriggeredEventTrigger::OCR = OCR;
		_p->_ns1__InTriggeredEventTrigger::initialCoinIn = initialCoinIn;
		_p->_ns1__InTriggeredEventTrigger::initialCoinOut = initialCoinOut;
		_p->_ns1__InTriggeredEventTrigger::initialJackpotHandpay = initialJackpotHandpay;
		_p->_ns1__InTriggeredEventTrigger::initialExternalBonusingMachinePayout = initialExternalBonusingMachinePayout;
		_p->_ns1__InTriggeredEventTrigger::initialExternalBonusingAttendantPayout = initialExternalBonusingAttendantPayout;
		_p->_ns1__InTriggeredEventTrigger::initialAttendantPayProgressivePayout = initialAttendantPayProgressivePayout;
		_p->_ns1__InTriggeredEventTrigger::initialMachinePayProgressivePayout = initialMachinePayProgressivePayout;
		_p->_ns1__InTriggeredEventTrigger::currentCoinIn = currentCoinIn;
		_p->_ns1__InTriggeredEventTrigger::currentCoinOut = currentCoinOut;
		_p->_ns1__InTriggeredEventTrigger::currentJackpotHandpay = currentJackpotHandpay;
		_p->_ns1__InTriggeredEventTrigger::currentExternalBonusingMachinePayout = currentExternalBonusingMachinePayout;
		_p->_ns1__InTriggeredEventTrigger::currentExternalBonusingAttendantPayout = currentExternalBonusingAttendantPayout;
		_p->_ns1__InTriggeredEventTrigger::currentAttendantPayProgressivePayout = currentAttendantPayProgressivePayout;
		_p->_ns1__InTriggeredEventTrigger::currentMachinePayProgressivePayout = currentMachinePayProgressivePayout;
	}
	return _p;
}

inline int soap_write__ns1__InTriggeredEventTrigger(struct soap *soap, _ns1__InTriggeredEventTrigger const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InTriggeredEventTrigger", p->soap_type() == SOAP_TYPE__ns1__InTriggeredEventTrigger ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InTriggeredEventTrigger(struct soap *soap, const char *URL, _ns1__InTriggeredEventTrigger const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InTriggeredEventTrigger", p->soap_type() == SOAP_TYPE__ns1__InTriggeredEventTrigger ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InTriggeredEventTrigger(struct soap *soap, const char *URL, _ns1__InTriggeredEventTrigger const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InTriggeredEventTrigger", p->soap_type() == SOAP_TYPE__ns1__InTriggeredEventTrigger ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InTriggeredEventTrigger * SOAP_FMAC4 soap_get__ns1__InTriggeredEventTrigger(struct soap*, _ns1__InTriggeredEventTrigger *, const char*, const char*);

inline int soap_read__ns1__InTriggeredEventTrigger(struct soap *soap, _ns1__InTriggeredEventTrigger *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InTriggeredEventTrigger(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InTriggeredEventTrigger(struct soap *soap, const char *URL, _ns1__InTriggeredEventTrigger *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InTriggeredEventTrigger(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InTriggeredEventTrigger(struct soap *soap, _ns1__InTriggeredEventTrigger *p)
{
	if (soap_read__ns1__InTriggeredEventTrigger(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InEventTriggerResponse_DEFINED
#define SOAP_TYPE__ns1__InEventTriggerResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InEventTriggerResponse(struct soap*, const char*, int, const _ns1__InEventTriggerResponse *, const char*);
SOAP_FMAC3 _ns1__InEventTriggerResponse * SOAP_FMAC4 soap_in__ns1__InEventTriggerResponse(struct soap*, const char*, _ns1__InEventTriggerResponse *, const char*);
SOAP_FMAC1 _ns1__InEventTriggerResponse * SOAP_FMAC2 soap_instantiate__ns1__InEventTriggerResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InEventTriggerResponse * soap_new__ns1__InEventTriggerResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InEventTriggerResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__InEventTriggerResponse * soap_new_req__ns1__InEventTriggerResponse(
	struct soap *soap)
{
	_ns1__InEventTriggerResponse *_p = soap_new__ns1__InEventTriggerResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InEventTriggerResponse * soap_new_set__ns1__InEventTriggerResponse(
	struct soap *soap,
	bool *InEventTriggerResult)
{
	_ns1__InEventTriggerResponse *_p = soap_new__ns1__InEventTriggerResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InEventTriggerResponse::InEventTriggerResult = InEventTriggerResult;
	}
	return _p;
}

inline int soap_write__ns1__InEventTriggerResponse(struct soap *soap, _ns1__InEventTriggerResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InEventTriggerResponse", p->soap_type() == SOAP_TYPE__ns1__InEventTriggerResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InEventTriggerResponse(struct soap *soap, const char *URL, _ns1__InEventTriggerResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InEventTriggerResponse", p->soap_type() == SOAP_TYPE__ns1__InEventTriggerResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InEventTriggerResponse(struct soap *soap, const char *URL, _ns1__InEventTriggerResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InEventTriggerResponse", p->soap_type() == SOAP_TYPE__ns1__InEventTriggerResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InEventTriggerResponse * SOAP_FMAC4 soap_get__ns1__InEventTriggerResponse(struct soap*, _ns1__InEventTriggerResponse *, const char*, const char*);

inline int soap_read__ns1__InEventTriggerResponse(struct soap *soap, _ns1__InEventTriggerResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InEventTriggerResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InEventTriggerResponse(struct soap *soap, const char *URL, _ns1__InEventTriggerResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InEventTriggerResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InEventTriggerResponse(struct soap *soap, _ns1__InEventTriggerResponse *p)
{
	if (soap_read__ns1__InEventTriggerResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InEventTrigger_DEFINED
#define SOAP_TYPE__ns1__InEventTrigger_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InEventTrigger(struct soap*, const char*, int, const _ns1__InEventTrigger *, const char*);
SOAP_FMAC3 _ns1__InEventTrigger * SOAP_FMAC4 soap_in__ns1__InEventTrigger(struct soap*, const char*, _ns1__InEventTrigger *, const char*);
SOAP_FMAC1 _ns1__InEventTrigger * SOAP_FMAC2 soap_instantiate__ns1__InEventTrigger(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InEventTrigger * soap_new__ns1__InEventTrigger(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InEventTrigger(soap, n, NULL, NULL, NULL);
}

inline _ns1__InEventTrigger * soap_new_req__ns1__InEventTrigger(
	struct soap *soap)
{
	_ns1__InEventTrigger *_p = soap_new__ns1__InEventTrigger(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__InEventTrigger * soap_new_set__ns1__InEventTrigger(
	struct soap *soap,
	int *eventID,
	LONG64 *jackpotAmount,
	xsd__base64Binary *initialTimeStamp,
	xsd__base64Binary *currentTimeStamp,
	int *slotMastId,
	char *OCR,
	int *lastTriggeredEventId,
	LONG64 *initialCoinIn,
	LONG64 *initialCoinOut,
	LONG64 *initialJackpotHandpay,
	LONG64 *initialExternalBonusingMachinePayout,
	LONG64 *initialExternalBonusingAttendantPayout,
	LONG64 *initialAttendantPayProgressivePayout,
	LONG64 *initialMachinePayProgressivePayout,
	LONG64 *currentCoinIn,
	LONG64 *currentCoinOut,
	LONG64 *currentJackpotHandpay,
	LONG64 *currentExternalBonusingMachinePayout,
	LONG64 *currentExternalBonusingAttendantPayout,
	LONG64 *currentAttendantPayProgressivePayout,
	LONG64 *currentMachinePayProgressivePayout,
	xsd__base64Binary *nonTriggeredEventList,
	int *nonTriggeredEventsCount)
{
	_ns1__InEventTrigger *_p = soap_new__ns1__InEventTrigger(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InEventTrigger::eventID = eventID;
		_p->_ns1__InEventTrigger::jackpotAmount = jackpotAmount;
		_p->_ns1__InEventTrigger::initialTimeStamp = initialTimeStamp;
		_p->_ns1__InEventTrigger::currentTimeStamp = currentTimeStamp;
		_p->_ns1__InEventTrigger::slotMastId = slotMastId;
		_p->_ns1__InEventTrigger::OCR = OCR;
		_p->_ns1__InEventTrigger::lastTriggeredEventId = lastTriggeredEventId;
		_p->_ns1__InEventTrigger::initialCoinIn = initialCoinIn;
		_p->_ns1__InEventTrigger::initialCoinOut = initialCoinOut;
		_p->_ns1__InEventTrigger::initialJackpotHandpay = initialJackpotHandpay;
		_p->_ns1__InEventTrigger::initialExternalBonusingMachinePayout = initialExternalBonusingMachinePayout;
		_p->_ns1__InEventTrigger::initialExternalBonusingAttendantPayout = initialExternalBonusingAttendantPayout;
		_p->_ns1__InEventTrigger::initialAttendantPayProgressivePayout = initialAttendantPayProgressivePayout;
		_p->_ns1__InEventTrigger::initialMachinePayProgressivePayout = initialMachinePayProgressivePayout;
		_p->_ns1__InEventTrigger::currentCoinIn = currentCoinIn;
		_p->_ns1__InEventTrigger::currentCoinOut = currentCoinOut;
		_p->_ns1__InEventTrigger::currentJackpotHandpay = currentJackpotHandpay;
		_p->_ns1__InEventTrigger::currentExternalBonusingMachinePayout = currentExternalBonusingMachinePayout;
		_p->_ns1__InEventTrigger::currentExternalBonusingAttendantPayout = currentExternalBonusingAttendantPayout;
		_p->_ns1__InEventTrigger::currentAttendantPayProgressivePayout = currentAttendantPayProgressivePayout;
		_p->_ns1__InEventTrigger::currentMachinePayProgressivePayout = currentMachinePayProgressivePayout;
		_p->_ns1__InEventTrigger::nonTriggeredEventList = nonTriggeredEventList;
		_p->_ns1__InEventTrigger::nonTriggeredEventsCount = nonTriggeredEventsCount;
	}
	return _p;
}

inline int soap_write__ns1__InEventTrigger(struct soap *soap, _ns1__InEventTrigger const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InEventTrigger", p->soap_type() == SOAP_TYPE__ns1__InEventTrigger ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__InEventTrigger(struct soap *soap, const char *URL, _ns1__InEventTrigger const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InEventTrigger", p->soap_type() == SOAP_TYPE__ns1__InEventTrigger ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__InEventTrigger(struct soap *soap, const char *URL, _ns1__InEventTrigger const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InEventTrigger", p->soap_type() == SOAP_TYPE__ns1__InEventTrigger ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InEventTrigger * SOAP_FMAC4 soap_get__ns1__InEventTrigger(struct soap*, _ns1__InEventTrigger *, const char*, const char*);

inline int soap_read__ns1__InEventTrigger(struct soap *soap, _ns1__InEventTrigger *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InEventTrigger(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__InEventTrigger(struct soap *soap, const char *URL, _ns1__InEventTrigger *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__InEventTrigger(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__InEventTrigger(struct soap *soap, _ns1__InEventTrigger *p)
{
	if (soap_read__ns1__InEventTrigger(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetEventXMLFileResponse_DEFINED
#define SOAP_TYPE__ns1__GetEventXMLFileResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetEventXMLFileResponse(struct soap*, const char*, int, const _ns1__GetEventXMLFileResponse *, const char*);
SOAP_FMAC3 _ns1__GetEventXMLFileResponse * SOAP_FMAC4 soap_in__ns1__GetEventXMLFileResponse(struct soap*, const char*, _ns1__GetEventXMLFileResponse *, const char*);
SOAP_FMAC1 _ns1__GetEventXMLFileResponse * SOAP_FMAC2 soap_instantiate__ns1__GetEventXMLFileResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetEventXMLFileResponse * soap_new__ns1__GetEventXMLFileResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetEventXMLFileResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetEventXMLFileResponse * soap_new_req__ns1__GetEventXMLFileResponse(
	struct soap *soap)
{
	_ns1__GetEventXMLFileResponse *_p = soap_new__ns1__GetEventXMLFileResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetEventXMLFileResponse * soap_new_set__ns1__GetEventXMLFileResponse(
	struct soap *soap,
	bool *GetEventXMLFileResult,
	int *fileID,
	int *checksum)
{
	_ns1__GetEventXMLFileResponse *_p = soap_new__ns1__GetEventXMLFileResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetEventXMLFileResponse::GetEventXMLFileResult = GetEventXMLFileResult;
		_p->_ns1__GetEventXMLFileResponse::fileID = fileID;
		_p->_ns1__GetEventXMLFileResponse::checksum = checksum;
	}
	return _p;
}

inline int soap_write__ns1__GetEventXMLFileResponse(struct soap *soap, _ns1__GetEventXMLFileResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetEventXMLFileResponse", p->soap_type() == SOAP_TYPE__ns1__GetEventXMLFileResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetEventXMLFileResponse(struct soap *soap, const char *URL, _ns1__GetEventXMLFileResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetEventXMLFileResponse", p->soap_type() == SOAP_TYPE__ns1__GetEventXMLFileResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetEventXMLFileResponse(struct soap *soap, const char *URL, _ns1__GetEventXMLFileResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetEventXMLFileResponse", p->soap_type() == SOAP_TYPE__ns1__GetEventXMLFileResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetEventXMLFileResponse * SOAP_FMAC4 soap_get__ns1__GetEventXMLFileResponse(struct soap*, _ns1__GetEventXMLFileResponse *, const char*, const char*);

inline int soap_read__ns1__GetEventXMLFileResponse(struct soap *soap, _ns1__GetEventXMLFileResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetEventXMLFileResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetEventXMLFileResponse(struct soap *soap, const char *URL, _ns1__GetEventXMLFileResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetEventXMLFileResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetEventXMLFileResponse(struct soap *soap, _ns1__GetEventXMLFileResponse *p)
{
	if (soap_read__ns1__GetEventXMLFileResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetEventXMLFile_DEFINED
#define SOAP_TYPE__ns1__GetEventXMLFile_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetEventXMLFile(struct soap*, const char*, int, const _ns1__GetEventXMLFile *, const char*);
SOAP_FMAC3 _ns1__GetEventXMLFile * SOAP_FMAC4 soap_in__ns1__GetEventXMLFile(struct soap*, const char*, _ns1__GetEventXMLFile *, const char*);
SOAP_FMAC1 _ns1__GetEventXMLFile * SOAP_FMAC2 soap_instantiate__ns1__GetEventXMLFile(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetEventXMLFile * soap_new__ns1__GetEventXMLFile(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetEventXMLFile(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetEventXMLFile * soap_new_req__ns1__GetEventXMLFile(
	struct soap *soap)
{
	_ns1__GetEventXMLFile *_p = soap_new__ns1__GetEventXMLFile(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetEventXMLFile * soap_new_set__ns1__GetEventXMLFile(
	struct soap *soap)
{
	_ns1__GetEventXMLFile *_p = soap_new__ns1__GetEventXMLFile(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__GetEventXMLFile(struct soap *soap, _ns1__GetEventXMLFile const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetEventXMLFile", p->soap_type() == SOAP_TYPE__ns1__GetEventXMLFile ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetEventXMLFile(struct soap *soap, const char *URL, _ns1__GetEventXMLFile const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetEventXMLFile", p->soap_type() == SOAP_TYPE__ns1__GetEventXMLFile ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetEventXMLFile(struct soap *soap, const char *URL, _ns1__GetEventXMLFile const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetEventXMLFile", p->soap_type() == SOAP_TYPE__ns1__GetEventXMLFile ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetEventXMLFile * SOAP_FMAC4 soap_get__ns1__GetEventXMLFile(struct soap*, _ns1__GetEventXMLFile *, const char*, const char*);

inline int soap_read__ns1__GetEventXMLFile(struct soap *soap, _ns1__GetEventXMLFile *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetEventXMLFile(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetEventXMLFile(struct soap *soap, const char *URL, _ns1__GetEventXMLFile *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetEventXMLFile(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetEventXMLFile(struct soap *soap, _ns1__GetEventXMLFile *p)
{
	if (soap_read__ns1__GetEventXMLFile(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetConfigExResponse_DEFINED
#define SOAP_TYPE__ns1__GetConfigExResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetConfigExResponse(struct soap*, const char*, int, const _ns1__GetConfigExResponse *, const char*);
SOAP_FMAC3 _ns1__GetConfigExResponse * SOAP_FMAC4 soap_in__ns1__GetConfigExResponse(struct soap*, const char*, _ns1__GetConfigExResponse *, const char*);
SOAP_FMAC1 _ns1__GetConfigExResponse * SOAP_FMAC2 soap_instantiate__ns1__GetConfigExResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetConfigExResponse * soap_new__ns1__GetConfigExResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetConfigExResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetConfigExResponse * soap_new_req__ns1__GetConfigExResponse(
	struct soap *soap)
{
	_ns1__GetConfigExResponse *_p = soap_new__ns1__GetConfigExResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetConfigExResponse * soap_new_set__ns1__GetConfigExResponse(
	struct soap *soap,
	bool *GetConfigExResult,
	int *currentFileID,
	int *currentChecksum,
	int *pendingfileID,
	int *pendingChecksum,
	double *par,
	ns2__ArrayOfKeyValueOfstringstring *parameters)
{
	_ns1__GetConfigExResponse *_p = soap_new__ns1__GetConfigExResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetConfigExResponse::GetConfigExResult = GetConfigExResult;
		_p->_ns1__GetConfigExResponse::currentFileID = currentFileID;
		_p->_ns1__GetConfigExResponse::currentChecksum = currentChecksum;
		_p->_ns1__GetConfigExResponse::pendingfileID = pendingfileID;
		_p->_ns1__GetConfigExResponse::pendingChecksum = pendingChecksum;
		_p->_ns1__GetConfigExResponse::par = par;
		_p->_ns1__GetConfigExResponse::parameters = parameters;
	}
	return _p;
}

inline int soap_write__ns1__GetConfigExResponse(struct soap *soap, _ns1__GetConfigExResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetConfigExResponse", p->soap_type() == SOAP_TYPE__ns1__GetConfigExResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetConfigExResponse(struct soap *soap, const char *URL, _ns1__GetConfigExResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetConfigExResponse", p->soap_type() == SOAP_TYPE__ns1__GetConfigExResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetConfigExResponse(struct soap *soap, const char *URL, _ns1__GetConfigExResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetConfigExResponse", p->soap_type() == SOAP_TYPE__ns1__GetConfigExResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetConfigExResponse * SOAP_FMAC4 soap_get__ns1__GetConfigExResponse(struct soap*, _ns1__GetConfigExResponse *, const char*, const char*);

inline int soap_read__ns1__GetConfigExResponse(struct soap *soap, _ns1__GetConfigExResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetConfigExResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetConfigExResponse(struct soap *soap, const char *URL, _ns1__GetConfigExResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetConfigExResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetConfigExResponse(struct soap *soap, _ns1__GetConfigExResponse *p)
{
	if (soap_read__ns1__GetConfigExResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetConfigEx_DEFINED
#define SOAP_TYPE__ns1__GetConfigEx_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetConfigEx(struct soap*, const char*, int, const _ns1__GetConfigEx *, const char*);
SOAP_FMAC3 _ns1__GetConfigEx * SOAP_FMAC4 soap_in__ns1__GetConfigEx(struct soap*, const char*, _ns1__GetConfigEx *, const char*);
SOAP_FMAC1 _ns1__GetConfigEx * SOAP_FMAC2 soap_instantiate__ns1__GetConfigEx(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetConfigEx * soap_new__ns1__GetConfigEx(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetConfigEx(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetConfigEx * soap_new_req__ns1__GetConfigEx(
	struct soap *soap)
{
	_ns1__GetConfigEx *_p = soap_new__ns1__GetConfigEx(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetConfigEx * soap_new_set__ns1__GetConfigEx(
	struct soap *soap,
	int *slotmastID)
{
	_ns1__GetConfigEx *_p = soap_new__ns1__GetConfigEx(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetConfigEx::slotmastID = slotmastID;
	}
	return _p;
}

inline int soap_write__ns1__GetConfigEx(struct soap *soap, _ns1__GetConfigEx const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetConfigEx", p->soap_type() == SOAP_TYPE__ns1__GetConfigEx ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetConfigEx(struct soap *soap, const char *URL, _ns1__GetConfigEx const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetConfigEx", p->soap_type() == SOAP_TYPE__ns1__GetConfigEx ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetConfigEx(struct soap *soap, const char *URL, _ns1__GetConfigEx const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetConfigEx", p->soap_type() == SOAP_TYPE__ns1__GetConfigEx ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetConfigEx * SOAP_FMAC4 soap_get__ns1__GetConfigEx(struct soap*, _ns1__GetConfigEx *, const char*, const char*);

inline int soap_read__ns1__GetConfigEx(struct soap *soap, _ns1__GetConfigEx *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetConfigEx(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetConfigEx(struct soap *soap, const char *URL, _ns1__GetConfigEx *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetConfigEx(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetConfigEx(struct soap *soap, _ns1__GetConfigEx *p)
{
	if (soap_read__ns1__GetConfigEx(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetConfigResponse_DEFINED
#define SOAP_TYPE__ns1__GetConfigResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetConfigResponse(struct soap*, const char*, int, const _ns1__GetConfigResponse *, const char*);
SOAP_FMAC3 _ns1__GetConfigResponse * SOAP_FMAC4 soap_in__ns1__GetConfigResponse(struct soap*, const char*, _ns1__GetConfigResponse *, const char*);
SOAP_FMAC1 _ns1__GetConfigResponse * SOAP_FMAC2 soap_instantiate__ns1__GetConfigResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetConfigResponse * soap_new__ns1__GetConfigResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetConfigResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetConfigResponse * soap_new_req__ns1__GetConfigResponse(
	struct soap *soap)
{
	_ns1__GetConfigResponse *_p = soap_new__ns1__GetConfigResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetConfigResponse * soap_new_set__ns1__GetConfigResponse(
	struct soap *soap,
	bool *GetConfigResult,
	int *currentFileID,
	int *currentChecksum,
	int *pendingfileID,
	int *pendingChecksum,
	double *par)
{
	_ns1__GetConfigResponse *_p = soap_new__ns1__GetConfigResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetConfigResponse::GetConfigResult = GetConfigResult;
		_p->_ns1__GetConfigResponse::currentFileID = currentFileID;
		_p->_ns1__GetConfigResponse::currentChecksum = currentChecksum;
		_p->_ns1__GetConfigResponse::pendingfileID = pendingfileID;
		_p->_ns1__GetConfigResponse::pendingChecksum = pendingChecksum;
		_p->_ns1__GetConfigResponse::par = par;
	}
	return _p;
}

inline int soap_write__ns1__GetConfigResponse(struct soap *soap, _ns1__GetConfigResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetConfigResponse", p->soap_type() == SOAP_TYPE__ns1__GetConfigResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetConfigResponse(struct soap *soap, const char *URL, _ns1__GetConfigResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetConfigResponse", p->soap_type() == SOAP_TYPE__ns1__GetConfigResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetConfigResponse(struct soap *soap, const char *URL, _ns1__GetConfigResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetConfigResponse", p->soap_type() == SOAP_TYPE__ns1__GetConfigResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetConfigResponse * SOAP_FMAC4 soap_get__ns1__GetConfigResponse(struct soap*, _ns1__GetConfigResponse *, const char*, const char*);

inline int soap_read__ns1__GetConfigResponse(struct soap *soap, _ns1__GetConfigResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetConfigResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetConfigResponse(struct soap *soap, const char *URL, _ns1__GetConfigResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetConfigResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetConfigResponse(struct soap *soap, _ns1__GetConfigResponse *p)
{
	if (soap_read__ns1__GetConfigResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetConfig_DEFINED
#define SOAP_TYPE__ns1__GetConfig_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetConfig(struct soap*, const char*, int, const _ns1__GetConfig *, const char*);
SOAP_FMAC3 _ns1__GetConfig * SOAP_FMAC4 soap_in__ns1__GetConfig(struct soap*, const char*, _ns1__GetConfig *, const char*);
SOAP_FMAC1 _ns1__GetConfig * SOAP_FMAC2 soap_instantiate__ns1__GetConfig(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetConfig * soap_new__ns1__GetConfig(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetConfig(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetConfig * soap_new_req__ns1__GetConfig(
	struct soap *soap)
{
	_ns1__GetConfig *_p = soap_new__ns1__GetConfig(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetConfig * soap_new_set__ns1__GetConfig(
	struct soap *soap,
	int *slotmastID)
{
	_ns1__GetConfig *_p = soap_new__ns1__GetConfig(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetConfig::slotmastID = slotmastID;
	}
	return _p;
}

inline int soap_write__ns1__GetConfig(struct soap *soap, _ns1__GetConfig const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetConfig", p->soap_type() == SOAP_TYPE__ns1__GetConfig ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetConfig(struct soap *soap, const char *URL, _ns1__GetConfig const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetConfig", p->soap_type() == SOAP_TYPE__ns1__GetConfig ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetConfig(struct soap *soap, const char *URL, _ns1__GetConfig const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetConfig", p->soap_type() == SOAP_TYPE__ns1__GetConfig ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetConfig * SOAP_FMAC4 soap_get__ns1__GetConfig(struct soap*, _ns1__GetConfig *, const char*, const char*);

inline int soap_read__ns1__GetConfig(struct soap *soap, _ns1__GetConfig *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetConfig(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetConfig(struct soap *soap, const char *URL, _ns1__GetConfig *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetConfig(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetConfig(struct soap *soap, _ns1__GetConfig *p)
{
	if (soap_read__ns1__GetConfig(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetFileInformationResponse_DEFINED
#define SOAP_TYPE__ns1__GetFileInformationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetFileInformationResponse(struct soap*, const char*, int, const _ns1__GetFileInformationResponse *, const char*);
SOAP_FMAC3 _ns1__GetFileInformationResponse * SOAP_FMAC4 soap_in__ns1__GetFileInformationResponse(struct soap*, const char*, _ns1__GetFileInformationResponse *, const char*);
SOAP_FMAC1 _ns1__GetFileInformationResponse * SOAP_FMAC2 soap_instantiate__ns1__GetFileInformationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetFileInformationResponse * soap_new__ns1__GetFileInformationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetFileInformationResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetFileInformationResponse * soap_new_req__ns1__GetFileInformationResponse(
	struct soap *soap)
{
	_ns1__GetFileInformationResponse *_p = soap_new__ns1__GetFileInformationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetFileInformationResponse * soap_new_set__ns1__GetFileInformationResponse(
	struct soap *soap,
	bool *GetFileInformationResult,
	int *filesize)
{
	_ns1__GetFileInformationResponse *_p = soap_new__ns1__GetFileInformationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetFileInformationResponse::GetFileInformationResult = GetFileInformationResult;
		_p->_ns1__GetFileInformationResponse::filesize = filesize;
	}
	return _p;
}

inline int soap_write__ns1__GetFileInformationResponse(struct soap *soap, _ns1__GetFileInformationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetFileInformationResponse", p->soap_type() == SOAP_TYPE__ns1__GetFileInformationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetFileInformationResponse(struct soap *soap, const char *URL, _ns1__GetFileInformationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetFileInformationResponse", p->soap_type() == SOAP_TYPE__ns1__GetFileInformationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetFileInformationResponse(struct soap *soap, const char *URL, _ns1__GetFileInformationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetFileInformationResponse", p->soap_type() == SOAP_TYPE__ns1__GetFileInformationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetFileInformationResponse * SOAP_FMAC4 soap_get__ns1__GetFileInformationResponse(struct soap*, _ns1__GetFileInformationResponse *, const char*, const char*);

inline int soap_read__ns1__GetFileInformationResponse(struct soap *soap, _ns1__GetFileInformationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetFileInformationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetFileInformationResponse(struct soap *soap, const char *URL, _ns1__GetFileInformationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetFileInformationResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetFileInformationResponse(struct soap *soap, _ns1__GetFileInformationResponse *p)
{
	if (soap_read__ns1__GetFileInformationResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetFileInformation_DEFINED
#define SOAP_TYPE__ns1__GetFileInformation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetFileInformation(struct soap*, const char*, int, const _ns1__GetFileInformation *, const char*);
SOAP_FMAC3 _ns1__GetFileInformation * SOAP_FMAC4 soap_in__ns1__GetFileInformation(struct soap*, const char*, _ns1__GetFileInformation *, const char*);
SOAP_FMAC1 _ns1__GetFileInformation * SOAP_FMAC2 soap_instantiate__ns1__GetFileInformation(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetFileInformation * soap_new__ns1__GetFileInformation(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetFileInformation(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetFileInformation * soap_new_req__ns1__GetFileInformation(
	struct soap *soap)
{
	_ns1__GetFileInformation *_p = soap_new__ns1__GetFileInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetFileInformation * soap_new_set__ns1__GetFileInformation(
	struct soap *soap,
	char *filename)
{
	_ns1__GetFileInformation *_p = soap_new__ns1__GetFileInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetFileInformation::filename = filename;
	}
	return _p;
}

inline int soap_write__ns1__GetFileInformation(struct soap *soap, _ns1__GetFileInformation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetFileInformation", p->soap_type() == SOAP_TYPE__ns1__GetFileInformation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetFileInformation(struct soap *soap, const char *URL, _ns1__GetFileInformation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetFileInformation", p->soap_type() == SOAP_TYPE__ns1__GetFileInformation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetFileInformation(struct soap *soap, const char *URL, _ns1__GetFileInformation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetFileInformation", p->soap_type() == SOAP_TYPE__ns1__GetFileInformation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetFileInformation * SOAP_FMAC4 soap_get__ns1__GetFileInformation(struct soap*, _ns1__GetFileInformation *, const char*, const char*);

inline int soap_read__ns1__GetFileInformation(struct soap *soap, _ns1__GetFileInformation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetFileInformation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetFileInformation(struct soap *soap, const char *URL, _ns1__GetFileInformation *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetFileInformation(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetFileInformation(struct soap *soap, _ns1__GetFileInformation *p)
{
	if (soap_read__ns1__GetFileInformation(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetFlashUdpCompleteAnnouncementResponse_DEFINED
#define SOAP_TYPE__ns1__GetFlashUdpCompleteAnnouncementResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetFlashUdpCompleteAnnouncementResponse(struct soap*, const char*, int, const _ns1__GetFlashUdpCompleteAnnouncementResponse *, const char*);
SOAP_FMAC3 _ns1__GetFlashUdpCompleteAnnouncementResponse * SOAP_FMAC4 soap_in__ns1__GetFlashUdpCompleteAnnouncementResponse(struct soap*, const char*, _ns1__GetFlashUdpCompleteAnnouncementResponse *, const char*);
SOAP_FMAC1 _ns1__GetFlashUdpCompleteAnnouncementResponse * SOAP_FMAC2 soap_instantiate__ns1__GetFlashUdpCompleteAnnouncementResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetFlashUdpCompleteAnnouncementResponse * soap_new__ns1__GetFlashUdpCompleteAnnouncementResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetFlashUdpCompleteAnnouncementResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetFlashUdpCompleteAnnouncementResponse * soap_new_req__ns1__GetFlashUdpCompleteAnnouncementResponse(
	struct soap *soap)
{
	_ns1__GetFlashUdpCompleteAnnouncementResponse *_p = soap_new__ns1__GetFlashUdpCompleteAnnouncementResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetFlashUdpCompleteAnnouncementResponse * soap_new_set__ns1__GetFlashUdpCompleteAnnouncementResponse(
	struct soap *soap,
	bool *GetFlashUdpCompleteAnnouncementResult,
	int *fileID)
{
	_ns1__GetFlashUdpCompleteAnnouncementResponse *_p = soap_new__ns1__GetFlashUdpCompleteAnnouncementResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetFlashUdpCompleteAnnouncementResponse::GetFlashUdpCompleteAnnouncementResult = GetFlashUdpCompleteAnnouncementResult;
		_p->_ns1__GetFlashUdpCompleteAnnouncementResponse::fileID = fileID;
	}
	return _p;
}

inline int soap_write__ns1__GetFlashUdpCompleteAnnouncementResponse(struct soap *soap, _ns1__GetFlashUdpCompleteAnnouncementResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetFlashUdpCompleteAnnouncementResponse", p->soap_type() == SOAP_TYPE__ns1__GetFlashUdpCompleteAnnouncementResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetFlashUdpCompleteAnnouncementResponse(struct soap *soap, const char *URL, _ns1__GetFlashUdpCompleteAnnouncementResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetFlashUdpCompleteAnnouncementResponse", p->soap_type() == SOAP_TYPE__ns1__GetFlashUdpCompleteAnnouncementResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetFlashUdpCompleteAnnouncementResponse(struct soap *soap, const char *URL, _ns1__GetFlashUdpCompleteAnnouncementResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetFlashUdpCompleteAnnouncementResponse", p->soap_type() == SOAP_TYPE__ns1__GetFlashUdpCompleteAnnouncementResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetFlashUdpCompleteAnnouncementResponse * SOAP_FMAC4 soap_get__ns1__GetFlashUdpCompleteAnnouncementResponse(struct soap*, _ns1__GetFlashUdpCompleteAnnouncementResponse *, const char*, const char*);

inline int soap_read__ns1__GetFlashUdpCompleteAnnouncementResponse(struct soap *soap, _ns1__GetFlashUdpCompleteAnnouncementResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetFlashUdpCompleteAnnouncementResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetFlashUdpCompleteAnnouncementResponse(struct soap *soap, const char *URL, _ns1__GetFlashUdpCompleteAnnouncementResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetFlashUdpCompleteAnnouncementResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetFlashUdpCompleteAnnouncementResponse(struct soap *soap, _ns1__GetFlashUdpCompleteAnnouncementResponse *p)
{
	if (soap_read__ns1__GetFlashUdpCompleteAnnouncementResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetFlashUdpCompleteAnnouncement_DEFINED
#define SOAP_TYPE__ns1__GetFlashUdpCompleteAnnouncement_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetFlashUdpCompleteAnnouncement(struct soap*, const char*, int, const _ns1__GetFlashUdpCompleteAnnouncement *, const char*);
SOAP_FMAC3 _ns1__GetFlashUdpCompleteAnnouncement * SOAP_FMAC4 soap_in__ns1__GetFlashUdpCompleteAnnouncement(struct soap*, const char*, _ns1__GetFlashUdpCompleteAnnouncement *, const char*);
SOAP_FMAC1 _ns1__GetFlashUdpCompleteAnnouncement * SOAP_FMAC2 soap_instantiate__ns1__GetFlashUdpCompleteAnnouncement(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetFlashUdpCompleteAnnouncement * soap_new__ns1__GetFlashUdpCompleteAnnouncement(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetFlashUdpCompleteAnnouncement(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetFlashUdpCompleteAnnouncement * soap_new_req__ns1__GetFlashUdpCompleteAnnouncement(
	struct soap *soap)
{
	_ns1__GetFlashUdpCompleteAnnouncement *_p = soap_new__ns1__GetFlashUdpCompleteAnnouncement(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetFlashUdpCompleteAnnouncement * soap_new_set__ns1__GetFlashUdpCompleteAnnouncement(
	struct soap *soap,
	xsd__base64Binary *lastTimeStamp,
	int *ID,
	int *slotmastID)
{
	_ns1__GetFlashUdpCompleteAnnouncement *_p = soap_new__ns1__GetFlashUdpCompleteAnnouncement(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetFlashUdpCompleteAnnouncement::lastTimeStamp = lastTimeStamp;
		_p->_ns1__GetFlashUdpCompleteAnnouncement::ID = ID;
		_p->_ns1__GetFlashUdpCompleteAnnouncement::slotmastID = slotmastID;
	}
	return _p;
}

inline int soap_write__ns1__GetFlashUdpCompleteAnnouncement(struct soap *soap, _ns1__GetFlashUdpCompleteAnnouncement const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetFlashUdpCompleteAnnouncement", p->soap_type() == SOAP_TYPE__ns1__GetFlashUdpCompleteAnnouncement ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetFlashUdpCompleteAnnouncement(struct soap *soap, const char *URL, _ns1__GetFlashUdpCompleteAnnouncement const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetFlashUdpCompleteAnnouncement", p->soap_type() == SOAP_TYPE__ns1__GetFlashUdpCompleteAnnouncement ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetFlashUdpCompleteAnnouncement(struct soap *soap, const char *URL, _ns1__GetFlashUdpCompleteAnnouncement const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetFlashUdpCompleteAnnouncement", p->soap_type() == SOAP_TYPE__ns1__GetFlashUdpCompleteAnnouncement ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetFlashUdpCompleteAnnouncement * SOAP_FMAC4 soap_get__ns1__GetFlashUdpCompleteAnnouncement(struct soap*, _ns1__GetFlashUdpCompleteAnnouncement *, const char*, const char*);

inline int soap_read__ns1__GetFlashUdpCompleteAnnouncement(struct soap *soap, _ns1__GetFlashUdpCompleteAnnouncement *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetFlashUdpCompleteAnnouncement(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetFlashUdpCompleteAnnouncement(struct soap *soap, const char *URL, _ns1__GetFlashUdpCompleteAnnouncement *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetFlashUdpCompleteAnnouncement(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetFlashUdpCompleteAnnouncement(struct soap *soap, _ns1__GetFlashUdpCompleteAnnouncement *p)
{
	if (soap_read__ns1__GetFlashUdpCompleteAnnouncement(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetFlashStartAnnouncementResponse_DEFINED
#define SOAP_TYPE__ns1__GetFlashStartAnnouncementResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetFlashStartAnnouncementResponse(struct soap*, const char*, int, const _ns1__GetFlashStartAnnouncementResponse *, const char*);
SOAP_FMAC3 _ns1__GetFlashStartAnnouncementResponse * SOAP_FMAC4 soap_in__ns1__GetFlashStartAnnouncementResponse(struct soap*, const char*, _ns1__GetFlashStartAnnouncementResponse *, const char*);
SOAP_FMAC1 _ns1__GetFlashStartAnnouncementResponse * SOAP_FMAC2 soap_instantiate__ns1__GetFlashStartAnnouncementResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetFlashStartAnnouncementResponse * soap_new__ns1__GetFlashStartAnnouncementResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetFlashStartAnnouncementResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetFlashStartAnnouncementResponse * soap_new_req__ns1__GetFlashStartAnnouncementResponse(
	struct soap *soap)
{
	_ns1__GetFlashStartAnnouncementResponse *_p = soap_new__ns1__GetFlashStartAnnouncementResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetFlashStartAnnouncementResponse * soap_new_set__ns1__GetFlashStartAnnouncementResponse(
	struct soap *soap,
	bool *GetFlashStartAnnouncementResult,
	char *filename,
	int *size,
	int *checksum,
	int *fileID,
	char *ipAddress,
	int *port,
	int *mediaType)
{
	_ns1__GetFlashStartAnnouncementResponse *_p = soap_new__ns1__GetFlashStartAnnouncementResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetFlashStartAnnouncementResponse::GetFlashStartAnnouncementResult = GetFlashStartAnnouncementResult;
		_p->_ns1__GetFlashStartAnnouncementResponse::filename = filename;
		_p->_ns1__GetFlashStartAnnouncementResponse::size = size;
		_p->_ns1__GetFlashStartAnnouncementResponse::checksum = checksum;
		_p->_ns1__GetFlashStartAnnouncementResponse::fileID = fileID;
		_p->_ns1__GetFlashStartAnnouncementResponse::ipAddress = ipAddress;
		_p->_ns1__GetFlashStartAnnouncementResponse::port = port;
		_p->_ns1__GetFlashStartAnnouncementResponse::mediaType = mediaType;
	}
	return _p;
}

inline int soap_write__ns1__GetFlashStartAnnouncementResponse(struct soap *soap, _ns1__GetFlashStartAnnouncementResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetFlashStartAnnouncementResponse", p->soap_type() == SOAP_TYPE__ns1__GetFlashStartAnnouncementResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetFlashStartAnnouncementResponse(struct soap *soap, const char *URL, _ns1__GetFlashStartAnnouncementResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetFlashStartAnnouncementResponse", p->soap_type() == SOAP_TYPE__ns1__GetFlashStartAnnouncementResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetFlashStartAnnouncementResponse(struct soap *soap, const char *URL, _ns1__GetFlashStartAnnouncementResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetFlashStartAnnouncementResponse", p->soap_type() == SOAP_TYPE__ns1__GetFlashStartAnnouncementResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetFlashStartAnnouncementResponse * SOAP_FMAC4 soap_get__ns1__GetFlashStartAnnouncementResponse(struct soap*, _ns1__GetFlashStartAnnouncementResponse *, const char*, const char*);

inline int soap_read__ns1__GetFlashStartAnnouncementResponse(struct soap *soap, _ns1__GetFlashStartAnnouncementResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetFlashStartAnnouncementResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetFlashStartAnnouncementResponse(struct soap *soap, const char *URL, _ns1__GetFlashStartAnnouncementResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetFlashStartAnnouncementResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetFlashStartAnnouncementResponse(struct soap *soap, _ns1__GetFlashStartAnnouncementResponse *p)
{
	if (soap_read__ns1__GetFlashStartAnnouncementResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetFlashStartAnnouncement_DEFINED
#define SOAP_TYPE__ns1__GetFlashStartAnnouncement_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetFlashStartAnnouncement(struct soap*, const char*, int, const _ns1__GetFlashStartAnnouncement *, const char*);
SOAP_FMAC3 _ns1__GetFlashStartAnnouncement * SOAP_FMAC4 soap_in__ns1__GetFlashStartAnnouncement(struct soap*, const char*, _ns1__GetFlashStartAnnouncement *, const char*);
SOAP_FMAC1 _ns1__GetFlashStartAnnouncement * SOAP_FMAC2 soap_instantiate__ns1__GetFlashStartAnnouncement(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetFlashStartAnnouncement * soap_new__ns1__GetFlashStartAnnouncement(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetFlashStartAnnouncement(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetFlashStartAnnouncement * soap_new_req__ns1__GetFlashStartAnnouncement(
	struct soap *soap)
{
	_ns1__GetFlashStartAnnouncement *_p = soap_new__ns1__GetFlashStartAnnouncement(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetFlashStartAnnouncement * soap_new_set__ns1__GetFlashStartAnnouncement(
	struct soap *soap,
	xsd__base64Binary *lastTimeStamp,
	int *ID,
	int *slotmastID)
{
	_ns1__GetFlashStartAnnouncement *_p = soap_new__ns1__GetFlashStartAnnouncement(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetFlashStartAnnouncement::lastTimeStamp = lastTimeStamp;
		_p->_ns1__GetFlashStartAnnouncement::ID = ID;
		_p->_ns1__GetFlashStartAnnouncement::slotmastID = slotmastID;
	}
	return _p;
}

inline int soap_write__ns1__GetFlashStartAnnouncement(struct soap *soap, _ns1__GetFlashStartAnnouncement const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetFlashStartAnnouncement", p->soap_type() == SOAP_TYPE__ns1__GetFlashStartAnnouncement ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetFlashStartAnnouncement(struct soap *soap, const char *URL, _ns1__GetFlashStartAnnouncement const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetFlashStartAnnouncement", p->soap_type() == SOAP_TYPE__ns1__GetFlashStartAnnouncement ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetFlashStartAnnouncement(struct soap *soap, const char *URL, _ns1__GetFlashStartAnnouncement const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetFlashStartAnnouncement", p->soap_type() == SOAP_TYPE__ns1__GetFlashStartAnnouncement ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetFlashStartAnnouncement * SOAP_FMAC4 soap_get__ns1__GetFlashStartAnnouncement(struct soap*, _ns1__GetFlashStartAnnouncement *, const char*, const char*);

inline int soap_read__ns1__GetFlashStartAnnouncement(struct soap *soap, _ns1__GetFlashStartAnnouncement *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetFlashStartAnnouncement(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetFlashStartAnnouncement(struct soap *soap, const char *URL, _ns1__GetFlashStartAnnouncement *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetFlashStartAnnouncement(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetFlashStartAnnouncement(struct soap *soap, _ns1__GetFlashStartAnnouncement *p)
{
	if (soap_read__ns1__GetFlashStartAnnouncement(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__RequestNonCardedEventsResponse_DEFINED
#define SOAP_TYPE__ns1__RequestNonCardedEventsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RequestNonCardedEventsResponse(struct soap*, const char*, int, const _ns1__RequestNonCardedEventsResponse *, const char*);
SOAP_FMAC3 _ns1__RequestNonCardedEventsResponse * SOAP_FMAC4 soap_in__ns1__RequestNonCardedEventsResponse(struct soap*, const char*, _ns1__RequestNonCardedEventsResponse *, const char*);
SOAP_FMAC1 _ns1__RequestNonCardedEventsResponse * SOAP_FMAC2 soap_instantiate__ns1__RequestNonCardedEventsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RequestNonCardedEventsResponse * soap_new__ns1__RequestNonCardedEventsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__RequestNonCardedEventsResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__RequestNonCardedEventsResponse * soap_new_req__ns1__RequestNonCardedEventsResponse(
	struct soap *soap)
{
	_ns1__RequestNonCardedEventsResponse *_p = soap_new__ns1__RequestNonCardedEventsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__RequestNonCardedEventsResponse * soap_new_set__ns1__RequestNonCardedEventsResponse(
	struct soap *soap,
	bool *RequestNonCardedEventsResult)
{
	_ns1__RequestNonCardedEventsResponse *_p = soap_new__ns1__RequestNonCardedEventsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RequestNonCardedEventsResponse::RequestNonCardedEventsResult = RequestNonCardedEventsResult;
	}
	return _p;
}

inline int soap_write__ns1__RequestNonCardedEventsResponse(struct soap *soap, _ns1__RequestNonCardedEventsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RequestNonCardedEventsResponse", p->soap_type() == SOAP_TYPE__ns1__RequestNonCardedEventsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__RequestNonCardedEventsResponse(struct soap *soap, const char *URL, _ns1__RequestNonCardedEventsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RequestNonCardedEventsResponse", p->soap_type() == SOAP_TYPE__ns1__RequestNonCardedEventsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__RequestNonCardedEventsResponse(struct soap *soap, const char *URL, _ns1__RequestNonCardedEventsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RequestNonCardedEventsResponse", p->soap_type() == SOAP_TYPE__ns1__RequestNonCardedEventsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__RequestNonCardedEventsResponse * SOAP_FMAC4 soap_get__ns1__RequestNonCardedEventsResponse(struct soap*, _ns1__RequestNonCardedEventsResponse *, const char*, const char*);

inline int soap_read__ns1__RequestNonCardedEventsResponse(struct soap *soap, _ns1__RequestNonCardedEventsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__RequestNonCardedEventsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__RequestNonCardedEventsResponse(struct soap *soap, const char *URL, _ns1__RequestNonCardedEventsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__RequestNonCardedEventsResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__RequestNonCardedEventsResponse(struct soap *soap, _ns1__RequestNonCardedEventsResponse *p)
{
	if (soap_read__ns1__RequestNonCardedEventsResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__RequestNonCardedEvents_DEFINED
#define SOAP_TYPE__ns1__RequestNonCardedEvents_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RequestNonCardedEvents(struct soap*, const char*, int, const _ns1__RequestNonCardedEvents *, const char*);
SOAP_FMAC3 _ns1__RequestNonCardedEvents * SOAP_FMAC4 soap_in__ns1__RequestNonCardedEvents(struct soap*, const char*, _ns1__RequestNonCardedEvents *, const char*);
SOAP_FMAC1 _ns1__RequestNonCardedEvents * SOAP_FMAC2 soap_instantiate__ns1__RequestNonCardedEvents(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RequestNonCardedEvents * soap_new__ns1__RequestNonCardedEvents(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__RequestNonCardedEvents(soap, n, NULL, NULL, NULL);
}

inline _ns1__RequestNonCardedEvents * soap_new_req__ns1__RequestNonCardedEvents(
	struct soap *soap)
{
	_ns1__RequestNonCardedEvents *_p = soap_new__ns1__RequestNonCardedEvents(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__RequestNonCardedEvents * soap_new_set__ns1__RequestNonCardedEvents(
	struct soap *soap,
	int *SlotmastID)
{
	_ns1__RequestNonCardedEvents *_p = soap_new__ns1__RequestNonCardedEvents(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RequestNonCardedEvents::SlotmastID = SlotmastID;
	}
	return _p;
}

inline int soap_write__ns1__RequestNonCardedEvents(struct soap *soap, _ns1__RequestNonCardedEvents const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RequestNonCardedEvents", p->soap_type() == SOAP_TYPE__ns1__RequestNonCardedEvents ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__RequestNonCardedEvents(struct soap *soap, const char *URL, _ns1__RequestNonCardedEvents const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RequestNonCardedEvents", p->soap_type() == SOAP_TYPE__ns1__RequestNonCardedEvents ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__RequestNonCardedEvents(struct soap *soap, const char *URL, _ns1__RequestNonCardedEvents const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RequestNonCardedEvents", p->soap_type() == SOAP_TYPE__ns1__RequestNonCardedEvents ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__RequestNonCardedEvents * SOAP_FMAC4 soap_get__ns1__RequestNonCardedEvents(struct soap*, _ns1__RequestNonCardedEvents *, const char*, const char*);

inline int soap_read__ns1__RequestNonCardedEvents(struct soap *soap, _ns1__RequestNonCardedEvents *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__RequestNonCardedEvents(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__RequestNonCardedEvents(struct soap *soap, const char *URL, _ns1__RequestNonCardedEvents *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__RequestNonCardedEvents(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__RequestNonCardedEvents(struct soap *soap, _ns1__RequestNonCardedEvents *p)
{
	if (soap_read__ns1__RequestNonCardedEvents(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GamePlayedAfterCardInResponse_DEFINED
#define SOAP_TYPE__ns1__GamePlayedAfterCardInResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GamePlayedAfterCardInResponse(struct soap*, const char*, int, const _ns1__GamePlayedAfterCardInResponse *, const char*);
SOAP_FMAC3 _ns1__GamePlayedAfterCardInResponse * SOAP_FMAC4 soap_in__ns1__GamePlayedAfterCardInResponse(struct soap*, const char*, _ns1__GamePlayedAfterCardInResponse *, const char*);
SOAP_FMAC1 _ns1__GamePlayedAfterCardInResponse * SOAP_FMAC2 soap_instantiate__ns1__GamePlayedAfterCardInResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GamePlayedAfterCardInResponse * soap_new__ns1__GamePlayedAfterCardInResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GamePlayedAfterCardInResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GamePlayedAfterCardInResponse * soap_new_req__ns1__GamePlayedAfterCardInResponse(
	struct soap *soap)
{
	_ns1__GamePlayedAfterCardInResponse *_p = soap_new__ns1__GamePlayedAfterCardInResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GamePlayedAfterCardInResponse * soap_new_set__ns1__GamePlayedAfterCardInResponse(
	struct soap *soap,
	bool *GamePlayedAfterCardInResult)
{
	_ns1__GamePlayedAfterCardInResponse *_p = soap_new__ns1__GamePlayedAfterCardInResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GamePlayedAfterCardInResponse::GamePlayedAfterCardInResult = GamePlayedAfterCardInResult;
	}
	return _p;
}

inline int soap_write__ns1__GamePlayedAfterCardInResponse(struct soap *soap, _ns1__GamePlayedAfterCardInResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GamePlayedAfterCardInResponse", p->soap_type() == SOAP_TYPE__ns1__GamePlayedAfterCardInResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GamePlayedAfterCardInResponse(struct soap *soap, const char *URL, _ns1__GamePlayedAfterCardInResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GamePlayedAfterCardInResponse", p->soap_type() == SOAP_TYPE__ns1__GamePlayedAfterCardInResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GamePlayedAfterCardInResponse(struct soap *soap, const char *URL, _ns1__GamePlayedAfterCardInResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GamePlayedAfterCardInResponse", p->soap_type() == SOAP_TYPE__ns1__GamePlayedAfterCardInResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GamePlayedAfterCardInResponse * SOAP_FMAC4 soap_get__ns1__GamePlayedAfterCardInResponse(struct soap*, _ns1__GamePlayedAfterCardInResponse *, const char*, const char*);

inline int soap_read__ns1__GamePlayedAfterCardInResponse(struct soap *soap, _ns1__GamePlayedAfterCardInResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GamePlayedAfterCardInResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GamePlayedAfterCardInResponse(struct soap *soap, const char *URL, _ns1__GamePlayedAfterCardInResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GamePlayedAfterCardInResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GamePlayedAfterCardInResponse(struct soap *soap, _ns1__GamePlayedAfterCardInResponse *p)
{
	if (soap_read__ns1__GamePlayedAfterCardInResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GamePlayedAfterCardIn_DEFINED
#define SOAP_TYPE__ns1__GamePlayedAfterCardIn_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GamePlayedAfterCardIn(struct soap*, const char*, int, const _ns1__GamePlayedAfterCardIn *, const char*);
SOAP_FMAC3 _ns1__GamePlayedAfterCardIn * SOAP_FMAC4 soap_in__ns1__GamePlayedAfterCardIn(struct soap*, const char*, _ns1__GamePlayedAfterCardIn *, const char*);
SOAP_FMAC1 _ns1__GamePlayedAfterCardIn * SOAP_FMAC2 soap_instantiate__ns1__GamePlayedAfterCardIn(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GamePlayedAfterCardIn * soap_new__ns1__GamePlayedAfterCardIn(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GamePlayedAfterCardIn(soap, n, NULL, NULL, NULL);
}

inline _ns1__GamePlayedAfterCardIn * soap_new_req__ns1__GamePlayedAfterCardIn(
	struct soap *soap)
{
	_ns1__GamePlayedAfterCardIn *_p = soap_new__ns1__GamePlayedAfterCardIn(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GamePlayedAfterCardIn * soap_new_set__ns1__GamePlayedAfterCardIn(
	struct soap *soap,
	char *OCR,
	int *SlotmastID)
{
	_ns1__GamePlayedAfterCardIn *_p = soap_new__ns1__GamePlayedAfterCardIn(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GamePlayedAfterCardIn::OCR = OCR;
		_p->_ns1__GamePlayedAfterCardIn::SlotmastID = SlotmastID;
	}
	return _p;
}

inline int soap_write__ns1__GamePlayedAfterCardIn(struct soap *soap, _ns1__GamePlayedAfterCardIn const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GamePlayedAfterCardIn", p->soap_type() == SOAP_TYPE__ns1__GamePlayedAfterCardIn ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GamePlayedAfterCardIn(struct soap *soap, const char *URL, _ns1__GamePlayedAfterCardIn const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GamePlayedAfterCardIn", p->soap_type() == SOAP_TYPE__ns1__GamePlayedAfterCardIn ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GamePlayedAfterCardIn(struct soap *soap, const char *URL, _ns1__GamePlayedAfterCardIn const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GamePlayedAfterCardIn", p->soap_type() == SOAP_TYPE__ns1__GamePlayedAfterCardIn ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GamePlayedAfterCardIn * SOAP_FMAC4 soap_get__ns1__GamePlayedAfterCardIn(struct soap*, _ns1__GamePlayedAfterCardIn *, const char*, const char*);

inline int soap_read__ns1__GamePlayedAfterCardIn(struct soap *soap, _ns1__GamePlayedAfterCardIn *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GamePlayedAfterCardIn(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GamePlayedAfterCardIn(struct soap *soap, const char *URL, _ns1__GamePlayedAfterCardIn *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GamePlayedAfterCardIn(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GamePlayedAfterCardIn(struct soap *soap, _ns1__GamePlayedAfterCardIn *p)
{
	if (soap_read__ns1__GamePlayedAfterCardIn(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__CardOutResponse_DEFINED
#define SOAP_TYPE__ns1__CardOutResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CardOutResponse(struct soap*, const char*, int, const _ns1__CardOutResponse *, const char*);
SOAP_FMAC3 _ns1__CardOutResponse * SOAP_FMAC4 soap_in__ns1__CardOutResponse(struct soap*, const char*, _ns1__CardOutResponse *, const char*);
SOAP_FMAC1 _ns1__CardOutResponse * SOAP_FMAC2 soap_instantiate__ns1__CardOutResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CardOutResponse * soap_new__ns1__CardOutResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__CardOutResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__CardOutResponse * soap_new_req__ns1__CardOutResponse(
	struct soap *soap)
{
	_ns1__CardOutResponse *_p = soap_new__ns1__CardOutResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__CardOutResponse * soap_new_set__ns1__CardOutResponse(
	struct soap *soap,
	bool *CardOutResult)
{
	_ns1__CardOutResponse *_p = soap_new__ns1__CardOutResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CardOutResponse::CardOutResult = CardOutResult;
	}
	return _p;
}

inline int soap_write__ns1__CardOutResponse(struct soap *soap, _ns1__CardOutResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CardOutResponse", p->soap_type() == SOAP_TYPE__ns1__CardOutResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__CardOutResponse(struct soap *soap, const char *URL, _ns1__CardOutResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CardOutResponse", p->soap_type() == SOAP_TYPE__ns1__CardOutResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__CardOutResponse(struct soap *soap, const char *URL, _ns1__CardOutResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CardOutResponse", p->soap_type() == SOAP_TYPE__ns1__CardOutResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CardOutResponse * SOAP_FMAC4 soap_get__ns1__CardOutResponse(struct soap*, _ns1__CardOutResponse *, const char*, const char*);

inline int soap_read__ns1__CardOutResponse(struct soap *soap, _ns1__CardOutResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__CardOutResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__CardOutResponse(struct soap *soap, const char *URL, _ns1__CardOutResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__CardOutResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__CardOutResponse(struct soap *soap, _ns1__CardOutResponse *p)
{
	if (soap_read__ns1__CardOutResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__CardOut_DEFINED
#define SOAP_TYPE__ns1__CardOut_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CardOut(struct soap*, const char*, int, const _ns1__CardOut *, const char*);
SOAP_FMAC3 _ns1__CardOut * SOAP_FMAC4 soap_in__ns1__CardOut(struct soap*, const char*, _ns1__CardOut *, const char*);
SOAP_FMAC1 _ns1__CardOut * SOAP_FMAC2 soap_instantiate__ns1__CardOut(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CardOut * soap_new__ns1__CardOut(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__CardOut(soap, n, NULL, NULL, NULL);
}

inline _ns1__CardOut * soap_new_req__ns1__CardOut(
	struct soap *soap)
{
	_ns1__CardOut *_p = soap_new__ns1__CardOut(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__CardOut * soap_new_set__ns1__CardOut(
	struct soap *soap,
	char *OCR,
	int *SlotmastID)
{
	_ns1__CardOut *_p = soap_new__ns1__CardOut(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CardOut::OCR = OCR;
		_p->_ns1__CardOut::SlotmastID = SlotmastID;
	}
	return _p;
}

inline int soap_write__ns1__CardOut(struct soap *soap, _ns1__CardOut const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CardOut", p->soap_type() == SOAP_TYPE__ns1__CardOut ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__CardOut(struct soap *soap, const char *URL, _ns1__CardOut const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CardOut", p->soap_type() == SOAP_TYPE__ns1__CardOut ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__CardOut(struct soap *soap, const char *URL, _ns1__CardOut const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CardOut", p->soap_type() == SOAP_TYPE__ns1__CardOut ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CardOut * SOAP_FMAC4 soap_get__ns1__CardOut(struct soap*, _ns1__CardOut *, const char*, const char*);

inline int soap_read__ns1__CardOut(struct soap *soap, _ns1__CardOut *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__CardOut(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__CardOut(struct soap *soap, const char *URL, _ns1__CardOut *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__CardOut(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__CardOut(struct soap *soap, _ns1__CardOut *p)
{
	if (soap_read__ns1__CardOut(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__CardInResponse_DEFINED
#define SOAP_TYPE__ns1__CardInResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CardInResponse(struct soap*, const char*, int, const _ns1__CardInResponse *, const char*);
SOAP_FMAC3 _ns1__CardInResponse * SOAP_FMAC4 soap_in__ns1__CardInResponse(struct soap*, const char*, _ns1__CardInResponse *, const char*);
SOAP_FMAC1 _ns1__CardInResponse * SOAP_FMAC2 soap_instantiate__ns1__CardInResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CardInResponse * soap_new__ns1__CardInResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__CardInResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__CardInResponse * soap_new_req__ns1__CardInResponse(
	struct soap *soap)
{
	_ns1__CardInResponse *_p = soap_new__ns1__CardInResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__CardInResponse * soap_new_set__ns1__CardInResponse(
	struct soap *soap,
	bool *CardInResult)
{
	_ns1__CardInResponse *_p = soap_new__ns1__CardInResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CardInResponse::CardInResult = CardInResult;
	}
	return _p;
}

inline int soap_write__ns1__CardInResponse(struct soap *soap, _ns1__CardInResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CardInResponse", p->soap_type() == SOAP_TYPE__ns1__CardInResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__CardInResponse(struct soap *soap, const char *URL, _ns1__CardInResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CardInResponse", p->soap_type() == SOAP_TYPE__ns1__CardInResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__CardInResponse(struct soap *soap, const char *URL, _ns1__CardInResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CardInResponse", p->soap_type() == SOAP_TYPE__ns1__CardInResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CardInResponse * SOAP_FMAC4 soap_get__ns1__CardInResponse(struct soap*, _ns1__CardInResponse *, const char*, const char*);

inline int soap_read__ns1__CardInResponse(struct soap *soap, _ns1__CardInResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__CardInResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__CardInResponse(struct soap *soap, const char *URL, _ns1__CardInResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__CardInResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__CardInResponse(struct soap *soap, _ns1__CardInResponse *p)
{
	if (soap_read__ns1__CardInResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__CardIn_DEFINED
#define SOAP_TYPE__ns1__CardIn_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CardIn(struct soap*, const char*, int, const _ns1__CardIn *, const char*);
SOAP_FMAC3 _ns1__CardIn * SOAP_FMAC4 soap_in__ns1__CardIn(struct soap*, const char*, _ns1__CardIn *, const char*);
SOAP_FMAC1 _ns1__CardIn * SOAP_FMAC2 soap_instantiate__ns1__CardIn(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CardIn * soap_new__ns1__CardIn(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__CardIn(soap, n, NULL, NULL, NULL);
}

inline _ns1__CardIn * soap_new_req__ns1__CardIn(
	struct soap *soap)
{
	_ns1__CardIn *_p = soap_new__ns1__CardIn(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__CardIn * soap_new_set__ns1__CardIn(
	struct soap *soap,
	char *OCR,
	int *SlotmastID,
	bool *hasPlayedGame)
{
	_ns1__CardIn *_p = soap_new__ns1__CardIn(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CardIn::OCR = OCR;
		_p->_ns1__CardIn::SlotmastID = SlotmastID;
		_p->_ns1__CardIn::hasPlayedGame = hasPlayedGame;
	}
	return _p;
}

inline int soap_write__ns1__CardIn(struct soap *soap, _ns1__CardIn const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CardIn", p->soap_type() == SOAP_TYPE__ns1__CardIn ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__CardIn(struct soap *soap, const char *URL, _ns1__CardIn const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CardIn", p->soap_type() == SOAP_TYPE__ns1__CardIn ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__CardIn(struct soap *soap, const char *URL, _ns1__CardIn const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CardIn", p->soap_type() == SOAP_TYPE__ns1__CardIn ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CardIn * SOAP_FMAC4 soap_get__ns1__CardIn(struct soap*, _ns1__CardIn *, const char*, const char*);

inline int soap_read__ns1__CardIn(struct soap *soap, _ns1__CardIn *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__CardIn(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__CardIn(struct soap *soap, const char *URL, _ns1__CardIn *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__CardIn(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__CardIn(struct soap *soap, _ns1__CardIn *p)
{
	if (soap_read__ns1__CardIn(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetSpeedMediaVersionResponse_DEFINED
#define SOAP_TYPE__ns1__GetSpeedMediaVersionResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetSpeedMediaVersionResponse(struct soap*, const char*, int, const _ns1__GetSpeedMediaVersionResponse *, const char*);
SOAP_FMAC3 _ns1__GetSpeedMediaVersionResponse * SOAP_FMAC4 soap_in__ns1__GetSpeedMediaVersionResponse(struct soap*, const char*, _ns1__GetSpeedMediaVersionResponse *, const char*);
SOAP_FMAC1 _ns1__GetSpeedMediaVersionResponse * SOAP_FMAC2 soap_instantiate__ns1__GetSpeedMediaVersionResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetSpeedMediaVersionResponse * soap_new__ns1__GetSpeedMediaVersionResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetSpeedMediaVersionResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetSpeedMediaVersionResponse * soap_new_req__ns1__GetSpeedMediaVersionResponse(
	struct soap *soap)
{
	_ns1__GetSpeedMediaVersionResponse *_p = soap_new__ns1__GetSpeedMediaVersionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetSpeedMediaVersionResponse * soap_new_set__ns1__GetSpeedMediaVersionResponse(
	struct soap *soap,
	bool *GetSpeedMediaVersionResult,
	int *major,
	int *minor,
	int *revision,
	int *build)
{
	_ns1__GetSpeedMediaVersionResponse *_p = soap_new__ns1__GetSpeedMediaVersionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetSpeedMediaVersionResponse::GetSpeedMediaVersionResult = GetSpeedMediaVersionResult;
		_p->_ns1__GetSpeedMediaVersionResponse::major = major;
		_p->_ns1__GetSpeedMediaVersionResponse::minor = minor;
		_p->_ns1__GetSpeedMediaVersionResponse::revision = revision;
		_p->_ns1__GetSpeedMediaVersionResponse::build = build;
	}
	return _p;
}

inline int soap_write__ns1__GetSpeedMediaVersionResponse(struct soap *soap, _ns1__GetSpeedMediaVersionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetSpeedMediaVersionResponse", p->soap_type() == SOAP_TYPE__ns1__GetSpeedMediaVersionResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetSpeedMediaVersionResponse(struct soap *soap, const char *URL, _ns1__GetSpeedMediaVersionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetSpeedMediaVersionResponse", p->soap_type() == SOAP_TYPE__ns1__GetSpeedMediaVersionResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetSpeedMediaVersionResponse(struct soap *soap, const char *URL, _ns1__GetSpeedMediaVersionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetSpeedMediaVersionResponse", p->soap_type() == SOAP_TYPE__ns1__GetSpeedMediaVersionResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetSpeedMediaVersionResponse * SOAP_FMAC4 soap_get__ns1__GetSpeedMediaVersionResponse(struct soap*, _ns1__GetSpeedMediaVersionResponse *, const char*, const char*);

inline int soap_read__ns1__GetSpeedMediaVersionResponse(struct soap *soap, _ns1__GetSpeedMediaVersionResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetSpeedMediaVersionResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetSpeedMediaVersionResponse(struct soap *soap, const char *URL, _ns1__GetSpeedMediaVersionResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetSpeedMediaVersionResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetSpeedMediaVersionResponse(struct soap *soap, _ns1__GetSpeedMediaVersionResponse *p)
{
	if (soap_read__ns1__GetSpeedMediaVersionResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetSpeedMediaVersion_DEFINED
#define SOAP_TYPE__ns1__GetSpeedMediaVersion_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetSpeedMediaVersion(struct soap*, const char*, int, const _ns1__GetSpeedMediaVersion *, const char*);
SOAP_FMAC3 _ns1__GetSpeedMediaVersion * SOAP_FMAC4 soap_in__ns1__GetSpeedMediaVersion(struct soap*, const char*, _ns1__GetSpeedMediaVersion *, const char*);
SOAP_FMAC1 _ns1__GetSpeedMediaVersion * SOAP_FMAC2 soap_instantiate__ns1__GetSpeedMediaVersion(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetSpeedMediaVersion * soap_new__ns1__GetSpeedMediaVersion(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetSpeedMediaVersion(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetSpeedMediaVersion * soap_new_req__ns1__GetSpeedMediaVersion(
	struct soap *soap)
{
	_ns1__GetSpeedMediaVersion *_p = soap_new__ns1__GetSpeedMediaVersion(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetSpeedMediaVersion * soap_new_set__ns1__GetSpeedMediaVersion(
	struct soap *soap)
{
	_ns1__GetSpeedMediaVersion *_p = soap_new__ns1__GetSpeedMediaVersion(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__GetSpeedMediaVersion(struct soap *soap, _ns1__GetSpeedMediaVersion const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetSpeedMediaVersion", p->soap_type() == SOAP_TYPE__ns1__GetSpeedMediaVersion ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetSpeedMediaVersion(struct soap *soap, const char *URL, _ns1__GetSpeedMediaVersion const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetSpeedMediaVersion", p->soap_type() == SOAP_TYPE__ns1__GetSpeedMediaVersion ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetSpeedMediaVersion(struct soap *soap, const char *URL, _ns1__GetSpeedMediaVersion const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetSpeedMediaVersion", p->soap_type() == SOAP_TYPE__ns1__GetSpeedMediaVersion ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetSpeedMediaVersion * SOAP_FMAC4 soap_get__ns1__GetSpeedMediaVersion(struct soap*, _ns1__GetSpeedMediaVersion *, const char*, const char*);

inline int soap_read__ns1__GetSpeedMediaVersion(struct soap *soap, _ns1__GetSpeedMediaVersion *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetSpeedMediaVersion(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetSpeedMediaVersion(struct soap *soap, const char *URL, _ns1__GetSpeedMediaVersion *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetSpeedMediaVersion(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetSpeedMediaVersion(struct soap *soap, _ns1__GetSpeedMediaVersion *p)
{
	if (soap_read__ns1__GetSpeedMediaVersion(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetTriggerRejectedNotificationResponse_DEFINED
#define SOAP_TYPE__ns1__GetTriggerRejectedNotificationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetTriggerRejectedNotificationResponse(struct soap*, const char*, int, const _ns1__GetTriggerRejectedNotificationResponse *, const char*);
SOAP_FMAC3 _ns1__GetTriggerRejectedNotificationResponse * SOAP_FMAC4 soap_in__ns1__GetTriggerRejectedNotificationResponse(struct soap*, const char*, _ns1__GetTriggerRejectedNotificationResponse *, const char*);
SOAP_FMAC1 _ns1__GetTriggerRejectedNotificationResponse * SOAP_FMAC2 soap_instantiate__ns1__GetTriggerRejectedNotificationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetTriggerRejectedNotificationResponse * soap_new__ns1__GetTriggerRejectedNotificationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetTriggerRejectedNotificationResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetTriggerRejectedNotificationResponse * soap_new_req__ns1__GetTriggerRejectedNotificationResponse(
	struct soap *soap)
{
	_ns1__GetTriggerRejectedNotificationResponse *_p = soap_new__ns1__GetTriggerRejectedNotificationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetTriggerRejectedNotificationResponse * soap_new_set__ns1__GetTriggerRejectedNotificationResponse(
	struct soap *soap,
	bool *GetTriggerRejectedNotificationResult,
	int *eventId,
	int *lastTriggeredEventId)
{
	_ns1__GetTriggerRejectedNotificationResponse *_p = soap_new__ns1__GetTriggerRejectedNotificationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetTriggerRejectedNotificationResponse::GetTriggerRejectedNotificationResult = GetTriggerRejectedNotificationResult;
		_p->_ns1__GetTriggerRejectedNotificationResponse::eventId = eventId;
		_p->_ns1__GetTriggerRejectedNotificationResponse::lastTriggeredEventId = lastTriggeredEventId;
	}
	return _p;
}

inline int soap_write__ns1__GetTriggerRejectedNotificationResponse(struct soap *soap, _ns1__GetTriggerRejectedNotificationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetTriggerRejectedNotificationResponse", p->soap_type() == SOAP_TYPE__ns1__GetTriggerRejectedNotificationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetTriggerRejectedNotificationResponse(struct soap *soap, const char *URL, _ns1__GetTriggerRejectedNotificationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetTriggerRejectedNotificationResponse", p->soap_type() == SOAP_TYPE__ns1__GetTriggerRejectedNotificationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetTriggerRejectedNotificationResponse(struct soap *soap, const char *URL, _ns1__GetTriggerRejectedNotificationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetTriggerRejectedNotificationResponse", p->soap_type() == SOAP_TYPE__ns1__GetTriggerRejectedNotificationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetTriggerRejectedNotificationResponse * SOAP_FMAC4 soap_get__ns1__GetTriggerRejectedNotificationResponse(struct soap*, _ns1__GetTriggerRejectedNotificationResponse *, const char*, const char*);

inline int soap_read__ns1__GetTriggerRejectedNotificationResponse(struct soap *soap, _ns1__GetTriggerRejectedNotificationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetTriggerRejectedNotificationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetTriggerRejectedNotificationResponse(struct soap *soap, const char *URL, _ns1__GetTriggerRejectedNotificationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetTriggerRejectedNotificationResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetTriggerRejectedNotificationResponse(struct soap *soap, _ns1__GetTriggerRejectedNotificationResponse *p)
{
	if (soap_read__ns1__GetTriggerRejectedNotificationResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetTriggerRejectedNotification_DEFINED
#define SOAP_TYPE__ns1__GetTriggerRejectedNotification_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetTriggerRejectedNotification(struct soap*, const char*, int, const _ns1__GetTriggerRejectedNotification *, const char*);
SOAP_FMAC3 _ns1__GetTriggerRejectedNotification * SOAP_FMAC4 soap_in__ns1__GetTriggerRejectedNotification(struct soap*, const char*, _ns1__GetTriggerRejectedNotification *, const char*);
SOAP_FMAC1 _ns1__GetTriggerRejectedNotification * SOAP_FMAC2 soap_instantiate__ns1__GetTriggerRejectedNotification(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetTriggerRejectedNotification * soap_new__ns1__GetTriggerRejectedNotification(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetTriggerRejectedNotification(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetTriggerRejectedNotification * soap_new_req__ns1__GetTriggerRejectedNotification(
	struct soap *soap)
{
	_ns1__GetTriggerRejectedNotification *_p = soap_new__ns1__GetTriggerRejectedNotification(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetTriggerRejectedNotification * soap_new_set__ns1__GetTriggerRejectedNotification(
	struct soap *soap,
	xsd__base64Binary *lastTimeStamp,
	int *ID,
	int *slotmastID,
	char *ocr)
{
	_ns1__GetTriggerRejectedNotification *_p = soap_new__ns1__GetTriggerRejectedNotification(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetTriggerRejectedNotification::lastTimeStamp = lastTimeStamp;
		_p->_ns1__GetTriggerRejectedNotification::ID = ID;
		_p->_ns1__GetTriggerRejectedNotification::slotmastID = slotmastID;
		_p->_ns1__GetTriggerRejectedNotification::ocr = ocr;
	}
	return _p;
}

inline int soap_write__ns1__GetTriggerRejectedNotification(struct soap *soap, _ns1__GetTriggerRejectedNotification const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetTriggerRejectedNotification", p->soap_type() == SOAP_TYPE__ns1__GetTriggerRejectedNotification ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetTriggerRejectedNotification(struct soap *soap, const char *URL, _ns1__GetTriggerRejectedNotification const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetTriggerRejectedNotification", p->soap_type() == SOAP_TYPE__ns1__GetTriggerRejectedNotification ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetTriggerRejectedNotification(struct soap *soap, const char *URL, _ns1__GetTriggerRejectedNotification const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetTriggerRejectedNotification", p->soap_type() == SOAP_TYPE__ns1__GetTriggerRejectedNotification ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetTriggerRejectedNotification * SOAP_FMAC4 soap_get__ns1__GetTriggerRejectedNotification(struct soap*, _ns1__GetTriggerRejectedNotification *, const char*, const char*);

inline int soap_read__ns1__GetTriggerRejectedNotification(struct soap *soap, _ns1__GetTriggerRejectedNotification *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetTriggerRejectedNotification(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetTriggerRejectedNotification(struct soap *soap, const char *URL, _ns1__GetTriggerRejectedNotification *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetTriggerRejectedNotification(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetTriggerRejectedNotification(struct soap *soap, _ns1__GetTriggerRejectedNotification *p)
{
	if (soap_read__ns1__GetTriggerRejectedNotification(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetExternalPaidNotificationResponse_DEFINED
#define SOAP_TYPE__ns1__GetExternalPaidNotificationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetExternalPaidNotificationResponse(struct soap*, const char*, int, const _ns1__GetExternalPaidNotificationResponse *, const char*);
SOAP_FMAC3 _ns1__GetExternalPaidNotificationResponse * SOAP_FMAC4 soap_in__ns1__GetExternalPaidNotificationResponse(struct soap*, const char*, _ns1__GetExternalPaidNotificationResponse *, const char*);
SOAP_FMAC1 _ns1__GetExternalPaidNotificationResponse * SOAP_FMAC2 soap_instantiate__ns1__GetExternalPaidNotificationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetExternalPaidNotificationResponse * soap_new__ns1__GetExternalPaidNotificationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetExternalPaidNotificationResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetExternalPaidNotificationResponse * soap_new_req__ns1__GetExternalPaidNotificationResponse(
	struct soap *soap)
{
	_ns1__GetExternalPaidNotificationResponse *_p = soap_new__ns1__GetExternalPaidNotificationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetExternalPaidNotificationResponse * soap_new_set__ns1__GetExternalPaidNotificationResponse(
	struct soap *soap,
	bool *GetExternalPaidNotificationResult,
	double *BonusAmount,
	int *AwardID,
	char *TransactionID)
{
	_ns1__GetExternalPaidNotificationResponse *_p = soap_new__ns1__GetExternalPaidNotificationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetExternalPaidNotificationResponse::GetExternalPaidNotificationResult = GetExternalPaidNotificationResult;
		_p->_ns1__GetExternalPaidNotificationResponse::BonusAmount = BonusAmount;
		_p->_ns1__GetExternalPaidNotificationResponse::AwardID = AwardID;
		_p->_ns1__GetExternalPaidNotificationResponse::TransactionID = TransactionID;
	}
	return _p;
}

inline int soap_write__ns1__GetExternalPaidNotificationResponse(struct soap *soap, _ns1__GetExternalPaidNotificationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetExternalPaidNotificationResponse", p->soap_type() == SOAP_TYPE__ns1__GetExternalPaidNotificationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetExternalPaidNotificationResponse(struct soap *soap, const char *URL, _ns1__GetExternalPaidNotificationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetExternalPaidNotificationResponse", p->soap_type() == SOAP_TYPE__ns1__GetExternalPaidNotificationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetExternalPaidNotificationResponse(struct soap *soap, const char *URL, _ns1__GetExternalPaidNotificationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetExternalPaidNotificationResponse", p->soap_type() == SOAP_TYPE__ns1__GetExternalPaidNotificationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetExternalPaidNotificationResponse * SOAP_FMAC4 soap_get__ns1__GetExternalPaidNotificationResponse(struct soap*, _ns1__GetExternalPaidNotificationResponse *, const char*, const char*);

inline int soap_read__ns1__GetExternalPaidNotificationResponse(struct soap *soap, _ns1__GetExternalPaidNotificationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetExternalPaidNotificationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetExternalPaidNotificationResponse(struct soap *soap, const char *URL, _ns1__GetExternalPaidNotificationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetExternalPaidNotificationResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetExternalPaidNotificationResponse(struct soap *soap, _ns1__GetExternalPaidNotificationResponse *p)
{
	if (soap_read__ns1__GetExternalPaidNotificationResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetExternalPaidNotification_DEFINED
#define SOAP_TYPE__ns1__GetExternalPaidNotification_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetExternalPaidNotification(struct soap*, const char*, int, const _ns1__GetExternalPaidNotification *, const char*);
SOAP_FMAC3 _ns1__GetExternalPaidNotification * SOAP_FMAC4 soap_in__ns1__GetExternalPaidNotification(struct soap*, const char*, _ns1__GetExternalPaidNotification *, const char*);
SOAP_FMAC1 _ns1__GetExternalPaidNotification * SOAP_FMAC2 soap_instantiate__ns1__GetExternalPaidNotification(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetExternalPaidNotification * soap_new__ns1__GetExternalPaidNotification(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetExternalPaidNotification(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetExternalPaidNotification * soap_new_req__ns1__GetExternalPaidNotification(
	struct soap *soap)
{
	_ns1__GetExternalPaidNotification *_p = soap_new__ns1__GetExternalPaidNotification(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetExternalPaidNotification * soap_new_set__ns1__GetExternalPaidNotification(
	struct soap *soap,
	xsd__base64Binary *lastTimeStamp,
	int *ID,
	int *slotmastID,
	char *ocr)
{
	_ns1__GetExternalPaidNotification *_p = soap_new__ns1__GetExternalPaidNotification(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetExternalPaidNotification::lastTimeStamp = lastTimeStamp;
		_p->_ns1__GetExternalPaidNotification::ID = ID;
		_p->_ns1__GetExternalPaidNotification::slotmastID = slotmastID;
		_p->_ns1__GetExternalPaidNotification::ocr = ocr;
	}
	return _p;
}

inline int soap_write__ns1__GetExternalPaidNotification(struct soap *soap, _ns1__GetExternalPaidNotification const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetExternalPaidNotification", p->soap_type() == SOAP_TYPE__ns1__GetExternalPaidNotification ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetExternalPaidNotification(struct soap *soap, const char *URL, _ns1__GetExternalPaidNotification const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetExternalPaidNotification", p->soap_type() == SOAP_TYPE__ns1__GetExternalPaidNotification ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetExternalPaidNotification(struct soap *soap, const char *URL, _ns1__GetExternalPaidNotification const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetExternalPaidNotification", p->soap_type() == SOAP_TYPE__ns1__GetExternalPaidNotification ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetExternalPaidNotification * SOAP_FMAC4 soap_get__ns1__GetExternalPaidNotification(struct soap*, _ns1__GetExternalPaidNotification *, const char*, const char*);

inline int soap_read__ns1__GetExternalPaidNotification(struct soap *soap, _ns1__GetExternalPaidNotification *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetExternalPaidNotification(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetExternalPaidNotification(struct soap *soap, const char *URL, _ns1__GetExternalPaidNotification *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetExternalPaidNotification(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetExternalPaidNotification(struct soap *soap, _ns1__GetExternalPaidNotification *p)
{
	if (soap_read__ns1__GetExternalPaidNotification(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetTriggerlessAnnouncementNotificationResponse_DEFINED
#define SOAP_TYPE__ns1__GetTriggerlessAnnouncementNotificationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetTriggerlessAnnouncementNotificationResponse(struct soap*, const char*, int, const _ns1__GetTriggerlessAnnouncementNotificationResponse *, const char*);
SOAP_FMAC3 _ns1__GetTriggerlessAnnouncementNotificationResponse * SOAP_FMAC4 soap_in__ns1__GetTriggerlessAnnouncementNotificationResponse(struct soap*, const char*, _ns1__GetTriggerlessAnnouncementNotificationResponse *, const char*);
SOAP_FMAC1 _ns1__GetTriggerlessAnnouncementNotificationResponse * SOAP_FMAC2 soap_instantiate__ns1__GetTriggerlessAnnouncementNotificationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetTriggerlessAnnouncementNotificationResponse * soap_new__ns1__GetTriggerlessAnnouncementNotificationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetTriggerlessAnnouncementNotificationResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetTriggerlessAnnouncementNotificationResponse * soap_new_req__ns1__GetTriggerlessAnnouncementNotificationResponse(
	struct soap *soap)
{
	_ns1__GetTriggerlessAnnouncementNotificationResponse *_p = soap_new__ns1__GetTriggerlessAnnouncementNotificationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetTriggerlessAnnouncementNotificationResponse * soap_new_set__ns1__GetTriggerlessAnnouncementNotificationResponse(
	struct soap *soap,
	bool *GetTriggerlessAnnouncementNotificationResult,
	int *eventId,
	bool *carded,
	ns3__CustomMessageScreen *screen)
{
	_ns1__GetTriggerlessAnnouncementNotificationResponse *_p = soap_new__ns1__GetTriggerlessAnnouncementNotificationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetTriggerlessAnnouncementNotificationResponse::GetTriggerlessAnnouncementNotificationResult = GetTriggerlessAnnouncementNotificationResult;
		_p->_ns1__GetTriggerlessAnnouncementNotificationResponse::eventId = eventId;
		_p->_ns1__GetTriggerlessAnnouncementNotificationResponse::carded = carded;
		_p->_ns1__GetTriggerlessAnnouncementNotificationResponse::screen = screen;
	}
	return _p;
}

inline int soap_write__ns1__GetTriggerlessAnnouncementNotificationResponse(struct soap *soap, _ns1__GetTriggerlessAnnouncementNotificationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetTriggerlessAnnouncementNotificationResponse", p->soap_type() == SOAP_TYPE__ns1__GetTriggerlessAnnouncementNotificationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetTriggerlessAnnouncementNotificationResponse(struct soap *soap, const char *URL, _ns1__GetTriggerlessAnnouncementNotificationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetTriggerlessAnnouncementNotificationResponse", p->soap_type() == SOAP_TYPE__ns1__GetTriggerlessAnnouncementNotificationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetTriggerlessAnnouncementNotificationResponse(struct soap *soap, const char *URL, _ns1__GetTriggerlessAnnouncementNotificationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetTriggerlessAnnouncementNotificationResponse", p->soap_type() == SOAP_TYPE__ns1__GetTriggerlessAnnouncementNotificationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetTriggerlessAnnouncementNotificationResponse * SOAP_FMAC4 soap_get__ns1__GetTriggerlessAnnouncementNotificationResponse(struct soap*, _ns1__GetTriggerlessAnnouncementNotificationResponse *, const char*, const char*);

inline int soap_read__ns1__GetTriggerlessAnnouncementNotificationResponse(struct soap *soap, _ns1__GetTriggerlessAnnouncementNotificationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetTriggerlessAnnouncementNotificationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetTriggerlessAnnouncementNotificationResponse(struct soap *soap, const char *URL, _ns1__GetTriggerlessAnnouncementNotificationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetTriggerlessAnnouncementNotificationResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetTriggerlessAnnouncementNotificationResponse(struct soap *soap, _ns1__GetTriggerlessAnnouncementNotificationResponse *p)
{
	if (soap_read__ns1__GetTriggerlessAnnouncementNotificationResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetTriggerlessAnnouncementNotification_DEFINED
#define SOAP_TYPE__ns1__GetTriggerlessAnnouncementNotification_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetTriggerlessAnnouncementNotification(struct soap*, const char*, int, const _ns1__GetTriggerlessAnnouncementNotification *, const char*);
SOAP_FMAC3 _ns1__GetTriggerlessAnnouncementNotification * SOAP_FMAC4 soap_in__ns1__GetTriggerlessAnnouncementNotification(struct soap*, const char*, _ns1__GetTriggerlessAnnouncementNotification *, const char*);
SOAP_FMAC1 _ns1__GetTriggerlessAnnouncementNotification * SOAP_FMAC2 soap_instantiate__ns1__GetTriggerlessAnnouncementNotification(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetTriggerlessAnnouncementNotification * soap_new__ns1__GetTriggerlessAnnouncementNotification(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetTriggerlessAnnouncementNotification(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetTriggerlessAnnouncementNotification * soap_new_req__ns1__GetTriggerlessAnnouncementNotification(
	struct soap *soap)
{
	_ns1__GetTriggerlessAnnouncementNotification *_p = soap_new__ns1__GetTriggerlessAnnouncementNotification(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetTriggerlessAnnouncementNotification * soap_new_set__ns1__GetTriggerlessAnnouncementNotification(
	struct soap *soap,
	xsd__base64Binary *lastTimeStamp,
	int *ID,
	int *slotmastID,
	char *ocr)
{
	_ns1__GetTriggerlessAnnouncementNotification *_p = soap_new__ns1__GetTriggerlessAnnouncementNotification(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetTriggerlessAnnouncementNotification::lastTimeStamp = lastTimeStamp;
		_p->_ns1__GetTriggerlessAnnouncementNotification::ID = ID;
		_p->_ns1__GetTriggerlessAnnouncementNotification::slotmastID = slotmastID;
		_p->_ns1__GetTriggerlessAnnouncementNotification::ocr = ocr;
	}
	return _p;
}

inline int soap_write__ns1__GetTriggerlessAnnouncementNotification(struct soap *soap, _ns1__GetTriggerlessAnnouncementNotification const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetTriggerlessAnnouncementNotification", p->soap_type() == SOAP_TYPE__ns1__GetTriggerlessAnnouncementNotification ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetTriggerlessAnnouncementNotification(struct soap *soap, const char *URL, _ns1__GetTriggerlessAnnouncementNotification const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetTriggerlessAnnouncementNotification", p->soap_type() == SOAP_TYPE__ns1__GetTriggerlessAnnouncementNotification ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetTriggerlessAnnouncementNotification(struct soap *soap, const char *URL, _ns1__GetTriggerlessAnnouncementNotification const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetTriggerlessAnnouncementNotification", p->soap_type() == SOAP_TYPE__ns1__GetTriggerlessAnnouncementNotification ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetTriggerlessAnnouncementNotification * SOAP_FMAC4 soap_get__ns1__GetTriggerlessAnnouncementNotification(struct soap*, _ns1__GetTriggerlessAnnouncementNotification *, const char*, const char*);

inline int soap_read__ns1__GetTriggerlessAnnouncementNotification(struct soap *soap, _ns1__GetTriggerlessAnnouncementNotification *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetTriggerlessAnnouncementNotification(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetTriggerlessAnnouncementNotification(struct soap *soap, const char *URL, _ns1__GetTriggerlessAnnouncementNotification *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetTriggerlessAnnouncementNotification(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetTriggerlessAnnouncementNotification(struct soap *soap, _ns1__GetTriggerlessAnnouncementNotification *p)
{
	if (soap_read__ns1__GetTriggerlessAnnouncementNotification(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetJackpotAnnouncementNotificationResponse_DEFINED
#define SOAP_TYPE__ns1__GetJackpotAnnouncementNotificationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetJackpotAnnouncementNotificationResponse(struct soap*, const char*, int, const _ns1__GetJackpotAnnouncementNotificationResponse *, const char*);
SOAP_FMAC3 _ns1__GetJackpotAnnouncementNotificationResponse * SOAP_FMAC4 soap_in__ns1__GetJackpotAnnouncementNotificationResponse(struct soap*, const char*, _ns1__GetJackpotAnnouncementNotificationResponse *, const char*);
SOAP_FMAC1 _ns1__GetJackpotAnnouncementNotificationResponse * SOAP_FMAC2 soap_instantiate__ns1__GetJackpotAnnouncementNotificationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetJackpotAnnouncementNotificationResponse * soap_new__ns1__GetJackpotAnnouncementNotificationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetJackpotAnnouncementNotificationResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetJackpotAnnouncementNotificationResponse * soap_new_req__ns1__GetJackpotAnnouncementNotificationResponse(
	struct soap *soap)
{
	_ns1__GetJackpotAnnouncementNotificationResponse *_p = soap_new__ns1__GetJackpotAnnouncementNotificationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetJackpotAnnouncementNotificationResponse * soap_new_set__ns1__GetJackpotAnnouncementNotificationResponse(
	struct soap *soap,
	bool *GetJackpotAnnouncementNotificationResult,
	int *eventId,
	int *triggeredEventID,
	bool *carded,
	ns3__CustomMessageScreen *screen,
	bool *showAward)
{
	_ns1__GetJackpotAnnouncementNotificationResponse *_p = soap_new__ns1__GetJackpotAnnouncementNotificationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetJackpotAnnouncementNotificationResponse::GetJackpotAnnouncementNotificationResult = GetJackpotAnnouncementNotificationResult;
		_p->_ns1__GetJackpotAnnouncementNotificationResponse::eventId = eventId;
		_p->_ns1__GetJackpotAnnouncementNotificationResponse::triggeredEventID = triggeredEventID;
		_p->_ns1__GetJackpotAnnouncementNotificationResponse::carded = carded;
		_p->_ns1__GetJackpotAnnouncementNotificationResponse::screen = screen;
		_p->_ns1__GetJackpotAnnouncementNotificationResponse::showAward = showAward;
	}
	return _p;
}

inline int soap_write__ns1__GetJackpotAnnouncementNotificationResponse(struct soap *soap, _ns1__GetJackpotAnnouncementNotificationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetJackpotAnnouncementNotificationResponse", p->soap_type() == SOAP_TYPE__ns1__GetJackpotAnnouncementNotificationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetJackpotAnnouncementNotificationResponse(struct soap *soap, const char *URL, _ns1__GetJackpotAnnouncementNotificationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetJackpotAnnouncementNotificationResponse", p->soap_type() == SOAP_TYPE__ns1__GetJackpotAnnouncementNotificationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetJackpotAnnouncementNotificationResponse(struct soap *soap, const char *URL, _ns1__GetJackpotAnnouncementNotificationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetJackpotAnnouncementNotificationResponse", p->soap_type() == SOAP_TYPE__ns1__GetJackpotAnnouncementNotificationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetJackpotAnnouncementNotificationResponse * SOAP_FMAC4 soap_get__ns1__GetJackpotAnnouncementNotificationResponse(struct soap*, _ns1__GetJackpotAnnouncementNotificationResponse *, const char*, const char*);

inline int soap_read__ns1__GetJackpotAnnouncementNotificationResponse(struct soap *soap, _ns1__GetJackpotAnnouncementNotificationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetJackpotAnnouncementNotificationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetJackpotAnnouncementNotificationResponse(struct soap *soap, const char *URL, _ns1__GetJackpotAnnouncementNotificationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetJackpotAnnouncementNotificationResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetJackpotAnnouncementNotificationResponse(struct soap *soap, _ns1__GetJackpotAnnouncementNotificationResponse *p)
{
	if (soap_read__ns1__GetJackpotAnnouncementNotificationResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetJackpotAnnouncementNotification_DEFINED
#define SOAP_TYPE__ns1__GetJackpotAnnouncementNotification_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetJackpotAnnouncementNotification(struct soap*, const char*, int, const _ns1__GetJackpotAnnouncementNotification *, const char*);
SOAP_FMAC3 _ns1__GetJackpotAnnouncementNotification * SOAP_FMAC4 soap_in__ns1__GetJackpotAnnouncementNotification(struct soap*, const char*, _ns1__GetJackpotAnnouncementNotification *, const char*);
SOAP_FMAC1 _ns1__GetJackpotAnnouncementNotification * SOAP_FMAC2 soap_instantiate__ns1__GetJackpotAnnouncementNotification(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetJackpotAnnouncementNotification * soap_new__ns1__GetJackpotAnnouncementNotification(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetJackpotAnnouncementNotification(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetJackpotAnnouncementNotification * soap_new_req__ns1__GetJackpotAnnouncementNotification(
	struct soap *soap)
{
	_ns1__GetJackpotAnnouncementNotification *_p = soap_new__ns1__GetJackpotAnnouncementNotification(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetJackpotAnnouncementNotification * soap_new_set__ns1__GetJackpotAnnouncementNotification(
	struct soap *soap,
	xsd__base64Binary *lastTimeStamp,
	int *ID,
	int *slotmastID,
	char *ocr)
{
	_ns1__GetJackpotAnnouncementNotification *_p = soap_new__ns1__GetJackpotAnnouncementNotification(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetJackpotAnnouncementNotification::lastTimeStamp = lastTimeStamp;
		_p->_ns1__GetJackpotAnnouncementNotification::ID = ID;
		_p->_ns1__GetJackpotAnnouncementNotification::slotmastID = slotmastID;
		_p->_ns1__GetJackpotAnnouncementNotification::ocr = ocr;
	}
	return _p;
}

inline int soap_write__ns1__GetJackpotAnnouncementNotification(struct soap *soap, _ns1__GetJackpotAnnouncementNotification const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetJackpotAnnouncementNotification", p->soap_type() == SOAP_TYPE__ns1__GetJackpotAnnouncementNotification ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetJackpotAnnouncementNotification(struct soap *soap, const char *URL, _ns1__GetJackpotAnnouncementNotification const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetJackpotAnnouncementNotification", p->soap_type() == SOAP_TYPE__ns1__GetJackpotAnnouncementNotification ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetJackpotAnnouncementNotification(struct soap *soap, const char *URL, _ns1__GetJackpotAnnouncementNotification const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetJackpotAnnouncementNotification", p->soap_type() == SOAP_TYPE__ns1__GetJackpotAnnouncementNotification ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetJackpotAnnouncementNotification * SOAP_FMAC4 soap_get__ns1__GetJackpotAnnouncementNotification(struct soap*, _ns1__GetJackpotAnnouncementNotification *, const char*, const char*);

inline int soap_read__ns1__GetJackpotAnnouncementNotification(struct soap *soap, _ns1__GetJackpotAnnouncementNotification *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetJackpotAnnouncementNotification(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetJackpotAnnouncementNotification(struct soap *soap, const char *URL, _ns1__GetJackpotAnnouncementNotification *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetJackpotAnnouncementNotification(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetJackpotAnnouncementNotification(struct soap *soap, _ns1__GetJackpotAnnouncementNotification *p)
{
	if (soap_read__ns1__GetJackpotAnnouncementNotification(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetRicochetAwardNotificationCustomWithMediaDataResponse_DEFINED
#define SOAP_TYPE__ns1__GetRicochetAwardNotificationCustomWithMediaDataResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetRicochetAwardNotificationCustomWithMediaDataResponse(struct soap*, const char*, int, const _ns1__GetRicochetAwardNotificationCustomWithMediaDataResponse *, const char*);
SOAP_FMAC3 _ns1__GetRicochetAwardNotificationCustomWithMediaDataResponse * SOAP_FMAC4 soap_in__ns1__GetRicochetAwardNotificationCustomWithMediaDataResponse(struct soap*, const char*, _ns1__GetRicochetAwardNotificationCustomWithMediaDataResponse *, const char*);
SOAP_FMAC1 _ns1__GetRicochetAwardNotificationCustomWithMediaDataResponse * SOAP_FMAC2 soap_instantiate__ns1__GetRicochetAwardNotificationCustomWithMediaDataResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetRicochetAwardNotificationCustomWithMediaDataResponse * soap_new__ns1__GetRicochetAwardNotificationCustomWithMediaDataResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetRicochetAwardNotificationCustomWithMediaDataResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetRicochetAwardNotificationCustomWithMediaDataResponse * soap_new_req__ns1__GetRicochetAwardNotificationCustomWithMediaDataResponse(
	struct soap *soap)
{
	_ns1__GetRicochetAwardNotificationCustomWithMediaDataResponse *_p = soap_new__ns1__GetRicochetAwardNotificationCustomWithMediaDataResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetRicochetAwardNotificationCustomWithMediaDataResponse * soap_new_set__ns1__GetRicochetAwardNotificationCustomWithMediaDataResponse(
	struct soap *soap,
	bool *GetRicochetAwardNotificationCustomWithMediaDataResult,
	int *eventId,
	bool *showAward,
	ns3__CustomMessageScreen *customScreen,
	char *mediaData)
{
	_ns1__GetRicochetAwardNotificationCustomWithMediaDataResponse *_p = soap_new__ns1__GetRicochetAwardNotificationCustomWithMediaDataResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetRicochetAwardNotificationCustomWithMediaDataResponse::GetRicochetAwardNotificationCustomWithMediaDataResult = GetRicochetAwardNotificationCustomWithMediaDataResult;
		_p->_ns1__GetRicochetAwardNotificationCustomWithMediaDataResponse::eventId = eventId;
		_p->_ns1__GetRicochetAwardNotificationCustomWithMediaDataResponse::showAward = showAward;
		_p->_ns1__GetRicochetAwardNotificationCustomWithMediaDataResponse::customScreen = customScreen;
		_p->_ns1__GetRicochetAwardNotificationCustomWithMediaDataResponse::mediaData = mediaData;
	}
	return _p;
}

inline int soap_write__ns1__GetRicochetAwardNotificationCustomWithMediaDataResponse(struct soap *soap, _ns1__GetRicochetAwardNotificationCustomWithMediaDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetRicochetAwardNotificationCustomWithMediaDataResponse", p->soap_type() == SOAP_TYPE__ns1__GetRicochetAwardNotificationCustomWithMediaDataResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetRicochetAwardNotificationCustomWithMediaDataResponse(struct soap *soap, const char *URL, _ns1__GetRicochetAwardNotificationCustomWithMediaDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetRicochetAwardNotificationCustomWithMediaDataResponse", p->soap_type() == SOAP_TYPE__ns1__GetRicochetAwardNotificationCustomWithMediaDataResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetRicochetAwardNotificationCustomWithMediaDataResponse(struct soap *soap, const char *URL, _ns1__GetRicochetAwardNotificationCustomWithMediaDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetRicochetAwardNotificationCustomWithMediaDataResponse", p->soap_type() == SOAP_TYPE__ns1__GetRicochetAwardNotificationCustomWithMediaDataResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetRicochetAwardNotificationCustomWithMediaDataResponse * SOAP_FMAC4 soap_get__ns1__GetRicochetAwardNotificationCustomWithMediaDataResponse(struct soap*, _ns1__GetRicochetAwardNotificationCustomWithMediaDataResponse *, const char*, const char*);

inline int soap_read__ns1__GetRicochetAwardNotificationCustomWithMediaDataResponse(struct soap *soap, _ns1__GetRicochetAwardNotificationCustomWithMediaDataResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetRicochetAwardNotificationCustomWithMediaDataResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetRicochetAwardNotificationCustomWithMediaDataResponse(struct soap *soap, const char *URL, _ns1__GetRicochetAwardNotificationCustomWithMediaDataResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetRicochetAwardNotificationCustomWithMediaDataResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetRicochetAwardNotificationCustomWithMediaDataResponse(struct soap *soap, _ns1__GetRicochetAwardNotificationCustomWithMediaDataResponse *p)
{
	if (soap_read__ns1__GetRicochetAwardNotificationCustomWithMediaDataResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetRicochetAwardNotificationCustomWithMediaData_DEFINED
#define SOAP_TYPE__ns1__GetRicochetAwardNotificationCustomWithMediaData_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetRicochetAwardNotificationCustomWithMediaData(struct soap*, const char*, int, const _ns1__GetRicochetAwardNotificationCustomWithMediaData *, const char*);
SOAP_FMAC3 _ns1__GetRicochetAwardNotificationCustomWithMediaData * SOAP_FMAC4 soap_in__ns1__GetRicochetAwardNotificationCustomWithMediaData(struct soap*, const char*, _ns1__GetRicochetAwardNotificationCustomWithMediaData *, const char*);
SOAP_FMAC1 _ns1__GetRicochetAwardNotificationCustomWithMediaData * SOAP_FMAC2 soap_instantiate__ns1__GetRicochetAwardNotificationCustomWithMediaData(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetRicochetAwardNotificationCustomWithMediaData * soap_new__ns1__GetRicochetAwardNotificationCustomWithMediaData(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetRicochetAwardNotificationCustomWithMediaData(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetRicochetAwardNotificationCustomWithMediaData * soap_new_req__ns1__GetRicochetAwardNotificationCustomWithMediaData(
	struct soap *soap)
{
	_ns1__GetRicochetAwardNotificationCustomWithMediaData *_p = soap_new__ns1__GetRicochetAwardNotificationCustomWithMediaData(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetRicochetAwardNotificationCustomWithMediaData * soap_new_set__ns1__GetRicochetAwardNotificationCustomWithMediaData(
	struct soap *soap,
	xsd__base64Binary *lastTimeStamp,
	int *ID,
	int *slotmastID,
	char *ocr)
{
	_ns1__GetRicochetAwardNotificationCustomWithMediaData *_p = soap_new__ns1__GetRicochetAwardNotificationCustomWithMediaData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetRicochetAwardNotificationCustomWithMediaData::lastTimeStamp = lastTimeStamp;
		_p->_ns1__GetRicochetAwardNotificationCustomWithMediaData::ID = ID;
		_p->_ns1__GetRicochetAwardNotificationCustomWithMediaData::slotmastID = slotmastID;
		_p->_ns1__GetRicochetAwardNotificationCustomWithMediaData::ocr = ocr;
	}
	return _p;
}

inline int soap_write__ns1__GetRicochetAwardNotificationCustomWithMediaData(struct soap *soap, _ns1__GetRicochetAwardNotificationCustomWithMediaData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetRicochetAwardNotificationCustomWithMediaData", p->soap_type() == SOAP_TYPE__ns1__GetRicochetAwardNotificationCustomWithMediaData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetRicochetAwardNotificationCustomWithMediaData(struct soap *soap, const char *URL, _ns1__GetRicochetAwardNotificationCustomWithMediaData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetRicochetAwardNotificationCustomWithMediaData", p->soap_type() == SOAP_TYPE__ns1__GetRicochetAwardNotificationCustomWithMediaData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetRicochetAwardNotificationCustomWithMediaData(struct soap *soap, const char *URL, _ns1__GetRicochetAwardNotificationCustomWithMediaData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetRicochetAwardNotificationCustomWithMediaData", p->soap_type() == SOAP_TYPE__ns1__GetRicochetAwardNotificationCustomWithMediaData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetRicochetAwardNotificationCustomWithMediaData * SOAP_FMAC4 soap_get__ns1__GetRicochetAwardNotificationCustomWithMediaData(struct soap*, _ns1__GetRicochetAwardNotificationCustomWithMediaData *, const char*, const char*);

inline int soap_read__ns1__GetRicochetAwardNotificationCustomWithMediaData(struct soap *soap, _ns1__GetRicochetAwardNotificationCustomWithMediaData *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetRicochetAwardNotificationCustomWithMediaData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetRicochetAwardNotificationCustomWithMediaData(struct soap *soap, const char *URL, _ns1__GetRicochetAwardNotificationCustomWithMediaData *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetRicochetAwardNotificationCustomWithMediaData(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetRicochetAwardNotificationCustomWithMediaData(struct soap *soap, _ns1__GetRicochetAwardNotificationCustomWithMediaData *p)
{
	if (soap_read__ns1__GetRicochetAwardNotificationCustomWithMediaData(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetRicochetAwardNotificationCustomResponse_DEFINED
#define SOAP_TYPE__ns1__GetRicochetAwardNotificationCustomResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetRicochetAwardNotificationCustomResponse(struct soap*, const char*, int, const _ns1__GetRicochetAwardNotificationCustomResponse *, const char*);
SOAP_FMAC3 _ns1__GetRicochetAwardNotificationCustomResponse * SOAP_FMAC4 soap_in__ns1__GetRicochetAwardNotificationCustomResponse(struct soap*, const char*, _ns1__GetRicochetAwardNotificationCustomResponse *, const char*);
SOAP_FMAC1 _ns1__GetRicochetAwardNotificationCustomResponse * SOAP_FMAC2 soap_instantiate__ns1__GetRicochetAwardNotificationCustomResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetRicochetAwardNotificationCustomResponse * soap_new__ns1__GetRicochetAwardNotificationCustomResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetRicochetAwardNotificationCustomResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetRicochetAwardNotificationCustomResponse * soap_new_req__ns1__GetRicochetAwardNotificationCustomResponse(
	struct soap *soap)
{
	_ns1__GetRicochetAwardNotificationCustomResponse *_p = soap_new__ns1__GetRicochetAwardNotificationCustomResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetRicochetAwardNotificationCustomResponse * soap_new_set__ns1__GetRicochetAwardNotificationCustomResponse(
	struct soap *soap,
	bool *GetRicochetAwardNotificationCustomResult,
	int *eventId,
	bool *showAward,
	ns3__CustomMessageScreen *customScreen)
{
	_ns1__GetRicochetAwardNotificationCustomResponse *_p = soap_new__ns1__GetRicochetAwardNotificationCustomResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetRicochetAwardNotificationCustomResponse::GetRicochetAwardNotificationCustomResult = GetRicochetAwardNotificationCustomResult;
		_p->_ns1__GetRicochetAwardNotificationCustomResponse::eventId = eventId;
		_p->_ns1__GetRicochetAwardNotificationCustomResponse::showAward = showAward;
		_p->_ns1__GetRicochetAwardNotificationCustomResponse::customScreen = customScreen;
	}
	return _p;
}

inline int soap_write__ns1__GetRicochetAwardNotificationCustomResponse(struct soap *soap, _ns1__GetRicochetAwardNotificationCustomResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetRicochetAwardNotificationCustomResponse", p->soap_type() == SOAP_TYPE__ns1__GetRicochetAwardNotificationCustomResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetRicochetAwardNotificationCustomResponse(struct soap *soap, const char *URL, _ns1__GetRicochetAwardNotificationCustomResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetRicochetAwardNotificationCustomResponse", p->soap_type() == SOAP_TYPE__ns1__GetRicochetAwardNotificationCustomResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetRicochetAwardNotificationCustomResponse(struct soap *soap, const char *URL, _ns1__GetRicochetAwardNotificationCustomResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetRicochetAwardNotificationCustomResponse", p->soap_type() == SOAP_TYPE__ns1__GetRicochetAwardNotificationCustomResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetRicochetAwardNotificationCustomResponse * SOAP_FMAC4 soap_get__ns1__GetRicochetAwardNotificationCustomResponse(struct soap*, _ns1__GetRicochetAwardNotificationCustomResponse *, const char*, const char*);

inline int soap_read__ns1__GetRicochetAwardNotificationCustomResponse(struct soap *soap, _ns1__GetRicochetAwardNotificationCustomResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetRicochetAwardNotificationCustomResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetRicochetAwardNotificationCustomResponse(struct soap *soap, const char *URL, _ns1__GetRicochetAwardNotificationCustomResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetRicochetAwardNotificationCustomResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetRicochetAwardNotificationCustomResponse(struct soap *soap, _ns1__GetRicochetAwardNotificationCustomResponse *p)
{
	if (soap_read__ns1__GetRicochetAwardNotificationCustomResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetRicochetAwardNotificationCustom_DEFINED
#define SOAP_TYPE__ns1__GetRicochetAwardNotificationCustom_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetRicochetAwardNotificationCustom(struct soap*, const char*, int, const _ns1__GetRicochetAwardNotificationCustom *, const char*);
SOAP_FMAC3 _ns1__GetRicochetAwardNotificationCustom * SOAP_FMAC4 soap_in__ns1__GetRicochetAwardNotificationCustom(struct soap*, const char*, _ns1__GetRicochetAwardNotificationCustom *, const char*);
SOAP_FMAC1 _ns1__GetRicochetAwardNotificationCustom * SOAP_FMAC2 soap_instantiate__ns1__GetRicochetAwardNotificationCustom(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetRicochetAwardNotificationCustom * soap_new__ns1__GetRicochetAwardNotificationCustom(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetRicochetAwardNotificationCustom(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetRicochetAwardNotificationCustom * soap_new_req__ns1__GetRicochetAwardNotificationCustom(
	struct soap *soap)
{
	_ns1__GetRicochetAwardNotificationCustom *_p = soap_new__ns1__GetRicochetAwardNotificationCustom(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetRicochetAwardNotificationCustom * soap_new_set__ns1__GetRicochetAwardNotificationCustom(
	struct soap *soap,
	xsd__base64Binary *lastTimeStamp,
	int *ID,
	int *slotmastID,
	char *ocr)
{
	_ns1__GetRicochetAwardNotificationCustom *_p = soap_new__ns1__GetRicochetAwardNotificationCustom(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetRicochetAwardNotificationCustom::lastTimeStamp = lastTimeStamp;
		_p->_ns1__GetRicochetAwardNotificationCustom::ID = ID;
		_p->_ns1__GetRicochetAwardNotificationCustom::slotmastID = slotmastID;
		_p->_ns1__GetRicochetAwardNotificationCustom::ocr = ocr;
	}
	return _p;
}

inline int soap_write__ns1__GetRicochetAwardNotificationCustom(struct soap *soap, _ns1__GetRicochetAwardNotificationCustom const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetRicochetAwardNotificationCustom", p->soap_type() == SOAP_TYPE__ns1__GetRicochetAwardNotificationCustom ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetRicochetAwardNotificationCustom(struct soap *soap, const char *URL, _ns1__GetRicochetAwardNotificationCustom const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetRicochetAwardNotificationCustom", p->soap_type() == SOAP_TYPE__ns1__GetRicochetAwardNotificationCustom ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetRicochetAwardNotificationCustom(struct soap *soap, const char *URL, _ns1__GetRicochetAwardNotificationCustom const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetRicochetAwardNotificationCustom", p->soap_type() == SOAP_TYPE__ns1__GetRicochetAwardNotificationCustom ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetRicochetAwardNotificationCustom * SOAP_FMAC4 soap_get__ns1__GetRicochetAwardNotificationCustom(struct soap*, _ns1__GetRicochetAwardNotificationCustom *, const char*, const char*);

inline int soap_read__ns1__GetRicochetAwardNotificationCustom(struct soap *soap, _ns1__GetRicochetAwardNotificationCustom *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetRicochetAwardNotificationCustom(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetRicochetAwardNotificationCustom(struct soap *soap, const char *URL, _ns1__GetRicochetAwardNotificationCustom *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetRicochetAwardNotificationCustom(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetRicochetAwardNotificationCustom(struct soap *soap, _ns1__GetRicochetAwardNotificationCustom *p)
{
	if (soap_read__ns1__GetRicochetAwardNotificationCustom(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetRicochetTriggeredEventNotificationCustomResponse_DEFINED
#define SOAP_TYPE__ns1__GetRicochetTriggeredEventNotificationCustomResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetRicochetTriggeredEventNotificationCustomResponse(struct soap*, const char*, int, const _ns1__GetRicochetTriggeredEventNotificationCustomResponse *, const char*);
SOAP_FMAC3 _ns1__GetRicochetTriggeredEventNotificationCustomResponse * SOAP_FMAC4 soap_in__ns1__GetRicochetTriggeredEventNotificationCustomResponse(struct soap*, const char*, _ns1__GetRicochetTriggeredEventNotificationCustomResponse *, const char*);
SOAP_FMAC1 _ns1__GetRicochetTriggeredEventNotificationCustomResponse * SOAP_FMAC2 soap_instantiate__ns1__GetRicochetTriggeredEventNotificationCustomResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetRicochetTriggeredEventNotificationCustomResponse * soap_new__ns1__GetRicochetTriggeredEventNotificationCustomResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetRicochetTriggeredEventNotificationCustomResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetRicochetTriggeredEventNotificationCustomResponse * soap_new_req__ns1__GetRicochetTriggeredEventNotificationCustomResponse(
	struct soap *soap)
{
	_ns1__GetRicochetTriggeredEventNotificationCustomResponse *_p = soap_new__ns1__GetRicochetTriggeredEventNotificationCustomResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetRicochetTriggeredEventNotificationCustomResponse * soap_new_set__ns1__GetRicochetTriggeredEventNotificationCustomResponse(
	struct soap *soap,
	bool *GetRicochetTriggeredEventNotificationCustomResult,
	int *eventId,
	int *triggeredEventID,
	bool *show,
	ns3__CustomMessageScreen *triggerScreen)
{
	_ns1__GetRicochetTriggeredEventNotificationCustomResponse *_p = soap_new__ns1__GetRicochetTriggeredEventNotificationCustomResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetRicochetTriggeredEventNotificationCustomResponse::GetRicochetTriggeredEventNotificationCustomResult = GetRicochetTriggeredEventNotificationCustomResult;
		_p->_ns1__GetRicochetTriggeredEventNotificationCustomResponse::eventId = eventId;
		_p->_ns1__GetRicochetTriggeredEventNotificationCustomResponse::triggeredEventID = triggeredEventID;
		_p->_ns1__GetRicochetTriggeredEventNotificationCustomResponse::show = show;
		_p->_ns1__GetRicochetTriggeredEventNotificationCustomResponse::triggerScreen = triggerScreen;
	}
	return _p;
}

inline int soap_write__ns1__GetRicochetTriggeredEventNotificationCustomResponse(struct soap *soap, _ns1__GetRicochetTriggeredEventNotificationCustomResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetRicochetTriggeredEventNotificationCustomResponse", p->soap_type() == SOAP_TYPE__ns1__GetRicochetTriggeredEventNotificationCustomResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetRicochetTriggeredEventNotificationCustomResponse(struct soap *soap, const char *URL, _ns1__GetRicochetTriggeredEventNotificationCustomResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetRicochetTriggeredEventNotificationCustomResponse", p->soap_type() == SOAP_TYPE__ns1__GetRicochetTriggeredEventNotificationCustomResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetRicochetTriggeredEventNotificationCustomResponse(struct soap *soap, const char *URL, _ns1__GetRicochetTriggeredEventNotificationCustomResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetRicochetTriggeredEventNotificationCustomResponse", p->soap_type() == SOAP_TYPE__ns1__GetRicochetTriggeredEventNotificationCustomResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetRicochetTriggeredEventNotificationCustomResponse * SOAP_FMAC4 soap_get__ns1__GetRicochetTriggeredEventNotificationCustomResponse(struct soap*, _ns1__GetRicochetTriggeredEventNotificationCustomResponse *, const char*, const char*);

inline int soap_read__ns1__GetRicochetTriggeredEventNotificationCustomResponse(struct soap *soap, _ns1__GetRicochetTriggeredEventNotificationCustomResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetRicochetTriggeredEventNotificationCustomResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetRicochetTriggeredEventNotificationCustomResponse(struct soap *soap, const char *URL, _ns1__GetRicochetTriggeredEventNotificationCustomResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetRicochetTriggeredEventNotificationCustomResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetRicochetTriggeredEventNotificationCustomResponse(struct soap *soap, _ns1__GetRicochetTriggeredEventNotificationCustomResponse *p)
{
	if (soap_read__ns1__GetRicochetTriggeredEventNotificationCustomResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetRicochetTriggeredEventNotificationCustom_DEFINED
#define SOAP_TYPE__ns1__GetRicochetTriggeredEventNotificationCustom_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetRicochetTriggeredEventNotificationCustom(struct soap*, const char*, int, const _ns1__GetRicochetTriggeredEventNotificationCustom *, const char*);
SOAP_FMAC3 _ns1__GetRicochetTriggeredEventNotificationCustom * SOAP_FMAC4 soap_in__ns1__GetRicochetTriggeredEventNotificationCustom(struct soap*, const char*, _ns1__GetRicochetTriggeredEventNotificationCustom *, const char*);
SOAP_FMAC1 _ns1__GetRicochetTriggeredEventNotificationCustom * SOAP_FMAC2 soap_instantiate__ns1__GetRicochetTriggeredEventNotificationCustom(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetRicochetTriggeredEventNotificationCustom * soap_new__ns1__GetRicochetTriggeredEventNotificationCustom(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetRicochetTriggeredEventNotificationCustom(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetRicochetTriggeredEventNotificationCustom * soap_new_req__ns1__GetRicochetTriggeredEventNotificationCustom(
	struct soap *soap)
{
	_ns1__GetRicochetTriggeredEventNotificationCustom *_p = soap_new__ns1__GetRicochetTriggeredEventNotificationCustom(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetRicochetTriggeredEventNotificationCustom * soap_new_set__ns1__GetRicochetTriggeredEventNotificationCustom(
	struct soap *soap,
	xsd__base64Binary *lastTimeStamp,
	int *ID,
	int *slotmastID,
	char *ocr)
{
	_ns1__GetRicochetTriggeredEventNotificationCustom *_p = soap_new__ns1__GetRicochetTriggeredEventNotificationCustom(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetRicochetTriggeredEventNotificationCustom::lastTimeStamp = lastTimeStamp;
		_p->_ns1__GetRicochetTriggeredEventNotificationCustom::ID = ID;
		_p->_ns1__GetRicochetTriggeredEventNotificationCustom::slotmastID = slotmastID;
		_p->_ns1__GetRicochetTriggeredEventNotificationCustom::ocr = ocr;
	}
	return _p;
}

inline int soap_write__ns1__GetRicochetTriggeredEventNotificationCustom(struct soap *soap, _ns1__GetRicochetTriggeredEventNotificationCustom const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetRicochetTriggeredEventNotificationCustom", p->soap_type() == SOAP_TYPE__ns1__GetRicochetTriggeredEventNotificationCustom ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetRicochetTriggeredEventNotificationCustom(struct soap *soap, const char *URL, _ns1__GetRicochetTriggeredEventNotificationCustom const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetRicochetTriggeredEventNotificationCustom", p->soap_type() == SOAP_TYPE__ns1__GetRicochetTriggeredEventNotificationCustom ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetRicochetTriggeredEventNotificationCustom(struct soap *soap, const char *URL, _ns1__GetRicochetTriggeredEventNotificationCustom const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetRicochetTriggeredEventNotificationCustom", p->soap_type() == SOAP_TYPE__ns1__GetRicochetTriggeredEventNotificationCustom ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetRicochetTriggeredEventNotificationCustom * SOAP_FMAC4 soap_get__ns1__GetRicochetTriggeredEventNotificationCustom(struct soap*, _ns1__GetRicochetTriggeredEventNotificationCustom *, const char*, const char*);

inline int soap_read__ns1__GetRicochetTriggeredEventNotificationCustom(struct soap *soap, _ns1__GetRicochetTriggeredEventNotificationCustom *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetRicochetTriggeredEventNotificationCustom(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetRicochetTriggeredEventNotificationCustom(struct soap *soap, const char *URL, _ns1__GetRicochetTriggeredEventNotificationCustom *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetRicochetTriggeredEventNotificationCustom(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetRicochetTriggeredEventNotificationCustom(struct soap *soap, _ns1__GetRicochetTriggeredEventNotificationCustom *p)
{
	if (soap_read__ns1__GetRicochetTriggeredEventNotificationCustom(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetSplashdownAwardNotificationCustomWithMediaDataResponse_DEFINED
#define SOAP_TYPE__ns1__GetSplashdownAwardNotificationCustomWithMediaDataResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetSplashdownAwardNotificationCustomWithMediaDataResponse(struct soap*, const char*, int, const _ns1__GetSplashdownAwardNotificationCustomWithMediaDataResponse *, const char*);
SOAP_FMAC3 _ns1__GetSplashdownAwardNotificationCustomWithMediaDataResponse * SOAP_FMAC4 soap_in__ns1__GetSplashdownAwardNotificationCustomWithMediaDataResponse(struct soap*, const char*, _ns1__GetSplashdownAwardNotificationCustomWithMediaDataResponse *, const char*);
SOAP_FMAC1 _ns1__GetSplashdownAwardNotificationCustomWithMediaDataResponse * SOAP_FMAC2 soap_instantiate__ns1__GetSplashdownAwardNotificationCustomWithMediaDataResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetSplashdownAwardNotificationCustomWithMediaDataResponse * soap_new__ns1__GetSplashdownAwardNotificationCustomWithMediaDataResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetSplashdownAwardNotificationCustomWithMediaDataResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetSplashdownAwardNotificationCustomWithMediaDataResponse * soap_new_req__ns1__GetSplashdownAwardNotificationCustomWithMediaDataResponse(
	struct soap *soap)
{
	_ns1__GetSplashdownAwardNotificationCustomWithMediaDataResponse *_p = soap_new__ns1__GetSplashdownAwardNotificationCustomWithMediaDataResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetSplashdownAwardNotificationCustomWithMediaDataResponse * soap_new_set__ns1__GetSplashdownAwardNotificationCustomWithMediaDataResponse(
	struct soap *soap,
	bool *GetSplashdownAwardNotificationCustomWithMediaDataResult,
	int *triggeredEventID,
	bool *showAward,
	bool *isTriggerAward,
	int *awardAmount,
	ns3__CustomMessageScreen *customScreen,
	char *mediaData)
{
	_ns1__GetSplashdownAwardNotificationCustomWithMediaDataResponse *_p = soap_new__ns1__GetSplashdownAwardNotificationCustomWithMediaDataResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetSplashdownAwardNotificationCustomWithMediaDataResponse::GetSplashdownAwardNotificationCustomWithMediaDataResult = GetSplashdownAwardNotificationCustomWithMediaDataResult;
		_p->_ns1__GetSplashdownAwardNotificationCustomWithMediaDataResponse::triggeredEventID = triggeredEventID;
		_p->_ns1__GetSplashdownAwardNotificationCustomWithMediaDataResponse::showAward = showAward;
		_p->_ns1__GetSplashdownAwardNotificationCustomWithMediaDataResponse::isTriggerAward = isTriggerAward;
		_p->_ns1__GetSplashdownAwardNotificationCustomWithMediaDataResponse::awardAmount = awardAmount;
		_p->_ns1__GetSplashdownAwardNotificationCustomWithMediaDataResponse::customScreen = customScreen;
		_p->_ns1__GetSplashdownAwardNotificationCustomWithMediaDataResponse::mediaData = mediaData;
	}
	return _p;
}

inline int soap_write__ns1__GetSplashdownAwardNotificationCustomWithMediaDataResponse(struct soap *soap, _ns1__GetSplashdownAwardNotificationCustomWithMediaDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetSplashdownAwardNotificationCustomWithMediaDataResponse", p->soap_type() == SOAP_TYPE__ns1__GetSplashdownAwardNotificationCustomWithMediaDataResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetSplashdownAwardNotificationCustomWithMediaDataResponse(struct soap *soap, const char *URL, _ns1__GetSplashdownAwardNotificationCustomWithMediaDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetSplashdownAwardNotificationCustomWithMediaDataResponse", p->soap_type() == SOAP_TYPE__ns1__GetSplashdownAwardNotificationCustomWithMediaDataResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetSplashdownAwardNotificationCustomWithMediaDataResponse(struct soap *soap, const char *URL, _ns1__GetSplashdownAwardNotificationCustomWithMediaDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetSplashdownAwardNotificationCustomWithMediaDataResponse", p->soap_type() == SOAP_TYPE__ns1__GetSplashdownAwardNotificationCustomWithMediaDataResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetSplashdownAwardNotificationCustomWithMediaDataResponse * SOAP_FMAC4 soap_get__ns1__GetSplashdownAwardNotificationCustomWithMediaDataResponse(struct soap*, _ns1__GetSplashdownAwardNotificationCustomWithMediaDataResponse *, const char*, const char*);

inline int soap_read__ns1__GetSplashdownAwardNotificationCustomWithMediaDataResponse(struct soap *soap, _ns1__GetSplashdownAwardNotificationCustomWithMediaDataResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetSplashdownAwardNotificationCustomWithMediaDataResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetSplashdownAwardNotificationCustomWithMediaDataResponse(struct soap *soap, const char *URL, _ns1__GetSplashdownAwardNotificationCustomWithMediaDataResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetSplashdownAwardNotificationCustomWithMediaDataResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetSplashdownAwardNotificationCustomWithMediaDataResponse(struct soap *soap, _ns1__GetSplashdownAwardNotificationCustomWithMediaDataResponse *p)
{
	if (soap_read__ns1__GetSplashdownAwardNotificationCustomWithMediaDataResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetSplashdownAwardNotificationCustomWithMediaData_DEFINED
#define SOAP_TYPE__ns1__GetSplashdownAwardNotificationCustomWithMediaData_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetSplashdownAwardNotificationCustomWithMediaData(struct soap*, const char*, int, const _ns1__GetSplashdownAwardNotificationCustomWithMediaData *, const char*);
SOAP_FMAC3 _ns1__GetSplashdownAwardNotificationCustomWithMediaData * SOAP_FMAC4 soap_in__ns1__GetSplashdownAwardNotificationCustomWithMediaData(struct soap*, const char*, _ns1__GetSplashdownAwardNotificationCustomWithMediaData *, const char*);
SOAP_FMAC1 _ns1__GetSplashdownAwardNotificationCustomWithMediaData * SOAP_FMAC2 soap_instantiate__ns1__GetSplashdownAwardNotificationCustomWithMediaData(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetSplashdownAwardNotificationCustomWithMediaData * soap_new__ns1__GetSplashdownAwardNotificationCustomWithMediaData(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetSplashdownAwardNotificationCustomWithMediaData(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetSplashdownAwardNotificationCustomWithMediaData * soap_new_req__ns1__GetSplashdownAwardNotificationCustomWithMediaData(
	struct soap *soap)
{
	_ns1__GetSplashdownAwardNotificationCustomWithMediaData *_p = soap_new__ns1__GetSplashdownAwardNotificationCustomWithMediaData(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetSplashdownAwardNotificationCustomWithMediaData * soap_new_set__ns1__GetSplashdownAwardNotificationCustomWithMediaData(
	struct soap *soap,
	xsd__base64Binary *lastTimeStamp,
	int *ID,
	int *slotmastID,
	char *ocr)
{
	_ns1__GetSplashdownAwardNotificationCustomWithMediaData *_p = soap_new__ns1__GetSplashdownAwardNotificationCustomWithMediaData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetSplashdownAwardNotificationCustomWithMediaData::lastTimeStamp = lastTimeStamp;
		_p->_ns1__GetSplashdownAwardNotificationCustomWithMediaData::ID = ID;
		_p->_ns1__GetSplashdownAwardNotificationCustomWithMediaData::slotmastID = slotmastID;
		_p->_ns1__GetSplashdownAwardNotificationCustomWithMediaData::ocr = ocr;
	}
	return _p;
}

inline int soap_write__ns1__GetSplashdownAwardNotificationCustomWithMediaData(struct soap *soap, _ns1__GetSplashdownAwardNotificationCustomWithMediaData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetSplashdownAwardNotificationCustomWithMediaData", p->soap_type() == SOAP_TYPE__ns1__GetSplashdownAwardNotificationCustomWithMediaData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetSplashdownAwardNotificationCustomWithMediaData(struct soap *soap, const char *URL, _ns1__GetSplashdownAwardNotificationCustomWithMediaData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetSplashdownAwardNotificationCustomWithMediaData", p->soap_type() == SOAP_TYPE__ns1__GetSplashdownAwardNotificationCustomWithMediaData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetSplashdownAwardNotificationCustomWithMediaData(struct soap *soap, const char *URL, _ns1__GetSplashdownAwardNotificationCustomWithMediaData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetSplashdownAwardNotificationCustomWithMediaData", p->soap_type() == SOAP_TYPE__ns1__GetSplashdownAwardNotificationCustomWithMediaData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetSplashdownAwardNotificationCustomWithMediaData * SOAP_FMAC4 soap_get__ns1__GetSplashdownAwardNotificationCustomWithMediaData(struct soap*, _ns1__GetSplashdownAwardNotificationCustomWithMediaData *, const char*, const char*);

inline int soap_read__ns1__GetSplashdownAwardNotificationCustomWithMediaData(struct soap *soap, _ns1__GetSplashdownAwardNotificationCustomWithMediaData *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetSplashdownAwardNotificationCustomWithMediaData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetSplashdownAwardNotificationCustomWithMediaData(struct soap *soap, const char *URL, _ns1__GetSplashdownAwardNotificationCustomWithMediaData *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetSplashdownAwardNotificationCustomWithMediaData(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetSplashdownAwardNotificationCustomWithMediaData(struct soap *soap, _ns1__GetSplashdownAwardNotificationCustomWithMediaData *p)
{
	if (soap_read__ns1__GetSplashdownAwardNotificationCustomWithMediaData(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetSplashdownAwardNotificationCustomResponse_DEFINED
#define SOAP_TYPE__ns1__GetSplashdownAwardNotificationCustomResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetSplashdownAwardNotificationCustomResponse(struct soap*, const char*, int, const _ns1__GetSplashdownAwardNotificationCustomResponse *, const char*);
SOAP_FMAC3 _ns1__GetSplashdownAwardNotificationCustomResponse * SOAP_FMAC4 soap_in__ns1__GetSplashdownAwardNotificationCustomResponse(struct soap*, const char*, _ns1__GetSplashdownAwardNotificationCustomResponse *, const char*);
SOAP_FMAC1 _ns1__GetSplashdownAwardNotificationCustomResponse * SOAP_FMAC2 soap_instantiate__ns1__GetSplashdownAwardNotificationCustomResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetSplashdownAwardNotificationCustomResponse * soap_new__ns1__GetSplashdownAwardNotificationCustomResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetSplashdownAwardNotificationCustomResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetSplashdownAwardNotificationCustomResponse * soap_new_req__ns1__GetSplashdownAwardNotificationCustomResponse(
	struct soap *soap)
{
	_ns1__GetSplashdownAwardNotificationCustomResponse *_p = soap_new__ns1__GetSplashdownAwardNotificationCustomResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetSplashdownAwardNotificationCustomResponse * soap_new_set__ns1__GetSplashdownAwardNotificationCustomResponse(
	struct soap *soap,
	bool *GetSplashdownAwardNotificationCustomResult,
	int *triggeredEventID,
	bool *showAward,
	bool *isTriggerAward,
	int *awardAmount,
	ns3__CustomMessageScreen *customScreen)
{
	_ns1__GetSplashdownAwardNotificationCustomResponse *_p = soap_new__ns1__GetSplashdownAwardNotificationCustomResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetSplashdownAwardNotificationCustomResponse::GetSplashdownAwardNotificationCustomResult = GetSplashdownAwardNotificationCustomResult;
		_p->_ns1__GetSplashdownAwardNotificationCustomResponse::triggeredEventID = triggeredEventID;
		_p->_ns1__GetSplashdownAwardNotificationCustomResponse::showAward = showAward;
		_p->_ns1__GetSplashdownAwardNotificationCustomResponse::isTriggerAward = isTriggerAward;
		_p->_ns1__GetSplashdownAwardNotificationCustomResponse::awardAmount = awardAmount;
		_p->_ns1__GetSplashdownAwardNotificationCustomResponse::customScreen = customScreen;
	}
	return _p;
}

inline int soap_write__ns1__GetSplashdownAwardNotificationCustomResponse(struct soap *soap, _ns1__GetSplashdownAwardNotificationCustomResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetSplashdownAwardNotificationCustomResponse", p->soap_type() == SOAP_TYPE__ns1__GetSplashdownAwardNotificationCustomResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetSplashdownAwardNotificationCustomResponse(struct soap *soap, const char *URL, _ns1__GetSplashdownAwardNotificationCustomResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetSplashdownAwardNotificationCustomResponse", p->soap_type() == SOAP_TYPE__ns1__GetSplashdownAwardNotificationCustomResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetSplashdownAwardNotificationCustomResponse(struct soap *soap, const char *URL, _ns1__GetSplashdownAwardNotificationCustomResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetSplashdownAwardNotificationCustomResponse", p->soap_type() == SOAP_TYPE__ns1__GetSplashdownAwardNotificationCustomResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetSplashdownAwardNotificationCustomResponse * SOAP_FMAC4 soap_get__ns1__GetSplashdownAwardNotificationCustomResponse(struct soap*, _ns1__GetSplashdownAwardNotificationCustomResponse *, const char*, const char*);

inline int soap_read__ns1__GetSplashdownAwardNotificationCustomResponse(struct soap *soap, _ns1__GetSplashdownAwardNotificationCustomResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetSplashdownAwardNotificationCustomResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetSplashdownAwardNotificationCustomResponse(struct soap *soap, const char *URL, _ns1__GetSplashdownAwardNotificationCustomResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetSplashdownAwardNotificationCustomResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetSplashdownAwardNotificationCustomResponse(struct soap *soap, _ns1__GetSplashdownAwardNotificationCustomResponse *p)
{
	if (soap_read__ns1__GetSplashdownAwardNotificationCustomResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetSplashdownAwardNotificationCustom_DEFINED
#define SOAP_TYPE__ns1__GetSplashdownAwardNotificationCustom_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetSplashdownAwardNotificationCustom(struct soap*, const char*, int, const _ns1__GetSplashdownAwardNotificationCustom *, const char*);
SOAP_FMAC3 _ns1__GetSplashdownAwardNotificationCustom * SOAP_FMAC4 soap_in__ns1__GetSplashdownAwardNotificationCustom(struct soap*, const char*, _ns1__GetSplashdownAwardNotificationCustom *, const char*);
SOAP_FMAC1 _ns1__GetSplashdownAwardNotificationCustom * SOAP_FMAC2 soap_instantiate__ns1__GetSplashdownAwardNotificationCustom(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetSplashdownAwardNotificationCustom * soap_new__ns1__GetSplashdownAwardNotificationCustom(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetSplashdownAwardNotificationCustom(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetSplashdownAwardNotificationCustom * soap_new_req__ns1__GetSplashdownAwardNotificationCustom(
	struct soap *soap)
{
	_ns1__GetSplashdownAwardNotificationCustom *_p = soap_new__ns1__GetSplashdownAwardNotificationCustom(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetSplashdownAwardNotificationCustom * soap_new_set__ns1__GetSplashdownAwardNotificationCustom(
	struct soap *soap,
	xsd__base64Binary *lastTimeStamp,
	int *ID,
	int *slotmastID,
	char *ocr)
{
	_ns1__GetSplashdownAwardNotificationCustom *_p = soap_new__ns1__GetSplashdownAwardNotificationCustom(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetSplashdownAwardNotificationCustom::lastTimeStamp = lastTimeStamp;
		_p->_ns1__GetSplashdownAwardNotificationCustom::ID = ID;
		_p->_ns1__GetSplashdownAwardNotificationCustom::slotmastID = slotmastID;
		_p->_ns1__GetSplashdownAwardNotificationCustom::ocr = ocr;
	}
	return _p;
}

inline int soap_write__ns1__GetSplashdownAwardNotificationCustom(struct soap *soap, _ns1__GetSplashdownAwardNotificationCustom const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetSplashdownAwardNotificationCustom", p->soap_type() == SOAP_TYPE__ns1__GetSplashdownAwardNotificationCustom ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetSplashdownAwardNotificationCustom(struct soap *soap, const char *URL, _ns1__GetSplashdownAwardNotificationCustom const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetSplashdownAwardNotificationCustom", p->soap_type() == SOAP_TYPE__ns1__GetSplashdownAwardNotificationCustom ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetSplashdownAwardNotificationCustom(struct soap *soap, const char *URL, _ns1__GetSplashdownAwardNotificationCustom const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetSplashdownAwardNotificationCustom", p->soap_type() == SOAP_TYPE__ns1__GetSplashdownAwardNotificationCustom ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetSplashdownAwardNotificationCustom * SOAP_FMAC4 soap_get__ns1__GetSplashdownAwardNotificationCustom(struct soap*, _ns1__GetSplashdownAwardNotificationCustom *, const char*, const char*);

inline int soap_read__ns1__GetSplashdownAwardNotificationCustom(struct soap *soap, _ns1__GetSplashdownAwardNotificationCustom *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetSplashdownAwardNotificationCustom(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetSplashdownAwardNotificationCustom(struct soap *soap, const char *URL, _ns1__GetSplashdownAwardNotificationCustom *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetSplashdownAwardNotificationCustom(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetSplashdownAwardNotificationCustom(struct soap *soap, _ns1__GetSplashdownAwardNotificationCustom *p)
{
	if (soap_read__ns1__GetSplashdownAwardNotificationCustom(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetSplashdownTriggeredEventNotificationCustomResponse_DEFINED
#define SOAP_TYPE__ns1__GetSplashdownTriggeredEventNotificationCustomResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetSplashdownTriggeredEventNotificationCustomResponse(struct soap*, const char*, int, const _ns1__GetSplashdownTriggeredEventNotificationCustomResponse *, const char*);
SOAP_FMAC3 _ns1__GetSplashdownTriggeredEventNotificationCustomResponse * SOAP_FMAC4 soap_in__ns1__GetSplashdownTriggeredEventNotificationCustomResponse(struct soap*, const char*, _ns1__GetSplashdownTriggeredEventNotificationCustomResponse *, const char*);
SOAP_FMAC1 _ns1__GetSplashdownTriggeredEventNotificationCustomResponse * SOAP_FMAC2 soap_instantiate__ns1__GetSplashdownTriggeredEventNotificationCustomResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetSplashdownTriggeredEventNotificationCustomResponse * soap_new__ns1__GetSplashdownTriggeredEventNotificationCustomResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetSplashdownTriggeredEventNotificationCustomResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetSplashdownTriggeredEventNotificationCustomResponse * soap_new_req__ns1__GetSplashdownTriggeredEventNotificationCustomResponse(
	struct soap *soap)
{
	_ns1__GetSplashdownTriggeredEventNotificationCustomResponse *_p = soap_new__ns1__GetSplashdownTriggeredEventNotificationCustomResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetSplashdownTriggeredEventNotificationCustomResponse * soap_new_set__ns1__GetSplashdownTriggeredEventNotificationCustomResponse(
	struct soap *soap,
	bool *GetSplashdownTriggeredEventNotificationCustomResult,
	int *eventId,
	int *triggeredEventId,
	ns2__ArrayOfint *triggerType,
	ns2__ArrayOflong *triggerMin,
	ns2__ArrayOflong *triggerMax,
	int *numTriggers,
	int *duration,
	bool *groupCumulative,
	bool *pointsToBeAwarded,
	ns3__CustomMessageScreen *customScreen,
	ns3__CustomMessageScreen *customCelebrationScreen,
	ns3__CustomMessageScreen *customFinaleScreen)
{
	_ns1__GetSplashdownTriggeredEventNotificationCustomResponse *_p = soap_new__ns1__GetSplashdownTriggeredEventNotificationCustomResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetSplashdownTriggeredEventNotificationCustomResponse::GetSplashdownTriggeredEventNotificationCustomResult = GetSplashdownTriggeredEventNotificationCustomResult;
		_p->_ns1__GetSplashdownTriggeredEventNotificationCustomResponse::eventId = eventId;
		_p->_ns1__GetSplashdownTriggeredEventNotificationCustomResponse::triggeredEventId = triggeredEventId;
		_p->_ns1__GetSplashdownTriggeredEventNotificationCustomResponse::triggerType = triggerType;
		_p->_ns1__GetSplashdownTriggeredEventNotificationCustomResponse::triggerMin = triggerMin;
		_p->_ns1__GetSplashdownTriggeredEventNotificationCustomResponse::triggerMax = triggerMax;
		_p->_ns1__GetSplashdownTriggeredEventNotificationCustomResponse::numTriggers = numTriggers;
		_p->_ns1__GetSplashdownTriggeredEventNotificationCustomResponse::duration = duration;
		_p->_ns1__GetSplashdownTriggeredEventNotificationCustomResponse::groupCumulative = groupCumulative;
		_p->_ns1__GetSplashdownTriggeredEventNotificationCustomResponse::pointsToBeAwarded = pointsToBeAwarded;
		_p->_ns1__GetSplashdownTriggeredEventNotificationCustomResponse::customScreen = customScreen;
		_p->_ns1__GetSplashdownTriggeredEventNotificationCustomResponse::customCelebrationScreen = customCelebrationScreen;
		_p->_ns1__GetSplashdownTriggeredEventNotificationCustomResponse::customFinaleScreen = customFinaleScreen;
	}
	return _p;
}

inline int soap_write__ns1__GetSplashdownTriggeredEventNotificationCustomResponse(struct soap *soap, _ns1__GetSplashdownTriggeredEventNotificationCustomResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetSplashdownTriggeredEventNotificationCustomResponse", p->soap_type() == SOAP_TYPE__ns1__GetSplashdownTriggeredEventNotificationCustomResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetSplashdownTriggeredEventNotificationCustomResponse(struct soap *soap, const char *URL, _ns1__GetSplashdownTriggeredEventNotificationCustomResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetSplashdownTriggeredEventNotificationCustomResponse", p->soap_type() == SOAP_TYPE__ns1__GetSplashdownTriggeredEventNotificationCustomResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetSplashdownTriggeredEventNotificationCustomResponse(struct soap *soap, const char *URL, _ns1__GetSplashdownTriggeredEventNotificationCustomResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetSplashdownTriggeredEventNotificationCustomResponse", p->soap_type() == SOAP_TYPE__ns1__GetSplashdownTriggeredEventNotificationCustomResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetSplashdownTriggeredEventNotificationCustomResponse * SOAP_FMAC4 soap_get__ns1__GetSplashdownTriggeredEventNotificationCustomResponse(struct soap*, _ns1__GetSplashdownTriggeredEventNotificationCustomResponse *, const char*, const char*);

inline int soap_read__ns1__GetSplashdownTriggeredEventNotificationCustomResponse(struct soap *soap, _ns1__GetSplashdownTriggeredEventNotificationCustomResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetSplashdownTriggeredEventNotificationCustomResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetSplashdownTriggeredEventNotificationCustomResponse(struct soap *soap, const char *URL, _ns1__GetSplashdownTriggeredEventNotificationCustomResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetSplashdownTriggeredEventNotificationCustomResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetSplashdownTriggeredEventNotificationCustomResponse(struct soap *soap, _ns1__GetSplashdownTriggeredEventNotificationCustomResponse *p)
{
	if (soap_read__ns1__GetSplashdownTriggeredEventNotificationCustomResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetSplashdownTriggeredEventNotificationCustom_DEFINED
#define SOAP_TYPE__ns1__GetSplashdownTriggeredEventNotificationCustom_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetSplashdownTriggeredEventNotificationCustom(struct soap*, const char*, int, const _ns1__GetSplashdownTriggeredEventNotificationCustom *, const char*);
SOAP_FMAC3 _ns1__GetSplashdownTriggeredEventNotificationCustom * SOAP_FMAC4 soap_in__ns1__GetSplashdownTriggeredEventNotificationCustom(struct soap*, const char*, _ns1__GetSplashdownTriggeredEventNotificationCustom *, const char*);
SOAP_FMAC1 _ns1__GetSplashdownTriggeredEventNotificationCustom * SOAP_FMAC2 soap_instantiate__ns1__GetSplashdownTriggeredEventNotificationCustom(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetSplashdownTriggeredEventNotificationCustom * soap_new__ns1__GetSplashdownTriggeredEventNotificationCustom(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetSplashdownTriggeredEventNotificationCustom(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetSplashdownTriggeredEventNotificationCustom * soap_new_req__ns1__GetSplashdownTriggeredEventNotificationCustom(
	struct soap *soap)
{
	_ns1__GetSplashdownTriggeredEventNotificationCustom *_p = soap_new__ns1__GetSplashdownTriggeredEventNotificationCustom(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetSplashdownTriggeredEventNotificationCustom * soap_new_set__ns1__GetSplashdownTriggeredEventNotificationCustom(
	struct soap *soap,
	xsd__base64Binary *lastTimeStamp,
	int *ID,
	int *slotmastID,
	char *ocr)
{
	_ns1__GetSplashdownTriggeredEventNotificationCustom *_p = soap_new__ns1__GetSplashdownTriggeredEventNotificationCustom(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetSplashdownTriggeredEventNotificationCustom::lastTimeStamp = lastTimeStamp;
		_p->_ns1__GetSplashdownTriggeredEventNotificationCustom::ID = ID;
		_p->_ns1__GetSplashdownTriggeredEventNotificationCustom::slotmastID = slotmastID;
		_p->_ns1__GetSplashdownTriggeredEventNotificationCustom::ocr = ocr;
	}
	return _p;
}

inline int soap_write__ns1__GetSplashdownTriggeredEventNotificationCustom(struct soap *soap, _ns1__GetSplashdownTriggeredEventNotificationCustom const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetSplashdownTriggeredEventNotificationCustom", p->soap_type() == SOAP_TYPE__ns1__GetSplashdownTriggeredEventNotificationCustom ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetSplashdownTriggeredEventNotificationCustom(struct soap *soap, const char *URL, _ns1__GetSplashdownTriggeredEventNotificationCustom const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetSplashdownTriggeredEventNotificationCustom", p->soap_type() == SOAP_TYPE__ns1__GetSplashdownTriggeredEventNotificationCustom ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetSplashdownTriggeredEventNotificationCustom(struct soap *soap, const char *URL, _ns1__GetSplashdownTriggeredEventNotificationCustom const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetSplashdownTriggeredEventNotificationCustom", p->soap_type() == SOAP_TYPE__ns1__GetSplashdownTriggeredEventNotificationCustom ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetSplashdownTriggeredEventNotificationCustom * SOAP_FMAC4 soap_get__ns1__GetSplashdownTriggeredEventNotificationCustom(struct soap*, _ns1__GetSplashdownTriggeredEventNotificationCustom *, const char*, const char*);

inline int soap_read__ns1__GetSplashdownTriggeredEventNotificationCustom(struct soap *soap, _ns1__GetSplashdownTriggeredEventNotificationCustom *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetSplashdownTriggeredEventNotificationCustom(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetSplashdownTriggeredEventNotificationCustom(struct soap *soap, const char *URL, _ns1__GetSplashdownTriggeredEventNotificationCustom *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetSplashdownTriggeredEventNotificationCustom(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetSplashdownTriggeredEventNotificationCustom(struct soap *soap, _ns1__GetSplashdownTriggeredEventNotificationCustom *p)
{
	if (soap_read__ns1__GetSplashdownTriggeredEventNotificationCustom(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetSentinelConfigNotificationResponse_DEFINED
#define SOAP_TYPE__ns1__GetSentinelConfigNotificationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetSentinelConfigNotificationResponse(struct soap*, const char*, int, const _ns1__GetSentinelConfigNotificationResponse *, const char*);
SOAP_FMAC3 _ns1__GetSentinelConfigNotificationResponse * SOAP_FMAC4 soap_in__ns1__GetSentinelConfigNotificationResponse(struct soap*, const char*, _ns1__GetSentinelConfigNotificationResponse *, const char*);
SOAP_FMAC1 _ns1__GetSentinelConfigNotificationResponse * SOAP_FMAC2 soap_instantiate__ns1__GetSentinelConfigNotificationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetSentinelConfigNotificationResponse * soap_new__ns1__GetSentinelConfigNotificationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetSentinelConfigNotificationResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetSentinelConfigNotificationResponse * soap_new_req__ns1__GetSentinelConfigNotificationResponse(
	struct soap *soap)
{
	_ns1__GetSentinelConfigNotificationResponse *_p = soap_new__ns1__GetSentinelConfigNotificationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetSentinelConfigNotificationResponse * soap_new_set__ns1__GetSentinelConfigNotificationResponse(
	struct soap *soap,
	bool *GetSentinelConfigNotificationResult,
	ns2__ArrayOfKeyValueOfstringstring *parameters)
{
	_ns1__GetSentinelConfigNotificationResponse *_p = soap_new__ns1__GetSentinelConfigNotificationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetSentinelConfigNotificationResponse::GetSentinelConfigNotificationResult = GetSentinelConfigNotificationResult;
		_p->_ns1__GetSentinelConfigNotificationResponse::parameters = parameters;
	}
	return _p;
}

inline int soap_write__ns1__GetSentinelConfigNotificationResponse(struct soap *soap, _ns1__GetSentinelConfigNotificationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetSentinelConfigNotificationResponse", p->soap_type() == SOAP_TYPE__ns1__GetSentinelConfigNotificationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetSentinelConfigNotificationResponse(struct soap *soap, const char *URL, _ns1__GetSentinelConfigNotificationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetSentinelConfigNotificationResponse", p->soap_type() == SOAP_TYPE__ns1__GetSentinelConfigNotificationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetSentinelConfigNotificationResponse(struct soap *soap, const char *URL, _ns1__GetSentinelConfigNotificationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetSentinelConfigNotificationResponse", p->soap_type() == SOAP_TYPE__ns1__GetSentinelConfigNotificationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetSentinelConfigNotificationResponse * SOAP_FMAC4 soap_get__ns1__GetSentinelConfigNotificationResponse(struct soap*, _ns1__GetSentinelConfigNotificationResponse *, const char*, const char*);

inline int soap_read__ns1__GetSentinelConfigNotificationResponse(struct soap *soap, _ns1__GetSentinelConfigNotificationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetSentinelConfigNotificationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetSentinelConfigNotificationResponse(struct soap *soap, const char *URL, _ns1__GetSentinelConfigNotificationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetSentinelConfigNotificationResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetSentinelConfigNotificationResponse(struct soap *soap, _ns1__GetSentinelConfigNotificationResponse *p)
{
	if (soap_read__ns1__GetSentinelConfigNotificationResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetSentinelConfigNotification_DEFINED
#define SOAP_TYPE__ns1__GetSentinelConfigNotification_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetSentinelConfigNotification(struct soap*, const char*, int, const _ns1__GetSentinelConfigNotification *, const char*);
SOAP_FMAC3 _ns1__GetSentinelConfigNotification * SOAP_FMAC4 soap_in__ns1__GetSentinelConfigNotification(struct soap*, const char*, _ns1__GetSentinelConfigNotification *, const char*);
SOAP_FMAC1 _ns1__GetSentinelConfigNotification * SOAP_FMAC2 soap_instantiate__ns1__GetSentinelConfigNotification(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetSentinelConfigNotification * soap_new__ns1__GetSentinelConfigNotification(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetSentinelConfigNotification(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetSentinelConfigNotification * soap_new_req__ns1__GetSentinelConfigNotification(
	struct soap *soap)
{
	_ns1__GetSentinelConfigNotification *_p = soap_new__ns1__GetSentinelConfigNotification(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetSentinelConfigNotification * soap_new_set__ns1__GetSentinelConfigNotification(
	struct soap *soap,
	xsd__base64Binary *lastTimeStamp,
	int *ID,
	int *slotmastID)
{
	_ns1__GetSentinelConfigNotification *_p = soap_new__ns1__GetSentinelConfigNotification(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetSentinelConfigNotification::lastTimeStamp = lastTimeStamp;
		_p->_ns1__GetSentinelConfigNotification::ID = ID;
		_p->_ns1__GetSentinelConfigNotification::slotmastID = slotmastID;
	}
	return _p;
}

inline int soap_write__ns1__GetSentinelConfigNotification(struct soap *soap, _ns1__GetSentinelConfigNotification const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetSentinelConfigNotification", p->soap_type() == SOAP_TYPE__ns1__GetSentinelConfigNotification ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetSentinelConfigNotification(struct soap *soap, const char *URL, _ns1__GetSentinelConfigNotification const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetSentinelConfigNotification", p->soap_type() == SOAP_TYPE__ns1__GetSentinelConfigNotification ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetSentinelConfigNotification(struct soap *soap, const char *URL, _ns1__GetSentinelConfigNotification const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetSentinelConfigNotification", p->soap_type() == SOAP_TYPE__ns1__GetSentinelConfigNotification ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetSentinelConfigNotification * SOAP_FMAC4 soap_get__ns1__GetSentinelConfigNotification(struct soap*, _ns1__GetSentinelConfigNotification *, const char*, const char*);

inline int soap_read__ns1__GetSentinelConfigNotification(struct soap *soap, _ns1__GetSentinelConfigNotification *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetSentinelConfigNotification(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetSentinelConfigNotification(struct soap *soap, const char *URL, _ns1__GetSentinelConfigNotification *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetSentinelConfigNotification(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetSentinelConfigNotification(struct soap *soap, _ns1__GetSentinelConfigNotification *p)
{
	if (soap_read__ns1__GetSentinelConfigNotification(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetCMPStatusNotificationResponse_DEFINED
#define SOAP_TYPE__ns1__GetCMPStatusNotificationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetCMPStatusNotificationResponse(struct soap*, const char*, int, const _ns1__GetCMPStatusNotificationResponse *, const char*);
SOAP_FMAC3 _ns1__GetCMPStatusNotificationResponse * SOAP_FMAC4 soap_in__ns1__GetCMPStatusNotificationResponse(struct soap*, const char*, _ns1__GetCMPStatusNotificationResponse *, const char*);
SOAP_FMAC1 _ns1__GetCMPStatusNotificationResponse * SOAP_FMAC2 soap_instantiate__ns1__GetCMPStatusNotificationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetCMPStatusNotificationResponse * soap_new__ns1__GetCMPStatusNotificationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetCMPStatusNotificationResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetCMPStatusNotificationResponse * soap_new_req__ns1__GetCMPStatusNotificationResponse(
	struct soap *soap)
{
	_ns1__GetCMPStatusNotificationResponse *_p = soap_new__ns1__GetCMPStatusNotificationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetCMPStatusNotificationResponse * soap_new_set__ns1__GetCMPStatusNotificationResponse(
	struct soap *soap,
	bool *GetCMPStatusNotificationResult,
	bool *cmpActive)
{
	_ns1__GetCMPStatusNotificationResponse *_p = soap_new__ns1__GetCMPStatusNotificationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetCMPStatusNotificationResponse::GetCMPStatusNotificationResult = GetCMPStatusNotificationResult;
		_p->_ns1__GetCMPStatusNotificationResponse::cmpActive = cmpActive;
	}
	return _p;
}

inline int soap_write__ns1__GetCMPStatusNotificationResponse(struct soap *soap, _ns1__GetCMPStatusNotificationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCMPStatusNotificationResponse", p->soap_type() == SOAP_TYPE__ns1__GetCMPStatusNotificationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetCMPStatusNotificationResponse(struct soap *soap, const char *URL, _ns1__GetCMPStatusNotificationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCMPStatusNotificationResponse", p->soap_type() == SOAP_TYPE__ns1__GetCMPStatusNotificationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetCMPStatusNotificationResponse(struct soap *soap, const char *URL, _ns1__GetCMPStatusNotificationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCMPStatusNotificationResponse", p->soap_type() == SOAP_TYPE__ns1__GetCMPStatusNotificationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetCMPStatusNotificationResponse * SOAP_FMAC4 soap_get__ns1__GetCMPStatusNotificationResponse(struct soap*, _ns1__GetCMPStatusNotificationResponse *, const char*, const char*);

inline int soap_read__ns1__GetCMPStatusNotificationResponse(struct soap *soap, _ns1__GetCMPStatusNotificationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetCMPStatusNotificationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetCMPStatusNotificationResponse(struct soap *soap, const char *URL, _ns1__GetCMPStatusNotificationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetCMPStatusNotificationResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetCMPStatusNotificationResponse(struct soap *soap, _ns1__GetCMPStatusNotificationResponse *p)
{
	if (soap_read__ns1__GetCMPStatusNotificationResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetCMPStatusNotification_DEFINED
#define SOAP_TYPE__ns1__GetCMPStatusNotification_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetCMPStatusNotification(struct soap*, const char*, int, const _ns1__GetCMPStatusNotification *, const char*);
SOAP_FMAC3 _ns1__GetCMPStatusNotification * SOAP_FMAC4 soap_in__ns1__GetCMPStatusNotification(struct soap*, const char*, _ns1__GetCMPStatusNotification *, const char*);
SOAP_FMAC1 _ns1__GetCMPStatusNotification * SOAP_FMAC2 soap_instantiate__ns1__GetCMPStatusNotification(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetCMPStatusNotification * soap_new__ns1__GetCMPStatusNotification(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetCMPStatusNotification(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetCMPStatusNotification * soap_new_req__ns1__GetCMPStatusNotification(
	struct soap *soap)
{
	_ns1__GetCMPStatusNotification *_p = soap_new__ns1__GetCMPStatusNotification(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetCMPStatusNotification * soap_new_set__ns1__GetCMPStatusNotification(
	struct soap *soap,
	xsd__base64Binary *lastTimeStamp,
	int *ID,
	int *slotmastID,
	char *ocr)
{
	_ns1__GetCMPStatusNotification *_p = soap_new__ns1__GetCMPStatusNotification(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetCMPStatusNotification::lastTimeStamp = lastTimeStamp;
		_p->_ns1__GetCMPStatusNotification::ID = ID;
		_p->_ns1__GetCMPStatusNotification::slotmastID = slotmastID;
		_p->_ns1__GetCMPStatusNotification::ocr = ocr;
	}
	return _p;
}

inline int soap_write__ns1__GetCMPStatusNotification(struct soap *soap, _ns1__GetCMPStatusNotification const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCMPStatusNotification", p->soap_type() == SOAP_TYPE__ns1__GetCMPStatusNotification ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetCMPStatusNotification(struct soap *soap, const char *URL, _ns1__GetCMPStatusNotification const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCMPStatusNotification", p->soap_type() == SOAP_TYPE__ns1__GetCMPStatusNotification ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetCMPStatusNotification(struct soap *soap, const char *URL, _ns1__GetCMPStatusNotification const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCMPStatusNotification", p->soap_type() == SOAP_TYPE__ns1__GetCMPStatusNotification ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetCMPStatusNotification * SOAP_FMAC4 soap_get__ns1__GetCMPStatusNotification(struct soap*, _ns1__GetCMPStatusNotification *, const char*, const char*);

inline int soap_read__ns1__GetCMPStatusNotification(struct soap *soap, _ns1__GetCMPStatusNotification *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetCMPStatusNotification(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetCMPStatusNotification(struct soap *soap, const char *URL, _ns1__GetCMPStatusNotification *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetCMPStatusNotification(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetCMPStatusNotification(struct soap *soap, _ns1__GetCMPStatusNotification *p)
{
	if (soap_read__ns1__GetCMPStatusNotification(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetEventStartNotificationV25Response_DEFINED
#define SOAP_TYPE__ns1__GetEventStartNotificationV25Response_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetEventStartNotificationV25Response(struct soap*, const char*, int, const _ns1__GetEventStartNotificationV25Response *, const char*);
SOAP_FMAC3 _ns1__GetEventStartNotificationV25Response * SOAP_FMAC4 soap_in__ns1__GetEventStartNotificationV25Response(struct soap*, const char*, _ns1__GetEventStartNotificationV25Response *, const char*);
SOAP_FMAC1 _ns1__GetEventStartNotificationV25Response * SOAP_FMAC2 soap_instantiate__ns1__GetEventStartNotificationV25Response(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetEventStartNotificationV25Response * soap_new__ns1__GetEventStartNotificationV25Response(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetEventStartNotificationV25Response(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetEventStartNotificationV25Response * soap_new_req__ns1__GetEventStartNotificationV25Response(
	struct soap *soap)
{
	_ns1__GetEventStartNotificationV25Response *_p = soap_new__ns1__GetEventStartNotificationV25Response(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetEventStartNotificationV25Response * soap_new_set__ns1__GetEventStartNotificationV25Response(
	struct soap *soap,
	bool *GetEventStartNotificationV25Result,
	int *eventId,
	int *contentId,
	ns2__ArrayOfint *triggerType,
	ns2__ArrayOflong *triggerMin,
	ns2__ArrayOflong *triggerMax,
	int *numTriggers,
	int *lastTriggeredEventID,
	bool *includeCarded,
	bool *includeUncarded,
	bool *includeInRandomSelection,
	bool *groupCumulative,
	bool *cmpCoinInUsage)
{
	_ns1__GetEventStartNotificationV25Response *_p = soap_new__ns1__GetEventStartNotificationV25Response(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetEventStartNotificationV25Response::GetEventStartNotificationV25Result = GetEventStartNotificationV25Result;
		_p->_ns1__GetEventStartNotificationV25Response::eventId = eventId;
		_p->_ns1__GetEventStartNotificationV25Response::contentId = contentId;
		_p->_ns1__GetEventStartNotificationV25Response::triggerType = triggerType;
		_p->_ns1__GetEventStartNotificationV25Response::triggerMin = triggerMin;
		_p->_ns1__GetEventStartNotificationV25Response::triggerMax = triggerMax;
		_p->_ns1__GetEventStartNotificationV25Response::numTriggers = numTriggers;
		_p->_ns1__GetEventStartNotificationV25Response::lastTriggeredEventID = lastTriggeredEventID;
		_p->_ns1__GetEventStartNotificationV25Response::includeCarded = includeCarded;
		_p->_ns1__GetEventStartNotificationV25Response::includeUncarded = includeUncarded;
		_p->_ns1__GetEventStartNotificationV25Response::includeInRandomSelection = includeInRandomSelection;
		_p->_ns1__GetEventStartNotificationV25Response::groupCumulative = groupCumulative;
		_p->_ns1__GetEventStartNotificationV25Response::cmpCoinInUsage = cmpCoinInUsage;
	}
	return _p;
}

inline int soap_write__ns1__GetEventStartNotificationV25Response(struct soap *soap, _ns1__GetEventStartNotificationV25Response const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetEventStartNotificationV25Response", p->soap_type() == SOAP_TYPE__ns1__GetEventStartNotificationV25Response ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetEventStartNotificationV25Response(struct soap *soap, const char *URL, _ns1__GetEventStartNotificationV25Response const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetEventStartNotificationV25Response", p->soap_type() == SOAP_TYPE__ns1__GetEventStartNotificationV25Response ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetEventStartNotificationV25Response(struct soap *soap, const char *URL, _ns1__GetEventStartNotificationV25Response const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetEventStartNotificationV25Response", p->soap_type() == SOAP_TYPE__ns1__GetEventStartNotificationV25Response ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetEventStartNotificationV25Response * SOAP_FMAC4 soap_get__ns1__GetEventStartNotificationV25Response(struct soap*, _ns1__GetEventStartNotificationV25Response *, const char*, const char*);

inline int soap_read__ns1__GetEventStartNotificationV25Response(struct soap *soap, _ns1__GetEventStartNotificationV25Response *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetEventStartNotificationV25Response(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetEventStartNotificationV25Response(struct soap *soap, const char *URL, _ns1__GetEventStartNotificationV25Response *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetEventStartNotificationV25Response(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetEventStartNotificationV25Response(struct soap *soap, _ns1__GetEventStartNotificationV25Response *p)
{
	if (soap_read__ns1__GetEventStartNotificationV25Response(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetEventStartNotificationV25_DEFINED
#define SOAP_TYPE__ns1__GetEventStartNotificationV25_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetEventStartNotificationV25(struct soap*, const char*, int, const _ns1__GetEventStartNotificationV25 *, const char*);
SOAP_FMAC3 _ns1__GetEventStartNotificationV25 * SOAP_FMAC4 soap_in__ns1__GetEventStartNotificationV25(struct soap*, const char*, _ns1__GetEventStartNotificationV25 *, const char*);
SOAP_FMAC1 _ns1__GetEventStartNotificationV25 * SOAP_FMAC2 soap_instantiate__ns1__GetEventStartNotificationV25(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetEventStartNotificationV25 * soap_new__ns1__GetEventStartNotificationV25(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetEventStartNotificationV25(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetEventStartNotificationV25 * soap_new_req__ns1__GetEventStartNotificationV25(
	struct soap *soap)
{
	_ns1__GetEventStartNotificationV25 *_p = soap_new__ns1__GetEventStartNotificationV25(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetEventStartNotificationV25 * soap_new_set__ns1__GetEventStartNotificationV25(
	struct soap *soap,
	xsd__base64Binary *lastTimeStamp,
	int *ID,
	int *slotmastID,
	char *ocr)
{
	_ns1__GetEventStartNotificationV25 *_p = soap_new__ns1__GetEventStartNotificationV25(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetEventStartNotificationV25::lastTimeStamp = lastTimeStamp;
		_p->_ns1__GetEventStartNotificationV25::ID = ID;
		_p->_ns1__GetEventStartNotificationV25::slotmastID = slotmastID;
		_p->_ns1__GetEventStartNotificationV25::ocr = ocr;
	}
	return _p;
}

inline int soap_write__ns1__GetEventStartNotificationV25(struct soap *soap, _ns1__GetEventStartNotificationV25 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetEventStartNotificationV25", p->soap_type() == SOAP_TYPE__ns1__GetEventStartNotificationV25 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetEventStartNotificationV25(struct soap *soap, const char *URL, _ns1__GetEventStartNotificationV25 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetEventStartNotificationV25", p->soap_type() == SOAP_TYPE__ns1__GetEventStartNotificationV25 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetEventStartNotificationV25(struct soap *soap, const char *URL, _ns1__GetEventStartNotificationV25 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetEventStartNotificationV25", p->soap_type() == SOAP_TYPE__ns1__GetEventStartNotificationV25 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetEventStartNotificationV25 * SOAP_FMAC4 soap_get__ns1__GetEventStartNotificationV25(struct soap*, _ns1__GetEventStartNotificationV25 *, const char*, const char*);

inline int soap_read__ns1__GetEventStartNotificationV25(struct soap *soap, _ns1__GetEventStartNotificationV25 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetEventStartNotificationV25(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetEventStartNotificationV25(struct soap *soap, const char *URL, _ns1__GetEventStartNotificationV25 *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetEventStartNotificationV25(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetEventStartNotificationV25(struct soap *soap, _ns1__GetEventStartNotificationV25 *p)
{
	if (soap_read__ns1__GetEventStartNotificationV25(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetEventStartNotificationResponse_DEFINED
#define SOAP_TYPE__ns1__GetEventStartNotificationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetEventStartNotificationResponse(struct soap*, const char*, int, const _ns1__GetEventStartNotificationResponse *, const char*);
SOAP_FMAC3 _ns1__GetEventStartNotificationResponse * SOAP_FMAC4 soap_in__ns1__GetEventStartNotificationResponse(struct soap*, const char*, _ns1__GetEventStartNotificationResponse *, const char*);
SOAP_FMAC1 _ns1__GetEventStartNotificationResponse * SOAP_FMAC2 soap_instantiate__ns1__GetEventStartNotificationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetEventStartNotificationResponse * soap_new__ns1__GetEventStartNotificationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetEventStartNotificationResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetEventStartNotificationResponse * soap_new_req__ns1__GetEventStartNotificationResponse(
	struct soap *soap)
{
	_ns1__GetEventStartNotificationResponse *_p = soap_new__ns1__GetEventStartNotificationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetEventStartNotificationResponse * soap_new_set__ns1__GetEventStartNotificationResponse(
	struct soap *soap,
	bool *GetEventStartNotificationResult,
	int *eventId,
	int *contentId,
	ns2__ArrayOfint *triggerType,
	ns2__ArrayOflong *triggerMin,
	ns2__ArrayOflong *triggerMax,
	int *numTriggers,
	int *lastTriggeredEventID,
	bool *includeCarded,
	bool *includeUncarded,
	bool *includeInRandomSelection,
	bool *groupCumulative)
{
	_ns1__GetEventStartNotificationResponse *_p = soap_new__ns1__GetEventStartNotificationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetEventStartNotificationResponse::GetEventStartNotificationResult = GetEventStartNotificationResult;
		_p->_ns1__GetEventStartNotificationResponse::eventId = eventId;
		_p->_ns1__GetEventStartNotificationResponse::contentId = contentId;
		_p->_ns1__GetEventStartNotificationResponse::triggerType = triggerType;
		_p->_ns1__GetEventStartNotificationResponse::triggerMin = triggerMin;
		_p->_ns1__GetEventStartNotificationResponse::triggerMax = triggerMax;
		_p->_ns1__GetEventStartNotificationResponse::numTriggers = numTriggers;
		_p->_ns1__GetEventStartNotificationResponse::lastTriggeredEventID = lastTriggeredEventID;
		_p->_ns1__GetEventStartNotificationResponse::includeCarded = includeCarded;
		_p->_ns1__GetEventStartNotificationResponse::includeUncarded = includeUncarded;
		_p->_ns1__GetEventStartNotificationResponse::includeInRandomSelection = includeInRandomSelection;
		_p->_ns1__GetEventStartNotificationResponse::groupCumulative = groupCumulative;
	}
	return _p;
}

inline int soap_write__ns1__GetEventStartNotificationResponse(struct soap *soap, _ns1__GetEventStartNotificationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetEventStartNotificationResponse", p->soap_type() == SOAP_TYPE__ns1__GetEventStartNotificationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetEventStartNotificationResponse(struct soap *soap, const char *URL, _ns1__GetEventStartNotificationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetEventStartNotificationResponse", p->soap_type() == SOAP_TYPE__ns1__GetEventStartNotificationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetEventStartNotificationResponse(struct soap *soap, const char *URL, _ns1__GetEventStartNotificationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetEventStartNotificationResponse", p->soap_type() == SOAP_TYPE__ns1__GetEventStartNotificationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetEventStartNotificationResponse * SOAP_FMAC4 soap_get__ns1__GetEventStartNotificationResponse(struct soap*, _ns1__GetEventStartNotificationResponse *, const char*, const char*);

inline int soap_read__ns1__GetEventStartNotificationResponse(struct soap *soap, _ns1__GetEventStartNotificationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetEventStartNotificationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetEventStartNotificationResponse(struct soap *soap, const char *URL, _ns1__GetEventStartNotificationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetEventStartNotificationResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetEventStartNotificationResponse(struct soap *soap, _ns1__GetEventStartNotificationResponse *p)
{
	if (soap_read__ns1__GetEventStartNotificationResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetEventStartNotification_DEFINED
#define SOAP_TYPE__ns1__GetEventStartNotification_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetEventStartNotification(struct soap*, const char*, int, const _ns1__GetEventStartNotification *, const char*);
SOAP_FMAC3 _ns1__GetEventStartNotification * SOAP_FMAC4 soap_in__ns1__GetEventStartNotification(struct soap*, const char*, _ns1__GetEventStartNotification *, const char*);
SOAP_FMAC1 _ns1__GetEventStartNotification * SOAP_FMAC2 soap_instantiate__ns1__GetEventStartNotification(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetEventStartNotification * soap_new__ns1__GetEventStartNotification(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetEventStartNotification(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetEventStartNotification * soap_new_req__ns1__GetEventStartNotification(
	struct soap *soap)
{
	_ns1__GetEventStartNotification *_p = soap_new__ns1__GetEventStartNotification(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetEventStartNotification * soap_new_set__ns1__GetEventStartNotification(
	struct soap *soap,
	xsd__base64Binary *lastTimeStamp,
	int *ID,
	int *slotmastID,
	char *ocr)
{
	_ns1__GetEventStartNotification *_p = soap_new__ns1__GetEventStartNotification(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetEventStartNotification::lastTimeStamp = lastTimeStamp;
		_p->_ns1__GetEventStartNotification::ID = ID;
		_p->_ns1__GetEventStartNotification::slotmastID = slotmastID;
		_p->_ns1__GetEventStartNotification::ocr = ocr;
	}
	return _p;
}

inline int soap_write__ns1__GetEventStartNotification(struct soap *soap, _ns1__GetEventStartNotification const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetEventStartNotification", p->soap_type() == SOAP_TYPE__ns1__GetEventStartNotification ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetEventStartNotification(struct soap *soap, const char *URL, _ns1__GetEventStartNotification const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetEventStartNotification", p->soap_type() == SOAP_TYPE__ns1__GetEventStartNotification ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetEventStartNotification(struct soap *soap, const char *URL, _ns1__GetEventStartNotification const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetEventStartNotification", p->soap_type() == SOAP_TYPE__ns1__GetEventStartNotification ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetEventStartNotification * SOAP_FMAC4 soap_get__ns1__GetEventStartNotification(struct soap*, _ns1__GetEventStartNotification *, const char*, const char*);

inline int soap_read__ns1__GetEventStartNotification(struct soap *soap, _ns1__GetEventStartNotification *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetEventStartNotification(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetEventStartNotification(struct soap *soap, const char *URL, _ns1__GetEventStartNotification *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetEventStartNotification(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetEventStartNotification(struct soap *soap, _ns1__GetEventStartNotification *p)
{
	if (soap_read__ns1__GetEventStartNotification(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__CheckinResponse_DEFINED
#define SOAP_TYPE__ns1__CheckinResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CheckinResponse(struct soap*, const char*, int, const _ns1__CheckinResponse *, const char*);
SOAP_FMAC3 _ns1__CheckinResponse * SOAP_FMAC4 soap_in__ns1__CheckinResponse(struct soap*, const char*, _ns1__CheckinResponse *, const char*);
SOAP_FMAC1 _ns1__CheckinResponse * SOAP_FMAC2 soap_instantiate__ns1__CheckinResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CheckinResponse * soap_new__ns1__CheckinResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__CheckinResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__CheckinResponse * soap_new_req__ns1__CheckinResponse(
	struct soap *soap)
{
	_ns1__CheckinResponse *_p = soap_new__ns1__CheckinResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__CheckinResponse * soap_new_set__ns1__CheckinResponse(
	struct soap *soap,
	bool *CheckinResult,
	ns2__ArrayOfbase64Binary *nextTimestamps,
	ns2__ArrayOfint *nextSequenceNumbers,
	ns2__ArrayOfint *nextTypes,
	ns2__ArrayOfint *nextIDs,
	int *foundCount,
	bool *hasMore)
{
	_ns1__CheckinResponse *_p = soap_new__ns1__CheckinResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CheckinResponse::CheckinResult = CheckinResult;
		_p->_ns1__CheckinResponse::nextTimestamps = nextTimestamps;
		_p->_ns1__CheckinResponse::nextSequenceNumbers = nextSequenceNumbers;
		_p->_ns1__CheckinResponse::nextTypes = nextTypes;
		_p->_ns1__CheckinResponse::nextIDs = nextIDs;
		_p->_ns1__CheckinResponse::foundCount = foundCount;
		_p->_ns1__CheckinResponse::hasMore = hasMore;
	}
	return _p;
}

inline int soap_write__ns1__CheckinResponse(struct soap *soap, _ns1__CheckinResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CheckinResponse", p->soap_type() == SOAP_TYPE__ns1__CheckinResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__CheckinResponse(struct soap *soap, const char *URL, _ns1__CheckinResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CheckinResponse", p->soap_type() == SOAP_TYPE__ns1__CheckinResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__CheckinResponse(struct soap *soap, const char *URL, _ns1__CheckinResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CheckinResponse", p->soap_type() == SOAP_TYPE__ns1__CheckinResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CheckinResponse * SOAP_FMAC4 soap_get__ns1__CheckinResponse(struct soap*, _ns1__CheckinResponse *, const char*, const char*);

inline int soap_read__ns1__CheckinResponse(struct soap *soap, _ns1__CheckinResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__CheckinResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__CheckinResponse(struct soap *soap, const char *URL, _ns1__CheckinResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__CheckinResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__CheckinResponse(struct soap *soap, _ns1__CheckinResponse *p)
{
	if (soap_read__ns1__CheckinResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__Checkin_DEFINED
#define SOAP_TYPE__ns1__Checkin_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Checkin(struct soap*, const char*, int, const _ns1__Checkin *, const char*);
SOAP_FMAC3 _ns1__Checkin * SOAP_FMAC4 soap_in__ns1__Checkin(struct soap*, const char*, _ns1__Checkin *, const char*);
SOAP_FMAC1 _ns1__Checkin * SOAP_FMAC2 soap_instantiate__ns1__Checkin(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__Checkin * soap_new__ns1__Checkin(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__Checkin(soap, n, NULL, NULL, NULL);
}

inline _ns1__Checkin * soap_new_req__ns1__Checkin(
	struct soap *soap)
{
	_ns1__Checkin *_p = soap_new__ns1__Checkin(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__Checkin * soap_new_set__ns1__Checkin(
	struct soap *soap,
	int *slotmastID,
	char *ocr,
	xsd__base64Binary *lastTimeStamp,
	int *lastSequenceNumber,
	int *lastType,
	int *lastID)
{
	_ns1__Checkin *_p = soap_new__ns1__Checkin(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__Checkin::slotmastID = slotmastID;
		_p->_ns1__Checkin::ocr = ocr;
		_p->_ns1__Checkin::lastTimeStamp = lastTimeStamp;
		_p->_ns1__Checkin::lastSequenceNumber = lastSequenceNumber;
		_p->_ns1__Checkin::lastType = lastType;
		_p->_ns1__Checkin::lastID = lastID;
	}
	return _p;
}

inline int soap_write__ns1__Checkin(struct soap *soap, _ns1__Checkin const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Checkin", p->soap_type() == SOAP_TYPE__ns1__Checkin ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__Checkin(struct soap *soap, const char *URL, _ns1__Checkin const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Checkin", p->soap_type() == SOAP_TYPE__ns1__Checkin ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__Checkin(struct soap *soap, const char *URL, _ns1__Checkin const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Checkin", p->soap_type() == SOAP_TYPE__ns1__Checkin ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__Checkin * SOAP_FMAC4 soap_get__ns1__Checkin(struct soap*, _ns1__Checkin *, const char*, const char*);

inline int soap_read__ns1__Checkin(struct soap *soap, _ns1__Checkin *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__Checkin(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__Checkin(struct soap *soap, const char *URL, _ns1__Checkin *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__Checkin(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__Checkin(struct soap *soap, _ns1__Checkin *p)
{
	if (soap_read__ns1__Checkin(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__unsignedShort_DEFINED
#define SOAP_TYPE_xsd__unsignedShort_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedShort(struct soap*, const char*, int, const xsd__unsignedShort *, const char*);
SOAP_FMAC3 xsd__unsignedShort * SOAP_FMAC4 soap_in_xsd__unsignedShort(struct soap*, const char*, xsd__unsignedShort *, const char*);
SOAP_FMAC1 xsd__unsignedShort * SOAP_FMAC2 soap_instantiate_xsd__unsignedShort(struct soap*, int, const char*, const char*, size_t*);

inline xsd__unsignedShort * soap_new_xsd__unsignedShort(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__unsignedShort(soap, n, NULL, NULL, NULL);
}

inline xsd__unsignedShort * soap_new_req_xsd__unsignedShort(
	struct soap *soap,
	unsigned short __item)
{
	xsd__unsignedShort *_p = soap_new_xsd__unsignedShort(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__unsignedShort::__item = __item;
	}
	return _p;
}

inline xsd__unsignedShort * soap_new_set_xsd__unsignedShort(
	struct soap *soap,
	unsigned short __item,
	char *__item__1)
{
	xsd__unsignedShort *_p = soap_new_xsd__unsignedShort(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__unsignedShort::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__unsignedShort(struct soap *soap, xsd__unsignedShort const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:unsignedShort", p->soap_type() == SOAP_TYPE_xsd__unsignedShort ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__unsignedShort(struct soap *soap, const char *URL, xsd__unsignedShort const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:unsignedShort", p->soap_type() == SOAP_TYPE_xsd__unsignedShort ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_xsd__unsignedShort(struct soap *soap, const char *URL, xsd__unsignedShort const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:unsignedShort", p->soap_type() == SOAP_TYPE_xsd__unsignedShort ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 xsd__unsignedShort * SOAP_FMAC4 soap_get_xsd__unsignedShort(struct soap*, xsd__unsignedShort *, const char*, const char*);

inline int soap_read_xsd__unsignedShort(struct soap *soap, xsd__unsignedShort *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__unsignedShort(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__unsignedShort(struct soap *soap, const char *URL, xsd__unsignedShort *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__unsignedShort(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__unsignedShort(struct soap *soap, xsd__unsignedShort *p)
{
	if (soap_read_xsd__unsignedShort(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__unsignedLong_DEFINED
#define SOAP_TYPE_xsd__unsignedLong_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedLong(struct soap*, const char*, int, const xsd__unsignedLong *, const char*);
SOAP_FMAC3 xsd__unsignedLong * SOAP_FMAC4 soap_in_xsd__unsignedLong(struct soap*, const char*, xsd__unsignedLong *, const char*);
SOAP_FMAC1 xsd__unsignedLong * SOAP_FMAC2 soap_instantiate_xsd__unsignedLong(struct soap*, int, const char*, const char*, size_t*);

inline xsd__unsignedLong * soap_new_xsd__unsignedLong(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__unsignedLong(soap, n, NULL, NULL, NULL);
}

inline xsd__unsignedLong * soap_new_req_xsd__unsignedLong(
	struct soap *soap,
	ULONG64 __item)
{
	xsd__unsignedLong *_p = soap_new_xsd__unsignedLong(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__unsignedLong::__item = __item;
	}
	return _p;
}

inline xsd__unsignedLong * soap_new_set_xsd__unsignedLong(
	struct soap *soap,
	ULONG64 __item,
	char *__item__1)
{
	xsd__unsignedLong *_p = soap_new_xsd__unsignedLong(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__unsignedLong::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__unsignedLong(struct soap *soap, xsd__unsignedLong const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:unsignedLong", p->soap_type() == SOAP_TYPE_xsd__unsignedLong ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__unsignedLong(struct soap *soap, const char *URL, xsd__unsignedLong const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:unsignedLong", p->soap_type() == SOAP_TYPE_xsd__unsignedLong ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_xsd__unsignedLong(struct soap *soap, const char *URL, xsd__unsignedLong const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:unsignedLong", p->soap_type() == SOAP_TYPE_xsd__unsignedLong ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 xsd__unsignedLong * SOAP_FMAC4 soap_get_xsd__unsignedLong(struct soap*, xsd__unsignedLong *, const char*, const char*);

inline int soap_read_xsd__unsignedLong(struct soap *soap, xsd__unsignedLong *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__unsignedLong(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__unsignedLong(struct soap *soap, const char *URL, xsd__unsignedLong *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__unsignedLong(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__unsignedLong(struct soap *soap, xsd__unsignedLong *p)
{
	if (soap_read_xsd__unsignedLong(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__unsignedInt_DEFINED
#define SOAP_TYPE_xsd__unsignedInt_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedInt(struct soap*, const char*, int, const xsd__unsignedInt *, const char*);
SOAP_FMAC3 xsd__unsignedInt * SOAP_FMAC4 soap_in_xsd__unsignedInt(struct soap*, const char*, xsd__unsignedInt *, const char*);
SOAP_FMAC1 xsd__unsignedInt * SOAP_FMAC2 soap_instantiate_xsd__unsignedInt(struct soap*, int, const char*, const char*, size_t*);

inline xsd__unsignedInt * soap_new_xsd__unsignedInt(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__unsignedInt(soap, n, NULL, NULL, NULL);
}

inline xsd__unsignedInt * soap_new_req_xsd__unsignedInt(
	struct soap *soap,
	unsigned int __item)
{
	xsd__unsignedInt *_p = soap_new_xsd__unsignedInt(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__unsignedInt::__item = __item;
	}
	return _p;
}

inline xsd__unsignedInt * soap_new_set_xsd__unsignedInt(
	struct soap *soap,
	unsigned int __item,
	char *__item__1)
{
	xsd__unsignedInt *_p = soap_new_xsd__unsignedInt(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__unsignedInt::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__unsignedInt(struct soap *soap, xsd__unsignedInt const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:unsignedInt", p->soap_type() == SOAP_TYPE_xsd__unsignedInt ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__unsignedInt(struct soap *soap, const char *URL, xsd__unsignedInt const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:unsignedInt", p->soap_type() == SOAP_TYPE_xsd__unsignedInt ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_xsd__unsignedInt(struct soap *soap, const char *URL, xsd__unsignedInt const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:unsignedInt", p->soap_type() == SOAP_TYPE_xsd__unsignedInt ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 xsd__unsignedInt * SOAP_FMAC4 soap_get_xsd__unsignedInt(struct soap*, xsd__unsignedInt *, const char*, const char*);

inline int soap_read_xsd__unsignedInt(struct soap *soap, xsd__unsignedInt *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__unsignedInt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__unsignedInt(struct soap *soap, const char *URL, xsd__unsignedInt *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__unsignedInt(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__unsignedInt(struct soap *soap, xsd__unsignedInt *p)
{
	if (soap_read_xsd__unsignedInt(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__unsignedByte__DEFINED
#define SOAP_TYPE_xsd__unsignedByte__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedByte_(struct soap*, const char*, int, const xsd__unsignedByte_ *, const char*);
SOAP_FMAC3 xsd__unsignedByte_ * SOAP_FMAC4 soap_in_xsd__unsignedByte_(struct soap*, const char*, xsd__unsignedByte_ *, const char*);
SOAP_FMAC1 xsd__unsignedByte_ * SOAP_FMAC2 soap_instantiate_xsd__unsignedByte_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__unsignedByte_ * soap_new_xsd__unsignedByte_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__unsignedByte_(soap, n, NULL, NULL, NULL);
}

inline xsd__unsignedByte_ * soap_new_req_xsd__unsignedByte_(
	struct soap *soap,
	unsigned char __item)
{
	xsd__unsignedByte_ *_p = soap_new_xsd__unsignedByte_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__unsignedByte_::__item = __item;
	}
	return _p;
}

inline xsd__unsignedByte_ * soap_new_set_xsd__unsignedByte_(
	struct soap *soap,
	unsigned char __item,
	char *__item__1)
{
	xsd__unsignedByte_ *_p = soap_new_xsd__unsignedByte_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__unsignedByte_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__unsignedByte_(struct soap *soap, xsd__unsignedByte_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:unsignedByte", p->soap_type() == SOAP_TYPE_xsd__unsignedByte_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__unsignedByte_(struct soap *soap, const char *URL, xsd__unsignedByte_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:unsignedByte", p->soap_type() == SOAP_TYPE_xsd__unsignedByte_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_xsd__unsignedByte_(struct soap *soap, const char *URL, xsd__unsignedByte_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:unsignedByte", p->soap_type() == SOAP_TYPE_xsd__unsignedByte_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 xsd__unsignedByte_ * SOAP_FMAC4 soap_get_xsd__unsignedByte_(struct soap*, xsd__unsignedByte_ *, const char*, const char*);

inline int soap_read_xsd__unsignedByte_(struct soap *soap, xsd__unsignedByte_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__unsignedByte_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__unsignedByte_(struct soap *soap, const char *URL, xsd__unsignedByte_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__unsignedByte_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__unsignedByte_(struct soap *soap, xsd__unsignedByte_ *p)
{
	if (soap_read_xsd__unsignedByte_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__string_DEFINED
#define SOAP_TYPE_xsd__string_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__string(struct soap*, const char*, int, const xsd__string *, const char*);
SOAP_FMAC3 xsd__string * SOAP_FMAC4 soap_in_xsd__string(struct soap*, const char*, xsd__string *, const char*);
SOAP_FMAC1 xsd__string * SOAP_FMAC2 soap_instantiate_xsd__string(struct soap*, int, const char*, const char*, size_t*);

inline xsd__string * soap_new_xsd__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__string(soap, n, NULL, NULL, NULL);
}

inline xsd__string * soap_new_req_xsd__string(
	struct soap *soap)
{
	xsd__string *_p = soap_new_xsd__string(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__string * soap_new_set_xsd__string(
	struct soap *soap,
	char *__item,
	char *__item__1)
{
	xsd__string *_p = soap_new_xsd__string(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__string::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__string(struct soap *soap, xsd__string const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:string", p->soap_type() == SOAP_TYPE_xsd__string ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__string(struct soap *soap, const char *URL, xsd__string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:string", p->soap_type() == SOAP_TYPE_xsd__string ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_xsd__string(struct soap *soap, const char *URL, xsd__string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:string", p->soap_type() == SOAP_TYPE_xsd__string ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 xsd__string * SOAP_FMAC4 soap_get_xsd__string(struct soap*, xsd__string *, const char*, const char*);

inline int soap_read_xsd__string(struct soap *soap, xsd__string *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__string(struct soap *soap, const char *URL, xsd__string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__string(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__string(struct soap *soap, xsd__string *p)
{
	if (soap_read_xsd__string(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__short_DEFINED
#define SOAP_TYPE_xsd__short_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__short(struct soap*, const char*, int, const xsd__short *, const char*);
SOAP_FMAC3 xsd__short * SOAP_FMAC4 soap_in_xsd__short(struct soap*, const char*, xsd__short *, const char*);
SOAP_FMAC1 xsd__short * SOAP_FMAC2 soap_instantiate_xsd__short(struct soap*, int, const char*, const char*, size_t*);

inline xsd__short * soap_new_xsd__short(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__short(soap, n, NULL, NULL, NULL);
}

inline xsd__short * soap_new_req_xsd__short(
	struct soap *soap,
	short __item)
{
	xsd__short *_p = soap_new_xsd__short(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__short::__item = __item;
	}
	return _p;
}

inline xsd__short * soap_new_set_xsd__short(
	struct soap *soap,
	short __item,
	char *__item__1)
{
	xsd__short *_p = soap_new_xsd__short(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__short::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__short(struct soap *soap, xsd__short const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:short", p->soap_type() == SOAP_TYPE_xsd__short ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__short(struct soap *soap, const char *URL, xsd__short const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:short", p->soap_type() == SOAP_TYPE_xsd__short ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_xsd__short(struct soap *soap, const char *URL, xsd__short const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:short", p->soap_type() == SOAP_TYPE_xsd__short ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 xsd__short * SOAP_FMAC4 soap_get_xsd__short(struct soap*, xsd__short *, const char*, const char*);

inline int soap_read_xsd__short(struct soap *soap, xsd__short *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__short(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__short(struct soap *soap, const char *URL, xsd__short *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__short(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__short(struct soap *soap, xsd__short *p)
{
	if (soap_read_xsd__short(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__long_DEFINED
#define SOAP_TYPE_xsd__long_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__long(struct soap*, const char*, int, const xsd__long *, const char*);
SOAP_FMAC3 xsd__long * SOAP_FMAC4 soap_in_xsd__long(struct soap*, const char*, xsd__long *, const char*);
SOAP_FMAC1 xsd__long * SOAP_FMAC2 soap_instantiate_xsd__long(struct soap*, int, const char*, const char*, size_t*);

inline xsd__long * soap_new_xsd__long(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__long(soap, n, NULL, NULL, NULL);
}

inline xsd__long * soap_new_req_xsd__long(
	struct soap *soap,
	LONG64 __item)
{
	xsd__long *_p = soap_new_xsd__long(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__long::__item = __item;
	}
	return _p;
}

inline xsd__long * soap_new_set_xsd__long(
	struct soap *soap,
	LONG64 __item,
	char *__item__1)
{
	xsd__long *_p = soap_new_xsd__long(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__long::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__long(struct soap *soap, xsd__long const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:long", p->soap_type() == SOAP_TYPE_xsd__long ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__long(struct soap *soap, const char *URL, xsd__long const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:long", p->soap_type() == SOAP_TYPE_xsd__long ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_xsd__long(struct soap *soap, const char *URL, xsd__long const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:long", p->soap_type() == SOAP_TYPE_xsd__long ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 xsd__long * SOAP_FMAC4 soap_get_xsd__long(struct soap*, xsd__long *, const char*, const char*);

inline int soap_read_xsd__long(struct soap *soap, xsd__long *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__long(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__long(struct soap *soap, const char *URL, xsd__long *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__long(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__long(struct soap *soap, xsd__long *p)
{
	if (soap_read_xsd__long(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__int_DEFINED
#define SOAP_TYPE_xsd__int_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__int(struct soap*, const char*, int, const xsd__int *, const char*);
SOAP_FMAC3 xsd__int * SOAP_FMAC4 soap_in_xsd__int(struct soap*, const char*, xsd__int *, const char*);
SOAP_FMAC1 xsd__int * SOAP_FMAC2 soap_instantiate_xsd__int(struct soap*, int, const char*, const char*, size_t*);

inline xsd__int * soap_new_xsd__int(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__int(soap, n, NULL, NULL, NULL);
}

inline xsd__int * soap_new_req_xsd__int(
	struct soap *soap,
	int __item)
{
	xsd__int *_p = soap_new_xsd__int(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__int::__item = __item;
	}
	return _p;
}

inline xsd__int * soap_new_set_xsd__int(
	struct soap *soap,
	int __item,
	char *__item__1)
{
	xsd__int *_p = soap_new_xsd__int(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__int::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__int(struct soap *soap, xsd__int const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:int", p->soap_type() == SOAP_TYPE_xsd__int ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__int(struct soap *soap, const char *URL, xsd__int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:int", p->soap_type() == SOAP_TYPE_xsd__int ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_xsd__int(struct soap *soap, const char *URL, xsd__int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:int", p->soap_type() == SOAP_TYPE_xsd__int ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 xsd__int * SOAP_FMAC4 soap_get_xsd__int(struct soap*, xsd__int *, const char*, const char*);

inline int soap_read_xsd__int(struct soap *soap, xsd__int *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__int(struct soap *soap, const char *URL, xsd__int *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__int(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__int(struct soap *soap, xsd__int *p)
{
	if (soap_read_xsd__int(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__float_DEFINED
#define SOAP_TYPE_xsd__float_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__float(struct soap*, const char*, int, const xsd__float *, const char*);
SOAP_FMAC3 xsd__float * SOAP_FMAC4 soap_in_xsd__float(struct soap*, const char*, xsd__float *, const char*);
SOAP_FMAC1 xsd__float * SOAP_FMAC2 soap_instantiate_xsd__float(struct soap*, int, const char*, const char*, size_t*);

inline xsd__float * soap_new_xsd__float(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__float(soap, n, NULL, NULL, NULL);
}

inline xsd__float * soap_new_req_xsd__float(
	struct soap *soap,
	float __item)
{
	xsd__float *_p = soap_new_xsd__float(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__float::__item = __item;
	}
	return _p;
}

inline xsd__float * soap_new_set_xsd__float(
	struct soap *soap,
	float __item,
	char *__item__1)
{
	xsd__float *_p = soap_new_xsd__float(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__float::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__float(struct soap *soap, xsd__float const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:float", p->soap_type() == SOAP_TYPE_xsd__float ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__float(struct soap *soap, const char *URL, xsd__float const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:float", p->soap_type() == SOAP_TYPE_xsd__float ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_xsd__float(struct soap *soap, const char *URL, xsd__float const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:float", p->soap_type() == SOAP_TYPE_xsd__float ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 xsd__float * SOAP_FMAC4 soap_get_xsd__float(struct soap*, xsd__float *, const char*, const char*);

inline int soap_read_xsd__float(struct soap *soap, xsd__float *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__float(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__float(struct soap *soap, const char *URL, xsd__float *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__float(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__float(struct soap *soap, xsd__float *p)
{
	if (soap_read_xsd__float(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__duration__DEFINED
#define SOAP_TYPE_xsd__duration__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__duration_(struct soap*, const char*, int, const xsd__duration_ *, const char*);
SOAP_FMAC3 xsd__duration_ * SOAP_FMAC4 soap_in_xsd__duration_(struct soap*, const char*, xsd__duration_ *, const char*);
SOAP_FMAC1 xsd__duration_ * SOAP_FMAC2 soap_instantiate_xsd__duration_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__duration_ * soap_new_xsd__duration_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__duration_(soap, n, NULL, NULL, NULL);
}

inline xsd__duration_ * soap_new_req_xsd__duration_(
	struct soap *soap)
{
	xsd__duration_ *_p = soap_new_xsd__duration_(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__duration_ * soap_new_set_xsd__duration_(
	struct soap *soap,
	char *__item,
	char *__item__1)
{
	xsd__duration_ *_p = soap_new_xsd__duration_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__duration_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__duration_(struct soap *soap, xsd__duration_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:duration", p->soap_type() == SOAP_TYPE_xsd__duration_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__duration_(struct soap *soap, const char *URL, xsd__duration_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:duration", p->soap_type() == SOAP_TYPE_xsd__duration_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_xsd__duration_(struct soap *soap, const char *URL, xsd__duration_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:duration", p->soap_type() == SOAP_TYPE_xsd__duration_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 xsd__duration_ * SOAP_FMAC4 soap_get_xsd__duration_(struct soap*, xsd__duration_ *, const char*, const char*);

inline int soap_read_xsd__duration_(struct soap *soap, xsd__duration_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__duration_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__duration_(struct soap *soap, const char *URL, xsd__duration_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__duration_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__duration_(struct soap *soap, xsd__duration_ *p)
{
	if (soap_read_xsd__duration_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__double_DEFINED
#define SOAP_TYPE_xsd__double_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__double(struct soap*, const char*, int, const xsd__double *, const char*);
SOAP_FMAC3 xsd__double * SOAP_FMAC4 soap_in_xsd__double(struct soap*, const char*, xsd__double *, const char*);
SOAP_FMAC1 xsd__double * SOAP_FMAC2 soap_instantiate_xsd__double(struct soap*, int, const char*, const char*, size_t*);

inline xsd__double * soap_new_xsd__double(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__double(soap, n, NULL, NULL, NULL);
}

inline xsd__double * soap_new_req_xsd__double(
	struct soap *soap,
	double __item)
{
	xsd__double *_p = soap_new_xsd__double(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__double::__item = __item;
	}
	return _p;
}

inline xsd__double * soap_new_set_xsd__double(
	struct soap *soap,
	double __item,
	char *__item__1)
{
	xsd__double *_p = soap_new_xsd__double(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__double::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__double(struct soap *soap, xsd__double const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:double", p->soap_type() == SOAP_TYPE_xsd__double ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__double(struct soap *soap, const char *URL, xsd__double const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:double", p->soap_type() == SOAP_TYPE_xsd__double ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_xsd__double(struct soap *soap, const char *URL, xsd__double const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:double", p->soap_type() == SOAP_TYPE_xsd__double ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 xsd__double * SOAP_FMAC4 soap_get_xsd__double(struct soap*, xsd__double *, const char*, const char*);

inline int soap_read_xsd__double(struct soap *soap, xsd__double *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__double(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__double(struct soap *soap, const char *URL, xsd__double *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__double(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__double(struct soap *soap, xsd__double *p)
{
	if (soap_read_xsd__double(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__decimal__DEFINED
#define SOAP_TYPE_xsd__decimal__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__decimal_(struct soap*, const char*, int, const xsd__decimal_ *, const char*);
SOAP_FMAC3 xsd__decimal_ * SOAP_FMAC4 soap_in_xsd__decimal_(struct soap*, const char*, xsd__decimal_ *, const char*);
SOAP_FMAC1 xsd__decimal_ * SOAP_FMAC2 soap_instantiate_xsd__decimal_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__decimal_ * soap_new_xsd__decimal_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__decimal_(soap, n, NULL, NULL, NULL);
}

inline xsd__decimal_ * soap_new_req_xsd__decimal_(
	struct soap *soap)
{
	xsd__decimal_ *_p = soap_new_xsd__decimal_(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__decimal_ * soap_new_set_xsd__decimal_(
	struct soap *soap,
	char *__item,
	char *__item__1)
{
	xsd__decimal_ *_p = soap_new_xsd__decimal_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__decimal_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__decimal_(struct soap *soap, xsd__decimal_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:decimal", p->soap_type() == SOAP_TYPE_xsd__decimal_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__decimal_(struct soap *soap, const char *URL, xsd__decimal_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:decimal", p->soap_type() == SOAP_TYPE_xsd__decimal_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_xsd__decimal_(struct soap *soap, const char *URL, xsd__decimal_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:decimal", p->soap_type() == SOAP_TYPE_xsd__decimal_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 xsd__decimal_ * SOAP_FMAC4 soap_get_xsd__decimal_(struct soap*, xsd__decimal_ *, const char*, const char*);

inline int soap_read_xsd__decimal_(struct soap *soap, xsd__decimal_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__decimal_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__decimal_(struct soap *soap, const char *URL, xsd__decimal_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__decimal_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__decimal_(struct soap *soap, xsd__decimal_ *p)
{
	if (soap_read_xsd__decimal_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__dateTime_DEFINED
#define SOAP_TYPE_xsd__dateTime_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__dateTime(struct soap*, const char*, int, const xsd__dateTime *, const char*);
SOAP_FMAC3 xsd__dateTime * SOAP_FMAC4 soap_in_xsd__dateTime(struct soap*, const char*, xsd__dateTime *, const char*);
SOAP_FMAC1 xsd__dateTime * SOAP_FMAC2 soap_instantiate_xsd__dateTime(struct soap*, int, const char*, const char*, size_t*);

inline xsd__dateTime * soap_new_xsd__dateTime(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__dateTime(soap, n, NULL, NULL, NULL);
}

inline xsd__dateTime * soap_new_req_xsd__dateTime(
	struct soap *soap,
	time_t __item)
{
	xsd__dateTime *_p = soap_new_xsd__dateTime(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__dateTime::__item = __item;
	}
	return _p;
}

inline xsd__dateTime * soap_new_set_xsd__dateTime(
	struct soap *soap,
	time_t __item,
	char *__item__1)
{
	xsd__dateTime *_p = soap_new_xsd__dateTime(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__dateTime::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__dateTime(struct soap *soap, xsd__dateTime const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:dateTime", p->soap_type() == SOAP_TYPE_xsd__dateTime ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__dateTime(struct soap *soap, const char *URL, xsd__dateTime const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:dateTime", p->soap_type() == SOAP_TYPE_xsd__dateTime ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_xsd__dateTime(struct soap *soap, const char *URL, xsd__dateTime const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:dateTime", p->soap_type() == SOAP_TYPE_xsd__dateTime ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 xsd__dateTime * SOAP_FMAC4 soap_get_xsd__dateTime(struct soap*, xsd__dateTime *, const char*, const char*);

inline int soap_read_xsd__dateTime(struct soap *soap, xsd__dateTime *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__dateTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__dateTime(struct soap *soap, const char *URL, xsd__dateTime *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__dateTime(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__dateTime(struct soap *soap, xsd__dateTime *p)
{
	if (soap_read_xsd__dateTime(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__byte__DEFINED
#define SOAP_TYPE_xsd__byte__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__byte_(struct soap*, const char*, int, const xsd__byte_ *, const char*);
SOAP_FMAC3 xsd__byte_ * SOAP_FMAC4 soap_in_xsd__byte_(struct soap*, const char*, xsd__byte_ *, const char*);
SOAP_FMAC1 xsd__byte_ * SOAP_FMAC2 soap_instantiate_xsd__byte_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__byte_ * soap_new_xsd__byte_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__byte_(soap, n, NULL, NULL, NULL);
}

inline xsd__byte_ * soap_new_req_xsd__byte_(
	struct soap *soap,
	char __item)
{
	xsd__byte_ *_p = soap_new_xsd__byte_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__byte_::__item = __item;
	}
	return _p;
}

inline xsd__byte_ * soap_new_set_xsd__byte_(
	struct soap *soap,
	char __item,
	char *__item__1)
{
	xsd__byte_ *_p = soap_new_xsd__byte_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__byte_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__byte_(struct soap *soap, xsd__byte_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:byte", p->soap_type() == SOAP_TYPE_xsd__byte_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__byte_(struct soap *soap, const char *URL, xsd__byte_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:byte", p->soap_type() == SOAP_TYPE_xsd__byte_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_xsd__byte_(struct soap *soap, const char *URL, xsd__byte_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:byte", p->soap_type() == SOAP_TYPE_xsd__byte_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 xsd__byte_ * SOAP_FMAC4 soap_get_xsd__byte_(struct soap*, xsd__byte_ *, const char*, const char*);

inline int soap_read_xsd__byte_(struct soap *soap, xsd__byte_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__byte_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__byte_(struct soap *soap, const char *URL, xsd__byte_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__byte_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__byte_(struct soap *soap, xsd__byte_ *p)
{
	if (soap_read_xsd__byte_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__boolean_DEFINED
#define SOAP_TYPE_xsd__boolean_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__boolean(struct soap*, const char*, int, const xsd__boolean *, const char*);
SOAP_FMAC3 xsd__boolean * SOAP_FMAC4 soap_in_xsd__boolean(struct soap*, const char*, xsd__boolean *, const char*);
SOAP_FMAC1 xsd__boolean * SOAP_FMAC2 soap_instantiate_xsd__boolean(struct soap*, int, const char*, const char*, size_t*);

inline xsd__boolean * soap_new_xsd__boolean(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__boolean(soap, n, NULL, NULL, NULL);
}

inline xsd__boolean * soap_new_req_xsd__boolean(
	struct soap *soap,
	bool __item)
{
	xsd__boolean *_p = soap_new_xsd__boolean(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__boolean::__item = __item;
	}
	return _p;
}

inline xsd__boolean * soap_new_set_xsd__boolean(
	struct soap *soap,
	bool __item,
	char *__item__1)
{
	xsd__boolean *_p = soap_new_xsd__boolean(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__boolean::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__boolean(struct soap *soap, xsd__boolean const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:boolean", p->soap_type() == SOAP_TYPE_xsd__boolean ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__boolean(struct soap *soap, const char *URL, xsd__boolean const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:boolean", p->soap_type() == SOAP_TYPE_xsd__boolean ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_xsd__boolean(struct soap *soap, const char *URL, xsd__boolean const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:boolean", p->soap_type() == SOAP_TYPE_xsd__boolean ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 xsd__boolean * SOAP_FMAC4 soap_get_xsd__boolean(struct soap*, xsd__boolean *, const char*, const char*);

inline int soap_read_xsd__boolean(struct soap *soap, xsd__boolean *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__boolean(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__boolean(struct soap *soap, const char *URL, xsd__boolean *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__boolean(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__boolean(struct soap *soap, xsd__boolean *p)
{
	if (soap_read_xsd__boolean(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__base64Binary__DEFINED
#define SOAP_TYPE_xsd__base64Binary__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary_(struct soap*, const char*, int, const xsd__base64Binary_ *, const char*);
SOAP_FMAC3 xsd__base64Binary_ * SOAP_FMAC4 soap_in_xsd__base64Binary_(struct soap*, const char*, xsd__base64Binary_ *, const char*);
SOAP_FMAC1 xsd__base64Binary_ * SOAP_FMAC2 soap_instantiate_xsd__base64Binary_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__base64Binary_ * soap_new_xsd__base64Binary_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__base64Binary_(soap, n, NULL, NULL, NULL);
}

inline xsd__base64Binary_ * soap_new_req_xsd__base64Binary_(
	struct soap *soap,
	const xsd__base64Binary& __item)
{
	xsd__base64Binary_ *_p = soap_new_xsd__base64Binary_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__base64Binary_::__item = __item;
	}
	return _p;
}

inline xsd__base64Binary_ * soap_new_set_xsd__base64Binary_(
	struct soap *soap,
	const xsd__base64Binary& __item,
	char *__item__1)
{
	xsd__base64Binary_ *_p = soap_new_xsd__base64Binary_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__base64Binary_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__base64Binary_(struct soap *soap, xsd__base64Binary_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__base64Binary_(struct soap *soap, const char *URL, xsd__base64Binary_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_xsd__base64Binary_(struct soap *soap, const char *URL, xsd__base64Binary_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 xsd__base64Binary_ * SOAP_FMAC4 soap_get_xsd__base64Binary_(struct soap*, xsd__base64Binary_ *, const char*, const char*);

inline int soap_read_xsd__base64Binary_(struct soap *soap, xsd__base64Binary_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__base64Binary_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__base64Binary_(struct soap *soap, const char *URL, xsd__base64Binary_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__base64Binary_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__base64Binary_(struct soap *soap, xsd__base64Binary_ *p)
{
	if (soap_read_xsd__base64Binary_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__anyURI__DEFINED
#define SOAP_TYPE_xsd__anyURI__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI_(struct soap*, const char*, int, const xsd__anyURI_ *, const char*);
SOAP_FMAC3 xsd__anyURI_ * SOAP_FMAC4 soap_in_xsd__anyURI_(struct soap*, const char*, xsd__anyURI_ *, const char*);
SOAP_FMAC1 xsd__anyURI_ * SOAP_FMAC2 soap_instantiate_xsd__anyURI_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__anyURI_ * soap_new_xsd__anyURI_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__anyURI_(soap, n, NULL, NULL, NULL);
}

inline xsd__anyURI_ * soap_new_req_xsd__anyURI_(
	struct soap *soap)
{
	xsd__anyURI_ *_p = soap_new_xsd__anyURI_(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__anyURI_ * soap_new_set_xsd__anyURI_(
	struct soap *soap,
	char *__item,
	char *__item__1)
{
	xsd__anyURI_ *_p = soap_new_xsd__anyURI_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__anyURI_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__anyURI_(struct soap *soap, xsd__anyURI_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:anyURI", p->soap_type() == SOAP_TYPE_xsd__anyURI_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__anyURI_(struct soap *soap, const char *URL, xsd__anyURI_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:anyURI", p->soap_type() == SOAP_TYPE_xsd__anyURI_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_xsd__anyURI_(struct soap *soap, const char *URL, xsd__anyURI_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:anyURI", p->soap_type() == SOAP_TYPE_xsd__anyURI_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 xsd__anyURI_ * SOAP_FMAC4 soap_get_xsd__anyURI_(struct soap*, xsd__anyURI_ *, const char*, const char*);

inline int soap_read_xsd__anyURI_(struct soap *soap, xsd__anyURI_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__anyURI_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__anyURI_(struct soap *soap, const char *URL, xsd__anyURI_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__anyURI_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__anyURI_(struct soap *soap, xsd__anyURI_ *p)
{
	if (soap_read_xsd__anyURI_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__QName_DEFINED
#define SOAP_TYPE_xsd__QName_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__QName(struct soap*, const char*, int, const xsd__QName *, const char*);
SOAP_FMAC3 xsd__QName * SOAP_FMAC4 soap_in_xsd__QName(struct soap*, const char*, xsd__QName *, const char*);
SOAP_FMAC1 xsd__QName * SOAP_FMAC2 soap_instantiate_xsd__QName(struct soap*, int, const char*, const char*, size_t*);

inline xsd__QName * soap_new_xsd__QName(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__QName(soap, n, NULL, NULL, NULL);
}

inline xsd__QName * soap_new_req_xsd__QName(
	struct soap *soap)
{
	xsd__QName *_p = soap_new_xsd__QName(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__QName * soap_new_set_xsd__QName(
	struct soap *soap,
	char *__item,
	char *__item__1)
{
	xsd__QName *_p = soap_new_xsd__QName(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__QName::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__QName(struct soap *soap, xsd__QName const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:QName", p->soap_type() == SOAP_TYPE_xsd__QName ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__QName(struct soap *soap, const char *URL, xsd__QName const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:QName", p->soap_type() == SOAP_TYPE_xsd__QName ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_xsd__QName(struct soap *soap, const char *URL, xsd__QName const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:QName", p->soap_type() == SOAP_TYPE_xsd__QName ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 xsd__QName * SOAP_FMAC4 soap_get_xsd__QName(struct soap*, xsd__QName *, const char*, const char*);

inline int soap_read_xsd__QName(struct soap *soap, xsd__QName *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__QName(struct soap *soap, const char *URL, xsd__QName *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__QName(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__QName(struct soap *soap, xsd__QName *p)
{
	if (soap_read_xsd__QName(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__IDREF__DEFINED
#define SOAP_TYPE_xsd__IDREF__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__IDREF_(struct soap*, const char*, int, const xsd__IDREF_ *, const char*);
SOAP_FMAC3 xsd__IDREF_ * SOAP_FMAC4 soap_in_xsd__IDREF_(struct soap*, const char*, xsd__IDREF_ *, const char*);
SOAP_FMAC1 xsd__IDREF_ * SOAP_FMAC2 soap_instantiate_xsd__IDREF_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__IDREF_ * soap_new_xsd__IDREF_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__IDREF_(soap, n, NULL, NULL, NULL);
}

inline xsd__IDREF_ * soap_new_req_xsd__IDREF_(
	struct soap *soap)
{
	xsd__IDREF_ *_p = soap_new_xsd__IDREF_(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__IDREF_ * soap_new_set_xsd__IDREF_(
	struct soap *soap,
	char *__item,
	char *__item__1)
{
	xsd__IDREF_ *_p = soap_new_xsd__IDREF_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__IDREF_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__IDREF_(struct soap *soap, xsd__IDREF_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:IDREF", p->soap_type() == SOAP_TYPE_xsd__IDREF_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__IDREF_(struct soap *soap, const char *URL, xsd__IDREF_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:IDREF", p->soap_type() == SOAP_TYPE_xsd__IDREF_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_xsd__IDREF_(struct soap *soap, const char *URL, xsd__IDREF_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:IDREF", p->soap_type() == SOAP_TYPE_xsd__IDREF_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 xsd__IDREF_ * SOAP_FMAC4 soap_get_xsd__IDREF_(struct soap*, xsd__IDREF_ *, const char*, const char*);

inline int soap_read_xsd__IDREF_(struct soap *soap, xsd__IDREF_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__IDREF_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__IDREF_(struct soap *soap, const char *URL, xsd__IDREF_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__IDREF_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__IDREF_(struct soap *soap, xsd__IDREF_ *p)
{
	if (soap_read_xsd__IDREF_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__ID__DEFINED
#define SOAP_TYPE_xsd__ID__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__ID_(struct soap*, const char*, int, const xsd__ID_ *, const char*);
SOAP_FMAC3 xsd__ID_ * SOAP_FMAC4 soap_in_xsd__ID_(struct soap*, const char*, xsd__ID_ *, const char*);
SOAP_FMAC1 xsd__ID_ * SOAP_FMAC2 soap_instantiate_xsd__ID_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__ID_ * soap_new_xsd__ID_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__ID_(soap, n, NULL, NULL, NULL);
}

inline xsd__ID_ * soap_new_req_xsd__ID_(
	struct soap *soap)
{
	xsd__ID_ *_p = soap_new_xsd__ID_(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__ID_ * soap_new_set_xsd__ID_(
	struct soap *soap,
	char *__item,
	char *__item__1)
{
	xsd__ID_ *_p = soap_new_xsd__ID_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__ID_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__ID_(struct soap *soap, xsd__ID_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:ID", p->soap_type() == SOAP_TYPE_xsd__ID_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__ID_(struct soap *soap, const char *URL, xsd__ID_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:ID", p->soap_type() == SOAP_TYPE_xsd__ID_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_xsd__ID_(struct soap *soap, const char *URL, xsd__ID_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:ID", p->soap_type() == SOAP_TYPE_xsd__ID_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 xsd__ID_ * SOAP_FMAC4 soap_get_xsd__ID_(struct soap*, xsd__ID_ *, const char*, const char*);

inline int soap_read_xsd__ID_(struct soap *soap, xsd__ID_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__ID_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__ID_(struct soap *soap, const char *URL, xsd__ID_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__ID_(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__ID_(struct soap *soap, xsd__ID_ *p)
{
	if (soap_read_xsd__ID_(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__base64Binary_DEFINED
#define SOAP_TYPE_xsd__base64Binary_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap*, const char*, int, const xsd__base64Binary *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__base64Binary2s(struct soap*, xsd__base64Binary);
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap*, const char*, xsd__base64Binary *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__base64Binary(struct soap*, const char*, xsd__base64Binary *);
SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap*, int, const char*, const char*, size_t*);

inline xsd__base64Binary * soap_new_xsd__base64Binary(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__base64Binary(soap, n, NULL, NULL, NULL);
}

inline xsd__base64Binary * soap_new_req_xsd__base64Binary(
	struct soap *soap)
{
	xsd__base64Binary *_p = soap_new_xsd__base64Binary(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__base64Binary * soap_new_set_xsd__base64Binary(
	struct soap *soap,
	unsigned char *__ptr,
	int __size,
	char *id,
	char *type,
	char *options)
{
	xsd__base64Binary *_p = soap_new_xsd__base64Binary(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__base64Binary::__ptr = __ptr;
		_p->xsd__base64Binary::__size = __size;
		_p->xsd__base64Binary::id = id;
		_p->xsd__base64Binary::type = type;
		_p->xsd__base64Binary::options = options;
	}
	return _p;
}

inline int soap_write_xsd__base64Binary(struct soap *soap, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap*, xsd__base64Binary *, const char*, const char*);

inline int soap_read_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__base64Binary(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__base64Binary(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p)
{
	if (soap_read_xsd__base64Binary(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__anyType_DEFINED
#define SOAP_TYPE_xsd__anyType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyType(struct soap*, const char*, int, const xsd__anyType *, const char*);
SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_in_xsd__anyType(struct soap*, const char*, xsd__anyType *, const char*);
SOAP_FMAC1 xsd__anyType * SOAP_FMAC2 soap_instantiate_xsd__anyType(struct soap*, int, const char*, const char*, size_t*);

inline xsd__anyType * soap_new_xsd__anyType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__anyType(soap, n, NULL, NULL, NULL);
}

inline xsd__anyType * soap_new_req_xsd__anyType(
	struct soap *soap)
{
	xsd__anyType *_p = soap_new_xsd__anyType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__anyType * soap_new_set_xsd__anyType(
	struct soap *soap,
	char *__item)
{
	xsd__anyType *_p = soap_new_xsd__anyType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__anyType::__item = __item;
	}
	return _p;
}

inline int soap_write_xsd__anyType(struct soap *soap, xsd__anyType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:anyType", p->soap_type() == SOAP_TYPE_xsd__anyType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__anyType(struct soap *soap, const char *URL, xsd__anyType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:anyType", p->soap_type() == SOAP_TYPE_xsd__anyType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_xsd__anyType(struct soap *soap, const char *URL, xsd__anyType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:anyType", p->soap_type() == SOAP_TYPE_xsd__anyType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_get_xsd__anyType(struct soap*, xsd__anyType *, const char*, const char*);

inline int soap_read_xsd__anyType(struct soap *soap, xsd__anyType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__anyType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__anyType(struct soap *soap, const char *URL, xsd__anyType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__anyType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__anyType(struct soap *soap, xsd__anyType *p)
{
	if (soap_read_xsd__anyType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Fault(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (soap_read_SOAP_ENV__Fault(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Reason(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (soap_read_SOAP_ENV__Reason(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Detail(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (soap_read_SOAP_ENV__Detail(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Code(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (soap_read_SOAP_ENV__Code(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap,
	struct _wsse__Security *wsse__Security)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
		_p->wsse__Security = wsse__Security;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Header(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (soap_read_SOAP_ENV__Header(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef SOAP_TYPE__wsse__Security_DEFINED
#define SOAP_TYPE__wsse__Security_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsse__Security(struct soap*, struct _wsse__Security *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsse__Security(struct soap*, const struct _wsse__Security *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsse__Security(struct soap*, const char*, int, const struct _wsse__Security *, const char*);
SOAP_FMAC3 struct _wsse__Security * SOAP_FMAC4 soap_in__wsse__Security(struct soap*, const char*, struct _wsse__Security *, const char*);
SOAP_FMAC1 struct _wsse__Security * SOAP_FMAC2 soap_instantiate__wsse__Security(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsse__Security * soap_new__wsse__Security(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsse__Security(soap, n, NULL, NULL, NULL);
}

inline struct _wsse__Security * soap_new_req__wsse__Security(
	struct soap *soap)
{
	struct _wsse__Security *_p = soap_new__wsse__Security(soap);
	if (_p)
	{	soap_default__wsse__Security(soap, _p);
	}
	return _p;
}

inline struct _wsse__Security * soap_new_set__wsse__Security(
	struct soap *soap,
	struct _wsu__Timestamp *wsu__Timestamp,
	struct _wsse__UsernameToken *UsernameToken,
	struct _wsse__BinarySecurityToken *BinarySecurityToken,
	struct xenc__EncryptedKeyType *xenc__EncryptedKey,
	struct _xenc__ReferenceList *xenc__ReferenceList,
	struct wsc__SecurityContextTokenType *wsc__SecurityContextToken,
	struct ds__SignatureType *ds__Signature,
	struct saml1__AssertionType *saml1__Assertion,
	struct saml2__AssertionType *saml2__Assertion,
	char *SOAP_ENV__actor,
	char *SOAP_ENV__role)
{
	struct _wsse__Security *_p = soap_new__wsse__Security(soap);
	if (_p)
	{	soap_default__wsse__Security(soap, _p);
		_p->wsu__Timestamp = wsu__Timestamp;
		_p->UsernameToken = UsernameToken;
		_p->BinarySecurityToken = BinarySecurityToken;
		_p->xenc__EncryptedKey = xenc__EncryptedKey;
		_p->xenc__ReferenceList = xenc__ReferenceList;
		_p->wsc__SecurityContextToken = wsc__SecurityContextToken;
		_p->ds__Signature = ds__Signature;
		_p->saml1__Assertion = saml1__Assertion;
		_p->saml2__Assertion = saml2__Assertion;
		_p->SOAP_ENV__actor = SOAP_ENV__actor;
		_p->SOAP_ENV__role = SOAP_ENV__role;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsse__Security(struct soap*, const struct _wsse__Security *, const char*, const char*);

inline int soap_write__wsse__Security(struct soap *soap, struct _wsse__Security const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize__wsse__Security(soap, p), 0) || soap_put__wsse__Security(soap, p, "wsse:Security", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsse__Security(struct soap *soap, const char *URL, struct _wsse__Security const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize__wsse__Security(soap, p), 0) || soap_put__wsse__Security(soap, p, "wsse:Security", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__wsse__Security(struct soap *soap, const char *URL, struct _wsse__Security const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize__wsse__Security(soap, p), 0) || soap_put__wsse__Security(soap, p, "wsse:Security", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct _wsse__Security * SOAP_FMAC4 soap_get__wsse__Security(struct soap*, struct _wsse__Security *, const char*, const char*);

inline int soap_read__wsse__Security(struct soap *soap, struct _wsse__Security *p)
{
	if (p)
	{	soap_default__wsse__Security(soap, p);
		if (soap_begin_recv(soap) || soap_get__wsse__Security(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsse__Security(struct soap *soap, const char *URL, struct _wsse__Security *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__wsse__Security(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__wsse__Security(struct soap *soap, struct _wsse__Security *p)
{
	if (soap_read__wsse__Security(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___saml2__union_AttributeStatementType_DEFINED
#define SOAP_TYPE___saml2__union_AttributeStatementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___saml2__union_AttributeStatementType(struct soap*, struct __saml2__union_AttributeStatementType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___saml2__union_AttributeStatementType(struct soap*, const struct __saml2__union_AttributeStatementType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___saml2__union_AttributeStatementType(struct soap*, const char*, int, const struct __saml2__union_AttributeStatementType *, const char*);
SOAP_FMAC3 struct __saml2__union_AttributeStatementType * SOAP_FMAC4 soap_in___saml2__union_AttributeStatementType(struct soap*, const char*, struct __saml2__union_AttributeStatementType *, const char*);
SOAP_FMAC1 struct __saml2__union_AttributeStatementType * SOAP_FMAC2 soap_instantiate___saml2__union_AttributeStatementType(struct soap*, int, const char*, const char*, size_t*);

inline struct __saml2__union_AttributeStatementType * soap_new___saml2__union_AttributeStatementType(struct soap *soap, int n = -1)
{
	return soap_instantiate___saml2__union_AttributeStatementType(soap, n, NULL, NULL, NULL);
}

inline struct __saml2__union_AttributeStatementType * soap_new_req___saml2__union_AttributeStatementType(
	struct soap *soap)
{
	struct __saml2__union_AttributeStatementType *_p = soap_new___saml2__union_AttributeStatementType(soap);
	if (_p)
	{	soap_default___saml2__union_AttributeStatementType(soap, _p);
	}
	return _p;
}

inline struct __saml2__union_AttributeStatementType * soap_new_set___saml2__union_AttributeStatementType(
	struct soap *soap,
	struct saml2__AttributeType *saml2__Attribute,
	struct saml2__EncryptedElementType *saml2__EncryptedAttribute)
{
	struct __saml2__union_AttributeStatementType *_p = soap_new___saml2__union_AttributeStatementType(soap);
	if (_p)
	{	soap_default___saml2__union_AttributeStatementType(soap, _p);
		_p->saml2__Attribute = saml2__Attribute;
		_p->saml2__EncryptedAttribute = saml2__EncryptedAttribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___saml2__union_AttributeStatementType(struct soap*, const struct __saml2__union_AttributeStatementType *, const char*, const char*);

inline int soap_write___saml2__union_AttributeStatementType(struct soap *soap, struct __saml2__union_AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___saml2__union_AttributeStatementType(soap, p), 0) || soap_put___saml2__union_AttributeStatementType(soap, p, "-saml2:union-AttributeStatementType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___saml2__union_AttributeStatementType(struct soap *soap, const char *URL, struct __saml2__union_AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___saml2__union_AttributeStatementType(soap, p), 0) || soap_put___saml2__union_AttributeStatementType(soap, p, "-saml2:union-AttributeStatementType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___saml2__union_AttributeStatementType(struct soap *soap, const char *URL, struct __saml2__union_AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___saml2__union_AttributeStatementType(soap, p), 0) || soap_put___saml2__union_AttributeStatementType(soap, p, "-saml2:union-AttributeStatementType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __saml2__union_AttributeStatementType * SOAP_FMAC4 soap_get___saml2__union_AttributeStatementType(struct soap*, struct __saml2__union_AttributeStatementType *, const char*, const char*);

inline int soap_read___saml2__union_AttributeStatementType(struct soap *soap, struct __saml2__union_AttributeStatementType *p)
{
	if (p)
	{	soap_default___saml2__union_AttributeStatementType(soap, p);
		if (soap_begin_recv(soap) || soap_get___saml2__union_AttributeStatementType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___saml2__union_AttributeStatementType(struct soap *soap, const char *URL, struct __saml2__union_AttributeStatementType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___saml2__union_AttributeStatementType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___saml2__union_AttributeStatementType(struct soap *soap, struct __saml2__union_AttributeStatementType *p)
{
	if (soap_read___saml2__union_AttributeStatementType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___saml2__union_EvidenceType_DEFINED
#define SOAP_TYPE___saml2__union_EvidenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___saml2__union_EvidenceType(struct soap*, struct __saml2__union_EvidenceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___saml2__union_EvidenceType(struct soap*, const struct __saml2__union_EvidenceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___saml2__union_EvidenceType(struct soap*, const char*, int, const struct __saml2__union_EvidenceType *, const char*);
SOAP_FMAC3 struct __saml2__union_EvidenceType * SOAP_FMAC4 soap_in___saml2__union_EvidenceType(struct soap*, const char*, struct __saml2__union_EvidenceType *, const char*);
SOAP_FMAC1 struct __saml2__union_EvidenceType * SOAP_FMAC2 soap_instantiate___saml2__union_EvidenceType(struct soap*, int, const char*, const char*, size_t*);

inline struct __saml2__union_EvidenceType * soap_new___saml2__union_EvidenceType(struct soap *soap, int n = -1)
{
	return soap_instantiate___saml2__union_EvidenceType(soap, n, NULL, NULL, NULL);
}

inline struct __saml2__union_EvidenceType * soap_new_req___saml2__union_EvidenceType(
	struct soap *soap)
{
	struct __saml2__union_EvidenceType *_p = soap_new___saml2__union_EvidenceType(soap);
	if (_p)
	{	soap_default___saml2__union_EvidenceType(soap, _p);
	}
	return _p;
}

inline struct __saml2__union_EvidenceType * soap_new_set___saml2__union_EvidenceType(
	struct soap *soap,
	char *saml2__AssertionIDRef,
	char *saml2__AssertionURIRef,
	struct saml2__AssertionType *saml2__Assertion,
	struct saml2__EncryptedElementType *saml2__EncryptedAssertion)
{
	struct __saml2__union_EvidenceType *_p = soap_new___saml2__union_EvidenceType(soap);
	if (_p)
	{	soap_default___saml2__union_EvidenceType(soap, _p);
		_p->saml2__AssertionIDRef = saml2__AssertionIDRef;
		_p->saml2__AssertionURIRef = saml2__AssertionURIRef;
		_p->saml2__Assertion = saml2__Assertion;
		_p->saml2__EncryptedAssertion = saml2__EncryptedAssertion;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___saml2__union_EvidenceType(struct soap*, const struct __saml2__union_EvidenceType *, const char*, const char*);

inline int soap_write___saml2__union_EvidenceType(struct soap *soap, struct __saml2__union_EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___saml2__union_EvidenceType(soap, p), 0) || soap_put___saml2__union_EvidenceType(soap, p, "-saml2:union-EvidenceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___saml2__union_EvidenceType(struct soap *soap, const char *URL, struct __saml2__union_EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___saml2__union_EvidenceType(soap, p), 0) || soap_put___saml2__union_EvidenceType(soap, p, "-saml2:union-EvidenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___saml2__union_EvidenceType(struct soap *soap, const char *URL, struct __saml2__union_EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___saml2__union_EvidenceType(soap, p), 0) || soap_put___saml2__union_EvidenceType(soap, p, "-saml2:union-EvidenceType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __saml2__union_EvidenceType * SOAP_FMAC4 soap_get___saml2__union_EvidenceType(struct soap*, struct __saml2__union_EvidenceType *, const char*, const char*);

inline int soap_read___saml2__union_EvidenceType(struct soap *soap, struct __saml2__union_EvidenceType *p)
{
	if (p)
	{	soap_default___saml2__union_EvidenceType(soap, p);
		if (soap_begin_recv(soap) || soap_get___saml2__union_EvidenceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___saml2__union_EvidenceType(struct soap *soap, const char *URL, struct __saml2__union_EvidenceType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___saml2__union_EvidenceType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___saml2__union_EvidenceType(struct soap *soap, struct __saml2__union_EvidenceType *p)
{
	if (soap_read___saml2__union_EvidenceType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___saml2__union_AdviceType_DEFINED
#define SOAP_TYPE___saml2__union_AdviceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___saml2__union_AdviceType(struct soap*, struct __saml2__union_AdviceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___saml2__union_AdviceType(struct soap*, const struct __saml2__union_AdviceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___saml2__union_AdviceType(struct soap*, const char*, int, const struct __saml2__union_AdviceType *, const char*);
SOAP_FMAC3 struct __saml2__union_AdviceType * SOAP_FMAC4 soap_in___saml2__union_AdviceType(struct soap*, const char*, struct __saml2__union_AdviceType *, const char*);
SOAP_FMAC1 struct __saml2__union_AdviceType * SOAP_FMAC2 soap_instantiate___saml2__union_AdviceType(struct soap*, int, const char*, const char*, size_t*);

inline struct __saml2__union_AdviceType * soap_new___saml2__union_AdviceType(struct soap *soap, int n = -1)
{
	return soap_instantiate___saml2__union_AdviceType(soap, n, NULL, NULL, NULL);
}

inline struct __saml2__union_AdviceType * soap_new_req___saml2__union_AdviceType(
	struct soap *soap)
{
	struct __saml2__union_AdviceType *_p = soap_new___saml2__union_AdviceType(soap);
	if (_p)
	{	soap_default___saml2__union_AdviceType(soap, _p);
	}
	return _p;
}

inline struct __saml2__union_AdviceType * soap_new_set___saml2__union_AdviceType(
	struct soap *soap,
	char *saml2__AssertionIDRef,
	char *saml2__AssertionURIRef,
	struct saml2__AssertionType *saml2__Assertion,
	struct saml2__EncryptedElementType *saml2__EncryptedAssertion)
{
	struct __saml2__union_AdviceType *_p = soap_new___saml2__union_AdviceType(soap);
	if (_p)
	{	soap_default___saml2__union_AdviceType(soap, _p);
		_p->saml2__AssertionIDRef = saml2__AssertionIDRef;
		_p->saml2__AssertionURIRef = saml2__AssertionURIRef;
		_p->saml2__Assertion = saml2__Assertion;
		_p->saml2__EncryptedAssertion = saml2__EncryptedAssertion;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___saml2__union_AdviceType(struct soap*, const struct __saml2__union_AdviceType *, const char*, const char*);

inline int soap_write___saml2__union_AdviceType(struct soap *soap, struct __saml2__union_AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___saml2__union_AdviceType(soap, p), 0) || soap_put___saml2__union_AdviceType(soap, p, "-saml2:union-AdviceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___saml2__union_AdviceType(struct soap *soap, const char *URL, struct __saml2__union_AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___saml2__union_AdviceType(soap, p), 0) || soap_put___saml2__union_AdviceType(soap, p, "-saml2:union-AdviceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___saml2__union_AdviceType(struct soap *soap, const char *URL, struct __saml2__union_AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___saml2__union_AdviceType(soap, p), 0) || soap_put___saml2__union_AdviceType(soap, p, "-saml2:union-AdviceType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __saml2__union_AdviceType * SOAP_FMAC4 soap_get___saml2__union_AdviceType(struct soap*, struct __saml2__union_AdviceType *, const char*, const char*);

inline int soap_read___saml2__union_AdviceType(struct soap *soap, struct __saml2__union_AdviceType *p)
{
	if (p)
	{	soap_default___saml2__union_AdviceType(soap, p);
		if (soap_begin_recv(soap) || soap_get___saml2__union_AdviceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___saml2__union_AdviceType(struct soap *soap, const char *URL, struct __saml2__union_AdviceType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___saml2__union_AdviceType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___saml2__union_AdviceType(struct soap *soap, struct __saml2__union_AdviceType *p)
{
	if (soap_read___saml2__union_AdviceType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___saml2__union_ConditionsType_DEFINED
#define SOAP_TYPE___saml2__union_ConditionsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___saml2__union_ConditionsType(struct soap*, struct __saml2__union_ConditionsType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___saml2__union_ConditionsType(struct soap*, const struct __saml2__union_ConditionsType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___saml2__union_ConditionsType(struct soap*, const char*, int, const struct __saml2__union_ConditionsType *, const char*);
SOAP_FMAC3 struct __saml2__union_ConditionsType * SOAP_FMAC4 soap_in___saml2__union_ConditionsType(struct soap*, const char*, struct __saml2__union_ConditionsType *, const char*);
SOAP_FMAC1 struct __saml2__union_ConditionsType * SOAP_FMAC2 soap_instantiate___saml2__union_ConditionsType(struct soap*, int, const char*, const char*, size_t*);

inline struct __saml2__union_ConditionsType * soap_new___saml2__union_ConditionsType(struct soap *soap, int n = -1)
{
	return soap_instantiate___saml2__union_ConditionsType(soap, n, NULL, NULL, NULL);
}

inline struct __saml2__union_ConditionsType * soap_new_req___saml2__union_ConditionsType(
	struct soap *soap)
{
	struct __saml2__union_ConditionsType *_p = soap_new___saml2__union_ConditionsType(soap);
	if (_p)
	{	soap_default___saml2__union_ConditionsType(soap, _p);
	}
	return _p;
}

inline struct __saml2__union_ConditionsType * soap_new_set___saml2__union_ConditionsType(
	struct soap *soap,
	struct saml2__ConditionAbstractType *saml2__Condition,
	struct saml2__AudienceRestrictionType *saml2__AudienceRestriction,
	struct saml2__OneTimeUseType *saml2__OneTimeUse,
	struct saml2__ProxyRestrictionType *saml2__ProxyRestriction)
{
	struct __saml2__union_ConditionsType *_p = soap_new___saml2__union_ConditionsType(soap);
	if (_p)
	{	soap_default___saml2__union_ConditionsType(soap, _p);
		_p->saml2__Condition = saml2__Condition;
		_p->saml2__AudienceRestriction = saml2__AudienceRestriction;
		_p->saml2__OneTimeUse = saml2__OneTimeUse;
		_p->saml2__ProxyRestriction = saml2__ProxyRestriction;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___saml2__union_ConditionsType(struct soap*, const struct __saml2__union_ConditionsType *, const char*, const char*);

inline int soap_write___saml2__union_ConditionsType(struct soap *soap, struct __saml2__union_ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___saml2__union_ConditionsType(soap, p), 0) || soap_put___saml2__union_ConditionsType(soap, p, "-saml2:union-ConditionsType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___saml2__union_ConditionsType(struct soap *soap, const char *URL, struct __saml2__union_ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___saml2__union_ConditionsType(soap, p), 0) || soap_put___saml2__union_ConditionsType(soap, p, "-saml2:union-ConditionsType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___saml2__union_ConditionsType(struct soap *soap, const char *URL, struct __saml2__union_ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___saml2__union_ConditionsType(soap, p), 0) || soap_put___saml2__union_ConditionsType(soap, p, "-saml2:union-ConditionsType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __saml2__union_ConditionsType * SOAP_FMAC4 soap_get___saml2__union_ConditionsType(struct soap*, struct __saml2__union_ConditionsType *, const char*, const char*);

inline int soap_read___saml2__union_ConditionsType(struct soap *soap, struct __saml2__union_ConditionsType *p)
{
	if (p)
	{	soap_default___saml2__union_ConditionsType(soap, p);
		if (soap_begin_recv(soap) || soap_get___saml2__union_ConditionsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___saml2__union_ConditionsType(struct soap *soap, const char *URL, struct __saml2__union_ConditionsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___saml2__union_ConditionsType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___saml2__union_ConditionsType(struct soap *soap, struct __saml2__union_ConditionsType *p)
{
	if (soap_read___saml2__union_ConditionsType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___saml2__union_AssertionType_DEFINED
#define SOAP_TYPE___saml2__union_AssertionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___saml2__union_AssertionType(struct soap*, struct __saml2__union_AssertionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___saml2__union_AssertionType(struct soap*, const struct __saml2__union_AssertionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___saml2__union_AssertionType(struct soap*, const char*, int, const struct __saml2__union_AssertionType *, const char*);
SOAP_FMAC3 struct __saml2__union_AssertionType * SOAP_FMAC4 soap_in___saml2__union_AssertionType(struct soap*, const char*, struct __saml2__union_AssertionType *, const char*);
SOAP_FMAC1 struct __saml2__union_AssertionType * SOAP_FMAC2 soap_instantiate___saml2__union_AssertionType(struct soap*, int, const char*, const char*, size_t*);

inline struct __saml2__union_AssertionType * soap_new___saml2__union_AssertionType(struct soap *soap, int n = -1)
{
	return soap_instantiate___saml2__union_AssertionType(soap, n, NULL, NULL, NULL);
}

inline struct __saml2__union_AssertionType * soap_new_req___saml2__union_AssertionType(
	struct soap *soap)
{
	struct __saml2__union_AssertionType *_p = soap_new___saml2__union_AssertionType(soap);
	if (_p)
	{	soap_default___saml2__union_AssertionType(soap, _p);
	}
	return _p;
}

inline struct __saml2__union_AssertionType * soap_new_set___saml2__union_AssertionType(
	struct soap *soap,
	struct saml2__StatementAbstractType *saml2__Statement,
	struct saml2__AuthnStatementType *saml2__AuthnStatement,
	struct saml2__AuthzDecisionStatementType *saml2__AuthzDecisionStatement,
	struct saml2__AttributeStatementType *saml2__AttributeStatement)
{
	struct __saml2__union_AssertionType *_p = soap_new___saml2__union_AssertionType(soap);
	if (_p)
	{	soap_default___saml2__union_AssertionType(soap, _p);
		_p->saml2__Statement = saml2__Statement;
		_p->saml2__AuthnStatement = saml2__AuthnStatement;
		_p->saml2__AuthzDecisionStatement = saml2__AuthzDecisionStatement;
		_p->saml2__AttributeStatement = saml2__AttributeStatement;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___saml2__union_AssertionType(struct soap*, const struct __saml2__union_AssertionType *, const char*, const char*);

inline int soap_write___saml2__union_AssertionType(struct soap *soap, struct __saml2__union_AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___saml2__union_AssertionType(soap, p), 0) || soap_put___saml2__union_AssertionType(soap, p, "-saml2:union-AssertionType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___saml2__union_AssertionType(struct soap *soap, const char *URL, struct __saml2__union_AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___saml2__union_AssertionType(soap, p), 0) || soap_put___saml2__union_AssertionType(soap, p, "-saml2:union-AssertionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___saml2__union_AssertionType(struct soap *soap, const char *URL, struct __saml2__union_AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___saml2__union_AssertionType(soap, p), 0) || soap_put___saml2__union_AssertionType(soap, p, "-saml2:union-AssertionType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __saml2__union_AssertionType * SOAP_FMAC4 soap_get___saml2__union_AssertionType(struct soap*, struct __saml2__union_AssertionType *, const char*, const char*);

inline int soap_read___saml2__union_AssertionType(struct soap *soap, struct __saml2__union_AssertionType *p)
{
	if (p)
	{	soap_default___saml2__union_AssertionType(soap, p);
		if (soap_begin_recv(soap) || soap_get___saml2__union_AssertionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___saml2__union_AssertionType(struct soap *soap, const char *URL, struct __saml2__union_AssertionType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___saml2__union_AssertionType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___saml2__union_AssertionType(struct soap *soap, struct __saml2__union_AssertionType *p)
{
	if (soap_read___saml2__union_AssertionType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_saml2__AttributeType_DEFINED
#define SOAP_TYPE_saml2__AttributeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__AttributeType(struct soap*, struct saml2__AttributeType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AttributeType(struct soap*, const struct saml2__AttributeType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__AttributeType(struct soap*, const char*, int, const struct saml2__AttributeType *, const char*);
SOAP_FMAC3 struct saml2__AttributeType * SOAP_FMAC4 soap_in_saml2__AttributeType(struct soap*, const char*, struct saml2__AttributeType *, const char*);
SOAP_FMAC1 struct saml2__AttributeType * SOAP_FMAC2 soap_instantiate_saml2__AttributeType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__AttributeType * soap_new_saml2__AttributeType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__AttributeType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__AttributeType * soap_new_req_saml2__AttributeType(
	struct soap *soap,
	int __sizeAttributeValue,
	char **saml2__AttributeValue,
	char *Name)
{
	struct saml2__AttributeType *_p = soap_new_saml2__AttributeType(soap);
	if (_p)
	{	soap_default_saml2__AttributeType(soap, _p);
		_p->__sizeAttributeValue = __sizeAttributeValue;
		_p->saml2__AttributeValue = saml2__AttributeValue;
		_p->Name = Name;
	}
	return _p;
}

inline struct saml2__AttributeType * soap_new_set_saml2__AttributeType(
	struct soap *soap,
	int __sizeAttributeValue,
	char **saml2__AttributeValue,
	char *Name,
	char *NameFormat,
	char *FriendlyName)
{
	struct saml2__AttributeType *_p = soap_new_saml2__AttributeType(soap);
	if (_p)
	{	soap_default_saml2__AttributeType(soap, _p);
		_p->__sizeAttributeValue = __sizeAttributeValue;
		_p->saml2__AttributeValue = saml2__AttributeValue;
		_p->Name = Name;
		_p->NameFormat = NameFormat;
		_p->FriendlyName = FriendlyName;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__AttributeType(struct soap*, const struct saml2__AttributeType *, const char*, const char*);

inline int soap_write_saml2__AttributeType(struct soap *soap, struct saml2__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_saml2__AttributeType(soap, p), 0) || soap_put_saml2__AttributeType(soap, p, "saml2:AttributeType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__AttributeType(struct soap *soap, const char *URL, struct saml2__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_saml2__AttributeType(soap, p), 0) || soap_put_saml2__AttributeType(soap, p, "saml2:AttributeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_saml2__AttributeType(struct soap *soap, const char *URL, struct saml2__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_saml2__AttributeType(soap, p), 0) || soap_put_saml2__AttributeType(soap, p, "saml2:AttributeType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__AttributeType * SOAP_FMAC4 soap_get_saml2__AttributeType(struct soap*, struct saml2__AttributeType *, const char*, const char*);

inline int soap_read_saml2__AttributeType(struct soap *soap, struct saml2__AttributeType *p)
{
	if (p)
	{	soap_default_saml2__AttributeType(soap, p);
		if (soap_begin_recv(soap) || soap_get_saml2__AttributeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__AttributeType(struct soap *soap, const char *URL, struct saml2__AttributeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_saml2__AttributeType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_saml2__AttributeType(struct soap *soap, struct saml2__AttributeType *p)
{
	if (soap_read_saml2__AttributeType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_saml2__AttributeStatementType_DEFINED
#define SOAP_TYPE_saml2__AttributeStatementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__AttributeStatementType(struct soap*, struct saml2__AttributeStatementType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AttributeStatementType(struct soap*, const struct saml2__AttributeStatementType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__AttributeStatementType(struct soap*, const char*, int, const struct saml2__AttributeStatementType *, const char*);
SOAP_FMAC3 struct saml2__AttributeStatementType * SOAP_FMAC4 soap_in_saml2__AttributeStatementType(struct soap*, const char*, struct saml2__AttributeStatementType *, const char*);
SOAP_FMAC1 struct saml2__AttributeStatementType * SOAP_FMAC2 soap_instantiate_saml2__AttributeStatementType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__AttributeStatementType * soap_new_saml2__AttributeStatementType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__AttributeStatementType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__AttributeStatementType * soap_new_req_saml2__AttributeStatementType(
	struct soap *soap,
	int __size_AttributeStatementType,
	struct __saml2__union_AttributeStatementType *__union_AttributeStatementType)
{
	struct saml2__AttributeStatementType *_p = soap_new_saml2__AttributeStatementType(soap);
	if (_p)
	{	soap_default_saml2__AttributeStatementType(soap, _p);
		_p->__size_AttributeStatementType = __size_AttributeStatementType;
		_p->__union_AttributeStatementType = __union_AttributeStatementType;
	}
	return _p;
}

inline struct saml2__AttributeStatementType * soap_new_set_saml2__AttributeStatementType(
	struct soap *soap,
	int __size_AttributeStatementType,
	struct __saml2__union_AttributeStatementType *__union_AttributeStatementType)
{
	struct saml2__AttributeStatementType *_p = soap_new_saml2__AttributeStatementType(soap);
	if (_p)
	{	soap_default_saml2__AttributeStatementType(soap, _p);
		_p->__size_AttributeStatementType = __size_AttributeStatementType;
		_p->__union_AttributeStatementType = __union_AttributeStatementType;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__AttributeStatementType(struct soap*, const struct saml2__AttributeStatementType *, const char*, const char*);

inline int soap_write_saml2__AttributeStatementType(struct soap *soap, struct saml2__AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_saml2__AttributeStatementType(soap, p), 0) || soap_put_saml2__AttributeStatementType(soap, p, "saml2:AttributeStatementType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__AttributeStatementType(struct soap *soap, const char *URL, struct saml2__AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_saml2__AttributeStatementType(soap, p), 0) || soap_put_saml2__AttributeStatementType(soap, p, "saml2:AttributeStatementType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_saml2__AttributeStatementType(struct soap *soap, const char *URL, struct saml2__AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_saml2__AttributeStatementType(soap, p), 0) || soap_put_saml2__AttributeStatementType(soap, p, "saml2:AttributeStatementType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__AttributeStatementType * SOAP_FMAC4 soap_get_saml2__AttributeStatementType(struct soap*, struct saml2__AttributeStatementType *, const char*, const char*);

inline int soap_read_saml2__AttributeStatementType(struct soap *soap, struct saml2__AttributeStatementType *p)
{
	if (p)
	{	soap_default_saml2__AttributeStatementType(soap, p);
		if (soap_begin_recv(soap) || soap_get_saml2__AttributeStatementType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__AttributeStatementType(struct soap *soap, const char *URL, struct saml2__AttributeStatementType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_saml2__AttributeStatementType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_saml2__AttributeStatementType(struct soap *soap, struct saml2__AttributeStatementType *p)
{
	if (soap_read_saml2__AttributeStatementType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_saml2__EvidenceType_DEFINED
#define SOAP_TYPE_saml2__EvidenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__EvidenceType(struct soap*, struct saml2__EvidenceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__EvidenceType(struct soap*, const struct saml2__EvidenceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__EvidenceType(struct soap*, const char*, int, const struct saml2__EvidenceType *, const char*);
SOAP_FMAC3 struct saml2__EvidenceType * SOAP_FMAC4 soap_in_saml2__EvidenceType(struct soap*, const char*, struct saml2__EvidenceType *, const char*);
SOAP_FMAC1 struct saml2__EvidenceType * SOAP_FMAC2 soap_instantiate_saml2__EvidenceType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__EvidenceType * soap_new_saml2__EvidenceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__EvidenceType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__EvidenceType * soap_new_req_saml2__EvidenceType(
	struct soap *soap,
	int __size_EvidenceType,
	struct __saml2__union_EvidenceType *__union_EvidenceType)
{
	struct saml2__EvidenceType *_p = soap_new_saml2__EvidenceType(soap);
	if (_p)
	{	soap_default_saml2__EvidenceType(soap, _p);
		_p->__size_EvidenceType = __size_EvidenceType;
		_p->__union_EvidenceType = __union_EvidenceType;
	}
	return _p;
}

inline struct saml2__EvidenceType * soap_new_set_saml2__EvidenceType(
	struct soap *soap,
	int __size_EvidenceType,
	struct __saml2__union_EvidenceType *__union_EvidenceType)
{
	struct saml2__EvidenceType *_p = soap_new_saml2__EvidenceType(soap);
	if (_p)
	{	soap_default_saml2__EvidenceType(soap, _p);
		_p->__size_EvidenceType = __size_EvidenceType;
		_p->__union_EvidenceType = __union_EvidenceType;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__EvidenceType(struct soap*, const struct saml2__EvidenceType *, const char*, const char*);

inline int soap_write_saml2__EvidenceType(struct soap *soap, struct saml2__EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_saml2__EvidenceType(soap, p), 0) || soap_put_saml2__EvidenceType(soap, p, "saml2:EvidenceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__EvidenceType(struct soap *soap, const char *URL, struct saml2__EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_saml2__EvidenceType(soap, p), 0) || soap_put_saml2__EvidenceType(soap, p, "saml2:EvidenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_saml2__EvidenceType(struct soap *soap, const char *URL, struct saml2__EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_saml2__EvidenceType(soap, p), 0) || soap_put_saml2__EvidenceType(soap, p, "saml2:EvidenceType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__EvidenceType * SOAP_FMAC4 soap_get_saml2__EvidenceType(struct soap*, struct saml2__EvidenceType *, const char*, const char*);

inline int soap_read_saml2__EvidenceType(struct soap *soap, struct saml2__EvidenceType *p)
{
	if (p)
	{	soap_default_saml2__EvidenceType(soap, p);
		if (soap_begin_recv(soap) || soap_get_saml2__EvidenceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__EvidenceType(struct soap *soap, const char *URL, struct saml2__EvidenceType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_saml2__EvidenceType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_saml2__EvidenceType(struct soap *soap, struct saml2__EvidenceType *p)
{
	if (soap_read_saml2__EvidenceType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_saml2__ActionType_DEFINED
#define SOAP_TYPE_saml2__ActionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__ActionType(struct soap*, struct saml2__ActionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__ActionType(struct soap*, const struct saml2__ActionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__ActionType(struct soap*, const char*, int, const struct saml2__ActionType *, const char*);
SOAP_FMAC3 struct saml2__ActionType * SOAP_FMAC4 soap_in_saml2__ActionType(struct soap*, const char*, struct saml2__ActionType *, const char*);
SOAP_FMAC1 struct saml2__ActionType * SOAP_FMAC2 soap_instantiate_saml2__ActionType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__ActionType * soap_new_saml2__ActionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__ActionType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__ActionType * soap_new_req_saml2__ActionType(
	struct soap *soap,
	char *Namespace)
{
	struct saml2__ActionType *_p = soap_new_saml2__ActionType(soap);
	if (_p)
	{	soap_default_saml2__ActionType(soap, _p);
		_p->Namespace = Namespace;
	}
	return _p;
}

inline struct saml2__ActionType * soap_new_set_saml2__ActionType(
	struct soap *soap,
	char *__item,
	char *Namespace)
{
	struct saml2__ActionType *_p = soap_new_saml2__ActionType(soap);
	if (_p)
	{	soap_default_saml2__ActionType(soap, _p);
		_p->__item = __item;
		_p->Namespace = Namespace;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__ActionType(struct soap*, const struct saml2__ActionType *, const char*, const char*);

inline int soap_write_saml2__ActionType(struct soap *soap, struct saml2__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_saml2__ActionType(soap, p), 0) || soap_put_saml2__ActionType(soap, p, "saml2:ActionType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__ActionType(struct soap *soap, const char *URL, struct saml2__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_saml2__ActionType(soap, p), 0) || soap_put_saml2__ActionType(soap, p, "saml2:ActionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_saml2__ActionType(struct soap *soap, const char *URL, struct saml2__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_saml2__ActionType(soap, p), 0) || soap_put_saml2__ActionType(soap, p, "saml2:ActionType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__ActionType * SOAP_FMAC4 soap_get_saml2__ActionType(struct soap*, struct saml2__ActionType *, const char*, const char*);

inline int soap_read_saml2__ActionType(struct soap *soap, struct saml2__ActionType *p)
{
	if (p)
	{	soap_default_saml2__ActionType(soap, p);
		if (soap_begin_recv(soap) || soap_get_saml2__ActionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__ActionType(struct soap *soap, const char *URL, struct saml2__ActionType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_saml2__ActionType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_saml2__ActionType(struct soap *soap, struct saml2__ActionType *p)
{
	if (soap_read_saml2__ActionType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_saml2__AuthzDecisionStatementType_DEFINED
#define SOAP_TYPE_saml2__AuthzDecisionStatementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__AuthzDecisionStatementType(struct soap*, struct saml2__AuthzDecisionStatementType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AuthzDecisionStatementType(struct soap*, const struct saml2__AuthzDecisionStatementType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__AuthzDecisionStatementType(struct soap*, const char*, int, const struct saml2__AuthzDecisionStatementType *, const char*);
SOAP_FMAC3 struct saml2__AuthzDecisionStatementType * SOAP_FMAC4 soap_in_saml2__AuthzDecisionStatementType(struct soap*, const char*, struct saml2__AuthzDecisionStatementType *, const char*);
SOAP_FMAC1 struct saml2__AuthzDecisionStatementType * SOAP_FMAC2 soap_instantiate_saml2__AuthzDecisionStatementType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__AuthzDecisionStatementType * soap_new_saml2__AuthzDecisionStatementType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__AuthzDecisionStatementType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__AuthzDecisionStatementType * soap_new_req_saml2__AuthzDecisionStatementType(
	struct soap *soap,
	int __sizeAction,
	struct saml2__ActionType *saml2__Action,
	char *Resource,
	enum saml2__DecisionType Decision)
{
	struct saml2__AuthzDecisionStatementType *_p = soap_new_saml2__AuthzDecisionStatementType(soap);
	if (_p)
	{	soap_default_saml2__AuthzDecisionStatementType(soap, _p);
		_p->__sizeAction = __sizeAction;
		_p->saml2__Action = saml2__Action;
		_p->Resource = Resource;
		_p->Decision = Decision;
	}
	return _p;
}

inline struct saml2__AuthzDecisionStatementType * soap_new_set_saml2__AuthzDecisionStatementType(
	struct soap *soap,
	int __sizeAction,
	struct saml2__ActionType *saml2__Action,
	struct saml2__EvidenceType *saml2__Evidence,
	char *Resource,
	enum saml2__DecisionType Decision)
{
	struct saml2__AuthzDecisionStatementType *_p = soap_new_saml2__AuthzDecisionStatementType(soap);
	if (_p)
	{	soap_default_saml2__AuthzDecisionStatementType(soap, _p);
		_p->__sizeAction = __sizeAction;
		_p->saml2__Action = saml2__Action;
		_p->saml2__Evidence = saml2__Evidence;
		_p->Resource = Resource;
		_p->Decision = Decision;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__AuthzDecisionStatementType(struct soap*, const struct saml2__AuthzDecisionStatementType *, const char*, const char*);

inline int soap_write_saml2__AuthzDecisionStatementType(struct soap *soap, struct saml2__AuthzDecisionStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_saml2__AuthzDecisionStatementType(soap, p), 0) || soap_put_saml2__AuthzDecisionStatementType(soap, p, "saml2:AuthzDecisionStatementType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__AuthzDecisionStatementType(struct soap *soap, const char *URL, struct saml2__AuthzDecisionStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_saml2__AuthzDecisionStatementType(soap, p), 0) || soap_put_saml2__AuthzDecisionStatementType(soap, p, "saml2:AuthzDecisionStatementType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_saml2__AuthzDecisionStatementType(struct soap *soap, const char *URL, struct saml2__AuthzDecisionStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_saml2__AuthzDecisionStatementType(soap, p), 0) || soap_put_saml2__AuthzDecisionStatementType(soap, p, "saml2:AuthzDecisionStatementType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__AuthzDecisionStatementType * SOAP_FMAC4 soap_get_saml2__AuthzDecisionStatementType(struct soap*, struct saml2__AuthzDecisionStatementType *, const char*, const char*);

inline int soap_read_saml2__AuthzDecisionStatementType(struct soap *soap, struct saml2__AuthzDecisionStatementType *p)
{
	if (p)
	{	soap_default_saml2__AuthzDecisionStatementType(soap, p);
		if (soap_begin_recv(soap) || soap_get_saml2__AuthzDecisionStatementType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__AuthzDecisionStatementType(struct soap *soap, const char *URL, struct saml2__AuthzDecisionStatementType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_saml2__AuthzDecisionStatementType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_saml2__AuthzDecisionStatementType(struct soap *soap, struct saml2__AuthzDecisionStatementType *p)
{
	if (soap_read_saml2__AuthzDecisionStatementType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_saml2__AuthnContextType_DEFINED
#define SOAP_TYPE_saml2__AuthnContextType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__AuthnContextType(struct soap*, struct saml2__AuthnContextType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AuthnContextType(struct soap*, const struct saml2__AuthnContextType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__AuthnContextType(struct soap*, const char*, int, const struct saml2__AuthnContextType *, const char*);
SOAP_FMAC3 struct saml2__AuthnContextType * SOAP_FMAC4 soap_in_saml2__AuthnContextType(struct soap*, const char*, struct saml2__AuthnContextType *, const char*);
SOAP_FMAC1 struct saml2__AuthnContextType * SOAP_FMAC2 soap_instantiate_saml2__AuthnContextType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__AuthnContextType * soap_new_saml2__AuthnContextType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__AuthnContextType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__AuthnContextType * soap_new_req_saml2__AuthnContextType(
	struct soap *soap,
	int __sizeAuthenticatingAuthority,
	char **saml2__AuthenticatingAuthority)
{
	struct saml2__AuthnContextType *_p = soap_new_saml2__AuthnContextType(soap);
	if (_p)
	{	soap_default_saml2__AuthnContextType(soap, _p);
		_p->__sizeAuthenticatingAuthority = __sizeAuthenticatingAuthority;
		_p->saml2__AuthenticatingAuthority = saml2__AuthenticatingAuthority;
	}
	return _p;
}

inline struct saml2__AuthnContextType * soap_new_set_saml2__AuthnContextType(
	struct soap *soap,
	char *saml2__AuthnContextClassRef,
	char *saml2__AuthnContextDecl,
	char *saml2__AuthnContextDeclRef,
	int __sizeAuthenticatingAuthority,
	char **saml2__AuthenticatingAuthority)
{
	struct saml2__AuthnContextType *_p = soap_new_saml2__AuthnContextType(soap);
	if (_p)
	{	soap_default_saml2__AuthnContextType(soap, _p);
		_p->saml2__AuthnContextClassRef = saml2__AuthnContextClassRef;
		_p->saml2__AuthnContextDecl = saml2__AuthnContextDecl;
		_p->saml2__AuthnContextDeclRef = saml2__AuthnContextDeclRef;
		_p->__sizeAuthenticatingAuthority = __sizeAuthenticatingAuthority;
		_p->saml2__AuthenticatingAuthority = saml2__AuthenticatingAuthority;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__AuthnContextType(struct soap*, const struct saml2__AuthnContextType *, const char*, const char*);

inline int soap_write_saml2__AuthnContextType(struct soap *soap, struct saml2__AuthnContextType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_saml2__AuthnContextType(soap, p), 0) || soap_put_saml2__AuthnContextType(soap, p, "saml2:AuthnContextType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__AuthnContextType(struct soap *soap, const char *URL, struct saml2__AuthnContextType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_saml2__AuthnContextType(soap, p), 0) || soap_put_saml2__AuthnContextType(soap, p, "saml2:AuthnContextType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_saml2__AuthnContextType(struct soap *soap, const char *URL, struct saml2__AuthnContextType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_saml2__AuthnContextType(soap, p), 0) || soap_put_saml2__AuthnContextType(soap, p, "saml2:AuthnContextType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__AuthnContextType * SOAP_FMAC4 soap_get_saml2__AuthnContextType(struct soap*, struct saml2__AuthnContextType *, const char*, const char*);

inline int soap_read_saml2__AuthnContextType(struct soap *soap, struct saml2__AuthnContextType *p)
{
	if (p)
	{	soap_default_saml2__AuthnContextType(soap, p);
		if (soap_begin_recv(soap) || soap_get_saml2__AuthnContextType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__AuthnContextType(struct soap *soap, const char *URL, struct saml2__AuthnContextType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_saml2__AuthnContextType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_saml2__AuthnContextType(struct soap *soap, struct saml2__AuthnContextType *p)
{
	if (soap_read_saml2__AuthnContextType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_saml2__SubjectLocalityType_DEFINED
#define SOAP_TYPE_saml2__SubjectLocalityType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__SubjectLocalityType(struct soap*, struct saml2__SubjectLocalityType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__SubjectLocalityType(struct soap*, const struct saml2__SubjectLocalityType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__SubjectLocalityType(struct soap*, const char*, int, const struct saml2__SubjectLocalityType *, const char*);
SOAP_FMAC3 struct saml2__SubjectLocalityType * SOAP_FMAC4 soap_in_saml2__SubjectLocalityType(struct soap*, const char*, struct saml2__SubjectLocalityType *, const char*);
SOAP_FMAC1 struct saml2__SubjectLocalityType * SOAP_FMAC2 soap_instantiate_saml2__SubjectLocalityType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__SubjectLocalityType * soap_new_saml2__SubjectLocalityType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__SubjectLocalityType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__SubjectLocalityType * soap_new_req_saml2__SubjectLocalityType(
	struct soap *soap)
{
	struct saml2__SubjectLocalityType *_p = soap_new_saml2__SubjectLocalityType(soap);
	if (_p)
	{	soap_default_saml2__SubjectLocalityType(soap, _p);
	}
	return _p;
}

inline struct saml2__SubjectLocalityType * soap_new_set_saml2__SubjectLocalityType(
	struct soap *soap,
	char *Address,
	char *DNSName)
{
	struct saml2__SubjectLocalityType *_p = soap_new_saml2__SubjectLocalityType(soap);
	if (_p)
	{	soap_default_saml2__SubjectLocalityType(soap, _p);
		_p->Address = Address;
		_p->DNSName = DNSName;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__SubjectLocalityType(struct soap*, const struct saml2__SubjectLocalityType *, const char*, const char*);

inline int soap_write_saml2__SubjectLocalityType(struct soap *soap, struct saml2__SubjectLocalityType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_saml2__SubjectLocalityType(soap, p), 0) || soap_put_saml2__SubjectLocalityType(soap, p, "saml2:SubjectLocalityType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__SubjectLocalityType(struct soap *soap, const char *URL, struct saml2__SubjectLocalityType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_saml2__SubjectLocalityType(soap, p), 0) || soap_put_saml2__SubjectLocalityType(soap, p, "saml2:SubjectLocalityType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_saml2__SubjectLocalityType(struct soap *soap, const char *URL, struct saml2__SubjectLocalityType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_saml2__SubjectLocalityType(soap, p), 0) || soap_put_saml2__SubjectLocalityType(soap, p, "saml2:SubjectLocalityType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__SubjectLocalityType * SOAP_FMAC4 soap_get_saml2__SubjectLocalityType(struct soap*, struct saml2__SubjectLocalityType *, const char*, const char*);

inline int soap_read_saml2__SubjectLocalityType(struct soap *soap, struct saml2__SubjectLocalityType *p)
{
	if (p)
	{	soap_default_saml2__SubjectLocalityType(soap, p);
		if (soap_begin_recv(soap) || soap_get_saml2__SubjectLocalityType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__SubjectLocalityType(struct soap *soap, const char *URL, struct saml2__SubjectLocalityType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_saml2__SubjectLocalityType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_saml2__SubjectLocalityType(struct soap *soap, struct saml2__SubjectLocalityType *p)
{
	if (soap_read_saml2__SubjectLocalityType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_saml2__AuthnStatementType_DEFINED
#define SOAP_TYPE_saml2__AuthnStatementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__AuthnStatementType(struct soap*, struct saml2__AuthnStatementType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AuthnStatementType(struct soap*, const struct saml2__AuthnStatementType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__AuthnStatementType(struct soap*, const char*, int, const struct saml2__AuthnStatementType *, const char*);
SOAP_FMAC3 struct saml2__AuthnStatementType * SOAP_FMAC4 soap_in_saml2__AuthnStatementType(struct soap*, const char*, struct saml2__AuthnStatementType *, const char*);
SOAP_FMAC1 struct saml2__AuthnStatementType * SOAP_FMAC2 soap_instantiate_saml2__AuthnStatementType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__AuthnStatementType * soap_new_saml2__AuthnStatementType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__AuthnStatementType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__AuthnStatementType * soap_new_req_saml2__AuthnStatementType(
	struct soap *soap,
	struct saml2__AuthnContextType *saml2__AuthnContext,
	time_t AuthnInstant)
{
	struct saml2__AuthnStatementType *_p = soap_new_saml2__AuthnStatementType(soap);
	if (_p)
	{	soap_default_saml2__AuthnStatementType(soap, _p);
		_p->saml2__AuthnContext = saml2__AuthnContext;
		_p->AuthnInstant = AuthnInstant;
	}
	return _p;
}

inline struct saml2__AuthnStatementType * soap_new_set_saml2__AuthnStatementType(
	struct soap *soap,
	struct saml2__SubjectLocalityType *saml2__SubjectLocality,
	struct saml2__AuthnContextType *saml2__AuthnContext,
	time_t AuthnInstant,
	char *SessionIndex,
	time_t *SessionNotOnOrAfter)
{
	struct saml2__AuthnStatementType *_p = soap_new_saml2__AuthnStatementType(soap);
	if (_p)
	{	soap_default_saml2__AuthnStatementType(soap, _p);
		_p->saml2__SubjectLocality = saml2__SubjectLocality;
		_p->saml2__AuthnContext = saml2__AuthnContext;
		_p->AuthnInstant = AuthnInstant;
		_p->SessionIndex = SessionIndex;
		_p->SessionNotOnOrAfter = SessionNotOnOrAfter;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__AuthnStatementType(struct soap*, const struct saml2__AuthnStatementType *, const char*, const char*);

inline int soap_write_saml2__AuthnStatementType(struct soap *soap, struct saml2__AuthnStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_saml2__AuthnStatementType(soap, p), 0) || soap_put_saml2__AuthnStatementType(soap, p, "saml2:AuthnStatementType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__AuthnStatementType(struct soap *soap, const char *URL, struct saml2__AuthnStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_saml2__AuthnStatementType(soap, p), 0) || soap_put_saml2__AuthnStatementType(soap, p, "saml2:AuthnStatementType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_saml2__AuthnStatementType(struct soap *soap, const char *URL, struct saml2__AuthnStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_saml2__AuthnStatementType(soap, p), 0) || soap_put_saml2__AuthnStatementType(soap, p, "saml2:AuthnStatementType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__AuthnStatementType * SOAP_FMAC4 soap_get_saml2__AuthnStatementType(struct soap*, struct saml2__AuthnStatementType *, const char*, const char*);

inline int soap_read_saml2__AuthnStatementType(struct soap *soap, struct saml2__AuthnStatementType *p)
{
	if (p)
	{	soap_default_saml2__AuthnStatementType(soap, p);
		if (soap_begin_recv(soap) || soap_get_saml2__AuthnStatementType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__AuthnStatementType(struct soap *soap, const char *URL, struct saml2__AuthnStatementType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_saml2__AuthnStatementType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_saml2__AuthnStatementType(struct soap *soap, struct saml2__AuthnStatementType *p)
{
	if (soap_read_saml2__AuthnStatementType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_saml2__StatementAbstractType_DEFINED
#define SOAP_TYPE_saml2__StatementAbstractType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__StatementAbstractType(struct soap*, struct saml2__StatementAbstractType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__StatementAbstractType(struct soap*, const struct saml2__StatementAbstractType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__StatementAbstractType(struct soap*, const char*, int, const struct saml2__StatementAbstractType *, const char*);
SOAP_FMAC3 struct saml2__StatementAbstractType * SOAP_FMAC4 soap_in_saml2__StatementAbstractType(struct soap*, const char*, struct saml2__StatementAbstractType *, const char*);
SOAP_FMAC1 struct saml2__StatementAbstractType * SOAP_FMAC2 soap_instantiate_saml2__StatementAbstractType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__StatementAbstractType * soap_new_saml2__StatementAbstractType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__StatementAbstractType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__StatementAbstractType * soap_new_req_saml2__StatementAbstractType(
	struct soap *soap)
{
	struct saml2__StatementAbstractType *_p = soap_new_saml2__StatementAbstractType(soap);
	if (_p)
	{	soap_default_saml2__StatementAbstractType(soap, _p);
	}
	return _p;
}

inline struct saml2__StatementAbstractType * soap_new_set_saml2__StatementAbstractType(
	struct soap *soap)
{
	struct saml2__StatementAbstractType *_p = soap_new_saml2__StatementAbstractType(soap);
	if (_p)
	{	soap_default_saml2__StatementAbstractType(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__StatementAbstractType(struct soap*, const struct saml2__StatementAbstractType *, const char*, const char*);

inline int soap_write_saml2__StatementAbstractType(struct soap *soap, struct saml2__StatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_saml2__StatementAbstractType(soap, p), 0) || soap_put_saml2__StatementAbstractType(soap, p, "saml2:StatementAbstractType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__StatementAbstractType(struct soap *soap, const char *URL, struct saml2__StatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_saml2__StatementAbstractType(soap, p), 0) || soap_put_saml2__StatementAbstractType(soap, p, "saml2:StatementAbstractType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_saml2__StatementAbstractType(struct soap *soap, const char *URL, struct saml2__StatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_saml2__StatementAbstractType(soap, p), 0) || soap_put_saml2__StatementAbstractType(soap, p, "saml2:StatementAbstractType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__StatementAbstractType * SOAP_FMAC4 soap_get_saml2__StatementAbstractType(struct soap*, struct saml2__StatementAbstractType *, const char*, const char*);

inline int soap_read_saml2__StatementAbstractType(struct soap *soap, struct saml2__StatementAbstractType *p)
{
	if (p)
	{	soap_default_saml2__StatementAbstractType(soap, p);
		if (soap_begin_recv(soap) || soap_get_saml2__StatementAbstractType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__StatementAbstractType(struct soap *soap, const char *URL, struct saml2__StatementAbstractType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_saml2__StatementAbstractType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_saml2__StatementAbstractType(struct soap *soap, struct saml2__StatementAbstractType *p)
{
	if (soap_read_saml2__StatementAbstractType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_saml2__AdviceType_DEFINED
#define SOAP_TYPE_saml2__AdviceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__AdviceType(struct soap*, struct saml2__AdviceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AdviceType(struct soap*, const struct saml2__AdviceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__AdviceType(struct soap*, const char*, int, const struct saml2__AdviceType *, const char*);
SOAP_FMAC3 struct saml2__AdviceType * SOAP_FMAC4 soap_in_saml2__AdviceType(struct soap*, const char*, struct saml2__AdviceType *, const char*);
SOAP_FMAC1 struct saml2__AdviceType * SOAP_FMAC2 soap_instantiate_saml2__AdviceType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__AdviceType * soap_new_saml2__AdviceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__AdviceType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__AdviceType * soap_new_req_saml2__AdviceType(
	struct soap *soap,
	int __size_AdviceType,
	struct __saml2__union_AdviceType *__union_AdviceType)
{
	struct saml2__AdviceType *_p = soap_new_saml2__AdviceType(soap);
	if (_p)
	{	soap_default_saml2__AdviceType(soap, _p);
		_p->__size_AdviceType = __size_AdviceType;
		_p->__union_AdviceType = __union_AdviceType;
	}
	return _p;
}

inline struct saml2__AdviceType * soap_new_set_saml2__AdviceType(
	struct soap *soap,
	int __size_AdviceType,
	struct __saml2__union_AdviceType *__union_AdviceType)
{
	struct saml2__AdviceType *_p = soap_new_saml2__AdviceType(soap);
	if (_p)
	{	soap_default_saml2__AdviceType(soap, _p);
		_p->__size_AdviceType = __size_AdviceType;
		_p->__union_AdviceType = __union_AdviceType;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__AdviceType(struct soap*, const struct saml2__AdviceType *, const char*, const char*);

inline int soap_write_saml2__AdviceType(struct soap *soap, struct saml2__AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_saml2__AdviceType(soap, p), 0) || soap_put_saml2__AdviceType(soap, p, "saml2:AdviceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__AdviceType(struct soap *soap, const char *URL, struct saml2__AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_saml2__AdviceType(soap, p), 0) || soap_put_saml2__AdviceType(soap, p, "saml2:AdviceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_saml2__AdviceType(struct soap *soap, const char *URL, struct saml2__AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_saml2__AdviceType(soap, p), 0) || soap_put_saml2__AdviceType(soap, p, "saml2:AdviceType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__AdviceType * SOAP_FMAC4 soap_get_saml2__AdviceType(struct soap*, struct saml2__AdviceType *, const char*, const char*);

inline int soap_read_saml2__AdviceType(struct soap *soap, struct saml2__AdviceType *p)
{
	if (p)
	{	soap_default_saml2__AdviceType(soap, p);
		if (soap_begin_recv(soap) || soap_get_saml2__AdviceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__AdviceType(struct soap *soap, const char *URL, struct saml2__AdviceType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_saml2__AdviceType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_saml2__AdviceType(struct soap *soap, struct saml2__AdviceType *p)
{
	if (soap_read_saml2__AdviceType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_saml2__ProxyRestrictionType_DEFINED
#define SOAP_TYPE_saml2__ProxyRestrictionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__ProxyRestrictionType(struct soap*, struct saml2__ProxyRestrictionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__ProxyRestrictionType(struct soap*, const struct saml2__ProxyRestrictionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__ProxyRestrictionType(struct soap*, const char*, int, const struct saml2__ProxyRestrictionType *, const char*);
SOAP_FMAC3 struct saml2__ProxyRestrictionType * SOAP_FMAC4 soap_in_saml2__ProxyRestrictionType(struct soap*, const char*, struct saml2__ProxyRestrictionType *, const char*);
SOAP_FMAC1 struct saml2__ProxyRestrictionType * SOAP_FMAC2 soap_instantiate_saml2__ProxyRestrictionType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__ProxyRestrictionType * soap_new_saml2__ProxyRestrictionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__ProxyRestrictionType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__ProxyRestrictionType * soap_new_req_saml2__ProxyRestrictionType(
	struct soap *soap,
	int __sizeAudience,
	char **saml2__Audience)
{
	struct saml2__ProxyRestrictionType *_p = soap_new_saml2__ProxyRestrictionType(soap);
	if (_p)
	{	soap_default_saml2__ProxyRestrictionType(soap, _p);
		_p->__sizeAudience = __sizeAudience;
		_p->saml2__Audience = saml2__Audience;
	}
	return _p;
}

inline struct saml2__ProxyRestrictionType * soap_new_set_saml2__ProxyRestrictionType(
	struct soap *soap,
	int __sizeAudience,
	char **saml2__Audience,
	char *Count)
{
	struct saml2__ProxyRestrictionType *_p = soap_new_saml2__ProxyRestrictionType(soap);
	if (_p)
	{	soap_default_saml2__ProxyRestrictionType(soap, _p);
		_p->__sizeAudience = __sizeAudience;
		_p->saml2__Audience = saml2__Audience;
		_p->Count = Count;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__ProxyRestrictionType(struct soap*, const struct saml2__ProxyRestrictionType *, const char*, const char*);

inline int soap_write_saml2__ProxyRestrictionType(struct soap *soap, struct saml2__ProxyRestrictionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_saml2__ProxyRestrictionType(soap, p), 0) || soap_put_saml2__ProxyRestrictionType(soap, p, "saml2:ProxyRestrictionType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__ProxyRestrictionType(struct soap *soap, const char *URL, struct saml2__ProxyRestrictionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_saml2__ProxyRestrictionType(soap, p), 0) || soap_put_saml2__ProxyRestrictionType(soap, p, "saml2:ProxyRestrictionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_saml2__ProxyRestrictionType(struct soap *soap, const char *URL, struct saml2__ProxyRestrictionType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_saml2__ProxyRestrictionType(soap, p), 0) || soap_put_saml2__ProxyRestrictionType(soap, p, "saml2:ProxyRestrictionType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__ProxyRestrictionType * SOAP_FMAC4 soap_get_saml2__ProxyRestrictionType(struct soap*, struct saml2__ProxyRestrictionType *, const char*, const char*);

inline int soap_read_saml2__ProxyRestrictionType(struct soap *soap, struct saml2__ProxyRestrictionType *p)
{
	if (p)
	{	soap_default_saml2__ProxyRestrictionType(soap, p);
		if (soap_begin_recv(soap) || soap_get_saml2__ProxyRestrictionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__ProxyRestrictionType(struct soap *soap, const char *URL, struct saml2__ProxyRestrictionType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_saml2__ProxyRestrictionType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_saml2__ProxyRestrictionType(struct soap *soap, struct saml2__ProxyRestrictionType *p)
{
	if (soap_read_saml2__ProxyRestrictionType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_saml2__OneTimeUseType_DEFINED
#define SOAP_TYPE_saml2__OneTimeUseType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__OneTimeUseType(struct soap*, struct saml2__OneTimeUseType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__OneTimeUseType(struct soap*, const struct saml2__OneTimeUseType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__OneTimeUseType(struct soap*, const char*, int, const struct saml2__OneTimeUseType *, const char*);
SOAP_FMAC3 struct saml2__OneTimeUseType * SOAP_FMAC4 soap_in_saml2__OneTimeUseType(struct soap*, const char*, struct saml2__OneTimeUseType *, const char*);
SOAP_FMAC1 struct saml2__OneTimeUseType * SOAP_FMAC2 soap_instantiate_saml2__OneTimeUseType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__OneTimeUseType * soap_new_saml2__OneTimeUseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__OneTimeUseType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__OneTimeUseType * soap_new_req_saml2__OneTimeUseType(
	struct soap *soap)
{
	struct saml2__OneTimeUseType *_p = soap_new_saml2__OneTimeUseType(soap);
	if (_p)
	{	soap_default_saml2__OneTimeUseType(soap, _p);
	}
	return _p;
}

inline struct saml2__OneTimeUseType * soap_new_set_saml2__OneTimeUseType(
	struct soap *soap)
{
	struct saml2__OneTimeUseType *_p = soap_new_saml2__OneTimeUseType(soap);
	if (_p)
	{	soap_default_saml2__OneTimeUseType(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__OneTimeUseType(struct soap*, const struct saml2__OneTimeUseType *, const char*, const char*);

inline int soap_write_saml2__OneTimeUseType(struct soap *soap, struct saml2__OneTimeUseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_saml2__OneTimeUseType(soap, p), 0) || soap_put_saml2__OneTimeUseType(soap, p, "saml2:OneTimeUseType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__OneTimeUseType(struct soap *soap, const char *URL, struct saml2__OneTimeUseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_saml2__OneTimeUseType(soap, p), 0) || soap_put_saml2__OneTimeUseType(soap, p, "saml2:OneTimeUseType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_saml2__OneTimeUseType(struct soap *soap, const char *URL, struct saml2__OneTimeUseType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_saml2__OneTimeUseType(soap, p), 0) || soap_put_saml2__OneTimeUseType(soap, p, "saml2:OneTimeUseType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__OneTimeUseType * SOAP_FMAC4 soap_get_saml2__OneTimeUseType(struct soap*, struct saml2__OneTimeUseType *, const char*, const char*);

inline int soap_read_saml2__OneTimeUseType(struct soap *soap, struct saml2__OneTimeUseType *p)
{
	if (p)
	{	soap_default_saml2__OneTimeUseType(soap, p);
		if (soap_begin_recv(soap) || soap_get_saml2__OneTimeUseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__OneTimeUseType(struct soap *soap, const char *URL, struct saml2__OneTimeUseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_saml2__OneTimeUseType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_saml2__OneTimeUseType(struct soap *soap, struct saml2__OneTimeUseType *p)
{
	if (soap_read_saml2__OneTimeUseType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_saml2__AudienceRestrictionType_DEFINED
#define SOAP_TYPE_saml2__AudienceRestrictionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__AudienceRestrictionType(struct soap*, struct saml2__AudienceRestrictionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AudienceRestrictionType(struct soap*, const struct saml2__AudienceRestrictionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__AudienceRestrictionType(struct soap*, const char*, int, const struct saml2__AudienceRestrictionType *, const char*);
SOAP_FMAC3 struct saml2__AudienceRestrictionType * SOAP_FMAC4 soap_in_saml2__AudienceRestrictionType(struct soap*, const char*, struct saml2__AudienceRestrictionType *, const char*);
SOAP_FMAC1 struct saml2__AudienceRestrictionType * SOAP_FMAC2 soap_instantiate_saml2__AudienceRestrictionType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__AudienceRestrictionType * soap_new_saml2__AudienceRestrictionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__AudienceRestrictionType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__AudienceRestrictionType * soap_new_req_saml2__AudienceRestrictionType(
	struct soap *soap,
	int __sizeAudience,
	char **saml2__Audience)
{
	struct saml2__AudienceRestrictionType *_p = soap_new_saml2__AudienceRestrictionType(soap);
	if (_p)
	{	soap_default_saml2__AudienceRestrictionType(soap, _p);
		_p->__sizeAudience = __sizeAudience;
		_p->saml2__Audience = saml2__Audience;
	}
	return _p;
}

inline struct saml2__AudienceRestrictionType * soap_new_set_saml2__AudienceRestrictionType(
	struct soap *soap,
	int __sizeAudience,
	char **saml2__Audience)
{
	struct saml2__AudienceRestrictionType *_p = soap_new_saml2__AudienceRestrictionType(soap);
	if (_p)
	{	soap_default_saml2__AudienceRestrictionType(soap, _p);
		_p->__sizeAudience = __sizeAudience;
		_p->saml2__Audience = saml2__Audience;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__AudienceRestrictionType(struct soap*, const struct saml2__AudienceRestrictionType *, const char*, const char*);

inline int soap_write_saml2__AudienceRestrictionType(struct soap *soap, struct saml2__AudienceRestrictionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_saml2__AudienceRestrictionType(soap, p), 0) || soap_put_saml2__AudienceRestrictionType(soap, p, "saml2:AudienceRestrictionType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__AudienceRestrictionType(struct soap *soap, const char *URL, struct saml2__AudienceRestrictionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_saml2__AudienceRestrictionType(soap, p), 0) || soap_put_saml2__AudienceRestrictionType(soap, p, "saml2:AudienceRestrictionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_saml2__AudienceRestrictionType(struct soap *soap, const char *URL, struct saml2__AudienceRestrictionType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_saml2__AudienceRestrictionType(soap, p), 0) || soap_put_saml2__AudienceRestrictionType(soap, p, "saml2:AudienceRestrictionType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__AudienceRestrictionType * SOAP_FMAC4 soap_get_saml2__AudienceRestrictionType(struct soap*, struct saml2__AudienceRestrictionType *, const char*, const char*);

inline int soap_read_saml2__AudienceRestrictionType(struct soap *soap, struct saml2__AudienceRestrictionType *p)
{
	if (p)
	{	soap_default_saml2__AudienceRestrictionType(soap, p);
		if (soap_begin_recv(soap) || soap_get_saml2__AudienceRestrictionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__AudienceRestrictionType(struct soap *soap, const char *URL, struct saml2__AudienceRestrictionType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_saml2__AudienceRestrictionType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_saml2__AudienceRestrictionType(struct soap *soap, struct saml2__AudienceRestrictionType *p)
{
	if (soap_read_saml2__AudienceRestrictionType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_saml2__ConditionAbstractType_DEFINED
#define SOAP_TYPE_saml2__ConditionAbstractType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__ConditionAbstractType(struct soap*, struct saml2__ConditionAbstractType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__ConditionAbstractType(struct soap*, const struct saml2__ConditionAbstractType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__ConditionAbstractType(struct soap*, const char*, int, const struct saml2__ConditionAbstractType *, const char*);
SOAP_FMAC3 struct saml2__ConditionAbstractType * SOAP_FMAC4 soap_in_saml2__ConditionAbstractType(struct soap*, const char*, struct saml2__ConditionAbstractType *, const char*);
SOAP_FMAC1 struct saml2__ConditionAbstractType * SOAP_FMAC2 soap_instantiate_saml2__ConditionAbstractType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__ConditionAbstractType * soap_new_saml2__ConditionAbstractType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__ConditionAbstractType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__ConditionAbstractType * soap_new_req_saml2__ConditionAbstractType(
	struct soap *soap)
{
	struct saml2__ConditionAbstractType *_p = soap_new_saml2__ConditionAbstractType(soap);
	if (_p)
	{	soap_default_saml2__ConditionAbstractType(soap, _p);
	}
	return _p;
}

inline struct saml2__ConditionAbstractType * soap_new_set_saml2__ConditionAbstractType(
	struct soap *soap)
{
	struct saml2__ConditionAbstractType *_p = soap_new_saml2__ConditionAbstractType(soap);
	if (_p)
	{	soap_default_saml2__ConditionAbstractType(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__ConditionAbstractType(struct soap*, const struct saml2__ConditionAbstractType *, const char*, const char*);

inline int soap_write_saml2__ConditionAbstractType(struct soap *soap, struct saml2__ConditionAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_saml2__ConditionAbstractType(soap, p), 0) || soap_put_saml2__ConditionAbstractType(soap, p, "saml2:ConditionAbstractType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__ConditionAbstractType(struct soap *soap, const char *URL, struct saml2__ConditionAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_saml2__ConditionAbstractType(soap, p), 0) || soap_put_saml2__ConditionAbstractType(soap, p, "saml2:ConditionAbstractType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_saml2__ConditionAbstractType(struct soap *soap, const char *URL, struct saml2__ConditionAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_saml2__ConditionAbstractType(soap, p), 0) || soap_put_saml2__ConditionAbstractType(soap, p, "saml2:ConditionAbstractType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__ConditionAbstractType * SOAP_FMAC4 soap_get_saml2__ConditionAbstractType(struct soap*, struct saml2__ConditionAbstractType *, const char*, const char*);

inline int soap_read_saml2__ConditionAbstractType(struct soap *soap, struct saml2__ConditionAbstractType *p)
{
	if (p)
	{	soap_default_saml2__ConditionAbstractType(soap, p);
		if (soap_begin_recv(soap) || soap_get_saml2__ConditionAbstractType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__ConditionAbstractType(struct soap *soap, const char *URL, struct saml2__ConditionAbstractType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_saml2__ConditionAbstractType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_saml2__ConditionAbstractType(struct soap *soap, struct saml2__ConditionAbstractType *p)
{
	if (soap_read_saml2__ConditionAbstractType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_saml2__ConditionsType_DEFINED
#define SOAP_TYPE_saml2__ConditionsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__ConditionsType(struct soap*, struct saml2__ConditionsType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__ConditionsType(struct soap*, const struct saml2__ConditionsType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__ConditionsType(struct soap*, const char*, int, const struct saml2__ConditionsType *, const char*);
SOAP_FMAC3 struct saml2__ConditionsType * SOAP_FMAC4 soap_in_saml2__ConditionsType(struct soap*, const char*, struct saml2__ConditionsType *, const char*);
SOAP_FMAC1 struct saml2__ConditionsType * SOAP_FMAC2 soap_instantiate_saml2__ConditionsType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__ConditionsType * soap_new_saml2__ConditionsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__ConditionsType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__ConditionsType * soap_new_req_saml2__ConditionsType(
	struct soap *soap,
	int __size_ConditionsType,
	struct __saml2__union_ConditionsType *__union_ConditionsType)
{
	struct saml2__ConditionsType *_p = soap_new_saml2__ConditionsType(soap);
	if (_p)
	{	soap_default_saml2__ConditionsType(soap, _p);
		_p->__size_ConditionsType = __size_ConditionsType;
		_p->__union_ConditionsType = __union_ConditionsType;
	}
	return _p;
}

inline struct saml2__ConditionsType * soap_new_set_saml2__ConditionsType(
	struct soap *soap,
	int __size_ConditionsType,
	struct __saml2__union_ConditionsType *__union_ConditionsType,
	time_t *NotBefore,
	time_t *NotOnOrAfter)
{
	struct saml2__ConditionsType *_p = soap_new_saml2__ConditionsType(soap);
	if (_p)
	{	soap_default_saml2__ConditionsType(soap, _p);
		_p->__size_ConditionsType = __size_ConditionsType;
		_p->__union_ConditionsType = __union_ConditionsType;
		_p->NotBefore = NotBefore;
		_p->NotOnOrAfter = NotOnOrAfter;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__ConditionsType(struct soap*, const struct saml2__ConditionsType *, const char*, const char*);

inline int soap_write_saml2__ConditionsType(struct soap *soap, struct saml2__ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_saml2__ConditionsType(soap, p), 0) || soap_put_saml2__ConditionsType(soap, p, "saml2:ConditionsType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__ConditionsType(struct soap *soap, const char *URL, struct saml2__ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_saml2__ConditionsType(soap, p), 0) || soap_put_saml2__ConditionsType(soap, p, "saml2:ConditionsType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_saml2__ConditionsType(struct soap *soap, const char *URL, struct saml2__ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_saml2__ConditionsType(soap, p), 0) || soap_put_saml2__ConditionsType(soap, p, "saml2:ConditionsType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__ConditionsType * SOAP_FMAC4 soap_get_saml2__ConditionsType(struct soap*, struct saml2__ConditionsType *, const char*, const char*);

inline int soap_read_saml2__ConditionsType(struct soap *soap, struct saml2__ConditionsType *p)
{
	if (p)
	{	soap_default_saml2__ConditionsType(soap, p);
		if (soap_begin_recv(soap) || soap_get_saml2__ConditionsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__ConditionsType(struct soap *soap, const char *URL, struct saml2__ConditionsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_saml2__ConditionsType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_saml2__ConditionsType(struct soap *soap, struct saml2__ConditionsType *p)
{
	if (soap_read_saml2__ConditionsType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_saml2__KeyInfoConfirmationDataType_DEFINED
#define SOAP_TYPE_saml2__KeyInfoConfirmationDataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__KeyInfoConfirmationDataType(struct soap*, struct saml2__KeyInfoConfirmationDataType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__KeyInfoConfirmationDataType(struct soap*, const struct saml2__KeyInfoConfirmationDataType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__KeyInfoConfirmationDataType(struct soap*, const char*, int, const struct saml2__KeyInfoConfirmationDataType *, const char*);
SOAP_FMAC3 struct saml2__KeyInfoConfirmationDataType * SOAP_FMAC4 soap_in_saml2__KeyInfoConfirmationDataType(struct soap*, const char*, struct saml2__KeyInfoConfirmationDataType *, const char*);
SOAP_FMAC1 struct saml2__KeyInfoConfirmationDataType * SOAP_FMAC2 soap_instantiate_saml2__KeyInfoConfirmationDataType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__KeyInfoConfirmationDataType * soap_new_saml2__KeyInfoConfirmationDataType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__KeyInfoConfirmationDataType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__KeyInfoConfirmationDataType * soap_new_req_saml2__KeyInfoConfirmationDataType(
	struct soap *soap,
	int __sizeds__KeyInfo,
	struct ds__KeyInfoType **ds__KeyInfo)
{
	struct saml2__KeyInfoConfirmationDataType *_p = soap_new_saml2__KeyInfoConfirmationDataType(soap);
	if (_p)
	{	soap_default_saml2__KeyInfoConfirmationDataType(soap, _p);
		_p->__sizeds__KeyInfo = __sizeds__KeyInfo;
		_p->ds__KeyInfo = ds__KeyInfo;
	}
	return _p;
}

inline struct saml2__KeyInfoConfirmationDataType * soap_new_set_saml2__KeyInfoConfirmationDataType(
	struct soap *soap,
	int __sizeds__KeyInfo,
	struct ds__KeyInfoType **ds__KeyInfo)
{
	struct saml2__KeyInfoConfirmationDataType *_p = soap_new_saml2__KeyInfoConfirmationDataType(soap);
	if (_p)
	{	soap_default_saml2__KeyInfoConfirmationDataType(soap, _p);
		_p->__sizeds__KeyInfo = __sizeds__KeyInfo;
		_p->ds__KeyInfo = ds__KeyInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__KeyInfoConfirmationDataType(struct soap*, const struct saml2__KeyInfoConfirmationDataType *, const char*, const char*);

inline int soap_write_saml2__KeyInfoConfirmationDataType(struct soap *soap, struct saml2__KeyInfoConfirmationDataType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_saml2__KeyInfoConfirmationDataType(soap, p), 0) || soap_put_saml2__KeyInfoConfirmationDataType(soap, p, "saml2:KeyInfoConfirmationDataType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__KeyInfoConfirmationDataType(struct soap *soap, const char *URL, struct saml2__KeyInfoConfirmationDataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_saml2__KeyInfoConfirmationDataType(soap, p), 0) || soap_put_saml2__KeyInfoConfirmationDataType(soap, p, "saml2:KeyInfoConfirmationDataType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_saml2__KeyInfoConfirmationDataType(struct soap *soap, const char *URL, struct saml2__KeyInfoConfirmationDataType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_saml2__KeyInfoConfirmationDataType(soap, p), 0) || soap_put_saml2__KeyInfoConfirmationDataType(soap, p, "saml2:KeyInfoConfirmationDataType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__KeyInfoConfirmationDataType * SOAP_FMAC4 soap_get_saml2__KeyInfoConfirmationDataType(struct soap*, struct saml2__KeyInfoConfirmationDataType *, const char*, const char*);

inline int soap_read_saml2__KeyInfoConfirmationDataType(struct soap *soap, struct saml2__KeyInfoConfirmationDataType *p)
{
	if (p)
	{	soap_default_saml2__KeyInfoConfirmationDataType(soap, p);
		if (soap_begin_recv(soap) || soap_get_saml2__KeyInfoConfirmationDataType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__KeyInfoConfirmationDataType(struct soap *soap, const char *URL, struct saml2__KeyInfoConfirmationDataType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_saml2__KeyInfoConfirmationDataType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_saml2__KeyInfoConfirmationDataType(struct soap *soap, struct saml2__KeyInfoConfirmationDataType *p)
{
	if (soap_read_saml2__KeyInfoConfirmationDataType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_saml2__SubjectConfirmationDataType_DEFINED
#define SOAP_TYPE_saml2__SubjectConfirmationDataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__SubjectConfirmationDataType(struct soap*, struct saml2__SubjectConfirmationDataType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__SubjectConfirmationDataType(struct soap*, const struct saml2__SubjectConfirmationDataType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__SubjectConfirmationDataType(struct soap*, const char*, int, const struct saml2__SubjectConfirmationDataType *, const char*);
SOAP_FMAC3 struct saml2__SubjectConfirmationDataType * SOAP_FMAC4 soap_in_saml2__SubjectConfirmationDataType(struct soap*, const char*, struct saml2__SubjectConfirmationDataType *, const char*);
SOAP_FMAC1 struct saml2__SubjectConfirmationDataType * SOAP_FMAC2 soap_instantiate_saml2__SubjectConfirmationDataType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__SubjectConfirmationDataType * soap_new_saml2__SubjectConfirmationDataType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__SubjectConfirmationDataType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__SubjectConfirmationDataType * soap_new_req_saml2__SubjectConfirmationDataType(
	struct soap *soap)
{
	struct saml2__SubjectConfirmationDataType *_p = soap_new_saml2__SubjectConfirmationDataType(soap);
	if (_p)
	{	soap_default_saml2__SubjectConfirmationDataType(soap, _p);
	}
	return _p;
}

inline struct saml2__SubjectConfirmationDataType * soap_new_set_saml2__SubjectConfirmationDataType(
	struct soap *soap,
	time_t *NotBefore,
	time_t *NotOnOrAfter,
	char *Recipient,
	char *InResponseTo,
	char *Address,
	char *__mixed)
{
	struct saml2__SubjectConfirmationDataType *_p = soap_new_saml2__SubjectConfirmationDataType(soap);
	if (_p)
	{	soap_default_saml2__SubjectConfirmationDataType(soap, _p);
		_p->NotBefore = NotBefore;
		_p->NotOnOrAfter = NotOnOrAfter;
		_p->Recipient = Recipient;
		_p->InResponseTo = InResponseTo;
		_p->Address = Address;
		_p->__mixed = __mixed;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__SubjectConfirmationDataType(struct soap*, const struct saml2__SubjectConfirmationDataType *, const char*, const char*);

inline int soap_write_saml2__SubjectConfirmationDataType(struct soap *soap, struct saml2__SubjectConfirmationDataType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_saml2__SubjectConfirmationDataType(soap, p), 0) || soap_put_saml2__SubjectConfirmationDataType(soap, p, "saml2:SubjectConfirmationDataType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__SubjectConfirmationDataType(struct soap *soap, const char *URL, struct saml2__SubjectConfirmationDataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_saml2__SubjectConfirmationDataType(soap, p), 0) || soap_put_saml2__SubjectConfirmationDataType(soap, p, "saml2:SubjectConfirmationDataType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_saml2__SubjectConfirmationDataType(struct soap *soap, const char *URL, struct saml2__SubjectConfirmationDataType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_saml2__SubjectConfirmationDataType(soap, p), 0) || soap_put_saml2__SubjectConfirmationDataType(soap, p, "saml2:SubjectConfirmationDataType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__SubjectConfirmationDataType * SOAP_FMAC4 soap_get_saml2__SubjectConfirmationDataType(struct soap*, struct saml2__SubjectConfirmationDataType *, const char*, const char*);

inline int soap_read_saml2__SubjectConfirmationDataType(struct soap *soap, struct saml2__SubjectConfirmationDataType *p)
{
	if (p)
	{	soap_default_saml2__SubjectConfirmationDataType(soap, p);
		if (soap_begin_recv(soap) || soap_get_saml2__SubjectConfirmationDataType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__SubjectConfirmationDataType(struct soap *soap, const char *URL, struct saml2__SubjectConfirmationDataType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_saml2__SubjectConfirmationDataType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_saml2__SubjectConfirmationDataType(struct soap *soap, struct saml2__SubjectConfirmationDataType *p)
{
	if (soap_read_saml2__SubjectConfirmationDataType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_saml2__SubjectConfirmationType_DEFINED
#define SOAP_TYPE_saml2__SubjectConfirmationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__SubjectConfirmationType(struct soap*, struct saml2__SubjectConfirmationType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__SubjectConfirmationType(struct soap*, const struct saml2__SubjectConfirmationType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__SubjectConfirmationType(struct soap*, const char*, int, const struct saml2__SubjectConfirmationType *, const char*);
SOAP_FMAC3 struct saml2__SubjectConfirmationType * SOAP_FMAC4 soap_in_saml2__SubjectConfirmationType(struct soap*, const char*, struct saml2__SubjectConfirmationType *, const char*);
SOAP_FMAC1 struct saml2__SubjectConfirmationType * SOAP_FMAC2 soap_instantiate_saml2__SubjectConfirmationType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__SubjectConfirmationType * soap_new_saml2__SubjectConfirmationType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__SubjectConfirmationType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__SubjectConfirmationType * soap_new_req_saml2__SubjectConfirmationType(
	struct soap *soap,
	char *Method)
{
	struct saml2__SubjectConfirmationType *_p = soap_new_saml2__SubjectConfirmationType(soap);
	if (_p)
	{	soap_default_saml2__SubjectConfirmationType(soap, _p);
		_p->Method = Method;
	}
	return _p;
}

inline struct saml2__SubjectConfirmationType * soap_new_set_saml2__SubjectConfirmationType(
	struct soap *soap,
	struct saml2__BaseIDAbstractType *saml2__BaseID,
	struct saml2__NameIDType *saml2__NameID,
	struct saml2__EncryptedElementType *saml2__EncryptedID,
	struct saml2__SubjectConfirmationDataType *saml2__SubjectConfirmationData,
	char *Method)
{
	struct saml2__SubjectConfirmationType *_p = soap_new_saml2__SubjectConfirmationType(soap);
	if (_p)
	{	soap_default_saml2__SubjectConfirmationType(soap, _p);
		_p->saml2__BaseID = saml2__BaseID;
		_p->saml2__NameID = saml2__NameID;
		_p->saml2__EncryptedID = saml2__EncryptedID;
		_p->saml2__SubjectConfirmationData = saml2__SubjectConfirmationData;
		_p->Method = Method;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__SubjectConfirmationType(struct soap*, const struct saml2__SubjectConfirmationType *, const char*, const char*);

inline int soap_write_saml2__SubjectConfirmationType(struct soap *soap, struct saml2__SubjectConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_saml2__SubjectConfirmationType(soap, p), 0) || soap_put_saml2__SubjectConfirmationType(soap, p, "saml2:SubjectConfirmationType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__SubjectConfirmationType(struct soap *soap, const char *URL, struct saml2__SubjectConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_saml2__SubjectConfirmationType(soap, p), 0) || soap_put_saml2__SubjectConfirmationType(soap, p, "saml2:SubjectConfirmationType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_saml2__SubjectConfirmationType(struct soap *soap, const char *URL, struct saml2__SubjectConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_saml2__SubjectConfirmationType(soap, p), 0) || soap_put_saml2__SubjectConfirmationType(soap, p, "saml2:SubjectConfirmationType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__SubjectConfirmationType * SOAP_FMAC4 soap_get_saml2__SubjectConfirmationType(struct soap*, struct saml2__SubjectConfirmationType *, const char*, const char*);

inline int soap_read_saml2__SubjectConfirmationType(struct soap *soap, struct saml2__SubjectConfirmationType *p)
{
	if (p)
	{	soap_default_saml2__SubjectConfirmationType(soap, p);
		if (soap_begin_recv(soap) || soap_get_saml2__SubjectConfirmationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__SubjectConfirmationType(struct soap *soap, const char *URL, struct saml2__SubjectConfirmationType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_saml2__SubjectConfirmationType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_saml2__SubjectConfirmationType(struct soap *soap, struct saml2__SubjectConfirmationType *p)
{
	if (soap_read_saml2__SubjectConfirmationType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_saml2__SubjectType_DEFINED
#define SOAP_TYPE_saml2__SubjectType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__SubjectType(struct soap*, struct saml2__SubjectType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__SubjectType(struct soap*, const struct saml2__SubjectType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__SubjectType(struct soap*, const char*, int, const struct saml2__SubjectType *, const char*);
SOAP_FMAC3 struct saml2__SubjectType * SOAP_FMAC4 soap_in_saml2__SubjectType(struct soap*, const char*, struct saml2__SubjectType *, const char*);
SOAP_FMAC1 struct saml2__SubjectType * SOAP_FMAC2 soap_instantiate_saml2__SubjectType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__SubjectType * soap_new_saml2__SubjectType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__SubjectType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__SubjectType * soap_new_req_saml2__SubjectType(
	struct soap *soap,
	int __sizeSubjectConfirmation,
	struct saml2__SubjectConfirmationType *saml2__SubjectConfirmation)
{
	struct saml2__SubjectType *_p = soap_new_saml2__SubjectType(soap);
	if (_p)
	{	soap_default_saml2__SubjectType(soap, _p);
		_p->__sizeSubjectConfirmation = __sizeSubjectConfirmation;
		_p->saml2__SubjectConfirmation = saml2__SubjectConfirmation;
	}
	return _p;
}

inline struct saml2__SubjectType * soap_new_set_saml2__SubjectType(
	struct soap *soap,
	struct saml2__BaseIDAbstractType *saml2__BaseID,
	struct saml2__NameIDType *saml2__NameID,
	struct saml2__EncryptedElementType *saml2__EncryptedID,
	int __sizeSubjectConfirmation,
	struct saml2__SubjectConfirmationType *saml2__SubjectConfirmation)
{
	struct saml2__SubjectType *_p = soap_new_saml2__SubjectType(soap);
	if (_p)
	{	soap_default_saml2__SubjectType(soap, _p);
		_p->saml2__BaseID = saml2__BaseID;
		_p->saml2__NameID = saml2__NameID;
		_p->saml2__EncryptedID = saml2__EncryptedID;
		_p->__sizeSubjectConfirmation = __sizeSubjectConfirmation;
		_p->saml2__SubjectConfirmation = saml2__SubjectConfirmation;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__SubjectType(struct soap*, const struct saml2__SubjectType *, const char*, const char*);

inline int soap_write_saml2__SubjectType(struct soap *soap, struct saml2__SubjectType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_saml2__SubjectType(soap, p), 0) || soap_put_saml2__SubjectType(soap, p, "saml2:SubjectType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__SubjectType(struct soap *soap, const char *URL, struct saml2__SubjectType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_saml2__SubjectType(soap, p), 0) || soap_put_saml2__SubjectType(soap, p, "saml2:SubjectType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_saml2__SubjectType(struct soap *soap, const char *URL, struct saml2__SubjectType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_saml2__SubjectType(soap, p), 0) || soap_put_saml2__SubjectType(soap, p, "saml2:SubjectType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__SubjectType * SOAP_FMAC4 soap_get_saml2__SubjectType(struct soap*, struct saml2__SubjectType *, const char*, const char*);

inline int soap_read_saml2__SubjectType(struct soap *soap, struct saml2__SubjectType *p)
{
	if (p)
	{	soap_default_saml2__SubjectType(soap, p);
		if (soap_begin_recv(soap) || soap_get_saml2__SubjectType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__SubjectType(struct soap *soap, const char *URL, struct saml2__SubjectType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_saml2__SubjectType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_saml2__SubjectType(struct soap *soap, struct saml2__SubjectType *p)
{
	if (soap_read_saml2__SubjectType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_saml2__AssertionType_DEFINED
#define SOAP_TYPE_saml2__AssertionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__AssertionType(struct soap*, struct saml2__AssertionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AssertionType(struct soap*, const struct saml2__AssertionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__AssertionType(struct soap*, const char*, int, const struct saml2__AssertionType *, const char*);
SOAP_FMAC3 struct saml2__AssertionType * SOAP_FMAC4 soap_in_saml2__AssertionType(struct soap*, const char*, struct saml2__AssertionType *, const char*);
SOAP_FMAC1 struct saml2__AssertionType * SOAP_FMAC2 soap_instantiate_saml2__AssertionType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__AssertionType * soap_new_saml2__AssertionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__AssertionType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__AssertionType * soap_new_req_saml2__AssertionType(
	struct soap *soap,
	struct saml2__NameIDType *saml2__Issuer,
	int __size_AssertionType,
	struct __saml2__union_AssertionType *__union_AssertionType,
	char *Version,
	char *ID,
	time_t IssueInstant,
	char *wsu__Id)
{
	struct saml2__AssertionType *_p = soap_new_saml2__AssertionType(soap);
	if (_p)
	{	soap_default_saml2__AssertionType(soap, _p);
		_p->saml2__Issuer = saml2__Issuer;
		_p->__size_AssertionType = __size_AssertionType;
		_p->__union_AssertionType = __union_AssertionType;
		_p->Version = Version;
		_p->ID = ID;
		_p->IssueInstant = IssueInstant;
		_p->wsu__Id = wsu__Id;
	}
	return _p;
}

inline struct saml2__AssertionType * soap_new_set_saml2__AssertionType(
	struct soap *soap,
	struct saml2__NameIDType *saml2__Issuer,
	struct ds__SignatureType *ds__Signature,
	struct saml2__SubjectType *saml2__Subject,
	struct saml2__ConditionsType *saml2__Conditions,
	struct saml2__AdviceType *saml2__Advice,
	int __size_AssertionType,
	struct __saml2__union_AssertionType *__union_AssertionType,
	char *Version,
	char *ID,
	time_t IssueInstant,
	char *wsu__Id)
{
	struct saml2__AssertionType *_p = soap_new_saml2__AssertionType(soap);
	if (_p)
	{	soap_default_saml2__AssertionType(soap, _p);
		_p->saml2__Issuer = saml2__Issuer;
		_p->ds__Signature = ds__Signature;
		_p->saml2__Subject = saml2__Subject;
		_p->saml2__Conditions = saml2__Conditions;
		_p->saml2__Advice = saml2__Advice;
		_p->__size_AssertionType = __size_AssertionType;
		_p->__union_AssertionType = __union_AssertionType;
		_p->Version = Version;
		_p->ID = ID;
		_p->IssueInstant = IssueInstant;
		_p->wsu__Id = wsu__Id;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__AssertionType(struct soap*, const struct saml2__AssertionType *, const char*, const char*);

inline int soap_write_saml2__AssertionType(struct soap *soap, struct saml2__AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_saml2__AssertionType(soap, p), 0) || soap_put_saml2__AssertionType(soap, p, "saml2:AssertionType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__AssertionType(struct soap *soap, const char *URL, struct saml2__AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_saml2__AssertionType(soap, p), 0) || soap_put_saml2__AssertionType(soap, p, "saml2:AssertionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_saml2__AssertionType(struct soap *soap, const char *URL, struct saml2__AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_saml2__AssertionType(soap, p), 0) || soap_put_saml2__AssertionType(soap, p, "saml2:AssertionType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__AssertionType * SOAP_FMAC4 soap_get_saml2__AssertionType(struct soap*, struct saml2__AssertionType *, const char*, const char*);

inline int soap_read_saml2__AssertionType(struct soap *soap, struct saml2__AssertionType *p)
{
	if (p)
	{	soap_default_saml2__AssertionType(soap, p);
		if (soap_begin_recv(soap) || soap_get_saml2__AssertionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__AssertionType(struct soap *soap, const char *URL, struct saml2__AssertionType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_saml2__AssertionType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_saml2__AssertionType(struct soap *soap, struct saml2__AssertionType *p)
{
	if (soap_read_saml2__AssertionType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_saml2__EncryptedElementType_DEFINED
#define SOAP_TYPE_saml2__EncryptedElementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__EncryptedElementType(struct soap*, struct saml2__EncryptedElementType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__EncryptedElementType(struct soap*, const struct saml2__EncryptedElementType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__EncryptedElementType(struct soap*, const char*, int, const struct saml2__EncryptedElementType *, const char*);
SOAP_FMAC3 struct saml2__EncryptedElementType * SOAP_FMAC4 soap_in_saml2__EncryptedElementType(struct soap*, const char*, struct saml2__EncryptedElementType *, const char*);
SOAP_FMAC1 struct saml2__EncryptedElementType * SOAP_FMAC2 soap_instantiate_saml2__EncryptedElementType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__EncryptedElementType * soap_new_saml2__EncryptedElementType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__EncryptedElementType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__EncryptedElementType * soap_new_req_saml2__EncryptedElementType(
	struct soap *soap,
	const struct xenc__EncryptedDataType& xenc__EncryptedData,
	int __sizexenc__EncryptedKey,
	struct xenc__EncryptedKeyType **xenc__EncryptedKey)
{
	struct saml2__EncryptedElementType *_p = soap_new_saml2__EncryptedElementType(soap);
	if (_p)
	{	soap_default_saml2__EncryptedElementType(soap, _p);
		_p->xenc__EncryptedData = xenc__EncryptedData;
		_p->__sizexenc__EncryptedKey = __sizexenc__EncryptedKey;
		_p->xenc__EncryptedKey = xenc__EncryptedKey;
	}
	return _p;
}

inline struct saml2__EncryptedElementType * soap_new_set_saml2__EncryptedElementType(
	struct soap *soap,
	const struct xenc__EncryptedDataType& xenc__EncryptedData,
	int __sizexenc__EncryptedKey,
	struct xenc__EncryptedKeyType **xenc__EncryptedKey)
{
	struct saml2__EncryptedElementType *_p = soap_new_saml2__EncryptedElementType(soap);
	if (_p)
	{	soap_default_saml2__EncryptedElementType(soap, _p);
		_p->xenc__EncryptedData = xenc__EncryptedData;
		_p->__sizexenc__EncryptedKey = __sizexenc__EncryptedKey;
		_p->xenc__EncryptedKey = xenc__EncryptedKey;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__EncryptedElementType(struct soap*, const struct saml2__EncryptedElementType *, const char*, const char*);

inline int soap_write_saml2__EncryptedElementType(struct soap *soap, struct saml2__EncryptedElementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_saml2__EncryptedElementType(soap, p), 0) || soap_put_saml2__EncryptedElementType(soap, p, "saml2:EncryptedElementType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__EncryptedElementType(struct soap *soap, const char *URL, struct saml2__EncryptedElementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_saml2__EncryptedElementType(soap, p), 0) || soap_put_saml2__EncryptedElementType(soap, p, "saml2:EncryptedElementType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_saml2__EncryptedElementType(struct soap *soap, const char *URL, struct saml2__EncryptedElementType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_saml2__EncryptedElementType(soap, p), 0) || soap_put_saml2__EncryptedElementType(soap, p, "saml2:EncryptedElementType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__EncryptedElementType * SOAP_FMAC4 soap_get_saml2__EncryptedElementType(struct soap*, struct saml2__EncryptedElementType *, const char*, const char*);

inline int soap_read_saml2__EncryptedElementType(struct soap *soap, struct saml2__EncryptedElementType *p)
{
	if (p)
	{	soap_default_saml2__EncryptedElementType(soap, p);
		if (soap_begin_recv(soap) || soap_get_saml2__EncryptedElementType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__EncryptedElementType(struct soap *soap, const char *URL, struct saml2__EncryptedElementType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_saml2__EncryptedElementType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_saml2__EncryptedElementType(struct soap *soap, struct saml2__EncryptedElementType *p)
{
	if (soap_read_saml2__EncryptedElementType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_saml2__NameIDType_DEFINED
#define SOAP_TYPE_saml2__NameIDType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__NameIDType(struct soap*, struct saml2__NameIDType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__NameIDType(struct soap*, const struct saml2__NameIDType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__NameIDType(struct soap*, const char*, int, const struct saml2__NameIDType *, const char*);
SOAP_FMAC3 struct saml2__NameIDType * SOAP_FMAC4 soap_in_saml2__NameIDType(struct soap*, const char*, struct saml2__NameIDType *, const char*);
SOAP_FMAC1 struct saml2__NameIDType * SOAP_FMAC2 soap_instantiate_saml2__NameIDType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__NameIDType * soap_new_saml2__NameIDType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__NameIDType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__NameIDType * soap_new_req_saml2__NameIDType(
	struct soap *soap)
{
	struct saml2__NameIDType *_p = soap_new_saml2__NameIDType(soap);
	if (_p)
	{	soap_default_saml2__NameIDType(soap, _p);
	}
	return _p;
}

inline struct saml2__NameIDType * soap_new_set_saml2__NameIDType(
	struct soap *soap,
	char *__item,
	char *Format,
	char *SPProvidedID,
	char *NameQualifier,
	char *SPNameQualifier)
{
	struct saml2__NameIDType *_p = soap_new_saml2__NameIDType(soap);
	if (_p)
	{	soap_default_saml2__NameIDType(soap, _p);
		_p->__item = __item;
		_p->Format = Format;
		_p->SPProvidedID = SPProvidedID;
		_p->NameQualifier = NameQualifier;
		_p->SPNameQualifier = SPNameQualifier;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__NameIDType(struct soap*, const struct saml2__NameIDType *, const char*, const char*);

inline int soap_write_saml2__NameIDType(struct soap *soap, struct saml2__NameIDType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_saml2__NameIDType(soap, p), 0) || soap_put_saml2__NameIDType(soap, p, "saml2:NameIDType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__NameIDType(struct soap *soap, const char *URL, struct saml2__NameIDType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_saml2__NameIDType(soap, p), 0) || soap_put_saml2__NameIDType(soap, p, "saml2:NameIDType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_saml2__NameIDType(struct soap *soap, const char *URL, struct saml2__NameIDType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_saml2__NameIDType(soap, p), 0) || soap_put_saml2__NameIDType(soap, p, "saml2:NameIDType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__NameIDType * SOAP_FMAC4 soap_get_saml2__NameIDType(struct soap*, struct saml2__NameIDType *, const char*, const char*);

inline int soap_read_saml2__NameIDType(struct soap *soap, struct saml2__NameIDType *p)
{
	if (p)
	{	soap_default_saml2__NameIDType(soap, p);
		if (soap_begin_recv(soap) || soap_get_saml2__NameIDType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__NameIDType(struct soap *soap, const char *URL, struct saml2__NameIDType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_saml2__NameIDType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_saml2__NameIDType(struct soap *soap, struct saml2__NameIDType *p)
{
	if (soap_read_saml2__NameIDType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_saml2__BaseIDAbstractType_DEFINED
#define SOAP_TYPE_saml2__BaseIDAbstractType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__BaseIDAbstractType(struct soap*, struct saml2__BaseIDAbstractType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__BaseIDAbstractType(struct soap*, const struct saml2__BaseIDAbstractType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__BaseIDAbstractType(struct soap*, const char*, int, const struct saml2__BaseIDAbstractType *, const char*);
SOAP_FMAC3 struct saml2__BaseIDAbstractType * SOAP_FMAC4 soap_in_saml2__BaseIDAbstractType(struct soap*, const char*, struct saml2__BaseIDAbstractType *, const char*);
SOAP_FMAC1 struct saml2__BaseIDAbstractType * SOAP_FMAC2 soap_instantiate_saml2__BaseIDAbstractType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__BaseIDAbstractType * soap_new_saml2__BaseIDAbstractType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__BaseIDAbstractType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__BaseIDAbstractType * soap_new_req_saml2__BaseIDAbstractType(
	struct soap *soap)
{
	struct saml2__BaseIDAbstractType *_p = soap_new_saml2__BaseIDAbstractType(soap);
	if (_p)
	{	soap_default_saml2__BaseIDAbstractType(soap, _p);
	}
	return _p;
}

inline struct saml2__BaseIDAbstractType * soap_new_set_saml2__BaseIDAbstractType(
	struct soap *soap,
	char *NameQualifier,
	char *SPNameQualifier)
{
	struct saml2__BaseIDAbstractType *_p = soap_new_saml2__BaseIDAbstractType(soap);
	if (_p)
	{	soap_default_saml2__BaseIDAbstractType(soap, _p);
		_p->NameQualifier = NameQualifier;
		_p->SPNameQualifier = SPNameQualifier;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__BaseIDAbstractType(struct soap*, const struct saml2__BaseIDAbstractType *, const char*, const char*);

inline int soap_write_saml2__BaseIDAbstractType(struct soap *soap, struct saml2__BaseIDAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_saml2__BaseIDAbstractType(soap, p), 0) || soap_put_saml2__BaseIDAbstractType(soap, p, "saml2:BaseIDAbstractType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__BaseIDAbstractType(struct soap *soap, const char *URL, struct saml2__BaseIDAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_saml2__BaseIDAbstractType(soap, p), 0) || soap_put_saml2__BaseIDAbstractType(soap, p, "saml2:BaseIDAbstractType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_saml2__BaseIDAbstractType(struct soap *soap, const char *URL, struct saml2__BaseIDAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_saml2__BaseIDAbstractType(soap, p), 0) || soap_put_saml2__BaseIDAbstractType(soap, p, "saml2:BaseIDAbstractType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__BaseIDAbstractType * SOAP_FMAC4 soap_get_saml2__BaseIDAbstractType(struct soap*, struct saml2__BaseIDAbstractType *, const char*, const char*);

inline int soap_read_saml2__BaseIDAbstractType(struct soap *soap, struct saml2__BaseIDAbstractType *p)
{
	if (p)
	{	soap_default_saml2__BaseIDAbstractType(soap, p);
		if (soap_begin_recv(soap) || soap_get_saml2__BaseIDAbstractType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__BaseIDAbstractType(struct soap *soap, const char *URL, struct saml2__BaseIDAbstractType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_saml2__BaseIDAbstractType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_saml2__BaseIDAbstractType(struct soap *soap, struct saml2__BaseIDAbstractType *p)
{
	if (soap_read_saml2__BaseIDAbstractType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___saml1__union_EvidenceType_DEFINED
#define SOAP_TYPE___saml1__union_EvidenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___saml1__union_EvidenceType(struct soap*, struct __saml1__union_EvidenceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___saml1__union_EvidenceType(struct soap*, const struct __saml1__union_EvidenceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___saml1__union_EvidenceType(struct soap*, const char*, int, const struct __saml1__union_EvidenceType *, const char*);
SOAP_FMAC3 struct __saml1__union_EvidenceType * SOAP_FMAC4 soap_in___saml1__union_EvidenceType(struct soap*, const char*, struct __saml1__union_EvidenceType *, const char*);
SOAP_FMAC1 struct __saml1__union_EvidenceType * SOAP_FMAC2 soap_instantiate___saml1__union_EvidenceType(struct soap*, int, const char*, const char*, size_t*);

inline struct __saml1__union_EvidenceType * soap_new___saml1__union_EvidenceType(struct soap *soap, int n = -1)
{
	return soap_instantiate___saml1__union_EvidenceType(soap, n, NULL, NULL, NULL);
}

inline struct __saml1__union_EvidenceType * soap_new_req___saml1__union_EvidenceType(
	struct soap *soap)
{
	struct __saml1__union_EvidenceType *_p = soap_new___saml1__union_EvidenceType(soap);
	if (_p)
	{	soap_default___saml1__union_EvidenceType(soap, _p);
	}
	return _p;
}

inline struct __saml1__union_EvidenceType * soap_new_set___saml1__union_EvidenceType(
	struct soap *soap,
	char *saml1__AssertionIDReference,
	struct saml1__AssertionType *saml1__Assertion)
{
	struct __saml1__union_EvidenceType *_p = soap_new___saml1__union_EvidenceType(soap);
	if (_p)
	{	soap_default___saml1__union_EvidenceType(soap, _p);
		_p->saml1__AssertionIDReference = saml1__AssertionIDReference;
		_p->saml1__Assertion = saml1__Assertion;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___saml1__union_EvidenceType(struct soap*, const struct __saml1__union_EvidenceType *, const char*, const char*);

inline int soap_write___saml1__union_EvidenceType(struct soap *soap, struct __saml1__union_EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___saml1__union_EvidenceType(soap, p), 0) || soap_put___saml1__union_EvidenceType(soap, p, "-saml1:union-EvidenceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___saml1__union_EvidenceType(struct soap *soap, const char *URL, struct __saml1__union_EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___saml1__union_EvidenceType(soap, p), 0) || soap_put___saml1__union_EvidenceType(soap, p, "-saml1:union-EvidenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___saml1__union_EvidenceType(struct soap *soap, const char *URL, struct __saml1__union_EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___saml1__union_EvidenceType(soap, p), 0) || soap_put___saml1__union_EvidenceType(soap, p, "-saml1:union-EvidenceType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __saml1__union_EvidenceType * SOAP_FMAC4 soap_get___saml1__union_EvidenceType(struct soap*, struct __saml1__union_EvidenceType *, const char*, const char*);

inline int soap_read___saml1__union_EvidenceType(struct soap *soap, struct __saml1__union_EvidenceType *p)
{
	if (p)
	{	soap_default___saml1__union_EvidenceType(soap, p);
		if (soap_begin_recv(soap) || soap_get___saml1__union_EvidenceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___saml1__union_EvidenceType(struct soap *soap, const char *URL, struct __saml1__union_EvidenceType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___saml1__union_EvidenceType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___saml1__union_EvidenceType(struct soap *soap, struct __saml1__union_EvidenceType *p)
{
	if (soap_read___saml1__union_EvidenceType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___saml1__union_AdviceType_DEFINED
#define SOAP_TYPE___saml1__union_AdviceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___saml1__union_AdviceType(struct soap*, struct __saml1__union_AdviceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___saml1__union_AdviceType(struct soap*, const struct __saml1__union_AdviceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___saml1__union_AdviceType(struct soap*, const char*, int, const struct __saml1__union_AdviceType *, const char*);
SOAP_FMAC3 struct __saml1__union_AdviceType * SOAP_FMAC4 soap_in___saml1__union_AdviceType(struct soap*, const char*, struct __saml1__union_AdviceType *, const char*);
SOAP_FMAC1 struct __saml1__union_AdviceType * SOAP_FMAC2 soap_instantiate___saml1__union_AdviceType(struct soap*, int, const char*, const char*, size_t*);

inline struct __saml1__union_AdviceType * soap_new___saml1__union_AdviceType(struct soap *soap, int n = -1)
{
	return soap_instantiate___saml1__union_AdviceType(soap, n, NULL, NULL, NULL);
}

inline struct __saml1__union_AdviceType * soap_new_req___saml1__union_AdviceType(
	struct soap *soap)
{
	struct __saml1__union_AdviceType *_p = soap_new___saml1__union_AdviceType(soap);
	if (_p)
	{	soap_default___saml1__union_AdviceType(soap, _p);
	}
	return _p;
}

inline struct __saml1__union_AdviceType * soap_new_set___saml1__union_AdviceType(
	struct soap *soap,
	char *saml1__AssertionIDReference,
	struct saml1__AssertionType *saml1__Assertion)
{
	struct __saml1__union_AdviceType *_p = soap_new___saml1__union_AdviceType(soap);
	if (_p)
	{	soap_default___saml1__union_AdviceType(soap, _p);
		_p->saml1__AssertionIDReference = saml1__AssertionIDReference;
		_p->saml1__Assertion = saml1__Assertion;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___saml1__union_AdviceType(struct soap*, const struct __saml1__union_AdviceType *, const char*, const char*);

inline int soap_write___saml1__union_AdviceType(struct soap *soap, struct __saml1__union_AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___saml1__union_AdviceType(soap, p), 0) || soap_put___saml1__union_AdviceType(soap, p, "-saml1:union-AdviceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___saml1__union_AdviceType(struct soap *soap, const char *URL, struct __saml1__union_AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___saml1__union_AdviceType(soap, p), 0) || soap_put___saml1__union_AdviceType(soap, p, "-saml1:union-AdviceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___saml1__union_AdviceType(struct soap *soap, const char *URL, struct __saml1__union_AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___saml1__union_AdviceType(soap, p), 0) || soap_put___saml1__union_AdviceType(soap, p, "-saml1:union-AdviceType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __saml1__union_AdviceType * SOAP_FMAC4 soap_get___saml1__union_AdviceType(struct soap*, struct __saml1__union_AdviceType *, const char*, const char*);

inline int soap_read___saml1__union_AdviceType(struct soap *soap, struct __saml1__union_AdviceType *p)
{
	if (p)
	{	soap_default___saml1__union_AdviceType(soap, p);
		if (soap_begin_recv(soap) || soap_get___saml1__union_AdviceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___saml1__union_AdviceType(struct soap *soap, const char *URL, struct __saml1__union_AdviceType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___saml1__union_AdviceType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___saml1__union_AdviceType(struct soap *soap, struct __saml1__union_AdviceType *p)
{
	if (soap_read___saml1__union_AdviceType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___saml1__union_ConditionsType_DEFINED
#define SOAP_TYPE___saml1__union_ConditionsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___saml1__union_ConditionsType(struct soap*, struct __saml1__union_ConditionsType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___saml1__union_ConditionsType(struct soap*, const struct __saml1__union_ConditionsType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___saml1__union_ConditionsType(struct soap*, const char*, int, const struct __saml1__union_ConditionsType *, const char*);
SOAP_FMAC3 struct __saml1__union_ConditionsType * SOAP_FMAC4 soap_in___saml1__union_ConditionsType(struct soap*, const char*, struct __saml1__union_ConditionsType *, const char*);
SOAP_FMAC1 struct __saml1__union_ConditionsType * SOAP_FMAC2 soap_instantiate___saml1__union_ConditionsType(struct soap*, int, const char*, const char*, size_t*);

inline struct __saml1__union_ConditionsType * soap_new___saml1__union_ConditionsType(struct soap *soap, int n = -1)
{
	return soap_instantiate___saml1__union_ConditionsType(soap, n, NULL, NULL, NULL);
}

inline struct __saml1__union_ConditionsType * soap_new_req___saml1__union_ConditionsType(
	struct soap *soap)
{
	struct __saml1__union_ConditionsType *_p = soap_new___saml1__union_ConditionsType(soap);
	if (_p)
	{	soap_default___saml1__union_ConditionsType(soap, _p);
	}
	return _p;
}

inline struct __saml1__union_ConditionsType * soap_new_set___saml1__union_ConditionsType(
	struct soap *soap,
	struct saml1__AudienceRestrictionConditionType *saml1__AudienceRestrictionCondition,
	struct saml1__DoNotCacheConditionType *saml1__DoNotCacheCondition,
	struct saml1__ConditionAbstractType *saml1__Condition)
{
	struct __saml1__union_ConditionsType *_p = soap_new___saml1__union_ConditionsType(soap);
	if (_p)
	{	soap_default___saml1__union_ConditionsType(soap, _p);
		_p->saml1__AudienceRestrictionCondition = saml1__AudienceRestrictionCondition;
		_p->saml1__DoNotCacheCondition = saml1__DoNotCacheCondition;
		_p->saml1__Condition = saml1__Condition;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___saml1__union_ConditionsType(struct soap*, const struct __saml1__union_ConditionsType *, const char*, const char*);

inline int soap_write___saml1__union_ConditionsType(struct soap *soap, struct __saml1__union_ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___saml1__union_ConditionsType(soap, p), 0) || soap_put___saml1__union_ConditionsType(soap, p, "-saml1:union-ConditionsType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___saml1__union_ConditionsType(struct soap *soap, const char *URL, struct __saml1__union_ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___saml1__union_ConditionsType(soap, p), 0) || soap_put___saml1__union_ConditionsType(soap, p, "-saml1:union-ConditionsType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___saml1__union_ConditionsType(struct soap *soap, const char *URL, struct __saml1__union_ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___saml1__union_ConditionsType(soap, p), 0) || soap_put___saml1__union_ConditionsType(soap, p, "-saml1:union-ConditionsType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __saml1__union_ConditionsType * SOAP_FMAC4 soap_get___saml1__union_ConditionsType(struct soap*, struct __saml1__union_ConditionsType *, const char*, const char*);

inline int soap_read___saml1__union_ConditionsType(struct soap *soap, struct __saml1__union_ConditionsType *p)
{
	if (p)
	{	soap_default___saml1__union_ConditionsType(soap, p);
		if (soap_begin_recv(soap) || soap_get___saml1__union_ConditionsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___saml1__union_ConditionsType(struct soap *soap, const char *URL, struct __saml1__union_ConditionsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___saml1__union_ConditionsType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___saml1__union_ConditionsType(struct soap *soap, struct __saml1__union_ConditionsType *p)
{
	if (soap_read___saml1__union_ConditionsType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___saml1__union_AssertionType_DEFINED
#define SOAP_TYPE___saml1__union_AssertionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___saml1__union_AssertionType(struct soap*, struct __saml1__union_AssertionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___saml1__union_AssertionType(struct soap*, const struct __saml1__union_AssertionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___saml1__union_AssertionType(struct soap*, const char*, int, const struct __saml1__union_AssertionType *, const char*);
SOAP_FMAC3 struct __saml1__union_AssertionType * SOAP_FMAC4 soap_in___saml1__union_AssertionType(struct soap*, const char*, struct __saml1__union_AssertionType *, const char*);
SOAP_FMAC1 struct __saml1__union_AssertionType * SOAP_FMAC2 soap_instantiate___saml1__union_AssertionType(struct soap*, int, const char*, const char*, size_t*);

inline struct __saml1__union_AssertionType * soap_new___saml1__union_AssertionType(struct soap *soap, int n = -1)
{
	return soap_instantiate___saml1__union_AssertionType(soap, n, NULL, NULL, NULL);
}

inline struct __saml1__union_AssertionType * soap_new_req___saml1__union_AssertionType(
	struct soap *soap)
{
	struct __saml1__union_AssertionType *_p = soap_new___saml1__union_AssertionType(soap);
	if (_p)
	{	soap_default___saml1__union_AssertionType(soap, _p);
	}
	return _p;
}

inline struct __saml1__union_AssertionType * soap_new_set___saml1__union_AssertionType(
	struct soap *soap,
	struct saml1__StatementAbstractType *saml1__Statement,
	struct saml1__SubjectStatementAbstractType *saml1__SubjectStatement,
	struct saml1__AuthenticationStatementType *saml1__AuthenticationStatement,
	struct saml1__AuthorizationDecisionStatementType *saml1__AuthorizationDecisionStatement,
	struct saml1__AttributeStatementType *saml1__AttributeStatement)
{
	struct __saml1__union_AssertionType *_p = soap_new___saml1__union_AssertionType(soap);
	if (_p)
	{	soap_default___saml1__union_AssertionType(soap, _p);
		_p->saml1__Statement = saml1__Statement;
		_p->saml1__SubjectStatement = saml1__SubjectStatement;
		_p->saml1__AuthenticationStatement = saml1__AuthenticationStatement;
		_p->saml1__AuthorizationDecisionStatement = saml1__AuthorizationDecisionStatement;
		_p->saml1__AttributeStatement = saml1__AttributeStatement;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___saml1__union_AssertionType(struct soap*, const struct __saml1__union_AssertionType *, const char*, const char*);

inline int soap_write___saml1__union_AssertionType(struct soap *soap, struct __saml1__union_AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___saml1__union_AssertionType(soap, p), 0) || soap_put___saml1__union_AssertionType(soap, p, "-saml1:union-AssertionType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___saml1__union_AssertionType(struct soap *soap, const char *URL, struct __saml1__union_AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___saml1__union_AssertionType(soap, p), 0) || soap_put___saml1__union_AssertionType(soap, p, "-saml1:union-AssertionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___saml1__union_AssertionType(struct soap *soap, const char *URL, struct __saml1__union_AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___saml1__union_AssertionType(soap, p), 0) || soap_put___saml1__union_AssertionType(soap, p, "-saml1:union-AssertionType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __saml1__union_AssertionType * SOAP_FMAC4 soap_get___saml1__union_AssertionType(struct soap*, struct __saml1__union_AssertionType *, const char*, const char*);

inline int soap_read___saml1__union_AssertionType(struct soap *soap, struct __saml1__union_AssertionType *p)
{
	if (p)
	{	soap_default___saml1__union_AssertionType(soap, p);
		if (soap_begin_recv(soap) || soap_get___saml1__union_AssertionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___saml1__union_AssertionType(struct soap *soap, const char *URL, struct __saml1__union_AssertionType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___saml1__union_AssertionType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___saml1__union_AssertionType(struct soap *soap, struct __saml1__union_AssertionType *p)
{
	if (soap_read___saml1__union_AssertionType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_saml1__AttributeType_DEFINED
#define SOAP_TYPE_saml1__AttributeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__AttributeType(struct soap*, struct saml1__AttributeType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AttributeType(struct soap*, const struct saml1__AttributeType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__AttributeType(struct soap*, const char*, int, const struct saml1__AttributeType *, const char*);
SOAP_FMAC3 struct saml1__AttributeType * SOAP_FMAC4 soap_in_saml1__AttributeType(struct soap*, const char*, struct saml1__AttributeType *, const char*);
SOAP_FMAC1 struct saml1__AttributeType * SOAP_FMAC2 soap_instantiate_saml1__AttributeType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__AttributeType * soap_new_saml1__AttributeType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__AttributeType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__AttributeType * soap_new_req_saml1__AttributeType(
	struct soap *soap,
	char *AttributeName,
	char *AttributeNamespace,
	int __sizeAttributeValue,
	char **saml1__AttributeValue)
{
	struct saml1__AttributeType *_p = soap_new_saml1__AttributeType(soap);
	if (_p)
	{	soap_default_saml1__AttributeType(soap, _p);
		_p->AttributeName = AttributeName;
		_p->AttributeNamespace = AttributeNamespace;
		_p->__sizeAttributeValue = __sizeAttributeValue;
		_p->saml1__AttributeValue = saml1__AttributeValue;
	}
	return _p;
}

inline struct saml1__AttributeType * soap_new_set_saml1__AttributeType(
	struct soap *soap,
	char *AttributeName,
	char *AttributeNamespace,
	int __sizeAttributeValue,
	char **saml1__AttributeValue)
{
	struct saml1__AttributeType *_p = soap_new_saml1__AttributeType(soap);
	if (_p)
	{	soap_default_saml1__AttributeType(soap, _p);
		_p->AttributeName = AttributeName;
		_p->AttributeNamespace = AttributeNamespace;
		_p->__sizeAttributeValue = __sizeAttributeValue;
		_p->saml1__AttributeValue = saml1__AttributeValue;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__AttributeType(struct soap*, const struct saml1__AttributeType *, const char*, const char*);

inline int soap_write_saml1__AttributeType(struct soap *soap, struct saml1__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_saml1__AttributeType(soap, p), 0) || soap_put_saml1__AttributeType(soap, p, "saml1:AttributeType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__AttributeType(struct soap *soap, const char *URL, struct saml1__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_saml1__AttributeType(soap, p), 0) || soap_put_saml1__AttributeType(soap, p, "saml1:AttributeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_saml1__AttributeType(struct soap *soap, const char *URL, struct saml1__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_saml1__AttributeType(soap, p), 0) || soap_put_saml1__AttributeType(soap, p, "saml1:AttributeType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__AttributeType * SOAP_FMAC4 soap_get_saml1__AttributeType(struct soap*, struct saml1__AttributeType *, const char*, const char*);

inline int soap_read_saml1__AttributeType(struct soap *soap, struct saml1__AttributeType *p)
{
	if (p)
	{	soap_default_saml1__AttributeType(soap, p);
		if (soap_begin_recv(soap) || soap_get_saml1__AttributeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__AttributeType(struct soap *soap, const char *URL, struct saml1__AttributeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_saml1__AttributeType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_saml1__AttributeType(struct soap *soap, struct saml1__AttributeType *p)
{
	if (soap_read_saml1__AttributeType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_saml1__AttributeDesignatorType_DEFINED
#define SOAP_TYPE_saml1__AttributeDesignatorType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__AttributeDesignatorType(struct soap*, struct saml1__AttributeDesignatorType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AttributeDesignatorType(struct soap*, const struct saml1__AttributeDesignatorType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__AttributeDesignatorType(struct soap*, const char*, int, const struct saml1__AttributeDesignatorType *, const char*);
SOAP_FMAC3 struct saml1__AttributeDesignatorType * SOAP_FMAC4 soap_in_saml1__AttributeDesignatorType(struct soap*, const char*, struct saml1__AttributeDesignatorType *, const char*);
SOAP_FMAC1 struct saml1__AttributeDesignatorType * SOAP_FMAC2 soap_instantiate_saml1__AttributeDesignatorType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__AttributeDesignatorType * soap_new_saml1__AttributeDesignatorType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__AttributeDesignatorType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__AttributeDesignatorType * soap_new_req_saml1__AttributeDesignatorType(
	struct soap *soap,
	char *AttributeName,
	char *AttributeNamespace)
{
	struct saml1__AttributeDesignatorType *_p = soap_new_saml1__AttributeDesignatorType(soap);
	if (_p)
	{	soap_default_saml1__AttributeDesignatorType(soap, _p);
		_p->AttributeName = AttributeName;
		_p->AttributeNamespace = AttributeNamespace;
	}
	return _p;
}

inline struct saml1__AttributeDesignatorType * soap_new_set_saml1__AttributeDesignatorType(
	struct soap *soap,
	char *AttributeName,
	char *AttributeNamespace)
{
	struct saml1__AttributeDesignatorType *_p = soap_new_saml1__AttributeDesignatorType(soap);
	if (_p)
	{	soap_default_saml1__AttributeDesignatorType(soap, _p);
		_p->AttributeName = AttributeName;
		_p->AttributeNamespace = AttributeNamespace;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__AttributeDesignatorType(struct soap*, const struct saml1__AttributeDesignatorType *, const char*, const char*);

inline int soap_write_saml1__AttributeDesignatorType(struct soap *soap, struct saml1__AttributeDesignatorType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_saml1__AttributeDesignatorType(soap, p), 0) || soap_put_saml1__AttributeDesignatorType(soap, p, "saml1:AttributeDesignatorType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__AttributeDesignatorType(struct soap *soap, const char *URL, struct saml1__AttributeDesignatorType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_saml1__AttributeDesignatorType(soap, p), 0) || soap_put_saml1__AttributeDesignatorType(soap, p, "saml1:AttributeDesignatorType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_saml1__AttributeDesignatorType(struct soap *soap, const char *URL, struct saml1__AttributeDesignatorType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_saml1__AttributeDesignatorType(soap, p), 0) || soap_put_saml1__AttributeDesignatorType(soap, p, "saml1:AttributeDesignatorType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__AttributeDesignatorType * SOAP_FMAC4 soap_get_saml1__AttributeDesignatorType(struct soap*, struct saml1__AttributeDesignatorType *, const char*, const char*);

inline int soap_read_saml1__AttributeDesignatorType(struct soap *soap, struct saml1__AttributeDesignatorType *p)
{
	if (p)
	{	soap_default_saml1__AttributeDesignatorType(soap, p);
		if (soap_begin_recv(soap) || soap_get_saml1__AttributeDesignatorType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__AttributeDesignatorType(struct soap *soap, const char *URL, struct saml1__AttributeDesignatorType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_saml1__AttributeDesignatorType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_saml1__AttributeDesignatorType(struct soap *soap, struct saml1__AttributeDesignatorType *p)
{
	if (soap_read_saml1__AttributeDesignatorType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_saml1__AttributeStatementType_DEFINED
#define SOAP_TYPE_saml1__AttributeStatementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__AttributeStatementType(struct soap*, struct saml1__AttributeStatementType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AttributeStatementType(struct soap*, const struct saml1__AttributeStatementType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__AttributeStatementType(struct soap*, const char*, int, const struct saml1__AttributeStatementType *, const char*);
SOAP_FMAC3 struct saml1__AttributeStatementType * SOAP_FMAC4 soap_in_saml1__AttributeStatementType(struct soap*, const char*, struct saml1__AttributeStatementType *, const char*);
SOAP_FMAC1 struct saml1__AttributeStatementType * SOAP_FMAC2 soap_instantiate_saml1__AttributeStatementType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__AttributeStatementType * soap_new_saml1__AttributeStatementType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__AttributeStatementType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__AttributeStatementType * soap_new_req_saml1__AttributeStatementType(
	struct soap *soap,
	struct saml1__SubjectType *saml1__Subject,
	int __sizeAttribute,
	struct saml1__AttributeType *saml1__Attribute)
{
	struct saml1__AttributeStatementType *_p = soap_new_saml1__AttributeStatementType(soap);
	if (_p)
	{	soap_default_saml1__AttributeStatementType(soap, _p);
		_p->saml1__Subject = saml1__Subject;
		_p->__sizeAttribute = __sizeAttribute;
		_p->saml1__Attribute = saml1__Attribute;
	}
	return _p;
}

inline struct saml1__AttributeStatementType * soap_new_set_saml1__AttributeStatementType(
	struct soap *soap,
	struct saml1__SubjectType *saml1__Subject,
	int __sizeAttribute,
	struct saml1__AttributeType *saml1__Attribute)
{
	struct saml1__AttributeStatementType *_p = soap_new_saml1__AttributeStatementType(soap);
	if (_p)
	{	soap_default_saml1__AttributeStatementType(soap, _p);
		_p->saml1__Subject = saml1__Subject;
		_p->__sizeAttribute = __sizeAttribute;
		_p->saml1__Attribute = saml1__Attribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__AttributeStatementType(struct soap*, const struct saml1__AttributeStatementType *, const char*, const char*);

inline int soap_write_saml1__AttributeStatementType(struct soap *soap, struct saml1__AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_saml1__AttributeStatementType(soap, p), 0) || soap_put_saml1__AttributeStatementType(soap, p, "saml1:AttributeStatementType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__AttributeStatementType(struct soap *soap, const char *URL, struct saml1__AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_saml1__AttributeStatementType(soap, p), 0) || soap_put_saml1__AttributeStatementType(soap, p, "saml1:AttributeStatementType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_saml1__AttributeStatementType(struct soap *soap, const char *URL, struct saml1__AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_saml1__AttributeStatementType(soap, p), 0) || soap_put_saml1__AttributeStatementType(soap, p, "saml1:AttributeStatementType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__AttributeStatementType * SOAP_FMAC4 soap_get_saml1__AttributeStatementType(struct soap*, struct saml1__AttributeStatementType *, const char*, const char*);

inline int soap_read_saml1__AttributeStatementType(struct soap *soap, struct saml1__AttributeStatementType *p)
{
	if (p)
	{	soap_default_saml1__AttributeStatementType(soap, p);
		if (soap_begin_recv(soap) || soap_get_saml1__AttributeStatementType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__AttributeStatementType(struct soap *soap, const char *URL, struct saml1__AttributeStatementType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_saml1__AttributeStatementType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_saml1__AttributeStatementType(struct soap *soap, struct saml1__AttributeStatementType *p)
{
	if (soap_read_saml1__AttributeStatementType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_saml1__EvidenceType_DEFINED
#define SOAP_TYPE_saml1__EvidenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__EvidenceType(struct soap*, struct saml1__EvidenceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__EvidenceType(struct soap*, const struct saml1__EvidenceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__EvidenceType(struct soap*, const char*, int, const struct saml1__EvidenceType *, const char*);
SOAP_FMAC3 struct saml1__EvidenceType * SOAP_FMAC4 soap_in_saml1__EvidenceType(struct soap*, const char*, struct saml1__EvidenceType *, const char*);
SOAP_FMAC1 struct saml1__EvidenceType * SOAP_FMAC2 soap_instantiate_saml1__EvidenceType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__EvidenceType * soap_new_saml1__EvidenceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__EvidenceType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__EvidenceType * soap_new_req_saml1__EvidenceType(
	struct soap *soap,
	int __size_EvidenceType,
	struct __saml1__union_EvidenceType *__union_EvidenceType)
{
	struct saml1__EvidenceType *_p = soap_new_saml1__EvidenceType(soap);
	if (_p)
	{	soap_default_saml1__EvidenceType(soap, _p);
		_p->__size_EvidenceType = __size_EvidenceType;
		_p->__union_EvidenceType = __union_EvidenceType;
	}
	return _p;
}

inline struct saml1__EvidenceType * soap_new_set_saml1__EvidenceType(
	struct soap *soap,
	int __size_EvidenceType,
	struct __saml1__union_EvidenceType *__union_EvidenceType)
{
	struct saml1__EvidenceType *_p = soap_new_saml1__EvidenceType(soap);
	if (_p)
	{	soap_default_saml1__EvidenceType(soap, _p);
		_p->__size_EvidenceType = __size_EvidenceType;
		_p->__union_EvidenceType = __union_EvidenceType;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__EvidenceType(struct soap*, const struct saml1__EvidenceType *, const char*, const char*);

inline int soap_write_saml1__EvidenceType(struct soap *soap, struct saml1__EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_saml1__EvidenceType(soap, p), 0) || soap_put_saml1__EvidenceType(soap, p, "saml1:EvidenceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__EvidenceType(struct soap *soap, const char *URL, struct saml1__EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_saml1__EvidenceType(soap, p), 0) || soap_put_saml1__EvidenceType(soap, p, "saml1:EvidenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_saml1__EvidenceType(struct soap *soap, const char *URL, struct saml1__EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_saml1__EvidenceType(soap, p), 0) || soap_put_saml1__EvidenceType(soap, p, "saml1:EvidenceType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__EvidenceType * SOAP_FMAC4 soap_get_saml1__EvidenceType(struct soap*, struct saml1__EvidenceType *, const char*, const char*);

inline int soap_read_saml1__EvidenceType(struct soap *soap, struct saml1__EvidenceType *p)
{
	if (p)
	{	soap_default_saml1__EvidenceType(soap, p);
		if (soap_begin_recv(soap) || soap_get_saml1__EvidenceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__EvidenceType(struct soap *soap, const char *URL, struct saml1__EvidenceType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_saml1__EvidenceType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_saml1__EvidenceType(struct soap *soap, struct saml1__EvidenceType *p)
{
	if (soap_read_saml1__EvidenceType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_saml1__ActionType_DEFINED
#define SOAP_TYPE_saml1__ActionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__ActionType(struct soap*, struct saml1__ActionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__ActionType(struct soap*, const struct saml1__ActionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__ActionType(struct soap*, const char*, int, const struct saml1__ActionType *, const char*);
SOAP_FMAC3 struct saml1__ActionType * SOAP_FMAC4 soap_in_saml1__ActionType(struct soap*, const char*, struct saml1__ActionType *, const char*);
SOAP_FMAC1 struct saml1__ActionType * SOAP_FMAC2 soap_instantiate_saml1__ActionType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__ActionType * soap_new_saml1__ActionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__ActionType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__ActionType * soap_new_req_saml1__ActionType(
	struct soap *soap)
{
	struct saml1__ActionType *_p = soap_new_saml1__ActionType(soap);
	if (_p)
	{	soap_default_saml1__ActionType(soap, _p);
	}
	return _p;
}

inline struct saml1__ActionType * soap_new_set_saml1__ActionType(
	struct soap *soap,
	char *__item,
	char *Namespace)
{
	struct saml1__ActionType *_p = soap_new_saml1__ActionType(soap);
	if (_p)
	{	soap_default_saml1__ActionType(soap, _p);
		_p->__item = __item;
		_p->Namespace = Namespace;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__ActionType(struct soap*, const struct saml1__ActionType *, const char*, const char*);

inline int soap_write_saml1__ActionType(struct soap *soap, struct saml1__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_saml1__ActionType(soap, p), 0) || soap_put_saml1__ActionType(soap, p, "saml1:ActionType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__ActionType(struct soap *soap, const char *URL, struct saml1__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_saml1__ActionType(soap, p), 0) || soap_put_saml1__ActionType(soap, p, "saml1:ActionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_saml1__ActionType(struct soap *soap, const char *URL, struct saml1__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_saml1__ActionType(soap, p), 0) || soap_put_saml1__ActionType(soap, p, "saml1:ActionType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__ActionType * SOAP_FMAC4 soap_get_saml1__ActionType(struct soap*, struct saml1__ActionType *, const char*, const char*);

inline int soap_read_saml1__ActionType(struct soap *soap, struct saml1__ActionType *p)
{
	if (p)
	{	soap_default_saml1__ActionType(soap, p);
		if (soap_begin_recv(soap) || soap_get_saml1__ActionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__ActionType(struct soap *soap, const char *URL, struct saml1__ActionType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_saml1__ActionType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_saml1__ActionType(struct soap *soap, struct saml1__ActionType *p)
{
	if (soap_read_saml1__ActionType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_saml1__AuthorizationDecisionStatementType_DEFINED
#define SOAP_TYPE_saml1__AuthorizationDecisionStatementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__AuthorizationDecisionStatementType(struct soap*, struct saml1__AuthorizationDecisionStatementType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AuthorizationDecisionStatementType(struct soap*, const struct saml1__AuthorizationDecisionStatementType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__AuthorizationDecisionStatementType(struct soap*, const char*, int, const struct saml1__AuthorizationDecisionStatementType *, const char*);
SOAP_FMAC3 struct saml1__AuthorizationDecisionStatementType * SOAP_FMAC4 soap_in_saml1__AuthorizationDecisionStatementType(struct soap*, const char*, struct saml1__AuthorizationDecisionStatementType *, const char*);
SOAP_FMAC1 struct saml1__AuthorizationDecisionStatementType * SOAP_FMAC2 soap_instantiate_saml1__AuthorizationDecisionStatementType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__AuthorizationDecisionStatementType * soap_new_saml1__AuthorizationDecisionStatementType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__AuthorizationDecisionStatementType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__AuthorizationDecisionStatementType * soap_new_req_saml1__AuthorizationDecisionStatementType(
	struct soap *soap,
	struct saml1__SubjectType *saml1__Subject,
	int __sizeAction,
	struct saml1__ActionType *saml1__Action,
	char *Resource,
	enum saml1__DecisionType Decision)
{
	struct saml1__AuthorizationDecisionStatementType *_p = soap_new_saml1__AuthorizationDecisionStatementType(soap);
	if (_p)
	{	soap_default_saml1__AuthorizationDecisionStatementType(soap, _p);
		_p->saml1__Subject = saml1__Subject;
		_p->__sizeAction = __sizeAction;
		_p->saml1__Action = saml1__Action;
		_p->Resource = Resource;
		_p->Decision = Decision;
	}
	return _p;
}

inline struct saml1__AuthorizationDecisionStatementType * soap_new_set_saml1__AuthorizationDecisionStatementType(
	struct soap *soap,
	struct saml1__SubjectType *saml1__Subject,
	int __sizeAction,
	struct saml1__ActionType *saml1__Action,
	struct saml1__EvidenceType *saml1__Evidence,
	char *Resource,
	enum saml1__DecisionType Decision)
{
	struct saml1__AuthorizationDecisionStatementType *_p = soap_new_saml1__AuthorizationDecisionStatementType(soap);
	if (_p)
	{	soap_default_saml1__AuthorizationDecisionStatementType(soap, _p);
		_p->saml1__Subject = saml1__Subject;
		_p->__sizeAction = __sizeAction;
		_p->saml1__Action = saml1__Action;
		_p->saml1__Evidence = saml1__Evidence;
		_p->Resource = Resource;
		_p->Decision = Decision;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__AuthorizationDecisionStatementType(struct soap*, const struct saml1__AuthorizationDecisionStatementType *, const char*, const char*);

inline int soap_write_saml1__AuthorizationDecisionStatementType(struct soap *soap, struct saml1__AuthorizationDecisionStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_saml1__AuthorizationDecisionStatementType(soap, p), 0) || soap_put_saml1__AuthorizationDecisionStatementType(soap, p, "saml1:AuthorizationDecisionStatementType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__AuthorizationDecisionStatementType(struct soap *soap, const char *URL, struct saml1__AuthorizationDecisionStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_saml1__AuthorizationDecisionStatementType(soap, p), 0) || soap_put_saml1__AuthorizationDecisionStatementType(soap, p, "saml1:AuthorizationDecisionStatementType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_saml1__AuthorizationDecisionStatementType(struct soap *soap, const char *URL, struct saml1__AuthorizationDecisionStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_saml1__AuthorizationDecisionStatementType(soap, p), 0) || soap_put_saml1__AuthorizationDecisionStatementType(soap, p, "saml1:AuthorizationDecisionStatementType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__AuthorizationDecisionStatementType * SOAP_FMAC4 soap_get_saml1__AuthorizationDecisionStatementType(struct soap*, struct saml1__AuthorizationDecisionStatementType *, const char*, const char*);

inline int soap_read_saml1__AuthorizationDecisionStatementType(struct soap *soap, struct saml1__AuthorizationDecisionStatementType *p)
{
	if (p)
	{	soap_default_saml1__AuthorizationDecisionStatementType(soap, p);
		if (soap_begin_recv(soap) || soap_get_saml1__AuthorizationDecisionStatementType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__AuthorizationDecisionStatementType(struct soap *soap, const char *URL, struct saml1__AuthorizationDecisionStatementType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_saml1__AuthorizationDecisionStatementType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_saml1__AuthorizationDecisionStatementType(struct soap *soap, struct saml1__AuthorizationDecisionStatementType *p)
{
	if (soap_read_saml1__AuthorizationDecisionStatementType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_saml1__AuthorityBindingType_DEFINED
#define SOAP_TYPE_saml1__AuthorityBindingType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__AuthorityBindingType(struct soap*, struct saml1__AuthorityBindingType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AuthorityBindingType(struct soap*, const struct saml1__AuthorityBindingType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__AuthorityBindingType(struct soap*, const char*, int, const struct saml1__AuthorityBindingType *, const char*);
SOAP_FMAC3 struct saml1__AuthorityBindingType * SOAP_FMAC4 soap_in_saml1__AuthorityBindingType(struct soap*, const char*, struct saml1__AuthorityBindingType *, const char*);
SOAP_FMAC1 struct saml1__AuthorityBindingType * SOAP_FMAC2 soap_instantiate_saml1__AuthorityBindingType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__AuthorityBindingType * soap_new_saml1__AuthorityBindingType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__AuthorityBindingType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__AuthorityBindingType * soap_new_req_saml1__AuthorityBindingType(
	struct soap *soap,
	char *AuthorityKind,
	char *Location,
	char *Binding)
{
	struct saml1__AuthorityBindingType *_p = soap_new_saml1__AuthorityBindingType(soap);
	if (_p)
	{	soap_default_saml1__AuthorityBindingType(soap, _p);
		_p->AuthorityKind = AuthorityKind;
		_p->Location = Location;
		_p->Binding = Binding;
	}
	return _p;
}

inline struct saml1__AuthorityBindingType * soap_new_set_saml1__AuthorityBindingType(
	struct soap *soap,
	char *AuthorityKind,
	char *Location,
	char *Binding)
{
	struct saml1__AuthorityBindingType *_p = soap_new_saml1__AuthorityBindingType(soap);
	if (_p)
	{	soap_default_saml1__AuthorityBindingType(soap, _p);
		_p->AuthorityKind = AuthorityKind;
		_p->Location = Location;
		_p->Binding = Binding;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__AuthorityBindingType(struct soap*, const struct saml1__AuthorityBindingType *, const char*, const char*);

inline int soap_write_saml1__AuthorityBindingType(struct soap *soap, struct saml1__AuthorityBindingType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_saml1__AuthorityBindingType(soap, p), 0) || soap_put_saml1__AuthorityBindingType(soap, p, "saml1:AuthorityBindingType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__AuthorityBindingType(struct soap *soap, const char *URL, struct saml1__AuthorityBindingType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_saml1__AuthorityBindingType(soap, p), 0) || soap_put_saml1__AuthorityBindingType(soap, p, "saml1:AuthorityBindingType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_saml1__AuthorityBindingType(struct soap *soap, const char *URL, struct saml1__AuthorityBindingType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_saml1__AuthorityBindingType(soap, p), 0) || soap_put_saml1__AuthorityBindingType(soap, p, "saml1:AuthorityBindingType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__AuthorityBindingType * SOAP_FMAC4 soap_get_saml1__AuthorityBindingType(struct soap*, struct saml1__AuthorityBindingType *, const char*, const char*);

inline int soap_read_saml1__AuthorityBindingType(struct soap *soap, struct saml1__AuthorityBindingType *p)
{
	if (p)
	{	soap_default_saml1__AuthorityBindingType(soap, p);
		if (soap_begin_recv(soap) || soap_get_saml1__AuthorityBindingType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__AuthorityBindingType(struct soap *soap, const char *URL, struct saml1__AuthorityBindingType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_saml1__AuthorityBindingType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_saml1__AuthorityBindingType(struct soap *soap, struct saml1__AuthorityBindingType *p)
{
	if (soap_read_saml1__AuthorityBindingType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_saml1__SubjectLocalityType_DEFINED
#define SOAP_TYPE_saml1__SubjectLocalityType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__SubjectLocalityType(struct soap*, struct saml1__SubjectLocalityType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__SubjectLocalityType(struct soap*, const struct saml1__SubjectLocalityType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__SubjectLocalityType(struct soap*, const char*, int, const struct saml1__SubjectLocalityType *, const char*);
SOAP_FMAC3 struct saml1__SubjectLocalityType * SOAP_FMAC4 soap_in_saml1__SubjectLocalityType(struct soap*, const char*, struct saml1__SubjectLocalityType *, const char*);
SOAP_FMAC1 struct saml1__SubjectLocalityType * SOAP_FMAC2 soap_instantiate_saml1__SubjectLocalityType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__SubjectLocalityType * soap_new_saml1__SubjectLocalityType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__SubjectLocalityType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__SubjectLocalityType * soap_new_req_saml1__SubjectLocalityType(
	struct soap *soap)
{
	struct saml1__SubjectLocalityType *_p = soap_new_saml1__SubjectLocalityType(soap);
	if (_p)
	{	soap_default_saml1__SubjectLocalityType(soap, _p);
	}
	return _p;
}

inline struct saml1__SubjectLocalityType * soap_new_set_saml1__SubjectLocalityType(
	struct soap *soap,
	char *IPAddress,
	char *DNSAddress)
{
	struct saml1__SubjectLocalityType *_p = soap_new_saml1__SubjectLocalityType(soap);
	if (_p)
	{	soap_default_saml1__SubjectLocalityType(soap, _p);
		_p->IPAddress = IPAddress;
		_p->DNSAddress = DNSAddress;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__SubjectLocalityType(struct soap*, const struct saml1__SubjectLocalityType *, const char*, const char*);

inline int soap_write_saml1__SubjectLocalityType(struct soap *soap, struct saml1__SubjectLocalityType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_saml1__SubjectLocalityType(soap, p), 0) || soap_put_saml1__SubjectLocalityType(soap, p, "saml1:SubjectLocalityType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__SubjectLocalityType(struct soap *soap, const char *URL, struct saml1__SubjectLocalityType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_saml1__SubjectLocalityType(soap, p), 0) || soap_put_saml1__SubjectLocalityType(soap, p, "saml1:SubjectLocalityType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_saml1__SubjectLocalityType(struct soap *soap, const char *URL, struct saml1__SubjectLocalityType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_saml1__SubjectLocalityType(soap, p), 0) || soap_put_saml1__SubjectLocalityType(soap, p, "saml1:SubjectLocalityType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__SubjectLocalityType * SOAP_FMAC4 soap_get_saml1__SubjectLocalityType(struct soap*, struct saml1__SubjectLocalityType *, const char*, const char*);

inline int soap_read_saml1__SubjectLocalityType(struct soap *soap, struct saml1__SubjectLocalityType *p)
{
	if (p)
	{	soap_default_saml1__SubjectLocalityType(soap, p);
		if (soap_begin_recv(soap) || soap_get_saml1__SubjectLocalityType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__SubjectLocalityType(struct soap *soap, const char *URL, struct saml1__SubjectLocalityType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_saml1__SubjectLocalityType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_saml1__SubjectLocalityType(struct soap *soap, struct saml1__SubjectLocalityType *p)
{
	if (soap_read_saml1__SubjectLocalityType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_saml1__AuthenticationStatementType_DEFINED
#define SOAP_TYPE_saml1__AuthenticationStatementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__AuthenticationStatementType(struct soap*, struct saml1__AuthenticationStatementType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AuthenticationStatementType(struct soap*, const struct saml1__AuthenticationStatementType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__AuthenticationStatementType(struct soap*, const char*, int, const struct saml1__AuthenticationStatementType *, const char*);
SOAP_FMAC3 struct saml1__AuthenticationStatementType * SOAP_FMAC4 soap_in_saml1__AuthenticationStatementType(struct soap*, const char*, struct saml1__AuthenticationStatementType *, const char*);
SOAP_FMAC1 struct saml1__AuthenticationStatementType * SOAP_FMAC2 soap_instantiate_saml1__AuthenticationStatementType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__AuthenticationStatementType * soap_new_saml1__AuthenticationStatementType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__AuthenticationStatementType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__AuthenticationStatementType * soap_new_req_saml1__AuthenticationStatementType(
	struct soap *soap,
	struct saml1__SubjectType *saml1__Subject,
	int __sizeAuthorityBinding,
	struct saml1__AuthorityBindingType *saml1__AuthorityBinding,
	char *AuthenticationMethod,
	time_t AuthenticationInstant)
{
	struct saml1__AuthenticationStatementType *_p = soap_new_saml1__AuthenticationStatementType(soap);
	if (_p)
	{	soap_default_saml1__AuthenticationStatementType(soap, _p);
		_p->saml1__Subject = saml1__Subject;
		_p->__sizeAuthorityBinding = __sizeAuthorityBinding;
		_p->saml1__AuthorityBinding = saml1__AuthorityBinding;
		_p->AuthenticationMethod = AuthenticationMethod;
		_p->AuthenticationInstant = AuthenticationInstant;
	}
	return _p;
}

inline struct saml1__AuthenticationStatementType * soap_new_set_saml1__AuthenticationStatementType(
	struct soap *soap,
	struct saml1__SubjectType *saml1__Subject,
	struct saml1__SubjectLocalityType *saml1__SubjectLocality,
	int __sizeAuthorityBinding,
	struct saml1__AuthorityBindingType *saml1__AuthorityBinding,
	char *AuthenticationMethod,
	time_t AuthenticationInstant)
{
	struct saml1__AuthenticationStatementType *_p = soap_new_saml1__AuthenticationStatementType(soap);
	if (_p)
	{	soap_default_saml1__AuthenticationStatementType(soap, _p);
		_p->saml1__Subject = saml1__Subject;
		_p->saml1__SubjectLocality = saml1__SubjectLocality;
		_p->__sizeAuthorityBinding = __sizeAuthorityBinding;
		_p->saml1__AuthorityBinding = saml1__AuthorityBinding;
		_p->AuthenticationMethod = AuthenticationMethod;
		_p->AuthenticationInstant = AuthenticationInstant;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__AuthenticationStatementType(struct soap*, const struct saml1__AuthenticationStatementType *, const char*, const char*);

inline int soap_write_saml1__AuthenticationStatementType(struct soap *soap, struct saml1__AuthenticationStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_saml1__AuthenticationStatementType(soap, p), 0) || soap_put_saml1__AuthenticationStatementType(soap, p, "saml1:AuthenticationStatementType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__AuthenticationStatementType(struct soap *soap, const char *URL, struct saml1__AuthenticationStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_saml1__AuthenticationStatementType(soap, p), 0) || soap_put_saml1__AuthenticationStatementType(soap, p, "saml1:AuthenticationStatementType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_saml1__AuthenticationStatementType(struct soap *soap, const char *URL, struct saml1__AuthenticationStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_saml1__AuthenticationStatementType(soap, p), 0) || soap_put_saml1__AuthenticationStatementType(soap, p, "saml1:AuthenticationStatementType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__AuthenticationStatementType * SOAP_FMAC4 soap_get_saml1__AuthenticationStatementType(struct soap*, struct saml1__AuthenticationStatementType *, const char*, const char*);

inline int soap_read_saml1__AuthenticationStatementType(struct soap *soap, struct saml1__AuthenticationStatementType *p)
{
	if (p)
	{	soap_default_saml1__AuthenticationStatementType(soap, p);
		if (soap_begin_recv(soap) || soap_get_saml1__AuthenticationStatementType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__AuthenticationStatementType(struct soap *soap, const char *URL, struct saml1__AuthenticationStatementType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_saml1__AuthenticationStatementType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_saml1__AuthenticationStatementType(struct soap *soap, struct saml1__AuthenticationStatementType *p)
{
	if (soap_read_saml1__AuthenticationStatementType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_saml1__SubjectConfirmationType_DEFINED
#define SOAP_TYPE_saml1__SubjectConfirmationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__SubjectConfirmationType(struct soap*, struct saml1__SubjectConfirmationType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__SubjectConfirmationType(struct soap*, const struct saml1__SubjectConfirmationType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__SubjectConfirmationType(struct soap*, const char*, int, const struct saml1__SubjectConfirmationType *, const char*);
SOAP_FMAC3 struct saml1__SubjectConfirmationType * SOAP_FMAC4 soap_in_saml1__SubjectConfirmationType(struct soap*, const char*, struct saml1__SubjectConfirmationType *, const char*);
SOAP_FMAC1 struct saml1__SubjectConfirmationType * SOAP_FMAC2 soap_instantiate_saml1__SubjectConfirmationType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__SubjectConfirmationType * soap_new_saml1__SubjectConfirmationType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__SubjectConfirmationType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__SubjectConfirmationType * soap_new_req_saml1__SubjectConfirmationType(
	struct soap *soap,
	int __sizeConfirmationMethod,
	char **saml1__ConfirmationMethod)
{
	struct saml1__SubjectConfirmationType *_p = soap_new_saml1__SubjectConfirmationType(soap);
	if (_p)
	{	soap_default_saml1__SubjectConfirmationType(soap, _p);
		_p->__sizeConfirmationMethod = __sizeConfirmationMethod;
		_p->saml1__ConfirmationMethod = saml1__ConfirmationMethod;
	}
	return _p;
}

inline struct saml1__SubjectConfirmationType * soap_new_set_saml1__SubjectConfirmationType(
	struct soap *soap,
	int __sizeConfirmationMethod,
	char **saml1__ConfirmationMethod,
	char *saml1__SubjectConfirmationData,
	struct ds__KeyInfoType *ds__KeyInfo)
{
	struct saml1__SubjectConfirmationType *_p = soap_new_saml1__SubjectConfirmationType(soap);
	if (_p)
	{	soap_default_saml1__SubjectConfirmationType(soap, _p);
		_p->__sizeConfirmationMethod = __sizeConfirmationMethod;
		_p->saml1__ConfirmationMethod = saml1__ConfirmationMethod;
		_p->saml1__SubjectConfirmationData = saml1__SubjectConfirmationData;
		_p->ds__KeyInfo = ds__KeyInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__SubjectConfirmationType(struct soap*, const struct saml1__SubjectConfirmationType *, const char*, const char*);

inline int soap_write_saml1__SubjectConfirmationType(struct soap *soap, struct saml1__SubjectConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_saml1__SubjectConfirmationType(soap, p), 0) || soap_put_saml1__SubjectConfirmationType(soap, p, "saml1:SubjectConfirmationType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__SubjectConfirmationType(struct soap *soap, const char *URL, struct saml1__SubjectConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_saml1__SubjectConfirmationType(soap, p), 0) || soap_put_saml1__SubjectConfirmationType(soap, p, "saml1:SubjectConfirmationType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_saml1__SubjectConfirmationType(struct soap *soap, const char *URL, struct saml1__SubjectConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_saml1__SubjectConfirmationType(soap, p), 0) || soap_put_saml1__SubjectConfirmationType(soap, p, "saml1:SubjectConfirmationType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__SubjectConfirmationType * SOAP_FMAC4 soap_get_saml1__SubjectConfirmationType(struct soap*, struct saml1__SubjectConfirmationType *, const char*, const char*);

inline int soap_read_saml1__SubjectConfirmationType(struct soap *soap, struct saml1__SubjectConfirmationType *p)
{
	if (p)
	{	soap_default_saml1__SubjectConfirmationType(soap, p);
		if (soap_begin_recv(soap) || soap_get_saml1__SubjectConfirmationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__SubjectConfirmationType(struct soap *soap, const char *URL, struct saml1__SubjectConfirmationType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_saml1__SubjectConfirmationType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_saml1__SubjectConfirmationType(struct soap *soap, struct saml1__SubjectConfirmationType *p)
{
	if (soap_read_saml1__SubjectConfirmationType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_saml1__NameIdentifierType_DEFINED
#define SOAP_TYPE_saml1__NameIdentifierType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__NameIdentifierType(struct soap*, struct saml1__NameIdentifierType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__NameIdentifierType(struct soap*, const struct saml1__NameIdentifierType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__NameIdentifierType(struct soap*, const char*, int, const struct saml1__NameIdentifierType *, const char*);
SOAP_FMAC3 struct saml1__NameIdentifierType * SOAP_FMAC4 soap_in_saml1__NameIdentifierType(struct soap*, const char*, struct saml1__NameIdentifierType *, const char*);
SOAP_FMAC1 struct saml1__NameIdentifierType * SOAP_FMAC2 soap_instantiate_saml1__NameIdentifierType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__NameIdentifierType * soap_new_saml1__NameIdentifierType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__NameIdentifierType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__NameIdentifierType * soap_new_req_saml1__NameIdentifierType(
	struct soap *soap)
{
	struct saml1__NameIdentifierType *_p = soap_new_saml1__NameIdentifierType(soap);
	if (_p)
	{	soap_default_saml1__NameIdentifierType(soap, _p);
	}
	return _p;
}

inline struct saml1__NameIdentifierType * soap_new_set_saml1__NameIdentifierType(
	struct soap *soap,
	char *__item,
	char *NameQualifier,
	char *Format)
{
	struct saml1__NameIdentifierType *_p = soap_new_saml1__NameIdentifierType(soap);
	if (_p)
	{	soap_default_saml1__NameIdentifierType(soap, _p);
		_p->__item = __item;
		_p->NameQualifier = NameQualifier;
		_p->Format = Format;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__NameIdentifierType(struct soap*, const struct saml1__NameIdentifierType *, const char*, const char*);

inline int soap_write_saml1__NameIdentifierType(struct soap *soap, struct saml1__NameIdentifierType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_saml1__NameIdentifierType(soap, p), 0) || soap_put_saml1__NameIdentifierType(soap, p, "saml1:NameIdentifierType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__NameIdentifierType(struct soap *soap, const char *URL, struct saml1__NameIdentifierType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_saml1__NameIdentifierType(soap, p), 0) || soap_put_saml1__NameIdentifierType(soap, p, "saml1:NameIdentifierType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_saml1__NameIdentifierType(struct soap *soap, const char *URL, struct saml1__NameIdentifierType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_saml1__NameIdentifierType(soap, p), 0) || soap_put_saml1__NameIdentifierType(soap, p, "saml1:NameIdentifierType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__NameIdentifierType * SOAP_FMAC4 soap_get_saml1__NameIdentifierType(struct soap*, struct saml1__NameIdentifierType *, const char*, const char*);

inline int soap_read_saml1__NameIdentifierType(struct soap *soap, struct saml1__NameIdentifierType *p)
{
	if (p)
	{	soap_default_saml1__NameIdentifierType(soap, p);
		if (soap_begin_recv(soap) || soap_get_saml1__NameIdentifierType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__NameIdentifierType(struct soap *soap, const char *URL, struct saml1__NameIdentifierType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_saml1__NameIdentifierType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_saml1__NameIdentifierType(struct soap *soap, struct saml1__NameIdentifierType *p)
{
	if (soap_read_saml1__NameIdentifierType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_saml1__SubjectType_DEFINED
#define SOAP_TYPE_saml1__SubjectType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__SubjectType(struct soap*, struct saml1__SubjectType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__SubjectType(struct soap*, const struct saml1__SubjectType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__SubjectType(struct soap*, const char*, int, const struct saml1__SubjectType *, const char*);
SOAP_FMAC3 struct saml1__SubjectType * SOAP_FMAC4 soap_in_saml1__SubjectType(struct soap*, const char*, struct saml1__SubjectType *, const char*);
SOAP_FMAC1 struct saml1__SubjectType * SOAP_FMAC2 soap_instantiate_saml1__SubjectType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__SubjectType * soap_new_saml1__SubjectType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__SubjectType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__SubjectType * soap_new_req_saml1__SubjectType(
	struct soap *soap)
{
	struct saml1__SubjectType *_p = soap_new_saml1__SubjectType(soap);
	if (_p)
	{	soap_default_saml1__SubjectType(soap, _p);
	}
	return _p;
}

inline struct saml1__SubjectType * soap_new_set_saml1__SubjectType(
	struct soap *soap,
	struct saml1__NameIdentifierType *saml1__NameIdentifier,
	struct saml1__SubjectConfirmationType *saml1__SubjectConfirmation)
{
	struct saml1__SubjectType *_p = soap_new_saml1__SubjectType(soap);
	if (_p)
	{	soap_default_saml1__SubjectType(soap, _p);
		_p->saml1__NameIdentifier = saml1__NameIdentifier;
		_p->saml1__SubjectConfirmation = saml1__SubjectConfirmation;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__SubjectType(struct soap*, const struct saml1__SubjectType *, const char*, const char*);

inline int soap_write_saml1__SubjectType(struct soap *soap, struct saml1__SubjectType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_saml1__SubjectType(soap, p), 0) || soap_put_saml1__SubjectType(soap, p, "saml1:SubjectType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__SubjectType(struct soap *soap, const char *URL, struct saml1__SubjectType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_saml1__SubjectType(soap, p), 0) || soap_put_saml1__SubjectType(soap, p, "saml1:SubjectType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_saml1__SubjectType(struct soap *soap, const char *URL, struct saml1__SubjectType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_saml1__SubjectType(soap, p), 0) || soap_put_saml1__SubjectType(soap, p, "saml1:SubjectType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__SubjectType * SOAP_FMAC4 soap_get_saml1__SubjectType(struct soap*, struct saml1__SubjectType *, const char*, const char*);

inline int soap_read_saml1__SubjectType(struct soap *soap, struct saml1__SubjectType *p)
{
	if (p)
	{	soap_default_saml1__SubjectType(soap, p);
		if (soap_begin_recv(soap) || soap_get_saml1__SubjectType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__SubjectType(struct soap *soap, const char *URL, struct saml1__SubjectType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_saml1__SubjectType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_saml1__SubjectType(struct soap *soap, struct saml1__SubjectType *p)
{
	if (soap_read_saml1__SubjectType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_saml1__SubjectStatementAbstractType_DEFINED
#define SOAP_TYPE_saml1__SubjectStatementAbstractType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__SubjectStatementAbstractType(struct soap*, struct saml1__SubjectStatementAbstractType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__SubjectStatementAbstractType(struct soap*, const struct saml1__SubjectStatementAbstractType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__SubjectStatementAbstractType(struct soap*, const char*, int, const struct saml1__SubjectStatementAbstractType *, const char*);
SOAP_FMAC3 struct saml1__SubjectStatementAbstractType * SOAP_FMAC4 soap_in_saml1__SubjectStatementAbstractType(struct soap*, const char*, struct saml1__SubjectStatementAbstractType *, const char*);
SOAP_FMAC1 struct saml1__SubjectStatementAbstractType * SOAP_FMAC2 soap_instantiate_saml1__SubjectStatementAbstractType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__SubjectStatementAbstractType * soap_new_saml1__SubjectStatementAbstractType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__SubjectStatementAbstractType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__SubjectStatementAbstractType * soap_new_req_saml1__SubjectStatementAbstractType(
	struct soap *soap,
	struct saml1__SubjectType *saml1__Subject)
{
	struct saml1__SubjectStatementAbstractType *_p = soap_new_saml1__SubjectStatementAbstractType(soap);
	if (_p)
	{	soap_default_saml1__SubjectStatementAbstractType(soap, _p);
		_p->saml1__Subject = saml1__Subject;
	}
	return _p;
}

inline struct saml1__SubjectStatementAbstractType * soap_new_set_saml1__SubjectStatementAbstractType(
	struct soap *soap,
	struct saml1__SubjectType *saml1__Subject)
{
	struct saml1__SubjectStatementAbstractType *_p = soap_new_saml1__SubjectStatementAbstractType(soap);
	if (_p)
	{	soap_default_saml1__SubjectStatementAbstractType(soap, _p);
		_p->saml1__Subject = saml1__Subject;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__SubjectStatementAbstractType(struct soap*, const struct saml1__SubjectStatementAbstractType *, const char*, const char*);

inline int soap_write_saml1__SubjectStatementAbstractType(struct soap *soap, struct saml1__SubjectStatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_saml1__SubjectStatementAbstractType(soap, p), 0) || soap_put_saml1__SubjectStatementAbstractType(soap, p, "saml1:SubjectStatementAbstractType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__SubjectStatementAbstractType(struct soap *soap, const char *URL, struct saml1__SubjectStatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_saml1__SubjectStatementAbstractType(soap, p), 0) || soap_put_saml1__SubjectStatementAbstractType(soap, p, "saml1:SubjectStatementAbstractType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_saml1__SubjectStatementAbstractType(struct soap *soap, const char *URL, struct saml1__SubjectStatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_saml1__SubjectStatementAbstractType(soap, p), 0) || soap_put_saml1__SubjectStatementAbstractType(soap, p, "saml1:SubjectStatementAbstractType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__SubjectStatementAbstractType * SOAP_FMAC4 soap_get_saml1__SubjectStatementAbstractType(struct soap*, struct saml1__SubjectStatementAbstractType *, const char*, const char*);

inline int soap_read_saml1__SubjectStatementAbstractType(struct soap *soap, struct saml1__SubjectStatementAbstractType *p)
{
	if (p)
	{	soap_default_saml1__SubjectStatementAbstractType(soap, p);
		if (soap_begin_recv(soap) || soap_get_saml1__SubjectStatementAbstractType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__SubjectStatementAbstractType(struct soap *soap, const char *URL, struct saml1__SubjectStatementAbstractType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_saml1__SubjectStatementAbstractType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_saml1__SubjectStatementAbstractType(struct soap *soap, struct saml1__SubjectStatementAbstractType *p)
{
	if (soap_read_saml1__SubjectStatementAbstractType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_saml1__StatementAbstractType_DEFINED
#define SOAP_TYPE_saml1__StatementAbstractType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__StatementAbstractType(struct soap*, struct saml1__StatementAbstractType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__StatementAbstractType(struct soap*, const struct saml1__StatementAbstractType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__StatementAbstractType(struct soap*, const char*, int, const struct saml1__StatementAbstractType *, const char*);
SOAP_FMAC3 struct saml1__StatementAbstractType * SOAP_FMAC4 soap_in_saml1__StatementAbstractType(struct soap*, const char*, struct saml1__StatementAbstractType *, const char*);
SOAP_FMAC1 struct saml1__StatementAbstractType * SOAP_FMAC2 soap_instantiate_saml1__StatementAbstractType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__StatementAbstractType * soap_new_saml1__StatementAbstractType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__StatementAbstractType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__StatementAbstractType * soap_new_req_saml1__StatementAbstractType(
	struct soap *soap)
{
	struct saml1__StatementAbstractType *_p = soap_new_saml1__StatementAbstractType(soap);
	if (_p)
	{	soap_default_saml1__StatementAbstractType(soap, _p);
	}
	return _p;
}

inline struct saml1__StatementAbstractType * soap_new_set_saml1__StatementAbstractType(
	struct soap *soap)
{
	struct saml1__StatementAbstractType *_p = soap_new_saml1__StatementAbstractType(soap);
	if (_p)
	{	soap_default_saml1__StatementAbstractType(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__StatementAbstractType(struct soap*, const struct saml1__StatementAbstractType *, const char*, const char*);

inline int soap_write_saml1__StatementAbstractType(struct soap *soap, struct saml1__StatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_saml1__StatementAbstractType(soap, p), 0) || soap_put_saml1__StatementAbstractType(soap, p, "saml1:StatementAbstractType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__StatementAbstractType(struct soap *soap, const char *URL, struct saml1__StatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_saml1__StatementAbstractType(soap, p), 0) || soap_put_saml1__StatementAbstractType(soap, p, "saml1:StatementAbstractType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_saml1__StatementAbstractType(struct soap *soap, const char *URL, struct saml1__StatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_saml1__StatementAbstractType(soap, p), 0) || soap_put_saml1__StatementAbstractType(soap, p, "saml1:StatementAbstractType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__StatementAbstractType * SOAP_FMAC4 soap_get_saml1__StatementAbstractType(struct soap*, struct saml1__StatementAbstractType *, const char*, const char*);

inline int soap_read_saml1__StatementAbstractType(struct soap *soap, struct saml1__StatementAbstractType *p)
{
	if (p)
	{	soap_default_saml1__StatementAbstractType(soap, p);
		if (soap_begin_recv(soap) || soap_get_saml1__StatementAbstractType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__StatementAbstractType(struct soap *soap, const char *URL, struct saml1__StatementAbstractType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_saml1__StatementAbstractType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_saml1__StatementAbstractType(struct soap *soap, struct saml1__StatementAbstractType *p)
{
	if (soap_read_saml1__StatementAbstractType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_saml1__AdviceType_DEFINED
#define SOAP_TYPE_saml1__AdviceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__AdviceType(struct soap*, struct saml1__AdviceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AdviceType(struct soap*, const struct saml1__AdviceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__AdviceType(struct soap*, const char*, int, const struct saml1__AdviceType *, const char*);
SOAP_FMAC3 struct saml1__AdviceType * SOAP_FMAC4 soap_in_saml1__AdviceType(struct soap*, const char*, struct saml1__AdviceType *, const char*);
SOAP_FMAC1 struct saml1__AdviceType * SOAP_FMAC2 soap_instantiate_saml1__AdviceType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__AdviceType * soap_new_saml1__AdviceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__AdviceType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__AdviceType * soap_new_req_saml1__AdviceType(
	struct soap *soap,
	int __size_AdviceType,
	struct __saml1__union_AdviceType *__union_AdviceType)
{
	struct saml1__AdviceType *_p = soap_new_saml1__AdviceType(soap);
	if (_p)
	{	soap_default_saml1__AdviceType(soap, _p);
		_p->__size_AdviceType = __size_AdviceType;
		_p->__union_AdviceType = __union_AdviceType;
	}
	return _p;
}

inline struct saml1__AdviceType * soap_new_set_saml1__AdviceType(
	struct soap *soap,
	int __size_AdviceType,
	struct __saml1__union_AdviceType *__union_AdviceType)
{
	struct saml1__AdviceType *_p = soap_new_saml1__AdviceType(soap);
	if (_p)
	{	soap_default_saml1__AdviceType(soap, _p);
		_p->__size_AdviceType = __size_AdviceType;
		_p->__union_AdviceType = __union_AdviceType;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__AdviceType(struct soap*, const struct saml1__AdviceType *, const char*, const char*);

inline int soap_write_saml1__AdviceType(struct soap *soap, struct saml1__AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_saml1__AdviceType(soap, p), 0) || soap_put_saml1__AdviceType(soap, p, "saml1:AdviceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__AdviceType(struct soap *soap, const char *URL, struct saml1__AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_saml1__AdviceType(soap, p), 0) || soap_put_saml1__AdviceType(soap, p, "saml1:AdviceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_saml1__AdviceType(struct soap *soap, const char *URL, struct saml1__AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_saml1__AdviceType(soap, p), 0) || soap_put_saml1__AdviceType(soap, p, "saml1:AdviceType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__AdviceType * SOAP_FMAC4 soap_get_saml1__AdviceType(struct soap*, struct saml1__AdviceType *, const char*, const char*);

inline int soap_read_saml1__AdviceType(struct soap *soap, struct saml1__AdviceType *p)
{
	if (p)
	{	soap_default_saml1__AdviceType(soap, p);
		if (soap_begin_recv(soap) || soap_get_saml1__AdviceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__AdviceType(struct soap *soap, const char *URL, struct saml1__AdviceType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_saml1__AdviceType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_saml1__AdviceType(struct soap *soap, struct saml1__AdviceType *p)
{
	if (soap_read_saml1__AdviceType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_saml1__DoNotCacheConditionType_DEFINED
#define SOAP_TYPE_saml1__DoNotCacheConditionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__DoNotCacheConditionType(struct soap*, struct saml1__DoNotCacheConditionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__DoNotCacheConditionType(struct soap*, const struct saml1__DoNotCacheConditionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__DoNotCacheConditionType(struct soap*, const char*, int, const struct saml1__DoNotCacheConditionType *, const char*);
SOAP_FMAC3 struct saml1__DoNotCacheConditionType * SOAP_FMAC4 soap_in_saml1__DoNotCacheConditionType(struct soap*, const char*, struct saml1__DoNotCacheConditionType *, const char*);
SOAP_FMAC1 struct saml1__DoNotCacheConditionType * SOAP_FMAC2 soap_instantiate_saml1__DoNotCacheConditionType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__DoNotCacheConditionType * soap_new_saml1__DoNotCacheConditionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__DoNotCacheConditionType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__DoNotCacheConditionType * soap_new_req_saml1__DoNotCacheConditionType(
	struct soap *soap)
{
	struct saml1__DoNotCacheConditionType *_p = soap_new_saml1__DoNotCacheConditionType(soap);
	if (_p)
	{	soap_default_saml1__DoNotCacheConditionType(soap, _p);
	}
	return _p;
}

inline struct saml1__DoNotCacheConditionType * soap_new_set_saml1__DoNotCacheConditionType(
	struct soap *soap)
{
	struct saml1__DoNotCacheConditionType *_p = soap_new_saml1__DoNotCacheConditionType(soap);
	if (_p)
	{	soap_default_saml1__DoNotCacheConditionType(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__DoNotCacheConditionType(struct soap*, const struct saml1__DoNotCacheConditionType *, const char*, const char*);

inline int soap_write_saml1__DoNotCacheConditionType(struct soap *soap, struct saml1__DoNotCacheConditionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_saml1__DoNotCacheConditionType(soap, p), 0) || soap_put_saml1__DoNotCacheConditionType(soap, p, "saml1:DoNotCacheConditionType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__DoNotCacheConditionType(struct soap *soap, const char *URL, struct saml1__DoNotCacheConditionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_saml1__DoNotCacheConditionType(soap, p), 0) || soap_put_saml1__DoNotCacheConditionType(soap, p, "saml1:DoNotCacheConditionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_saml1__DoNotCacheConditionType(struct soap *soap, const char *URL, struct saml1__DoNotCacheConditionType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_saml1__DoNotCacheConditionType(soap, p), 0) || soap_put_saml1__DoNotCacheConditionType(soap, p, "saml1:DoNotCacheConditionType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__DoNotCacheConditionType * SOAP_FMAC4 soap_get_saml1__DoNotCacheConditionType(struct soap*, struct saml1__DoNotCacheConditionType *, const char*, const char*);

inline int soap_read_saml1__DoNotCacheConditionType(struct soap *soap, struct saml1__DoNotCacheConditionType *p)
{
	if (p)
	{	soap_default_saml1__DoNotCacheConditionType(soap, p);
		if (soap_begin_recv(soap) || soap_get_saml1__DoNotCacheConditionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__DoNotCacheConditionType(struct soap *soap, const char *URL, struct saml1__DoNotCacheConditionType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_saml1__DoNotCacheConditionType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_saml1__DoNotCacheConditionType(struct soap *soap, struct saml1__DoNotCacheConditionType *p)
{
	if (soap_read_saml1__DoNotCacheConditionType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_saml1__AudienceRestrictionConditionType_DEFINED
#define SOAP_TYPE_saml1__AudienceRestrictionConditionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__AudienceRestrictionConditionType(struct soap*, struct saml1__AudienceRestrictionConditionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AudienceRestrictionConditionType(struct soap*, const struct saml1__AudienceRestrictionConditionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__AudienceRestrictionConditionType(struct soap*, const char*, int, const struct saml1__AudienceRestrictionConditionType *, const char*);
SOAP_FMAC3 struct saml1__AudienceRestrictionConditionType * SOAP_FMAC4 soap_in_saml1__AudienceRestrictionConditionType(struct soap*, const char*, struct saml1__AudienceRestrictionConditionType *, const char*);
SOAP_FMAC1 struct saml1__AudienceRestrictionConditionType * SOAP_FMAC2 soap_instantiate_saml1__AudienceRestrictionConditionType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__AudienceRestrictionConditionType * soap_new_saml1__AudienceRestrictionConditionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__AudienceRestrictionConditionType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__AudienceRestrictionConditionType * soap_new_req_saml1__AudienceRestrictionConditionType(
	struct soap *soap,
	int __sizeAudience,
	char **saml1__Audience)
{
	struct saml1__AudienceRestrictionConditionType *_p = soap_new_saml1__AudienceRestrictionConditionType(soap);
	if (_p)
	{	soap_default_saml1__AudienceRestrictionConditionType(soap, _p);
		_p->__sizeAudience = __sizeAudience;
		_p->saml1__Audience = saml1__Audience;
	}
	return _p;
}

inline struct saml1__AudienceRestrictionConditionType * soap_new_set_saml1__AudienceRestrictionConditionType(
	struct soap *soap,
	int __sizeAudience,
	char **saml1__Audience)
{
	struct saml1__AudienceRestrictionConditionType *_p = soap_new_saml1__AudienceRestrictionConditionType(soap);
	if (_p)
	{	soap_default_saml1__AudienceRestrictionConditionType(soap, _p);
		_p->__sizeAudience = __sizeAudience;
		_p->saml1__Audience = saml1__Audience;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__AudienceRestrictionConditionType(struct soap*, const struct saml1__AudienceRestrictionConditionType *, const char*, const char*);

inline int soap_write_saml1__AudienceRestrictionConditionType(struct soap *soap, struct saml1__AudienceRestrictionConditionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_saml1__AudienceRestrictionConditionType(soap, p), 0) || soap_put_saml1__AudienceRestrictionConditionType(soap, p, "saml1:AudienceRestrictionConditionType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__AudienceRestrictionConditionType(struct soap *soap, const char *URL, struct saml1__AudienceRestrictionConditionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_saml1__AudienceRestrictionConditionType(soap, p), 0) || soap_put_saml1__AudienceRestrictionConditionType(soap, p, "saml1:AudienceRestrictionConditionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_saml1__AudienceRestrictionConditionType(struct soap *soap, const char *URL, struct saml1__AudienceRestrictionConditionType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_saml1__AudienceRestrictionConditionType(soap, p), 0) || soap_put_saml1__AudienceRestrictionConditionType(soap, p, "saml1:AudienceRestrictionConditionType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__AudienceRestrictionConditionType * SOAP_FMAC4 soap_get_saml1__AudienceRestrictionConditionType(struct soap*, struct saml1__AudienceRestrictionConditionType *, const char*, const char*);

inline int soap_read_saml1__AudienceRestrictionConditionType(struct soap *soap, struct saml1__AudienceRestrictionConditionType *p)
{
	if (p)
	{	soap_default_saml1__AudienceRestrictionConditionType(soap, p);
		if (soap_begin_recv(soap) || soap_get_saml1__AudienceRestrictionConditionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__AudienceRestrictionConditionType(struct soap *soap, const char *URL, struct saml1__AudienceRestrictionConditionType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_saml1__AudienceRestrictionConditionType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_saml1__AudienceRestrictionConditionType(struct soap *soap, struct saml1__AudienceRestrictionConditionType *p)
{
	if (soap_read_saml1__AudienceRestrictionConditionType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_saml1__ConditionAbstractType_DEFINED
#define SOAP_TYPE_saml1__ConditionAbstractType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__ConditionAbstractType(struct soap*, struct saml1__ConditionAbstractType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__ConditionAbstractType(struct soap*, const struct saml1__ConditionAbstractType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__ConditionAbstractType(struct soap*, const char*, int, const struct saml1__ConditionAbstractType *, const char*);
SOAP_FMAC3 struct saml1__ConditionAbstractType * SOAP_FMAC4 soap_in_saml1__ConditionAbstractType(struct soap*, const char*, struct saml1__ConditionAbstractType *, const char*);
SOAP_FMAC1 struct saml1__ConditionAbstractType * SOAP_FMAC2 soap_instantiate_saml1__ConditionAbstractType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__ConditionAbstractType * soap_new_saml1__ConditionAbstractType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__ConditionAbstractType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__ConditionAbstractType * soap_new_req_saml1__ConditionAbstractType(
	struct soap *soap)
{
	struct saml1__ConditionAbstractType *_p = soap_new_saml1__ConditionAbstractType(soap);
	if (_p)
	{	soap_default_saml1__ConditionAbstractType(soap, _p);
	}
	return _p;
}

inline struct saml1__ConditionAbstractType * soap_new_set_saml1__ConditionAbstractType(
	struct soap *soap)
{
	struct saml1__ConditionAbstractType *_p = soap_new_saml1__ConditionAbstractType(soap);
	if (_p)
	{	soap_default_saml1__ConditionAbstractType(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__ConditionAbstractType(struct soap*, const struct saml1__ConditionAbstractType *, const char*, const char*);

inline int soap_write_saml1__ConditionAbstractType(struct soap *soap, struct saml1__ConditionAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_saml1__ConditionAbstractType(soap, p), 0) || soap_put_saml1__ConditionAbstractType(soap, p, "saml1:ConditionAbstractType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__ConditionAbstractType(struct soap *soap, const char *URL, struct saml1__ConditionAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_saml1__ConditionAbstractType(soap, p), 0) || soap_put_saml1__ConditionAbstractType(soap, p, "saml1:ConditionAbstractType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_saml1__ConditionAbstractType(struct soap *soap, const char *URL, struct saml1__ConditionAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_saml1__ConditionAbstractType(soap, p), 0) || soap_put_saml1__ConditionAbstractType(soap, p, "saml1:ConditionAbstractType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__ConditionAbstractType * SOAP_FMAC4 soap_get_saml1__ConditionAbstractType(struct soap*, struct saml1__ConditionAbstractType *, const char*, const char*);

inline int soap_read_saml1__ConditionAbstractType(struct soap *soap, struct saml1__ConditionAbstractType *p)
{
	if (p)
	{	soap_default_saml1__ConditionAbstractType(soap, p);
		if (soap_begin_recv(soap) || soap_get_saml1__ConditionAbstractType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__ConditionAbstractType(struct soap *soap, const char *URL, struct saml1__ConditionAbstractType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_saml1__ConditionAbstractType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_saml1__ConditionAbstractType(struct soap *soap, struct saml1__ConditionAbstractType *p)
{
	if (soap_read_saml1__ConditionAbstractType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_saml1__ConditionsType_DEFINED
#define SOAP_TYPE_saml1__ConditionsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__ConditionsType(struct soap*, struct saml1__ConditionsType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__ConditionsType(struct soap*, const struct saml1__ConditionsType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__ConditionsType(struct soap*, const char*, int, const struct saml1__ConditionsType *, const char*);
SOAP_FMAC3 struct saml1__ConditionsType * SOAP_FMAC4 soap_in_saml1__ConditionsType(struct soap*, const char*, struct saml1__ConditionsType *, const char*);
SOAP_FMAC1 struct saml1__ConditionsType * SOAP_FMAC2 soap_instantiate_saml1__ConditionsType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__ConditionsType * soap_new_saml1__ConditionsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__ConditionsType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__ConditionsType * soap_new_req_saml1__ConditionsType(
	struct soap *soap,
	int __size_ConditionsType,
	struct __saml1__union_ConditionsType *__union_ConditionsType)
{
	struct saml1__ConditionsType *_p = soap_new_saml1__ConditionsType(soap);
	if (_p)
	{	soap_default_saml1__ConditionsType(soap, _p);
		_p->__size_ConditionsType = __size_ConditionsType;
		_p->__union_ConditionsType = __union_ConditionsType;
	}
	return _p;
}

inline struct saml1__ConditionsType * soap_new_set_saml1__ConditionsType(
	struct soap *soap,
	int __size_ConditionsType,
	struct __saml1__union_ConditionsType *__union_ConditionsType,
	time_t *NotBefore,
	time_t *NotOnOrAfter)
{
	struct saml1__ConditionsType *_p = soap_new_saml1__ConditionsType(soap);
	if (_p)
	{	soap_default_saml1__ConditionsType(soap, _p);
		_p->__size_ConditionsType = __size_ConditionsType;
		_p->__union_ConditionsType = __union_ConditionsType;
		_p->NotBefore = NotBefore;
		_p->NotOnOrAfter = NotOnOrAfter;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__ConditionsType(struct soap*, const struct saml1__ConditionsType *, const char*, const char*);

inline int soap_write_saml1__ConditionsType(struct soap *soap, struct saml1__ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_saml1__ConditionsType(soap, p), 0) || soap_put_saml1__ConditionsType(soap, p, "saml1:ConditionsType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__ConditionsType(struct soap *soap, const char *URL, struct saml1__ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_saml1__ConditionsType(soap, p), 0) || soap_put_saml1__ConditionsType(soap, p, "saml1:ConditionsType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_saml1__ConditionsType(struct soap *soap, const char *URL, struct saml1__ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_saml1__ConditionsType(soap, p), 0) || soap_put_saml1__ConditionsType(soap, p, "saml1:ConditionsType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__ConditionsType * SOAP_FMAC4 soap_get_saml1__ConditionsType(struct soap*, struct saml1__ConditionsType *, const char*, const char*);

inline int soap_read_saml1__ConditionsType(struct soap *soap, struct saml1__ConditionsType *p)
{
	if (p)
	{	soap_default_saml1__ConditionsType(soap, p);
		if (soap_begin_recv(soap) || soap_get_saml1__ConditionsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__ConditionsType(struct soap *soap, const char *URL, struct saml1__ConditionsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_saml1__ConditionsType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_saml1__ConditionsType(struct soap *soap, struct saml1__ConditionsType *p)
{
	if (soap_read_saml1__ConditionsType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_saml1__AssertionType_DEFINED
#define SOAP_TYPE_saml1__AssertionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__AssertionType(struct soap*, struct saml1__AssertionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AssertionType(struct soap*, const struct saml1__AssertionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__AssertionType(struct soap*, const char*, int, const struct saml1__AssertionType *, const char*);
SOAP_FMAC3 struct saml1__AssertionType * SOAP_FMAC4 soap_in_saml1__AssertionType(struct soap*, const char*, struct saml1__AssertionType *, const char*);
SOAP_FMAC1 struct saml1__AssertionType * SOAP_FMAC2 soap_instantiate_saml1__AssertionType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__AssertionType * soap_new_saml1__AssertionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__AssertionType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__AssertionType * soap_new_req_saml1__AssertionType(
	struct soap *soap,
	int __size_AssertionType,
	struct __saml1__union_AssertionType *__union_AssertionType,
	char *MajorVersion,
	char *MinorVersion,
	char *AssertionID,
	char *Issuer,
	time_t IssueInstant,
	char *wsu__Id)
{
	struct saml1__AssertionType *_p = soap_new_saml1__AssertionType(soap);
	if (_p)
	{	soap_default_saml1__AssertionType(soap, _p);
		_p->__size_AssertionType = __size_AssertionType;
		_p->__union_AssertionType = __union_AssertionType;
		_p->MajorVersion = MajorVersion;
		_p->MinorVersion = MinorVersion;
		_p->AssertionID = AssertionID;
		_p->Issuer = Issuer;
		_p->IssueInstant = IssueInstant;
		_p->wsu__Id = wsu__Id;
	}
	return _p;
}

inline struct saml1__AssertionType * soap_new_set_saml1__AssertionType(
	struct soap *soap,
	struct saml1__ConditionsType *saml1__Conditions,
	struct saml1__AdviceType *saml1__Advice,
	int __size_AssertionType,
	struct __saml1__union_AssertionType *__union_AssertionType,
	struct ds__SignatureType *ds__Signature,
	char *MajorVersion,
	char *MinorVersion,
	char *AssertionID,
	char *Issuer,
	time_t IssueInstant,
	char *wsu__Id)
{
	struct saml1__AssertionType *_p = soap_new_saml1__AssertionType(soap);
	if (_p)
	{	soap_default_saml1__AssertionType(soap, _p);
		_p->saml1__Conditions = saml1__Conditions;
		_p->saml1__Advice = saml1__Advice;
		_p->__size_AssertionType = __size_AssertionType;
		_p->__union_AssertionType = __union_AssertionType;
		_p->ds__Signature = ds__Signature;
		_p->MajorVersion = MajorVersion;
		_p->MinorVersion = MinorVersion;
		_p->AssertionID = AssertionID;
		_p->Issuer = Issuer;
		_p->IssueInstant = IssueInstant;
		_p->wsu__Id = wsu__Id;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__AssertionType(struct soap*, const struct saml1__AssertionType *, const char*, const char*);

inline int soap_write_saml1__AssertionType(struct soap *soap, struct saml1__AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_saml1__AssertionType(soap, p), 0) || soap_put_saml1__AssertionType(soap, p, "saml1:AssertionType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__AssertionType(struct soap *soap, const char *URL, struct saml1__AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_saml1__AssertionType(soap, p), 0) || soap_put_saml1__AssertionType(soap, p, "saml1:AssertionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_saml1__AssertionType(struct soap *soap, const char *URL, struct saml1__AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_saml1__AssertionType(soap, p), 0) || soap_put_saml1__AssertionType(soap, p, "saml1:AssertionType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__AssertionType * SOAP_FMAC4 soap_get_saml1__AssertionType(struct soap*, struct saml1__AssertionType *, const char*, const char*);

inline int soap_read_saml1__AssertionType(struct soap *soap, struct saml1__AssertionType *p)
{
	if (p)
	{	soap_default_saml1__AssertionType(soap, p);
		if (soap_begin_recv(soap) || soap_get_saml1__AssertionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__AssertionType(struct soap *soap, const char *URL, struct saml1__AssertionType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_saml1__AssertionType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_saml1__AssertionType(struct soap *soap, struct saml1__AssertionType *p)
{
	if (soap_read_saml1__AssertionType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___wsc__DerivedKeyTokenType_sequence_DEFINED
#define SOAP_TYPE___wsc__DerivedKeyTokenType_sequence_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___wsc__DerivedKeyTokenType_sequence(struct soap*, struct __wsc__DerivedKeyTokenType_sequence *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___wsc__DerivedKeyTokenType_sequence(struct soap*, const struct __wsc__DerivedKeyTokenType_sequence *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___wsc__DerivedKeyTokenType_sequence(struct soap*, const char*, int, const struct __wsc__DerivedKeyTokenType_sequence *, const char*);
SOAP_FMAC3 struct __wsc__DerivedKeyTokenType_sequence * SOAP_FMAC4 soap_in___wsc__DerivedKeyTokenType_sequence(struct soap*, const char*, struct __wsc__DerivedKeyTokenType_sequence *, const char*);
SOAP_FMAC1 struct __wsc__DerivedKeyTokenType_sequence * SOAP_FMAC2 soap_instantiate___wsc__DerivedKeyTokenType_sequence(struct soap*, int, const char*, const char*, size_t*);

inline struct __wsc__DerivedKeyTokenType_sequence * soap_new___wsc__DerivedKeyTokenType_sequence(struct soap *soap, int n = -1)
{
	return soap_instantiate___wsc__DerivedKeyTokenType_sequence(soap, n, NULL, NULL, NULL);
}

inline struct __wsc__DerivedKeyTokenType_sequence * soap_new_req___wsc__DerivedKeyTokenType_sequence(
	struct soap *soap,
	int __union_DerivedKeyTokenType,
	const union _wsc__union_DerivedKeyTokenType& union_DerivedKeyTokenType)
{
	struct __wsc__DerivedKeyTokenType_sequence *_p = soap_new___wsc__DerivedKeyTokenType_sequence(soap);
	if (_p)
	{	soap_default___wsc__DerivedKeyTokenType_sequence(soap, _p);
		_p->__union_DerivedKeyTokenType = __union_DerivedKeyTokenType;
		_p->union_DerivedKeyTokenType = union_DerivedKeyTokenType;
	}
	return _p;
}

inline struct __wsc__DerivedKeyTokenType_sequence * soap_new_set___wsc__DerivedKeyTokenType_sequence(
	struct soap *soap,
	int __union_DerivedKeyTokenType,
	const union _wsc__union_DerivedKeyTokenType& union_DerivedKeyTokenType,
	ULONG64 *Length)
{
	struct __wsc__DerivedKeyTokenType_sequence *_p = soap_new___wsc__DerivedKeyTokenType_sequence(soap);
	if (_p)
	{	soap_default___wsc__DerivedKeyTokenType_sequence(soap, _p);
		_p->__union_DerivedKeyTokenType = __union_DerivedKeyTokenType;
		_p->union_DerivedKeyTokenType = union_DerivedKeyTokenType;
		_p->Length = Length;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___wsc__DerivedKeyTokenType_sequence(struct soap*, const struct __wsc__DerivedKeyTokenType_sequence *, const char*, const char*);

inline int soap_write___wsc__DerivedKeyTokenType_sequence(struct soap *soap, struct __wsc__DerivedKeyTokenType_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___wsc__DerivedKeyTokenType_sequence(soap, p), 0) || soap_put___wsc__DerivedKeyTokenType_sequence(soap, p, "-wsc:DerivedKeyTokenType-sequence", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___wsc__DerivedKeyTokenType_sequence(struct soap *soap, const char *URL, struct __wsc__DerivedKeyTokenType_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___wsc__DerivedKeyTokenType_sequence(soap, p), 0) || soap_put___wsc__DerivedKeyTokenType_sequence(soap, p, "-wsc:DerivedKeyTokenType-sequence", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___wsc__DerivedKeyTokenType_sequence(struct soap *soap, const char *URL, struct __wsc__DerivedKeyTokenType_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___wsc__DerivedKeyTokenType_sequence(soap, p), 0) || soap_put___wsc__DerivedKeyTokenType_sequence(soap, p, "-wsc:DerivedKeyTokenType-sequence", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __wsc__DerivedKeyTokenType_sequence * SOAP_FMAC4 soap_get___wsc__DerivedKeyTokenType_sequence(struct soap*, struct __wsc__DerivedKeyTokenType_sequence *, const char*, const char*);

inline int soap_read___wsc__DerivedKeyTokenType_sequence(struct soap *soap, struct __wsc__DerivedKeyTokenType_sequence *p)
{
	if (p)
	{	soap_default___wsc__DerivedKeyTokenType_sequence(soap, p);
		if (soap_begin_recv(soap) || soap_get___wsc__DerivedKeyTokenType_sequence(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___wsc__DerivedKeyTokenType_sequence(struct soap *soap, const char *URL, struct __wsc__DerivedKeyTokenType_sequence *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___wsc__DerivedKeyTokenType_sequence(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___wsc__DerivedKeyTokenType_sequence(struct soap *soap, struct __wsc__DerivedKeyTokenType_sequence *p)
{
	if (soap_read___wsc__DerivedKeyTokenType_sequence(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsc__PropertiesType_DEFINED
#define SOAP_TYPE_wsc__PropertiesType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsc__PropertiesType(struct soap*, struct wsc__PropertiesType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsc__PropertiesType(struct soap*, const struct wsc__PropertiesType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsc__PropertiesType(struct soap*, const char*, int, const struct wsc__PropertiesType *, const char*);
SOAP_FMAC3 struct wsc__PropertiesType * SOAP_FMAC4 soap_in_wsc__PropertiesType(struct soap*, const char*, struct wsc__PropertiesType *, const char*);
SOAP_FMAC1 struct wsc__PropertiesType * SOAP_FMAC2 soap_instantiate_wsc__PropertiesType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsc__PropertiesType * soap_new_wsc__PropertiesType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsc__PropertiesType(soap, n, NULL, NULL, NULL);
}

inline struct wsc__PropertiesType * soap_new_req_wsc__PropertiesType(
	struct soap *soap)
{
	struct wsc__PropertiesType *_p = soap_new_wsc__PropertiesType(soap);
	if (_p)
	{	soap_default_wsc__PropertiesType(soap, _p);
	}
	return _p;
}

inline struct wsc__PropertiesType * soap_new_set_wsc__PropertiesType(
	struct soap *soap)
{
	struct wsc__PropertiesType *_p = soap_new_wsc__PropertiesType(soap);
	if (_p)
	{	soap_default_wsc__PropertiesType(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsc__PropertiesType(struct soap*, const struct wsc__PropertiesType *, const char*, const char*);

inline int soap_write_wsc__PropertiesType(struct soap *soap, struct wsc__PropertiesType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_wsc__PropertiesType(soap, p), 0) || soap_put_wsc__PropertiesType(soap, p, "wsc:PropertiesType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsc__PropertiesType(struct soap *soap, const char *URL, struct wsc__PropertiesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_wsc__PropertiesType(soap, p), 0) || soap_put_wsc__PropertiesType(soap, p, "wsc:PropertiesType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_wsc__PropertiesType(struct soap *soap, const char *URL, struct wsc__PropertiesType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_wsc__PropertiesType(soap, p), 0) || soap_put_wsc__PropertiesType(soap, p, "wsc:PropertiesType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct wsc__PropertiesType * SOAP_FMAC4 soap_get_wsc__PropertiesType(struct soap*, struct wsc__PropertiesType *, const char*, const char*);

inline int soap_read_wsc__PropertiesType(struct soap *soap, struct wsc__PropertiesType *p)
{
	if (p)
	{	soap_default_wsc__PropertiesType(soap, p);
		if (soap_begin_recv(soap) || soap_get_wsc__PropertiesType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsc__PropertiesType(struct soap *soap, const char *URL, struct wsc__PropertiesType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_wsc__PropertiesType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_wsc__PropertiesType(struct soap *soap, struct wsc__PropertiesType *p)
{
	if (soap_read_wsc__PropertiesType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsc__DerivedKeyTokenType_DEFINED
#define SOAP_TYPE_wsc__DerivedKeyTokenType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsc__DerivedKeyTokenType(struct soap*, struct wsc__DerivedKeyTokenType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsc__DerivedKeyTokenType(struct soap*, const struct wsc__DerivedKeyTokenType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsc__DerivedKeyTokenType(struct soap*, const char*, int, const struct wsc__DerivedKeyTokenType *, const char*);
SOAP_FMAC3 struct wsc__DerivedKeyTokenType * SOAP_FMAC4 soap_in_wsc__DerivedKeyTokenType(struct soap*, const char*, struct wsc__DerivedKeyTokenType *, const char*);
SOAP_FMAC1 struct wsc__DerivedKeyTokenType * SOAP_FMAC2 soap_instantiate_wsc__DerivedKeyTokenType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsc__DerivedKeyTokenType * soap_new_wsc__DerivedKeyTokenType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsc__DerivedKeyTokenType(soap, n, NULL, NULL, NULL);
}

inline struct wsc__DerivedKeyTokenType * soap_new_req_wsc__DerivedKeyTokenType(
	struct soap *soap)
{
	struct wsc__DerivedKeyTokenType *_p = soap_new_wsc__DerivedKeyTokenType(soap);
	if (_p)
	{	soap_default_wsc__DerivedKeyTokenType(soap, _p);
	}
	return _p;
}

inline struct wsc__DerivedKeyTokenType * soap_new_set_wsc__DerivedKeyTokenType(
	struct soap *soap,
	struct _wsse__SecurityTokenReference *wsse__SecurityTokenReference,
	struct wsc__PropertiesType *Properties,
	struct __wsc__DerivedKeyTokenType_sequence *__DerivedKeyTokenType_sequence,
	char *Label,
	char *Nonce,
	char *wsu__Id,
	char *Algorithm)
{
	struct wsc__DerivedKeyTokenType *_p = soap_new_wsc__DerivedKeyTokenType(soap);
	if (_p)
	{	soap_default_wsc__DerivedKeyTokenType(soap, _p);
		_p->wsse__SecurityTokenReference = wsse__SecurityTokenReference;
		_p->Properties = Properties;
		_p->__DerivedKeyTokenType_sequence = __DerivedKeyTokenType_sequence;
		_p->Label = Label;
		_p->Nonce = Nonce;
		_p->wsu__Id = wsu__Id;
		_p->Algorithm = Algorithm;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsc__DerivedKeyTokenType(struct soap*, const struct wsc__DerivedKeyTokenType *, const char*, const char*);

inline int soap_write_wsc__DerivedKeyTokenType(struct soap *soap, struct wsc__DerivedKeyTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_wsc__DerivedKeyTokenType(soap, p), 0) || soap_put_wsc__DerivedKeyTokenType(soap, p, "wsc:DerivedKeyTokenType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsc__DerivedKeyTokenType(struct soap *soap, const char *URL, struct wsc__DerivedKeyTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_wsc__DerivedKeyTokenType(soap, p), 0) || soap_put_wsc__DerivedKeyTokenType(soap, p, "wsc:DerivedKeyTokenType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_wsc__DerivedKeyTokenType(struct soap *soap, const char *URL, struct wsc__DerivedKeyTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_wsc__DerivedKeyTokenType(soap, p), 0) || soap_put_wsc__DerivedKeyTokenType(soap, p, "wsc:DerivedKeyTokenType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct wsc__DerivedKeyTokenType * SOAP_FMAC4 soap_get_wsc__DerivedKeyTokenType(struct soap*, struct wsc__DerivedKeyTokenType *, const char*, const char*);

inline int soap_read_wsc__DerivedKeyTokenType(struct soap *soap, struct wsc__DerivedKeyTokenType *p)
{
	if (p)
	{	soap_default_wsc__DerivedKeyTokenType(soap, p);
		if (soap_begin_recv(soap) || soap_get_wsc__DerivedKeyTokenType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsc__DerivedKeyTokenType(struct soap *soap, const char *URL, struct wsc__DerivedKeyTokenType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_wsc__DerivedKeyTokenType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_wsc__DerivedKeyTokenType(struct soap *soap, struct wsc__DerivedKeyTokenType *p)
{
	if (soap_read_wsc__DerivedKeyTokenType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsc__SecurityContextTokenType_DEFINED
#define SOAP_TYPE_wsc__SecurityContextTokenType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsc__SecurityContextTokenType(struct soap*, struct wsc__SecurityContextTokenType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsc__SecurityContextTokenType(struct soap*, const struct wsc__SecurityContextTokenType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsc__SecurityContextTokenType(struct soap*, const char*, int, const struct wsc__SecurityContextTokenType *, const char*);
SOAP_FMAC3 struct wsc__SecurityContextTokenType * SOAP_FMAC4 soap_in_wsc__SecurityContextTokenType(struct soap*, const char*, struct wsc__SecurityContextTokenType *, const char*);
SOAP_FMAC1 struct wsc__SecurityContextTokenType * SOAP_FMAC2 soap_instantiate_wsc__SecurityContextTokenType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsc__SecurityContextTokenType * soap_new_wsc__SecurityContextTokenType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsc__SecurityContextTokenType(soap, n, NULL, NULL, NULL);
}

inline struct wsc__SecurityContextTokenType * soap_new_req_wsc__SecurityContextTokenType(
	struct soap *soap)
{
	struct wsc__SecurityContextTokenType *_p = soap_new_wsc__SecurityContextTokenType(soap);
	if (_p)
	{	soap_default_wsc__SecurityContextTokenType(soap, _p);
	}
	return _p;
}

inline struct wsc__SecurityContextTokenType * soap_new_set_wsc__SecurityContextTokenType(
	struct soap *soap,
	char *wsu__Id,
	char *Identifier,
	char *Instance)
{
	struct wsc__SecurityContextTokenType *_p = soap_new_wsc__SecurityContextTokenType(soap);
	if (_p)
	{	soap_default_wsc__SecurityContextTokenType(soap, _p);
		_p->wsu__Id = wsu__Id;
		_p->Identifier = Identifier;
		_p->Instance = Instance;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsc__SecurityContextTokenType(struct soap*, const struct wsc__SecurityContextTokenType *, const char*, const char*);

inline int soap_write_wsc__SecurityContextTokenType(struct soap *soap, struct wsc__SecurityContextTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_wsc__SecurityContextTokenType(soap, p), 0) || soap_put_wsc__SecurityContextTokenType(soap, p, "wsc:SecurityContextTokenType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsc__SecurityContextTokenType(struct soap *soap, const char *URL, struct wsc__SecurityContextTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_wsc__SecurityContextTokenType(soap, p), 0) || soap_put_wsc__SecurityContextTokenType(soap, p, "wsc:SecurityContextTokenType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_wsc__SecurityContextTokenType(struct soap *soap, const char *URL, struct wsc__SecurityContextTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_wsc__SecurityContextTokenType(soap, p), 0) || soap_put_wsc__SecurityContextTokenType(soap, p, "wsc:SecurityContextTokenType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct wsc__SecurityContextTokenType * SOAP_FMAC4 soap_get_wsc__SecurityContextTokenType(struct soap*, struct wsc__SecurityContextTokenType *, const char*, const char*);

inline int soap_read_wsc__SecurityContextTokenType(struct soap *soap, struct wsc__SecurityContextTokenType *p)
{
	if (p)
	{	soap_default_wsc__SecurityContextTokenType(soap, p);
		if (soap_begin_recv(soap) || soap_get_wsc__SecurityContextTokenType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsc__SecurityContextTokenType(struct soap *soap, const char *URL, struct wsc__SecurityContextTokenType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_wsc__SecurityContextTokenType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_wsc__SecurityContextTokenType(struct soap *soap, struct wsc__SecurityContextTokenType *p)
{
	if (soap_read_wsc__SecurityContextTokenType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___xenc__union_ReferenceList_DEFINED
#define SOAP_TYPE___xenc__union_ReferenceList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___xenc__union_ReferenceList(struct soap*, struct __xenc__union_ReferenceList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___xenc__union_ReferenceList(struct soap*, const struct __xenc__union_ReferenceList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___xenc__union_ReferenceList(struct soap*, const char*, int, const struct __xenc__union_ReferenceList *, const char*);
SOAP_FMAC3 struct __xenc__union_ReferenceList * SOAP_FMAC4 soap_in___xenc__union_ReferenceList(struct soap*, const char*, struct __xenc__union_ReferenceList *, const char*);
SOAP_FMAC1 struct __xenc__union_ReferenceList * SOAP_FMAC2 soap_instantiate___xenc__union_ReferenceList(struct soap*, int, const char*, const char*, size_t*);

inline struct __xenc__union_ReferenceList * soap_new___xenc__union_ReferenceList(struct soap *soap, int n = -1)
{
	return soap_instantiate___xenc__union_ReferenceList(soap, n, NULL, NULL, NULL);
}

inline struct __xenc__union_ReferenceList * soap_new_req___xenc__union_ReferenceList(
	struct soap *soap)
{
	struct __xenc__union_ReferenceList *_p = soap_new___xenc__union_ReferenceList(soap);
	if (_p)
	{	soap_default___xenc__union_ReferenceList(soap, _p);
	}
	return _p;
}

inline struct __xenc__union_ReferenceList * soap_new_set___xenc__union_ReferenceList(
	struct soap *soap,
	struct xenc__ReferenceType *DataReference,
	struct xenc__ReferenceType *KeyReference)
{
	struct __xenc__union_ReferenceList *_p = soap_new___xenc__union_ReferenceList(soap);
	if (_p)
	{	soap_default___xenc__union_ReferenceList(soap, _p);
		_p->DataReference = DataReference;
		_p->KeyReference = KeyReference;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___xenc__union_ReferenceList(struct soap*, const struct __xenc__union_ReferenceList *, const char*, const char*);

inline int soap_write___xenc__union_ReferenceList(struct soap *soap, struct __xenc__union_ReferenceList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___xenc__union_ReferenceList(soap, p), 0) || soap_put___xenc__union_ReferenceList(soap, p, "-xenc:union-ReferenceList", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___xenc__union_ReferenceList(struct soap *soap, const char *URL, struct __xenc__union_ReferenceList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___xenc__union_ReferenceList(soap, p), 0) || soap_put___xenc__union_ReferenceList(soap, p, "-xenc:union-ReferenceList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___xenc__union_ReferenceList(struct soap *soap, const char *URL, struct __xenc__union_ReferenceList const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___xenc__union_ReferenceList(soap, p), 0) || soap_put___xenc__union_ReferenceList(soap, p, "-xenc:union-ReferenceList", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __xenc__union_ReferenceList * SOAP_FMAC4 soap_get___xenc__union_ReferenceList(struct soap*, struct __xenc__union_ReferenceList *, const char*, const char*);

inline int soap_read___xenc__union_ReferenceList(struct soap *soap, struct __xenc__union_ReferenceList *p)
{
	if (p)
	{	soap_default___xenc__union_ReferenceList(soap, p);
		if (soap_begin_recv(soap) || soap_get___xenc__union_ReferenceList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___xenc__union_ReferenceList(struct soap *soap, const char *URL, struct __xenc__union_ReferenceList *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___xenc__union_ReferenceList(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___xenc__union_ReferenceList(struct soap *soap, struct __xenc__union_ReferenceList *p)
{
	if (soap_read___xenc__union_ReferenceList(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__xenc__ReferenceList_DEFINED
#define SOAP_TYPE__xenc__ReferenceList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__xenc__ReferenceList(struct soap*, struct _xenc__ReferenceList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__xenc__ReferenceList(struct soap*, const struct _xenc__ReferenceList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__xenc__ReferenceList(struct soap*, const char*, int, const struct _xenc__ReferenceList *, const char*);
SOAP_FMAC3 struct _xenc__ReferenceList * SOAP_FMAC4 soap_in__xenc__ReferenceList(struct soap*, const char*, struct _xenc__ReferenceList *, const char*);
SOAP_FMAC1 struct _xenc__ReferenceList * SOAP_FMAC2 soap_instantiate__xenc__ReferenceList(struct soap*, int, const char*, const char*, size_t*);

inline struct _xenc__ReferenceList * soap_new__xenc__ReferenceList(struct soap *soap, int n = -1)
{
	return soap_instantiate__xenc__ReferenceList(soap, n, NULL, NULL, NULL);
}

inline struct _xenc__ReferenceList * soap_new_req__xenc__ReferenceList(
	struct soap *soap,
	int __size_ReferenceList,
	struct __xenc__union_ReferenceList *__union_ReferenceList)
{
	struct _xenc__ReferenceList *_p = soap_new__xenc__ReferenceList(soap);
	if (_p)
	{	soap_default__xenc__ReferenceList(soap, _p);
		_p->__size_ReferenceList = __size_ReferenceList;
		_p->__union_ReferenceList = __union_ReferenceList;
	}
	return _p;
}

inline struct _xenc__ReferenceList * soap_new_set__xenc__ReferenceList(
	struct soap *soap,
	int __size_ReferenceList,
	struct __xenc__union_ReferenceList *__union_ReferenceList)
{
	struct _xenc__ReferenceList *_p = soap_new__xenc__ReferenceList(soap);
	if (_p)
	{	soap_default__xenc__ReferenceList(soap, _p);
		_p->__size_ReferenceList = __size_ReferenceList;
		_p->__union_ReferenceList = __union_ReferenceList;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__xenc__ReferenceList(struct soap*, const struct _xenc__ReferenceList *, const char*, const char*);

inline int soap_write__xenc__ReferenceList(struct soap *soap, struct _xenc__ReferenceList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize__xenc__ReferenceList(soap, p), 0) || soap_put__xenc__ReferenceList(soap, p, "xenc:ReferenceList", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__xenc__ReferenceList(struct soap *soap, const char *URL, struct _xenc__ReferenceList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize__xenc__ReferenceList(soap, p), 0) || soap_put__xenc__ReferenceList(soap, p, "xenc:ReferenceList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__xenc__ReferenceList(struct soap *soap, const char *URL, struct _xenc__ReferenceList const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize__xenc__ReferenceList(soap, p), 0) || soap_put__xenc__ReferenceList(soap, p, "xenc:ReferenceList", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct _xenc__ReferenceList * SOAP_FMAC4 soap_get__xenc__ReferenceList(struct soap*, struct _xenc__ReferenceList *, const char*, const char*);

inline int soap_read__xenc__ReferenceList(struct soap *soap, struct _xenc__ReferenceList *p)
{
	if (p)
	{	soap_default__xenc__ReferenceList(soap, p);
		if (soap_begin_recv(soap) || soap_get__xenc__ReferenceList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__xenc__ReferenceList(struct soap *soap, const char *URL, struct _xenc__ReferenceList *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__xenc__ReferenceList(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__xenc__ReferenceList(struct soap *soap, struct _xenc__ReferenceList *p)
{
	if (soap_read__xenc__ReferenceList(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xenc__EncryptionPropertyType_DEFINED
#define SOAP_TYPE_xenc__EncryptionPropertyType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__EncryptionPropertyType(struct soap*, struct xenc__EncryptionPropertyType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__EncryptionPropertyType(struct soap*, const struct xenc__EncryptionPropertyType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__EncryptionPropertyType(struct soap*, const char*, int, const struct xenc__EncryptionPropertyType *, const char*);
SOAP_FMAC3 struct xenc__EncryptionPropertyType * SOAP_FMAC4 soap_in_xenc__EncryptionPropertyType(struct soap*, const char*, struct xenc__EncryptionPropertyType *, const char*);
SOAP_FMAC1 struct xenc__EncryptionPropertyType * SOAP_FMAC2 soap_instantiate_xenc__EncryptionPropertyType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__EncryptionPropertyType * soap_new_xenc__EncryptionPropertyType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xenc__EncryptionPropertyType(soap, n, NULL, NULL, NULL);
}

inline struct xenc__EncryptionPropertyType * soap_new_req_xenc__EncryptionPropertyType(
	struct soap *soap)
{
	struct xenc__EncryptionPropertyType *_p = soap_new_xenc__EncryptionPropertyType(soap);
	if (_p)
	{	soap_default_xenc__EncryptionPropertyType(soap, _p);
	}
	return _p;
}

inline struct xenc__EncryptionPropertyType * soap_new_set_xenc__EncryptionPropertyType(
	struct soap *soap,
	char *Target,
	char *Id)
{
	struct xenc__EncryptionPropertyType *_p = soap_new_xenc__EncryptionPropertyType(soap);
	if (_p)
	{	soap_default_xenc__EncryptionPropertyType(soap, _p);
		_p->Target = Target;
		_p->Id = Id;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__EncryptionPropertyType(struct soap*, const struct xenc__EncryptionPropertyType *, const char*, const char*);

inline int soap_write_xenc__EncryptionPropertyType(struct soap *soap, struct xenc__EncryptionPropertyType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_xenc__EncryptionPropertyType(soap, p), 0) || soap_put_xenc__EncryptionPropertyType(soap, p, "xenc:EncryptionPropertyType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xenc__EncryptionPropertyType(struct soap *soap, const char *URL, struct xenc__EncryptionPropertyType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_xenc__EncryptionPropertyType(soap, p), 0) || soap_put_xenc__EncryptionPropertyType(soap, p, "xenc:EncryptionPropertyType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_xenc__EncryptionPropertyType(struct soap *soap, const char *URL, struct xenc__EncryptionPropertyType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_xenc__EncryptionPropertyType(soap, p), 0) || soap_put_xenc__EncryptionPropertyType(soap, p, "xenc:EncryptionPropertyType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct xenc__EncryptionPropertyType * SOAP_FMAC4 soap_get_xenc__EncryptionPropertyType(struct soap*, struct xenc__EncryptionPropertyType *, const char*, const char*);

inline int soap_read_xenc__EncryptionPropertyType(struct soap *soap, struct xenc__EncryptionPropertyType *p)
{
	if (p)
	{	soap_default_xenc__EncryptionPropertyType(soap, p);
		if (soap_begin_recv(soap) || soap_get_xenc__EncryptionPropertyType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xenc__EncryptionPropertyType(struct soap *soap, const char *URL, struct xenc__EncryptionPropertyType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xenc__EncryptionPropertyType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_xenc__EncryptionPropertyType(struct soap *soap, struct xenc__EncryptionPropertyType *p)
{
	if (soap_read_xenc__EncryptionPropertyType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xenc__EncryptionPropertiesType_DEFINED
#define SOAP_TYPE_xenc__EncryptionPropertiesType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__EncryptionPropertiesType(struct soap*, struct xenc__EncryptionPropertiesType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__EncryptionPropertiesType(struct soap*, const struct xenc__EncryptionPropertiesType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__EncryptionPropertiesType(struct soap*, const char*, int, const struct xenc__EncryptionPropertiesType *, const char*);
SOAP_FMAC3 struct xenc__EncryptionPropertiesType * SOAP_FMAC4 soap_in_xenc__EncryptionPropertiesType(struct soap*, const char*, struct xenc__EncryptionPropertiesType *, const char*);
SOAP_FMAC1 struct xenc__EncryptionPropertiesType * SOAP_FMAC2 soap_instantiate_xenc__EncryptionPropertiesType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__EncryptionPropertiesType * soap_new_xenc__EncryptionPropertiesType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xenc__EncryptionPropertiesType(soap, n, NULL, NULL, NULL);
}

inline struct xenc__EncryptionPropertiesType * soap_new_req_xenc__EncryptionPropertiesType(
	struct soap *soap,
	int __sizeEncryptionProperty,
	struct xenc__EncryptionPropertyType *EncryptionProperty)
{
	struct xenc__EncryptionPropertiesType *_p = soap_new_xenc__EncryptionPropertiesType(soap);
	if (_p)
	{	soap_default_xenc__EncryptionPropertiesType(soap, _p);
		_p->__sizeEncryptionProperty = __sizeEncryptionProperty;
		_p->EncryptionProperty = EncryptionProperty;
	}
	return _p;
}

inline struct xenc__EncryptionPropertiesType * soap_new_set_xenc__EncryptionPropertiesType(
	struct soap *soap,
	int __sizeEncryptionProperty,
	struct xenc__EncryptionPropertyType *EncryptionProperty,
	char *Id)
{
	struct xenc__EncryptionPropertiesType *_p = soap_new_xenc__EncryptionPropertiesType(soap);
	if (_p)
	{	soap_default_xenc__EncryptionPropertiesType(soap, _p);
		_p->__sizeEncryptionProperty = __sizeEncryptionProperty;
		_p->EncryptionProperty = EncryptionProperty;
		_p->Id = Id;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__EncryptionPropertiesType(struct soap*, const struct xenc__EncryptionPropertiesType *, const char*, const char*);

inline int soap_write_xenc__EncryptionPropertiesType(struct soap *soap, struct xenc__EncryptionPropertiesType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_xenc__EncryptionPropertiesType(soap, p), 0) || soap_put_xenc__EncryptionPropertiesType(soap, p, "xenc:EncryptionPropertiesType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xenc__EncryptionPropertiesType(struct soap *soap, const char *URL, struct xenc__EncryptionPropertiesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_xenc__EncryptionPropertiesType(soap, p), 0) || soap_put_xenc__EncryptionPropertiesType(soap, p, "xenc:EncryptionPropertiesType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_xenc__EncryptionPropertiesType(struct soap *soap, const char *URL, struct xenc__EncryptionPropertiesType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_xenc__EncryptionPropertiesType(soap, p), 0) || soap_put_xenc__EncryptionPropertiesType(soap, p, "xenc:EncryptionPropertiesType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct xenc__EncryptionPropertiesType * SOAP_FMAC4 soap_get_xenc__EncryptionPropertiesType(struct soap*, struct xenc__EncryptionPropertiesType *, const char*, const char*);

inline int soap_read_xenc__EncryptionPropertiesType(struct soap *soap, struct xenc__EncryptionPropertiesType *p)
{
	if (p)
	{	soap_default_xenc__EncryptionPropertiesType(soap, p);
		if (soap_begin_recv(soap) || soap_get_xenc__EncryptionPropertiesType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xenc__EncryptionPropertiesType(struct soap *soap, const char *URL, struct xenc__EncryptionPropertiesType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xenc__EncryptionPropertiesType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_xenc__EncryptionPropertiesType(struct soap *soap, struct xenc__EncryptionPropertiesType *p)
{
	if (soap_read_xenc__EncryptionPropertiesType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xenc__ReferenceType_DEFINED
#define SOAP_TYPE_xenc__ReferenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__ReferenceType(struct soap*, struct xenc__ReferenceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__ReferenceType(struct soap*, const struct xenc__ReferenceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__ReferenceType(struct soap*, const char*, int, const struct xenc__ReferenceType *, const char*);
SOAP_FMAC3 struct xenc__ReferenceType * SOAP_FMAC4 soap_in_xenc__ReferenceType(struct soap*, const char*, struct xenc__ReferenceType *, const char*);
SOAP_FMAC1 struct xenc__ReferenceType * SOAP_FMAC2 soap_instantiate_xenc__ReferenceType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__ReferenceType * soap_new_xenc__ReferenceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xenc__ReferenceType(soap, n, NULL, NULL, NULL);
}

inline struct xenc__ReferenceType * soap_new_req_xenc__ReferenceType(
	struct soap *soap,
	char *URI)
{
	struct xenc__ReferenceType *_p = soap_new_xenc__ReferenceType(soap);
	if (_p)
	{	soap_default_xenc__ReferenceType(soap, _p);
		_p->URI = URI;
	}
	return _p;
}

inline struct xenc__ReferenceType * soap_new_set_xenc__ReferenceType(
	struct soap *soap,
	char *URI)
{
	struct xenc__ReferenceType *_p = soap_new_xenc__ReferenceType(soap);
	if (_p)
	{	soap_default_xenc__ReferenceType(soap, _p);
		_p->URI = URI;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__ReferenceType(struct soap*, const struct xenc__ReferenceType *, const char*, const char*);

inline int soap_write_xenc__ReferenceType(struct soap *soap, struct xenc__ReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_xenc__ReferenceType(soap, p), 0) || soap_put_xenc__ReferenceType(soap, p, "xenc:ReferenceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xenc__ReferenceType(struct soap *soap, const char *URL, struct xenc__ReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_xenc__ReferenceType(soap, p), 0) || soap_put_xenc__ReferenceType(soap, p, "xenc:ReferenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_xenc__ReferenceType(struct soap *soap, const char *URL, struct xenc__ReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_xenc__ReferenceType(soap, p), 0) || soap_put_xenc__ReferenceType(soap, p, "xenc:ReferenceType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct xenc__ReferenceType * SOAP_FMAC4 soap_get_xenc__ReferenceType(struct soap*, struct xenc__ReferenceType *, const char*, const char*);

inline int soap_read_xenc__ReferenceType(struct soap *soap, struct xenc__ReferenceType *p)
{
	if (p)
	{	soap_default_xenc__ReferenceType(soap, p);
		if (soap_begin_recv(soap) || soap_get_xenc__ReferenceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xenc__ReferenceType(struct soap *soap, const char *URL, struct xenc__ReferenceType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xenc__ReferenceType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_xenc__ReferenceType(struct soap *soap, struct xenc__ReferenceType *p)
{
	if (soap_read_xenc__ReferenceType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xenc__AgreementMethodType_DEFINED
#define SOAP_TYPE_xenc__AgreementMethodType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__AgreementMethodType(struct soap*, struct xenc__AgreementMethodType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__AgreementMethodType(struct soap*, const struct xenc__AgreementMethodType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__AgreementMethodType(struct soap*, const char*, int, const struct xenc__AgreementMethodType *, const char*);
SOAP_FMAC3 struct xenc__AgreementMethodType * SOAP_FMAC4 soap_in_xenc__AgreementMethodType(struct soap*, const char*, struct xenc__AgreementMethodType *, const char*);
SOAP_FMAC1 struct xenc__AgreementMethodType * SOAP_FMAC2 soap_instantiate_xenc__AgreementMethodType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__AgreementMethodType * soap_new_xenc__AgreementMethodType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xenc__AgreementMethodType(soap, n, NULL, NULL, NULL);
}

inline struct xenc__AgreementMethodType * soap_new_req_xenc__AgreementMethodType(
	struct soap *soap,
	char *Algorithm)
{
	struct xenc__AgreementMethodType *_p = soap_new_xenc__AgreementMethodType(soap);
	if (_p)
	{	soap_default_xenc__AgreementMethodType(soap, _p);
		_p->Algorithm = Algorithm;
	}
	return _p;
}

inline struct xenc__AgreementMethodType * soap_new_set_xenc__AgreementMethodType(
	struct soap *soap,
	char *KA_Nonce,
	struct ds__KeyInfoType *OriginatorKeyInfo,
	struct ds__KeyInfoType *RecipientKeyInfo,
	char *Algorithm,
	char *__mixed)
{
	struct xenc__AgreementMethodType *_p = soap_new_xenc__AgreementMethodType(soap);
	if (_p)
	{	soap_default_xenc__AgreementMethodType(soap, _p);
		_p->KA_Nonce = KA_Nonce;
		_p->OriginatorKeyInfo = OriginatorKeyInfo;
		_p->RecipientKeyInfo = RecipientKeyInfo;
		_p->Algorithm = Algorithm;
		_p->__mixed = __mixed;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__AgreementMethodType(struct soap*, const struct xenc__AgreementMethodType *, const char*, const char*);

inline int soap_write_xenc__AgreementMethodType(struct soap *soap, struct xenc__AgreementMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_xenc__AgreementMethodType(soap, p), 0) || soap_put_xenc__AgreementMethodType(soap, p, "xenc:AgreementMethodType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xenc__AgreementMethodType(struct soap *soap, const char *URL, struct xenc__AgreementMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_xenc__AgreementMethodType(soap, p), 0) || soap_put_xenc__AgreementMethodType(soap, p, "xenc:AgreementMethodType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_xenc__AgreementMethodType(struct soap *soap, const char *URL, struct xenc__AgreementMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_xenc__AgreementMethodType(soap, p), 0) || soap_put_xenc__AgreementMethodType(soap, p, "xenc:AgreementMethodType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct xenc__AgreementMethodType * SOAP_FMAC4 soap_get_xenc__AgreementMethodType(struct soap*, struct xenc__AgreementMethodType *, const char*, const char*);

inline int soap_read_xenc__AgreementMethodType(struct soap *soap, struct xenc__AgreementMethodType *p)
{
	if (p)
	{	soap_default_xenc__AgreementMethodType(soap, p);
		if (soap_begin_recv(soap) || soap_get_xenc__AgreementMethodType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xenc__AgreementMethodType(struct soap *soap, const char *URL, struct xenc__AgreementMethodType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xenc__AgreementMethodType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_xenc__AgreementMethodType(struct soap *soap, struct xenc__AgreementMethodType *p)
{
	if (soap_read_xenc__AgreementMethodType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xenc__EncryptedKeyType_DEFINED
#define SOAP_TYPE_xenc__EncryptedKeyType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__EncryptedKeyType(struct soap*, struct xenc__EncryptedKeyType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__EncryptedKeyType(struct soap*, const struct xenc__EncryptedKeyType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__EncryptedKeyType(struct soap*, const char*, int, const struct xenc__EncryptedKeyType *, const char*);
SOAP_FMAC3 struct xenc__EncryptedKeyType * SOAP_FMAC4 soap_in_xenc__EncryptedKeyType(struct soap*, const char*, struct xenc__EncryptedKeyType *, const char*);
SOAP_FMAC1 struct xenc__EncryptedKeyType * SOAP_FMAC2 soap_instantiate_xenc__EncryptedKeyType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__EncryptedKeyType * soap_new_xenc__EncryptedKeyType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xenc__EncryptedKeyType(soap, n, NULL, NULL, NULL);
}

inline struct xenc__EncryptedKeyType * soap_new_req_xenc__EncryptedKeyType(
	struct soap *soap,
	struct xenc__CipherDataType *CipherData)
{
	struct xenc__EncryptedKeyType *_p = soap_new_xenc__EncryptedKeyType(soap);
	if (_p)
	{	soap_default_xenc__EncryptedKeyType(soap, _p);
		_p->CipherData = CipherData;
	}
	return _p;
}

inline struct xenc__EncryptedKeyType * soap_new_set_xenc__EncryptedKeyType(
	struct soap *soap,
	struct xenc__EncryptionMethodType *EncryptionMethod,
	struct ds__KeyInfoType *ds__KeyInfo,
	struct xenc__CipherDataType *CipherData,
	struct xenc__EncryptionPropertiesType *EncryptionProperties,
	char *Id,
	char *Type,
	char *MimeType,
	char *Encoding,
	struct _xenc__ReferenceList *ReferenceList,
	char *CarriedKeyName,
	char *Recipient)
{
	struct xenc__EncryptedKeyType *_p = soap_new_xenc__EncryptedKeyType(soap);
	if (_p)
	{	soap_default_xenc__EncryptedKeyType(soap, _p);
		_p->EncryptionMethod = EncryptionMethod;
		_p->ds__KeyInfo = ds__KeyInfo;
		_p->CipherData = CipherData;
		_p->EncryptionProperties = EncryptionProperties;
		_p->Id = Id;
		_p->Type = Type;
		_p->MimeType = MimeType;
		_p->Encoding = Encoding;
		_p->ReferenceList = ReferenceList;
		_p->CarriedKeyName = CarriedKeyName;
		_p->Recipient = Recipient;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__EncryptedKeyType(struct soap*, const struct xenc__EncryptedKeyType *, const char*, const char*);

inline int soap_write_xenc__EncryptedKeyType(struct soap *soap, struct xenc__EncryptedKeyType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_xenc__EncryptedKeyType(soap, p), 0) || soap_put_xenc__EncryptedKeyType(soap, p, "xenc:EncryptedKeyType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xenc__EncryptedKeyType(struct soap *soap, const char *URL, struct xenc__EncryptedKeyType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_xenc__EncryptedKeyType(soap, p), 0) || soap_put_xenc__EncryptedKeyType(soap, p, "xenc:EncryptedKeyType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_xenc__EncryptedKeyType(struct soap *soap, const char *URL, struct xenc__EncryptedKeyType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_xenc__EncryptedKeyType(soap, p), 0) || soap_put_xenc__EncryptedKeyType(soap, p, "xenc:EncryptedKeyType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct xenc__EncryptedKeyType * SOAP_FMAC4 soap_get_xenc__EncryptedKeyType(struct soap*, struct xenc__EncryptedKeyType *, const char*, const char*);

inline int soap_read_xenc__EncryptedKeyType(struct soap *soap, struct xenc__EncryptedKeyType *p)
{
	if (p)
	{	soap_default_xenc__EncryptedKeyType(soap, p);
		if (soap_begin_recv(soap) || soap_get_xenc__EncryptedKeyType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xenc__EncryptedKeyType(struct soap *soap, const char *URL, struct xenc__EncryptedKeyType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xenc__EncryptedKeyType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_xenc__EncryptedKeyType(struct soap *soap, struct xenc__EncryptedKeyType *p)
{
	if (soap_read_xenc__EncryptedKeyType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xenc__EncryptedDataType_DEFINED
#define SOAP_TYPE_xenc__EncryptedDataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__EncryptedDataType(struct soap*, struct xenc__EncryptedDataType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__EncryptedDataType(struct soap*, const struct xenc__EncryptedDataType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__EncryptedDataType(struct soap*, const char*, int, const struct xenc__EncryptedDataType *, const char*);
SOAP_FMAC3 struct xenc__EncryptedDataType * SOAP_FMAC4 soap_in_xenc__EncryptedDataType(struct soap*, const char*, struct xenc__EncryptedDataType *, const char*);
SOAP_FMAC1 struct xenc__EncryptedDataType * SOAP_FMAC2 soap_instantiate_xenc__EncryptedDataType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__EncryptedDataType * soap_new_xenc__EncryptedDataType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xenc__EncryptedDataType(soap, n, NULL, NULL, NULL);
}

inline struct xenc__EncryptedDataType * soap_new_req_xenc__EncryptedDataType(
	struct soap *soap,
	struct xenc__CipherDataType *CipherData)
{
	struct xenc__EncryptedDataType *_p = soap_new_xenc__EncryptedDataType(soap);
	if (_p)
	{	soap_default_xenc__EncryptedDataType(soap, _p);
		_p->CipherData = CipherData;
	}
	return _p;
}

inline struct xenc__EncryptedDataType * soap_new_set_xenc__EncryptedDataType(
	struct soap *soap,
	struct xenc__EncryptionMethodType *EncryptionMethod,
	struct ds__KeyInfoType *ds__KeyInfo,
	struct xenc__CipherDataType *CipherData,
	struct xenc__EncryptionPropertiesType *EncryptionProperties,
	char *Id,
	char *Type,
	char *MimeType,
	char *Encoding)
{
	struct xenc__EncryptedDataType *_p = soap_new_xenc__EncryptedDataType(soap);
	if (_p)
	{	soap_default_xenc__EncryptedDataType(soap, _p);
		_p->EncryptionMethod = EncryptionMethod;
		_p->ds__KeyInfo = ds__KeyInfo;
		_p->CipherData = CipherData;
		_p->EncryptionProperties = EncryptionProperties;
		_p->Id = Id;
		_p->Type = Type;
		_p->MimeType = MimeType;
		_p->Encoding = Encoding;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__EncryptedDataType(struct soap*, const struct xenc__EncryptedDataType *, const char*, const char*);

inline int soap_write_xenc__EncryptedDataType(struct soap *soap, struct xenc__EncryptedDataType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_xenc__EncryptedDataType(soap, p), 0) || soap_put_xenc__EncryptedDataType(soap, p, "xenc:EncryptedDataType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xenc__EncryptedDataType(struct soap *soap, const char *URL, struct xenc__EncryptedDataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_xenc__EncryptedDataType(soap, p), 0) || soap_put_xenc__EncryptedDataType(soap, p, "xenc:EncryptedDataType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_xenc__EncryptedDataType(struct soap *soap, const char *URL, struct xenc__EncryptedDataType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_xenc__EncryptedDataType(soap, p), 0) || soap_put_xenc__EncryptedDataType(soap, p, "xenc:EncryptedDataType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct xenc__EncryptedDataType * SOAP_FMAC4 soap_get_xenc__EncryptedDataType(struct soap*, struct xenc__EncryptedDataType *, const char*, const char*);

inline int soap_read_xenc__EncryptedDataType(struct soap *soap, struct xenc__EncryptedDataType *p)
{
	if (p)
	{	soap_default_xenc__EncryptedDataType(soap, p);
		if (soap_begin_recv(soap) || soap_get_xenc__EncryptedDataType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xenc__EncryptedDataType(struct soap *soap, const char *URL, struct xenc__EncryptedDataType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xenc__EncryptedDataType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_xenc__EncryptedDataType(struct soap *soap, struct xenc__EncryptedDataType *p)
{
	if (soap_read_xenc__EncryptedDataType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xenc__TransformsType_DEFINED
#define SOAP_TYPE_xenc__TransformsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__TransformsType(struct soap*, struct xenc__TransformsType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__TransformsType(struct soap*, const struct xenc__TransformsType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__TransformsType(struct soap*, const char*, int, const struct xenc__TransformsType *, const char*);
SOAP_FMAC3 struct xenc__TransformsType * SOAP_FMAC4 soap_in_xenc__TransformsType(struct soap*, const char*, struct xenc__TransformsType *, const char*);
SOAP_FMAC1 struct xenc__TransformsType * SOAP_FMAC2 soap_instantiate_xenc__TransformsType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__TransformsType * soap_new_xenc__TransformsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xenc__TransformsType(soap, n, NULL, NULL, NULL);
}

inline struct xenc__TransformsType * soap_new_req_xenc__TransformsType(
	struct soap *soap,
	const struct ds__TransformType& ds__Transform)
{
	struct xenc__TransformsType *_p = soap_new_xenc__TransformsType(soap);
	if (_p)
	{	soap_default_xenc__TransformsType(soap, _p);
		_p->ds__Transform = ds__Transform;
	}
	return _p;
}

inline struct xenc__TransformsType * soap_new_set_xenc__TransformsType(
	struct soap *soap,
	const struct ds__TransformType& ds__Transform)
{
	struct xenc__TransformsType *_p = soap_new_xenc__TransformsType(soap);
	if (_p)
	{	soap_default_xenc__TransformsType(soap, _p);
		_p->ds__Transform = ds__Transform;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__TransformsType(struct soap*, const struct xenc__TransformsType *, const char*, const char*);

inline int soap_write_xenc__TransformsType(struct soap *soap, struct xenc__TransformsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_xenc__TransformsType(soap, p), 0) || soap_put_xenc__TransformsType(soap, p, "xenc:TransformsType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xenc__TransformsType(struct soap *soap, const char *URL, struct xenc__TransformsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_xenc__TransformsType(soap, p), 0) || soap_put_xenc__TransformsType(soap, p, "xenc:TransformsType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_xenc__TransformsType(struct soap *soap, const char *URL, struct xenc__TransformsType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_xenc__TransformsType(soap, p), 0) || soap_put_xenc__TransformsType(soap, p, "xenc:TransformsType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct xenc__TransformsType * SOAP_FMAC4 soap_get_xenc__TransformsType(struct soap*, struct xenc__TransformsType *, const char*, const char*);

inline int soap_read_xenc__TransformsType(struct soap *soap, struct xenc__TransformsType *p)
{
	if (p)
	{	soap_default_xenc__TransformsType(soap, p);
		if (soap_begin_recv(soap) || soap_get_xenc__TransformsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xenc__TransformsType(struct soap *soap, const char *URL, struct xenc__TransformsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xenc__TransformsType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_xenc__TransformsType(struct soap *soap, struct xenc__TransformsType *p)
{
	if (soap_read_xenc__TransformsType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xenc__CipherReferenceType_DEFINED
#define SOAP_TYPE_xenc__CipherReferenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__CipherReferenceType(struct soap*, struct xenc__CipherReferenceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__CipherReferenceType(struct soap*, const struct xenc__CipherReferenceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__CipherReferenceType(struct soap*, const char*, int, const struct xenc__CipherReferenceType *, const char*);
SOAP_FMAC3 struct xenc__CipherReferenceType * SOAP_FMAC4 soap_in_xenc__CipherReferenceType(struct soap*, const char*, struct xenc__CipherReferenceType *, const char*);
SOAP_FMAC1 struct xenc__CipherReferenceType * SOAP_FMAC2 soap_instantiate_xenc__CipherReferenceType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__CipherReferenceType * soap_new_xenc__CipherReferenceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xenc__CipherReferenceType(soap, n, NULL, NULL, NULL);
}

inline struct xenc__CipherReferenceType * soap_new_req_xenc__CipherReferenceType(
	struct soap *soap,
	char *URI)
{
	struct xenc__CipherReferenceType *_p = soap_new_xenc__CipherReferenceType(soap);
	if (_p)
	{	soap_default_xenc__CipherReferenceType(soap, _p);
		_p->URI = URI;
	}
	return _p;
}

inline struct xenc__CipherReferenceType * soap_new_set_xenc__CipherReferenceType(
	struct soap *soap,
	struct xenc__TransformsType *Transforms,
	char *URI)
{
	struct xenc__CipherReferenceType *_p = soap_new_xenc__CipherReferenceType(soap);
	if (_p)
	{	soap_default_xenc__CipherReferenceType(soap, _p);
		_p->Transforms = Transforms;
		_p->URI = URI;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__CipherReferenceType(struct soap*, const struct xenc__CipherReferenceType *, const char*, const char*);

inline int soap_write_xenc__CipherReferenceType(struct soap *soap, struct xenc__CipherReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_xenc__CipherReferenceType(soap, p), 0) || soap_put_xenc__CipherReferenceType(soap, p, "xenc:CipherReferenceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xenc__CipherReferenceType(struct soap *soap, const char *URL, struct xenc__CipherReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_xenc__CipherReferenceType(soap, p), 0) || soap_put_xenc__CipherReferenceType(soap, p, "xenc:CipherReferenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_xenc__CipherReferenceType(struct soap *soap, const char *URL, struct xenc__CipherReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_xenc__CipherReferenceType(soap, p), 0) || soap_put_xenc__CipherReferenceType(soap, p, "xenc:CipherReferenceType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct xenc__CipherReferenceType * SOAP_FMAC4 soap_get_xenc__CipherReferenceType(struct soap*, struct xenc__CipherReferenceType *, const char*, const char*);

inline int soap_read_xenc__CipherReferenceType(struct soap *soap, struct xenc__CipherReferenceType *p)
{
	if (p)
	{	soap_default_xenc__CipherReferenceType(soap, p);
		if (soap_begin_recv(soap) || soap_get_xenc__CipherReferenceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xenc__CipherReferenceType(struct soap *soap, const char *URL, struct xenc__CipherReferenceType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xenc__CipherReferenceType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_xenc__CipherReferenceType(struct soap *soap, struct xenc__CipherReferenceType *p)
{
	if (soap_read_xenc__CipherReferenceType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xenc__CipherDataType_DEFINED
#define SOAP_TYPE_xenc__CipherDataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__CipherDataType(struct soap*, struct xenc__CipherDataType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__CipherDataType(struct soap*, const struct xenc__CipherDataType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__CipherDataType(struct soap*, const char*, int, const struct xenc__CipherDataType *, const char*);
SOAP_FMAC3 struct xenc__CipherDataType * SOAP_FMAC4 soap_in_xenc__CipherDataType(struct soap*, const char*, struct xenc__CipherDataType *, const char*);
SOAP_FMAC1 struct xenc__CipherDataType * SOAP_FMAC2 soap_instantiate_xenc__CipherDataType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__CipherDataType * soap_new_xenc__CipherDataType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xenc__CipherDataType(soap, n, NULL, NULL, NULL);
}

inline struct xenc__CipherDataType * soap_new_req_xenc__CipherDataType(
	struct soap *soap)
{
	struct xenc__CipherDataType *_p = soap_new_xenc__CipherDataType(soap);
	if (_p)
	{	soap_default_xenc__CipherDataType(soap, _p);
	}
	return _p;
}

inline struct xenc__CipherDataType * soap_new_set_xenc__CipherDataType(
	struct soap *soap,
	char *CipherValue,
	struct xenc__CipherReferenceType *CipherReference)
{
	struct xenc__CipherDataType *_p = soap_new_xenc__CipherDataType(soap);
	if (_p)
	{	soap_default_xenc__CipherDataType(soap, _p);
		_p->CipherValue = CipherValue;
		_p->CipherReference = CipherReference;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__CipherDataType(struct soap*, const struct xenc__CipherDataType *, const char*, const char*);

inline int soap_write_xenc__CipherDataType(struct soap *soap, struct xenc__CipherDataType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_xenc__CipherDataType(soap, p), 0) || soap_put_xenc__CipherDataType(soap, p, "xenc:CipherDataType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xenc__CipherDataType(struct soap *soap, const char *URL, struct xenc__CipherDataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_xenc__CipherDataType(soap, p), 0) || soap_put_xenc__CipherDataType(soap, p, "xenc:CipherDataType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_xenc__CipherDataType(struct soap *soap, const char *URL, struct xenc__CipherDataType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_xenc__CipherDataType(soap, p), 0) || soap_put_xenc__CipherDataType(soap, p, "xenc:CipherDataType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct xenc__CipherDataType * SOAP_FMAC4 soap_get_xenc__CipherDataType(struct soap*, struct xenc__CipherDataType *, const char*, const char*);

inline int soap_read_xenc__CipherDataType(struct soap *soap, struct xenc__CipherDataType *p)
{
	if (p)
	{	soap_default_xenc__CipherDataType(soap, p);
		if (soap_begin_recv(soap) || soap_get_xenc__CipherDataType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xenc__CipherDataType(struct soap *soap, const char *URL, struct xenc__CipherDataType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xenc__CipherDataType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_xenc__CipherDataType(struct soap *soap, struct xenc__CipherDataType *p)
{
	if (soap_read_xenc__CipherDataType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xenc__EncryptionMethodType_DEFINED
#define SOAP_TYPE_xenc__EncryptionMethodType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__EncryptionMethodType(struct soap*, struct xenc__EncryptionMethodType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__EncryptionMethodType(struct soap*, const struct xenc__EncryptionMethodType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__EncryptionMethodType(struct soap*, const char*, int, const struct xenc__EncryptionMethodType *, const char*);
SOAP_FMAC3 struct xenc__EncryptionMethodType * SOAP_FMAC4 soap_in_xenc__EncryptionMethodType(struct soap*, const char*, struct xenc__EncryptionMethodType *, const char*);
SOAP_FMAC1 struct xenc__EncryptionMethodType * SOAP_FMAC2 soap_instantiate_xenc__EncryptionMethodType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__EncryptionMethodType * soap_new_xenc__EncryptionMethodType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xenc__EncryptionMethodType(soap, n, NULL, NULL, NULL);
}

inline struct xenc__EncryptionMethodType * soap_new_req_xenc__EncryptionMethodType(
	struct soap *soap,
	char *Algorithm)
{
	struct xenc__EncryptionMethodType *_p = soap_new_xenc__EncryptionMethodType(soap);
	if (_p)
	{	soap_default_xenc__EncryptionMethodType(soap, _p);
		_p->Algorithm = Algorithm;
	}
	return _p;
}

inline struct xenc__EncryptionMethodType * soap_new_set_xenc__EncryptionMethodType(
	struct soap *soap,
	int *KeySize,
	char *OAEPparams,
	char *Algorithm,
	struct ds__DigestMethodType *ds__DigestMethod,
	char *__mixed)
{
	struct xenc__EncryptionMethodType *_p = soap_new_xenc__EncryptionMethodType(soap);
	if (_p)
	{	soap_default_xenc__EncryptionMethodType(soap, _p);
		_p->KeySize = KeySize;
		_p->OAEPparams = OAEPparams;
		_p->Algorithm = Algorithm;
		_p->ds__DigestMethod = ds__DigestMethod;
		_p->__mixed = __mixed;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__EncryptionMethodType(struct soap*, const struct xenc__EncryptionMethodType *, const char*, const char*);

inline int soap_write_xenc__EncryptionMethodType(struct soap *soap, struct xenc__EncryptionMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_xenc__EncryptionMethodType(soap, p), 0) || soap_put_xenc__EncryptionMethodType(soap, p, "xenc:EncryptionMethodType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xenc__EncryptionMethodType(struct soap *soap, const char *URL, struct xenc__EncryptionMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_xenc__EncryptionMethodType(soap, p), 0) || soap_put_xenc__EncryptionMethodType(soap, p, "xenc:EncryptionMethodType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_xenc__EncryptionMethodType(struct soap *soap, const char *URL, struct xenc__EncryptionMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_xenc__EncryptionMethodType(soap, p), 0) || soap_put_xenc__EncryptionMethodType(soap, p, "xenc:EncryptionMethodType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct xenc__EncryptionMethodType * SOAP_FMAC4 soap_get_xenc__EncryptionMethodType(struct soap*, struct xenc__EncryptionMethodType *, const char*, const char*);

inline int soap_read_xenc__EncryptionMethodType(struct soap *soap, struct xenc__EncryptionMethodType *p)
{
	if (p)
	{	soap_default_xenc__EncryptionMethodType(soap, p);
		if (soap_begin_recv(soap) || soap_get_xenc__EncryptionMethodType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xenc__EncryptionMethodType(struct soap *soap, const char *URL, struct xenc__EncryptionMethodType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xenc__EncryptionMethodType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_xenc__EncryptionMethodType(struct soap *soap, struct xenc__EncryptionMethodType *p)
{
	if (soap_read_xenc__EncryptionMethodType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xenc__EncryptedType_DEFINED
#define SOAP_TYPE_xenc__EncryptedType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__EncryptedType(struct soap*, struct xenc__EncryptedType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__EncryptedType(struct soap*, const struct xenc__EncryptedType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__EncryptedType(struct soap*, const char*, int, const struct xenc__EncryptedType *, const char*);
SOAP_FMAC3 struct xenc__EncryptedType * SOAP_FMAC4 soap_in_xenc__EncryptedType(struct soap*, const char*, struct xenc__EncryptedType *, const char*);
SOAP_FMAC1 struct xenc__EncryptedType * SOAP_FMAC2 soap_instantiate_xenc__EncryptedType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__EncryptedType * soap_new_xenc__EncryptedType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xenc__EncryptedType(soap, n, NULL, NULL, NULL);
}

inline struct xenc__EncryptedType * soap_new_req_xenc__EncryptedType(
	struct soap *soap,
	struct xenc__CipherDataType *CipherData)
{
	struct xenc__EncryptedType *_p = soap_new_xenc__EncryptedType(soap);
	if (_p)
	{	soap_default_xenc__EncryptedType(soap, _p);
		_p->CipherData = CipherData;
	}
	return _p;
}

inline struct xenc__EncryptedType * soap_new_set_xenc__EncryptedType(
	struct soap *soap,
	struct xenc__EncryptionMethodType *EncryptionMethod,
	struct ds__KeyInfoType *ds__KeyInfo,
	struct xenc__CipherDataType *CipherData,
	struct xenc__EncryptionPropertiesType *EncryptionProperties,
	char *Id,
	char *Type,
	char *MimeType,
	char *Encoding)
{
	struct xenc__EncryptedType *_p = soap_new_xenc__EncryptedType(soap);
	if (_p)
	{	soap_default_xenc__EncryptedType(soap, _p);
		_p->EncryptionMethod = EncryptionMethod;
		_p->ds__KeyInfo = ds__KeyInfo;
		_p->CipherData = CipherData;
		_p->EncryptionProperties = EncryptionProperties;
		_p->Id = Id;
		_p->Type = Type;
		_p->MimeType = MimeType;
		_p->Encoding = Encoding;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__EncryptedType(struct soap*, const struct xenc__EncryptedType *, const char*, const char*);

inline int soap_write_xenc__EncryptedType(struct soap *soap, struct xenc__EncryptedType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_xenc__EncryptedType(soap, p), 0) || soap_put_xenc__EncryptedType(soap, p, "xenc:EncryptedType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xenc__EncryptedType(struct soap *soap, const char *URL, struct xenc__EncryptedType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_xenc__EncryptedType(soap, p), 0) || soap_put_xenc__EncryptedType(soap, p, "xenc:EncryptedType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_xenc__EncryptedType(struct soap *soap, const char *URL, struct xenc__EncryptedType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_xenc__EncryptedType(soap, p), 0) || soap_put_xenc__EncryptedType(soap, p, "xenc:EncryptedType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct xenc__EncryptedType * SOAP_FMAC4 soap_get_xenc__EncryptedType(struct soap*, struct xenc__EncryptedType *, const char*, const char*);

inline int soap_read_xenc__EncryptedType(struct soap *soap, struct xenc__EncryptedType *p)
{
	if (p)
	{	soap_default_xenc__EncryptedType(soap, p);
		if (soap_begin_recv(soap) || soap_get_xenc__EncryptedType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xenc__EncryptedType(struct soap *soap, const char *URL, struct xenc__EncryptedType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xenc__EncryptedType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_xenc__EncryptedType(struct soap *soap, struct xenc__EncryptedType *p)
{
	if (soap_read_xenc__EncryptedType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ds__RSAKeyValueType_DEFINED
#define SOAP_TYPE_ds__RSAKeyValueType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__RSAKeyValueType(struct soap*, struct ds__RSAKeyValueType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__RSAKeyValueType(struct soap*, const struct ds__RSAKeyValueType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__RSAKeyValueType(struct soap*, const char*, int, const struct ds__RSAKeyValueType *, const char*);
SOAP_FMAC3 struct ds__RSAKeyValueType * SOAP_FMAC4 soap_in_ds__RSAKeyValueType(struct soap*, const char*, struct ds__RSAKeyValueType *, const char*);
SOAP_FMAC1 struct ds__RSAKeyValueType * SOAP_FMAC2 soap_instantiate_ds__RSAKeyValueType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__RSAKeyValueType * soap_new_ds__RSAKeyValueType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__RSAKeyValueType(soap, n, NULL, NULL, NULL);
}

inline struct ds__RSAKeyValueType * soap_new_req_ds__RSAKeyValueType(
	struct soap *soap,
	char *Modulus,
	char *Exponent)
{
	struct ds__RSAKeyValueType *_p = soap_new_ds__RSAKeyValueType(soap);
	if (_p)
	{	soap_default_ds__RSAKeyValueType(soap, _p);
		_p->Modulus = Modulus;
		_p->Exponent = Exponent;
	}
	return _p;
}

inline struct ds__RSAKeyValueType * soap_new_set_ds__RSAKeyValueType(
	struct soap *soap,
	char *Modulus,
	char *Exponent)
{
	struct ds__RSAKeyValueType *_p = soap_new_ds__RSAKeyValueType(soap);
	if (_p)
	{	soap_default_ds__RSAKeyValueType(soap, _p);
		_p->Modulus = Modulus;
		_p->Exponent = Exponent;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__RSAKeyValueType(struct soap*, const struct ds__RSAKeyValueType *, const char*, const char*);

inline int soap_write_ds__RSAKeyValueType(struct soap *soap, struct ds__RSAKeyValueType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ds__RSAKeyValueType(soap, p), 0) || soap_put_ds__RSAKeyValueType(soap, p, "ds:RSAKeyValueType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__RSAKeyValueType(struct soap *soap, const char *URL, struct ds__RSAKeyValueType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ds__RSAKeyValueType(soap, p), 0) || soap_put_ds__RSAKeyValueType(soap, p, "ds:RSAKeyValueType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ds__RSAKeyValueType(struct soap *soap, const char *URL, struct ds__RSAKeyValueType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ds__RSAKeyValueType(soap, p), 0) || soap_put_ds__RSAKeyValueType(soap, p, "ds:RSAKeyValueType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__RSAKeyValueType * SOAP_FMAC4 soap_get_ds__RSAKeyValueType(struct soap*, struct ds__RSAKeyValueType *, const char*, const char*);

inline int soap_read_ds__RSAKeyValueType(struct soap *soap, struct ds__RSAKeyValueType *p)
{
	if (p)
	{	soap_default_ds__RSAKeyValueType(soap, p);
		if (soap_begin_recv(soap) || soap_get_ds__RSAKeyValueType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__RSAKeyValueType(struct soap *soap, const char *URL, struct ds__RSAKeyValueType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ds__RSAKeyValueType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ds__RSAKeyValueType(struct soap *soap, struct ds__RSAKeyValueType *p)
{
	if (soap_read_ds__RSAKeyValueType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ds__DSAKeyValueType_DEFINED
#define SOAP_TYPE_ds__DSAKeyValueType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__DSAKeyValueType(struct soap*, struct ds__DSAKeyValueType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__DSAKeyValueType(struct soap*, const struct ds__DSAKeyValueType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__DSAKeyValueType(struct soap*, const char*, int, const struct ds__DSAKeyValueType *, const char*);
SOAP_FMAC3 struct ds__DSAKeyValueType * SOAP_FMAC4 soap_in_ds__DSAKeyValueType(struct soap*, const char*, struct ds__DSAKeyValueType *, const char*);
SOAP_FMAC1 struct ds__DSAKeyValueType * SOAP_FMAC2 soap_instantiate_ds__DSAKeyValueType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__DSAKeyValueType * soap_new_ds__DSAKeyValueType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__DSAKeyValueType(soap, n, NULL, NULL, NULL);
}

inline struct ds__DSAKeyValueType * soap_new_req_ds__DSAKeyValueType(
	struct soap *soap,
	char *Y,
	char *P,
	char *Q,
	char *Seed,
	char *PgenCounter)
{
	struct ds__DSAKeyValueType *_p = soap_new_ds__DSAKeyValueType(soap);
	if (_p)
	{	soap_default_ds__DSAKeyValueType(soap, _p);
		_p->Y = Y;
		_p->P = P;
		_p->Q = Q;
		_p->Seed = Seed;
		_p->PgenCounter = PgenCounter;
	}
	return _p;
}

inline struct ds__DSAKeyValueType * soap_new_set_ds__DSAKeyValueType(
	struct soap *soap,
	char *G,
	char *Y,
	char *J,
	char *P,
	char *Q,
	char *Seed,
	char *PgenCounter)
{
	struct ds__DSAKeyValueType *_p = soap_new_ds__DSAKeyValueType(soap);
	if (_p)
	{	soap_default_ds__DSAKeyValueType(soap, _p);
		_p->G = G;
		_p->Y = Y;
		_p->J = J;
		_p->P = P;
		_p->Q = Q;
		_p->Seed = Seed;
		_p->PgenCounter = PgenCounter;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__DSAKeyValueType(struct soap*, const struct ds__DSAKeyValueType *, const char*, const char*);

inline int soap_write_ds__DSAKeyValueType(struct soap *soap, struct ds__DSAKeyValueType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ds__DSAKeyValueType(soap, p), 0) || soap_put_ds__DSAKeyValueType(soap, p, "ds:DSAKeyValueType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__DSAKeyValueType(struct soap *soap, const char *URL, struct ds__DSAKeyValueType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ds__DSAKeyValueType(soap, p), 0) || soap_put_ds__DSAKeyValueType(soap, p, "ds:DSAKeyValueType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ds__DSAKeyValueType(struct soap *soap, const char *URL, struct ds__DSAKeyValueType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ds__DSAKeyValueType(soap, p), 0) || soap_put_ds__DSAKeyValueType(soap, p, "ds:DSAKeyValueType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__DSAKeyValueType * SOAP_FMAC4 soap_get_ds__DSAKeyValueType(struct soap*, struct ds__DSAKeyValueType *, const char*, const char*);

inline int soap_read_ds__DSAKeyValueType(struct soap *soap, struct ds__DSAKeyValueType *p)
{
	if (p)
	{	soap_default_ds__DSAKeyValueType(soap, p);
		if (soap_begin_recv(soap) || soap_get_ds__DSAKeyValueType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__DSAKeyValueType(struct soap *soap, const char *URL, struct ds__DSAKeyValueType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ds__DSAKeyValueType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ds__DSAKeyValueType(struct soap *soap, struct ds__DSAKeyValueType *p)
{
	if (soap_read_ds__DSAKeyValueType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ds__X509IssuerSerialType_DEFINED
#define SOAP_TYPE_ds__X509IssuerSerialType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__X509IssuerSerialType(struct soap*, struct ds__X509IssuerSerialType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__X509IssuerSerialType(struct soap*, const struct ds__X509IssuerSerialType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__X509IssuerSerialType(struct soap*, const char*, int, const struct ds__X509IssuerSerialType *, const char*);
SOAP_FMAC3 struct ds__X509IssuerSerialType * SOAP_FMAC4 soap_in_ds__X509IssuerSerialType(struct soap*, const char*, struct ds__X509IssuerSerialType *, const char*);
SOAP_FMAC1 struct ds__X509IssuerSerialType * SOAP_FMAC2 soap_instantiate_ds__X509IssuerSerialType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__X509IssuerSerialType * soap_new_ds__X509IssuerSerialType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__X509IssuerSerialType(soap, n, NULL, NULL, NULL);
}

inline struct ds__X509IssuerSerialType * soap_new_req_ds__X509IssuerSerialType(
	struct soap *soap,
	char *X509IssuerName,
	char *X509SerialNumber)
{
	struct ds__X509IssuerSerialType *_p = soap_new_ds__X509IssuerSerialType(soap);
	if (_p)
	{	soap_default_ds__X509IssuerSerialType(soap, _p);
		_p->X509IssuerName = X509IssuerName;
		_p->X509SerialNumber = X509SerialNumber;
	}
	return _p;
}

inline struct ds__X509IssuerSerialType * soap_new_set_ds__X509IssuerSerialType(
	struct soap *soap,
	char *X509IssuerName,
	char *X509SerialNumber)
{
	struct ds__X509IssuerSerialType *_p = soap_new_ds__X509IssuerSerialType(soap);
	if (_p)
	{	soap_default_ds__X509IssuerSerialType(soap, _p);
		_p->X509IssuerName = X509IssuerName;
		_p->X509SerialNumber = X509SerialNumber;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__X509IssuerSerialType(struct soap*, const struct ds__X509IssuerSerialType *, const char*, const char*);

inline int soap_write_ds__X509IssuerSerialType(struct soap *soap, struct ds__X509IssuerSerialType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ds__X509IssuerSerialType(soap, p), 0) || soap_put_ds__X509IssuerSerialType(soap, p, "ds:X509IssuerSerialType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__X509IssuerSerialType(struct soap *soap, const char *URL, struct ds__X509IssuerSerialType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ds__X509IssuerSerialType(soap, p), 0) || soap_put_ds__X509IssuerSerialType(soap, p, "ds:X509IssuerSerialType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ds__X509IssuerSerialType(struct soap *soap, const char *URL, struct ds__X509IssuerSerialType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ds__X509IssuerSerialType(soap, p), 0) || soap_put_ds__X509IssuerSerialType(soap, p, "ds:X509IssuerSerialType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__X509IssuerSerialType * SOAP_FMAC4 soap_get_ds__X509IssuerSerialType(struct soap*, struct ds__X509IssuerSerialType *, const char*, const char*);

inline int soap_read_ds__X509IssuerSerialType(struct soap *soap, struct ds__X509IssuerSerialType *p)
{
	if (p)
	{	soap_default_ds__X509IssuerSerialType(soap, p);
		if (soap_begin_recv(soap) || soap_get_ds__X509IssuerSerialType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__X509IssuerSerialType(struct soap *soap, const char *URL, struct ds__X509IssuerSerialType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ds__X509IssuerSerialType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ds__X509IssuerSerialType(struct soap *soap, struct ds__X509IssuerSerialType *p)
{
	if (soap_read_ds__X509IssuerSerialType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif
/* _ds__KeyInfo is a typedef synonym for ds__KeyInfoType */

#ifndef SOAP_TYPE__ds__KeyInfo_DEFINED
#define SOAP_TYPE__ds__KeyInfo_DEFINED

#define soap_default__ds__KeyInfo soap_default_ds__KeyInfoType


#define soap_serialize__ds__KeyInfo soap_serialize_ds__KeyInfoType


#define soap__ds__KeyInfo2s soap_ds__KeyInfoType2s


#define soap_out__ds__KeyInfo soap_out_ds__KeyInfoType


#define soap_s2_ds__KeyInfo soap_s2ds__KeyInfoType


#define soap_in__ds__KeyInfo soap_in_ds__KeyInfoType


#define soap_instantiate__ds__KeyInfo soap_instantiate_ds__KeyInfoType


#define soap_new__ds__KeyInfo soap_new_ds__KeyInfoType


#define soap_new_req__ds__KeyInfo soap_new_req_ds__KeyInfoType


#define soap_new_set__ds__KeyInfo soap_new_set_ds__KeyInfoType


#define soap_put__ds__KeyInfo soap_put_ds__KeyInfoType


#define soap_write__ds__KeyInfo soap_write_ds__KeyInfoType


#define soap_PUT__ds__KeyInfo soap_PUT_ds__KeyInfoType


#define soap_POST_send__ds__KeyInfo soap_POST_send_ds__KeyInfoType


#define soap_get__ds__KeyInfo soap_get_ds__KeyInfoType


#define soap_read__ds__KeyInfo soap_read_ds__KeyInfoType


#define soap_GET__ds__KeyInfo soap_GET_ds__KeyInfoType


#define soap_POST_recv__ds__KeyInfo soap_POST_recv_ds__KeyInfoType

#endif

#ifndef SOAP_TYPE_ds__RetrievalMethodType_DEFINED
#define SOAP_TYPE_ds__RetrievalMethodType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__RetrievalMethodType(struct soap*, struct ds__RetrievalMethodType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__RetrievalMethodType(struct soap*, const struct ds__RetrievalMethodType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__RetrievalMethodType(struct soap*, const char*, int, const struct ds__RetrievalMethodType *, const char*);
SOAP_FMAC3 struct ds__RetrievalMethodType * SOAP_FMAC4 soap_in_ds__RetrievalMethodType(struct soap*, const char*, struct ds__RetrievalMethodType *, const char*);
SOAP_FMAC1 struct ds__RetrievalMethodType * SOAP_FMAC2 soap_instantiate_ds__RetrievalMethodType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__RetrievalMethodType * soap_new_ds__RetrievalMethodType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__RetrievalMethodType(soap, n, NULL, NULL, NULL);
}

inline struct ds__RetrievalMethodType * soap_new_req_ds__RetrievalMethodType(
	struct soap *soap)
{
	struct ds__RetrievalMethodType *_p = soap_new_ds__RetrievalMethodType(soap);
	if (_p)
	{	soap_default_ds__RetrievalMethodType(soap, _p);
	}
	return _p;
}

inline struct ds__RetrievalMethodType * soap_new_set_ds__RetrievalMethodType(
	struct soap *soap,
	struct ds__TransformsType *Transforms,
	char *URI,
	char *Type)
{
	struct ds__RetrievalMethodType *_p = soap_new_ds__RetrievalMethodType(soap);
	if (_p)
	{	soap_default_ds__RetrievalMethodType(soap, _p);
		_p->Transforms = Transforms;
		_p->URI = URI;
		_p->Type = Type;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__RetrievalMethodType(struct soap*, const struct ds__RetrievalMethodType *, const char*, const char*);

inline int soap_write_ds__RetrievalMethodType(struct soap *soap, struct ds__RetrievalMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ds__RetrievalMethodType(soap, p), 0) || soap_put_ds__RetrievalMethodType(soap, p, "ds:RetrievalMethodType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__RetrievalMethodType(struct soap *soap, const char *URL, struct ds__RetrievalMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ds__RetrievalMethodType(soap, p), 0) || soap_put_ds__RetrievalMethodType(soap, p, "ds:RetrievalMethodType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ds__RetrievalMethodType(struct soap *soap, const char *URL, struct ds__RetrievalMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ds__RetrievalMethodType(soap, p), 0) || soap_put_ds__RetrievalMethodType(soap, p, "ds:RetrievalMethodType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__RetrievalMethodType * SOAP_FMAC4 soap_get_ds__RetrievalMethodType(struct soap*, struct ds__RetrievalMethodType *, const char*, const char*);

inline int soap_read_ds__RetrievalMethodType(struct soap *soap, struct ds__RetrievalMethodType *p)
{
	if (p)
	{	soap_default_ds__RetrievalMethodType(soap, p);
		if (soap_begin_recv(soap) || soap_get_ds__RetrievalMethodType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__RetrievalMethodType(struct soap *soap, const char *URL, struct ds__RetrievalMethodType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ds__RetrievalMethodType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ds__RetrievalMethodType(struct soap *soap, struct ds__RetrievalMethodType *p)
{
	if (soap_read_ds__RetrievalMethodType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ds__KeyValueType_DEFINED
#define SOAP_TYPE_ds__KeyValueType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__KeyValueType(struct soap*, struct ds__KeyValueType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__KeyValueType(struct soap*, const struct ds__KeyValueType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__KeyValueType(struct soap*, const char*, int, const struct ds__KeyValueType *, const char*);
SOAP_FMAC3 struct ds__KeyValueType * SOAP_FMAC4 soap_in_ds__KeyValueType(struct soap*, const char*, struct ds__KeyValueType *, const char*);
SOAP_FMAC1 struct ds__KeyValueType * SOAP_FMAC2 soap_instantiate_ds__KeyValueType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__KeyValueType * soap_new_ds__KeyValueType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__KeyValueType(soap, n, NULL, NULL, NULL);
}

inline struct ds__KeyValueType * soap_new_req_ds__KeyValueType(
	struct soap *soap)
{
	struct ds__KeyValueType *_p = soap_new_ds__KeyValueType(soap);
	if (_p)
	{	soap_default_ds__KeyValueType(soap, _p);
	}
	return _p;
}

inline struct ds__KeyValueType * soap_new_set_ds__KeyValueType(
	struct soap *soap,
	struct ds__DSAKeyValueType *DSAKeyValue,
	struct ds__RSAKeyValueType *RSAKeyValue)
{
	struct ds__KeyValueType *_p = soap_new_ds__KeyValueType(soap);
	if (_p)
	{	soap_default_ds__KeyValueType(soap, _p);
		_p->DSAKeyValue = DSAKeyValue;
		_p->RSAKeyValue = RSAKeyValue;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__KeyValueType(struct soap*, const struct ds__KeyValueType *, const char*, const char*);

inline int soap_write_ds__KeyValueType(struct soap *soap, struct ds__KeyValueType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ds__KeyValueType(soap, p), 0) || soap_put_ds__KeyValueType(soap, p, "ds:KeyValueType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__KeyValueType(struct soap *soap, const char *URL, struct ds__KeyValueType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ds__KeyValueType(soap, p), 0) || soap_put_ds__KeyValueType(soap, p, "ds:KeyValueType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ds__KeyValueType(struct soap *soap, const char *URL, struct ds__KeyValueType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ds__KeyValueType(soap, p), 0) || soap_put_ds__KeyValueType(soap, p, "ds:KeyValueType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__KeyValueType * SOAP_FMAC4 soap_get_ds__KeyValueType(struct soap*, struct ds__KeyValueType *, const char*, const char*);

inline int soap_read_ds__KeyValueType(struct soap *soap, struct ds__KeyValueType *p)
{
	if (p)
	{	soap_default_ds__KeyValueType(soap, p);
		if (soap_begin_recv(soap) || soap_get_ds__KeyValueType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__KeyValueType(struct soap *soap, const char *URL, struct ds__KeyValueType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ds__KeyValueType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ds__KeyValueType(struct soap *soap, struct ds__KeyValueType *p)
{
	if (soap_read_ds__KeyValueType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ds__DigestMethodType_DEFINED
#define SOAP_TYPE_ds__DigestMethodType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__DigestMethodType(struct soap*, struct ds__DigestMethodType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__DigestMethodType(struct soap*, const struct ds__DigestMethodType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__DigestMethodType(struct soap*, const char*, int, const struct ds__DigestMethodType *, const char*);
SOAP_FMAC3 struct ds__DigestMethodType * SOAP_FMAC4 soap_in_ds__DigestMethodType(struct soap*, const char*, struct ds__DigestMethodType *, const char*);
SOAP_FMAC1 struct ds__DigestMethodType * SOAP_FMAC2 soap_instantiate_ds__DigestMethodType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__DigestMethodType * soap_new_ds__DigestMethodType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__DigestMethodType(soap, n, NULL, NULL, NULL);
}

inline struct ds__DigestMethodType * soap_new_req_ds__DigestMethodType(
	struct soap *soap,
	char *Algorithm)
{
	struct ds__DigestMethodType *_p = soap_new_ds__DigestMethodType(soap);
	if (_p)
	{	soap_default_ds__DigestMethodType(soap, _p);
		_p->Algorithm = Algorithm;
	}
	return _p;
}

inline struct ds__DigestMethodType * soap_new_set_ds__DigestMethodType(
	struct soap *soap,
	char *Algorithm)
{
	struct ds__DigestMethodType *_p = soap_new_ds__DigestMethodType(soap);
	if (_p)
	{	soap_default_ds__DigestMethodType(soap, _p);
		_p->Algorithm = Algorithm;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__DigestMethodType(struct soap*, const struct ds__DigestMethodType *, const char*, const char*);

inline int soap_write_ds__DigestMethodType(struct soap *soap, struct ds__DigestMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ds__DigestMethodType(soap, p), 0) || soap_put_ds__DigestMethodType(soap, p, "ds:DigestMethodType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__DigestMethodType(struct soap *soap, const char *URL, struct ds__DigestMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ds__DigestMethodType(soap, p), 0) || soap_put_ds__DigestMethodType(soap, p, "ds:DigestMethodType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ds__DigestMethodType(struct soap *soap, const char *URL, struct ds__DigestMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ds__DigestMethodType(soap, p), 0) || soap_put_ds__DigestMethodType(soap, p, "ds:DigestMethodType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__DigestMethodType * SOAP_FMAC4 soap_get_ds__DigestMethodType(struct soap*, struct ds__DigestMethodType *, const char*, const char*);

inline int soap_read_ds__DigestMethodType(struct soap *soap, struct ds__DigestMethodType *p)
{
	if (p)
	{	soap_default_ds__DigestMethodType(soap, p);
		if (soap_begin_recv(soap) || soap_get_ds__DigestMethodType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__DigestMethodType(struct soap *soap, const char *URL, struct ds__DigestMethodType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ds__DigestMethodType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ds__DigestMethodType(struct soap *soap, struct ds__DigestMethodType *p)
{
	if (soap_read_ds__DigestMethodType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif
/* _ds__Transform is a typedef synonym for ds__TransformType */

#ifndef SOAP_TYPE__ds__Transform_DEFINED
#define SOAP_TYPE__ds__Transform_DEFINED

#define soap_default__ds__Transform soap_default_ds__TransformType


#define soap_serialize__ds__Transform soap_serialize_ds__TransformType


#define soap__ds__Transform2s soap_ds__TransformType2s


#define soap_out__ds__Transform soap_out_ds__TransformType


#define soap_s2_ds__Transform soap_s2ds__TransformType


#define soap_in__ds__Transform soap_in_ds__TransformType


#define soap_instantiate__ds__Transform soap_instantiate_ds__TransformType


#define soap_new__ds__Transform soap_new_ds__TransformType


#define soap_new_req__ds__Transform soap_new_req_ds__TransformType


#define soap_new_set__ds__Transform soap_new_set_ds__TransformType


#define soap_put__ds__Transform soap_put_ds__TransformType


#define soap_write__ds__Transform soap_write_ds__TransformType


#define soap_PUT__ds__Transform soap_PUT_ds__TransformType


#define soap_POST_send__ds__Transform soap_POST_send_ds__TransformType


#define soap_get__ds__Transform soap_get_ds__TransformType


#define soap_read__ds__Transform soap_read_ds__TransformType


#define soap_GET__ds__Transform soap_GET_ds__TransformType


#define soap_POST_recv__ds__Transform soap_POST_recv_ds__TransformType

#endif

#ifndef SOAP_TYPE_ds__TransformType_DEFINED
#define SOAP_TYPE_ds__TransformType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__TransformType(struct soap*, struct ds__TransformType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__TransformType(struct soap*, const struct ds__TransformType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__TransformType(struct soap*, const char*, int, const struct ds__TransformType *, const char*);
SOAP_FMAC3 struct ds__TransformType * SOAP_FMAC4 soap_in_ds__TransformType(struct soap*, const char*, struct ds__TransformType *, const char*);
SOAP_FMAC1 struct ds__TransformType * SOAP_FMAC2 soap_instantiate_ds__TransformType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__TransformType * soap_new_ds__TransformType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__TransformType(soap, n, NULL, NULL, NULL);
}

inline struct ds__TransformType * soap_new_req_ds__TransformType(
	struct soap *soap)
{
	struct ds__TransformType *_p = soap_new_ds__TransformType(soap);
	if (_p)
	{	soap_default_ds__TransformType(soap, _p);
	}
	return _p;
}

inline struct ds__TransformType * soap_new_set_ds__TransformType(
	struct soap *soap,
	struct _c14n__InclusiveNamespaces *c14n__InclusiveNamespaces,
	char *__any,
	char *Algorithm)
{
	struct ds__TransformType *_p = soap_new_ds__TransformType(soap);
	if (_p)
	{	soap_default_ds__TransformType(soap, _p);
		_p->c14n__InclusiveNamespaces = c14n__InclusiveNamespaces;
		_p->__any = __any;
		_p->Algorithm = Algorithm;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__TransformType(struct soap*, const struct ds__TransformType *, const char*, const char*);

inline int soap_write_ds__TransformType(struct soap *soap, struct ds__TransformType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ds__TransformType(soap, p), 0) || soap_put_ds__TransformType(soap, p, "ds:TransformType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__TransformType(struct soap *soap, const char *URL, struct ds__TransformType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ds__TransformType(soap, p), 0) || soap_put_ds__TransformType(soap, p, "ds:TransformType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ds__TransformType(struct soap *soap, const char *URL, struct ds__TransformType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ds__TransformType(soap, p), 0) || soap_put_ds__TransformType(soap, p, "ds:TransformType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__TransformType * SOAP_FMAC4 soap_get_ds__TransformType(struct soap*, struct ds__TransformType *, const char*, const char*);

inline int soap_read_ds__TransformType(struct soap *soap, struct ds__TransformType *p)
{
	if (p)
	{	soap_default_ds__TransformType(soap, p);
		if (soap_begin_recv(soap) || soap_get_ds__TransformType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__TransformType(struct soap *soap, const char *URL, struct ds__TransformType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ds__TransformType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ds__TransformType(struct soap *soap, struct ds__TransformType *p)
{
	if (soap_read_ds__TransformType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__c14n__InclusiveNamespaces_DEFINED
#define SOAP_TYPE__c14n__InclusiveNamespaces_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__c14n__InclusiveNamespaces(struct soap*, struct _c14n__InclusiveNamespaces *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__c14n__InclusiveNamespaces(struct soap*, const struct _c14n__InclusiveNamespaces *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__c14n__InclusiveNamespaces(struct soap*, const char*, int, const struct _c14n__InclusiveNamespaces *, const char*);
SOAP_FMAC3 struct _c14n__InclusiveNamespaces * SOAP_FMAC4 soap_in__c14n__InclusiveNamespaces(struct soap*, const char*, struct _c14n__InclusiveNamespaces *, const char*);
SOAP_FMAC1 struct _c14n__InclusiveNamespaces * SOAP_FMAC2 soap_instantiate__c14n__InclusiveNamespaces(struct soap*, int, const char*, const char*, size_t*);

inline struct _c14n__InclusiveNamespaces * soap_new__c14n__InclusiveNamespaces(struct soap *soap, int n = -1)
{
	return soap_instantiate__c14n__InclusiveNamespaces(soap, n, NULL, NULL, NULL);
}

inline struct _c14n__InclusiveNamespaces * soap_new_req__c14n__InclusiveNamespaces(
	struct soap *soap)
{
	struct _c14n__InclusiveNamespaces *_p = soap_new__c14n__InclusiveNamespaces(soap);
	if (_p)
	{	soap_default__c14n__InclusiveNamespaces(soap, _p);
	}
	return _p;
}

inline struct _c14n__InclusiveNamespaces * soap_new_set__c14n__InclusiveNamespaces(
	struct soap *soap,
	char *PrefixList)
{
	struct _c14n__InclusiveNamespaces *_p = soap_new__c14n__InclusiveNamespaces(soap);
	if (_p)
	{	soap_default__c14n__InclusiveNamespaces(soap, _p);
		_p->PrefixList = PrefixList;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__c14n__InclusiveNamespaces(struct soap*, const struct _c14n__InclusiveNamespaces *, const char*, const char*);

inline int soap_write__c14n__InclusiveNamespaces(struct soap *soap, struct _c14n__InclusiveNamespaces const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize__c14n__InclusiveNamespaces(soap, p), 0) || soap_put__c14n__InclusiveNamespaces(soap, p, "c14n:InclusiveNamespaces", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__c14n__InclusiveNamespaces(struct soap *soap, const char *URL, struct _c14n__InclusiveNamespaces const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize__c14n__InclusiveNamespaces(soap, p), 0) || soap_put__c14n__InclusiveNamespaces(soap, p, "c14n:InclusiveNamespaces", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__c14n__InclusiveNamespaces(struct soap *soap, const char *URL, struct _c14n__InclusiveNamespaces const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize__c14n__InclusiveNamespaces(soap, p), 0) || soap_put__c14n__InclusiveNamespaces(soap, p, "c14n:InclusiveNamespaces", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct _c14n__InclusiveNamespaces * SOAP_FMAC4 soap_get__c14n__InclusiveNamespaces(struct soap*, struct _c14n__InclusiveNamespaces *, const char*, const char*);

inline int soap_read__c14n__InclusiveNamespaces(struct soap *soap, struct _c14n__InclusiveNamespaces *p)
{
	if (p)
	{	soap_default__c14n__InclusiveNamespaces(soap, p);
		if (soap_begin_recv(soap) || soap_get__c14n__InclusiveNamespaces(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__c14n__InclusiveNamespaces(struct soap *soap, const char *URL, struct _c14n__InclusiveNamespaces *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__c14n__InclusiveNamespaces(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__c14n__InclusiveNamespaces(struct soap *soap, struct _c14n__InclusiveNamespaces *p)
{
	if (soap_read__c14n__InclusiveNamespaces(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ds__TransformsType_DEFINED
#define SOAP_TYPE_ds__TransformsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__TransformsType(struct soap*, struct ds__TransformsType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__TransformsType(struct soap*, const struct ds__TransformsType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__TransformsType(struct soap*, const char*, int, const struct ds__TransformsType *, const char*);
SOAP_FMAC3 struct ds__TransformsType * SOAP_FMAC4 soap_in_ds__TransformsType(struct soap*, const char*, struct ds__TransformsType *, const char*);
SOAP_FMAC1 struct ds__TransformsType * SOAP_FMAC2 soap_instantiate_ds__TransformsType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__TransformsType * soap_new_ds__TransformsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__TransformsType(soap, n, NULL, NULL, NULL);
}

inline struct ds__TransformsType * soap_new_req_ds__TransformsType(
	struct soap *soap,
	int __sizeTransform,
	struct ds__TransformType *Transform)
{
	struct ds__TransformsType *_p = soap_new_ds__TransformsType(soap);
	if (_p)
	{	soap_default_ds__TransformsType(soap, _p);
		_p->__sizeTransform = __sizeTransform;
		_p->Transform = Transform;
	}
	return _p;
}

inline struct ds__TransformsType * soap_new_set_ds__TransformsType(
	struct soap *soap,
	int __sizeTransform,
	struct ds__TransformType *Transform)
{
	struct ds__TransformsType *_p = soap_new_ds__TransformsType(soap);
	if (_p)
	{	soap_default_ds__TransformsType(soap, _p);
		_p->__sizeTransform = __sizeTransform;
		_p->Transform = Transform;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__TransformsType(struct soap*, const struct ds__TransformsType *, const char*, const char*);

inline int soap_write_ds__TransformsType(struct soap *soap, struct ds__TransformsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ds__TransformsType(soap, p), 0) || soap_put_ds__TransformsType(soap, p, "ds:TransformsType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__TransformsType(struct soap *soap, const char *URL, struct ds__TransformsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ds__TransformsType(soap, p), 0) || soap_put_ds__TransformsType(soap, p, "ds:TransformsType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ds__TransformsType(struct soap *soap, const char *URL, struct ds__TransformsType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ds__TransformsType(soap, p), 0) || soap_put_ds__TransformsType(soap, p, "ds:TransformsType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__TransformsType * SOAP_FMAC4 soap_get_ds__TransformsType(struct soap*, struct ds__TransformsType *, const char*, const char*);

inline int soap_read_ds__TransformsType(struct soap *soap, struct ds__TransformsType *p)
{
	if (p)
	{	soap_default_ds__TransformsType(soap, p);
		if (soap_begin_recv(soap) || soap_get_ds__TransformsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__TransformsType(struct soap *soap, const char *URL, struct ds__TransformsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ds__TransformsType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ds__TransformsType(struct soap *soap, struct ds__TransformsType *p)
{
	if (soap_read_ds__TransformsType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ds__ReferenceType_DEFINED
#define SOAP_TYPE_ds__ReferenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__ReferenceType(struct soap*, struct ds__ReferenceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__ReferenceType(struct soap*, const struct ds__ReferenceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__ReferenceType(struct soap*, const char*, int, const struct ds__ReferenceType *, const char*);
SOAP_FMAC3 struct ds__ReferenceType * SOAP_FMAC4 soap_in_ds__ReferenceType(struct soap*, const char*, struct ds__ReferenceType *, const char*);
SOAP_FMAC1 struct ds__ReferenceType * SOAP_FMAC2 soap_instantiate_ds__ReferenceType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__ReferenceType * soap_new_ds__ReferenceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__ReferenceType(soap, n, NULL, NULL, NULL);
}

inline struct ds__ReferenceType * soap_new_req_ds__ReferenceType(
	struct soap *soap,
	struct ds__DigestMethodType *DigestMethod,
	char *DigestValue)
{
	struct ds__ReferenceType *_p = soap_new_ds__ReferenceType(soap);
	if (_p)
	{	soap_default_ds__ReferenceType(soap, _p);
		_p->DigestMethod = DigestMethod;
		_p->DigestValue = DigestValue;
	}
	return _p;
}

inline struct ds__ReferenceType * soap_new_set_ds__ReferenceType(
	struct soap *soap,
	struct ds__TransformsType *Transforms,
	struct ds__DigestMethodType *DigestMethod,
	char *DigestValue,
	char *Id,
	char *URI,
	char *Type)
{
	struct ds__ReferenceType *_p = soap_new_ds__ReferenceType(soap);
	if (_p)
	{	soap_default_ds__ReferenceType(soap, _p);
		_p->Transforms = Transforms;
		_p->DigestMethod = DigestMethod;
		_p->DigestValue = DigestValue;
		_p->Id = Id;
		_p->URI = URI;
		_p->Type = Type;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__ReferenceType(struct soap*, const struct ds__ReferenceType *, const char*, const char*);

inline int soap_write_ds__ReferenceType(struct soap *soap, struct ds__ReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ds__ReferenceType(soap, p), 0) || soap_put_ds__ReferenceType(soap, p, "ds:ReferenceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__ReferenceType(struct soap *soap, const char *URL, struct ds__ReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ds__ReferenceType(soap, p), 0) || soap_put_ds__ReferenceType(soap, p, "ds:ReferenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ds__ReferenceType(struct soap *soap, const char *URL, struct ds__ReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ds__ReferenceType(soap, p), 0) || soap_put_ds__ReferenceType(soap, p, "ds:ReferenceType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__ReferenceType * SOAP_FMAC4 soap_get_ds__ReferenceType(struct soap*, struct ds__ReferenceType *, const char*, const char*);

inline int soap_read_ds__ReferenceType(struct soap *soap, struct ds__ReferenceType *p)
{
	if (p)
	{	soap_default_ds__ReferenceType(soap, p);
		if (soap_begin_recv(soap) || soap_get_ds__ReferenceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__ReferenceType(struct soap *soap, const char *URL, struct ds__ReferenceType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ds__ReferenceType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ds__ReferenceType(struct soap *soap, struct ds__ReferenceType *p)
{
	if (soap_read_ds__ReferenceType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ds__SignatureMethodType_DEFINED
#define SOAP_TYPE_ds__SignatureMethodType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__SignatureMethodType(struct soap*, struct ds__SignatureMethodType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__SignatureMethodType(struct soap*, const struct ds__SignatureMethodType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__SignatureMethodType(struct soap*, const char*, int, const struct ds__SignatureMethodType *, const char*);
SOAP_FMAC3 struct ds__SignatureMethodType * SOAP_FMAC4 soap_in_ds__SignatureMethodType(struct soap*, const char*, struct ds__SignatureMethodType *, const char*);
SOAP_FMAC1 struct ds__SignatureMethodType * SOAP_FMAC2 soap_instantiate_ds__SignatureMethodType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__SignatureMethodType * soap_new_ds__SignatureMethodType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__SignatureMethodType(soap, n, NULL, NULL, NULL);
}

inline struct ds__SignatureMethodType * soap_new_req_ds__SignatureMethodType(
	struct soap *soap,
	char *Algorithm)
{
	struct ds__SignatureMethodType *_p = soap_new_ds__SignatureMethodType(soap);
	if (_p)
	{	soap_default_ds__SignatureMethodType(soap, _p);
		_p->Algorithm = Algorithm;
	}
	return _p;
}

inline struct ds__SignatureMethodType * soap_new_set_ds__SignatureMethodType(
	struct soap *soap,
	int *HMACOutputLength,
	char *Algorithm)
{
	struct ds__SignatureMethodType *_p = soap_new_ds__SignatureMethodType(soap);
	if (_p)
	{	soap_default_ds__SignatureMethodType(soap, _p);
		_p->HMACOutputLength = HMACOutputLength;
		_p->Algorithm = Algorithm;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__SignatureMethodType(struct soap*, const struct ds__SignatureMethodType *, const char*, const char*);

inline int soap_write_ds__SignatureMethodType(struct soap *soap, struct ds__SignatureMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ds__SignatureMethodType(soap, p), 0) || soap_put_ds__SignatureMethodType(soap, p, "ds:SignatureMethodType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__SignatureMethodType(struct soap *soap, const char *URL, struct ds__SignatureMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ds__SignatureMethodType(soap, p), 0) || soap_put_ds__SignatureMethodType(soap, p, "ds:SignatureMethodType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ds__SignatureMethodType(struct soap *soap, const char *URL, struct ds__SignatureMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ds__SignatureMethodType(soap, p), 0) || soap_put_ds__SignatureMethodType(soap, p, "ds:SignatureMethodType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__SignatureMethodType * SOAP_FMAC4 soap_get_ds__SignatureMethodType(struct soap*, struct ds__SignatureMethodType *, const char*, const char*);

inline int soap_read_ds__SignatureMethodType(struct soap *soap, struct ds__SignatureMethodType *p)
{
	if (p)
	{	soap_default_ds__SignatureMethodType(soap, p);
		if (soap_begin_recv(soap) || soap_get_ds__SignatureMethodType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__SignatureMethodType(struct soap *soap, const char *URL, struct ds__SignatureMethodType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ds__SignatureMethodType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ds__SignatureMethodType(struct soap *soap, struct ds__SignatureMethodType *p)
{
	if (soap_read_ds__SignatureMethodType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ds__CanonicalizationMethodType_DEFINED
#define SOAP_TYPE_ds__CanonicalizationMethodType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__CanonicalizationMethodType(struct soap*, struct ds__CanonicalizationMethodType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__CanonicalizationMethodType(struct soap*, const struct ds__CanonicalizationMethodType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__CanonicalizationMethodType(struct soap*, const char*, int, const struct ds__CanonicalizationMethodType *, const char*);
SOAP_FMAC3 struct ds__CanonicalizationMethodType * SOAP_FMAC4 soap_in_ds__CanonicalizationMethodType(struct soap*, const char*, struct ds__CanonicalizationMethodType *, const char*);
SOAP_FMAC1 struct ds__CanonicalizationMethodType * SOAP_FMAC2 soap_instantiate_ds__CanonicalizationMethodType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__CanonicalizationMethodType * soap_new_ds__CanonicalizationMethodType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__CanonicalizationMethodType(soap, n, NULL, NULL, NULL);
}

inline struct ds__CanonicalizationMethodType * soap_new_req_ds__CanonicalizationMethodType(
	struct soap *soap,
	char *Algorithm)
{
	struct ds__CanonicalizationMethodType *_p = soap_new_ds__CanonicalizationMethodType(soap);
	if (_p)
	{	soap_default_ds__CanonicalizationMethodType(soap, _p);
		_p->Algorithm = Algorithm;
	}
	return _p;
}

inline struct ds__CanonicalizationMethodType * soap_new_set_ds__CanonicalizationMethodType(
	struct soap *soap,
	char *Algorithm,
	struct _c14n__InclusiveNamespaces *c14n__InclusiveNamespaces)
{
	struct ds__CanonicalizationMethodType *_p = soap_new_ds__CanonicalizationMethodType(soap);
	if (_p)
	{	soap_default_ds__CanonicalizationMethodType(soap, _p);
		_p->Algorithm = Algorithm;
		_p->c14n__InclusiveNamespaces = c14n__InclusiveNamespaces;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__CanonicalizationMethodType(struct soap*, const struct ds__CanonicalizationMethodType *, const char*, const char*);

inline int soap_write_ds__CanonicalizationMethodType(struct soap *soap, struct ds__CanonicalizationMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ds__CanonicalizationMethodType(soap, p), 0) || soap_put_ds__CanonicalizationMethodType(soap, p, "ds:CanonicalizationMethodType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__CanonicalizationMethodType(struct soap *soap, const char *URL, struct ds__CanonicalizationMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ds__CanonicalizationMethodType(soap, p), 0) || soap_put_ds__CanonicalizationMethodType(soap, p, "ds:CanonicalizationMethodType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ds__CanonicalizationMethodType(struct soap *soap, const char *URL, struct ds__CanonicalizationMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ds__CanonicalizationMethodType(soap, p), 0) || soap_put_ds__CanonicalizationMethodType(soap, p, "ds:CanonicalizationMethodType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__CanonicalizationMethodType * SOAP_FMAC4 soap_get_ds__CanonicalizationMethodType(struct soap*, struct ds__CanonicalizationMethodType *, const char*, const char*);

inline int soap_read_ds__CanonicalizationMethodType(struct soap *soap, struct ds__CanonicalizationMethodType *p)
{
	if (p)
	{	soap_default_ds__CanonicalizationMethodType(soap, p);
		if (soap_begin_recv(soap) || soap_get_ds__CanonicalizationMethodType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__CanonicalizationMethodType(struct soap *soap, const char *URL, struct ds__CanonicalizationMethodType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ds__CanonicalizationMethodType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ds__CanonicalizationMethodType(struct soap *soap, struct ds__CanonicalizationMethodType *p)
{
	if (soap_read_ds__CanonicalizationMethodType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif
/* _ds__Signature is a typedef synonym for ds__SignatureType */

#ifndef SOAP_TYPE__ds__Signature_DEFINED
#define SOAP_TYPE__ds__Signature_DEFINED

#define soap_default__ds__Signature soap_default_ds__SignatureType


#define soap_serialize__ds__Signature soap_serialize_ds__SignatureType


#define soap__ds__Signature2s soap_ds__SignatureType2s


#define soap_out__ds__Signature soap_out_ds__SignatureType


#define soap_s2_ds__Signature soap_s2ds__SignatureType


#define soap_in__ds__Signature soap_in_ds__SignatureType


#define soap_instantiate__ds__Signature soap_instantiate_ds__SignatureType


#define soap_new__ds__Signature soap_new_ds__SignatureType


#define soap_new_req__ds__Signature soap_new_req_ds__SignatureType


#define soap_new_set__ds__Signature soap_new_set_ds__SignatureType


#define soap_put__ds__Signature soap_put_ds__SignatureType


#define soap_write__ds__Signature soap_write_ds__SignatureType


#define soap_PUT__ds__Signature soap_PUT_ds__SignatureType


#define soap_POST_send__ds__Signature soap_POST_send_ds__SignatureType


#define soap_get__ds__Signature soap_get_ds__SignatureType


#define soap_read__ds__Signature soap_read_ds__SignatureType


#define soap_GET__ds__Signature soap_GET_ds__SignatureType


#define soap_POST_recv__ds__Signature soap_POST_recv_ds__SignatureType

#endif

#ifndef SOAP_TYPE_ds__KeyInfoType_DEFINED
#define SOAP_TYPE_ds__KeyInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__KeyInfoType(struct soap*, struct ds__KeyInfoType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__KeyInfoType(struct soap*, const struct ds__KeyInfoType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__KeyInfoType(struct soap*, const char*, int, const struct ds__KeyInfoType *, const char*);
SOAP_FMAC3 struct ds__KeyInfoType * SOAP_FMAC4 soap_in_ds__KeyInfoType(struct soap*, const char*, struct ds__KeyInfoType *, const char*);
SOAP_FMAC1 struct ds__KeyInfoType * SOAP_FMAC2 soap_instantiate_ds__KeyInfoType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__KeyInfoType * soap_new_ds__KeyInfoType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__KeyInfoType(soap, n, NULL, NULL, NULL);
}

inline struct ds__KeyInfoType * soap_new_req_ds__KeyInfoType(
	struct soap *soap)
{
	struct ds__KeyInfoType *_p = soap_new_ds__KeyInfoType(soap);
	if (_p)
	{	soap_default_ds__KeyInfoType(soap, _p);
	}
	return _p;
}

inline struct ds__KeyInfoType * soap_new_set_ds__KeyInfoType(
	struct soap *soap,
	char *KeyName,
	struct ds__KeyValueType *KeyValue,
	struct ds__RetrievalMethodType *RetrievalMethod,
	struct ds__X509DataType *X509Data,
	struct _wsse__SecurityTokenReference *wsse__SecurityTokenReference,
	char *Id)
{
	struct ds__KeyInfoType *_p = soap_new_ds__KeyInfoType(soap);
	if (_p)
	{	soap_default_ds__KeyInfoType(soap, _p);
		_p->KeyName = KeyName;
		_p->KeyValue = KeyValue;
		_p->RetrievalMethod = RetrievalMethod;
		_p->X509Data = X509Data;
		_p->wsse__SecurityTokenReference = wsse__SecurityTokenReference;
		_p->Id = Id;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__KeyInfoType(struct soap*, const struct ds__KeyInfoType *, const char*, const char*);

inline int soap_write_ds__KeyInfoType(struct soap *soap, struct ds__KeyInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ds__KeyInfoType(soap, p), 0) || soap_put_ds__KeyInfoType(soap, p, "ds:KeyInfoType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__KeyInfoType(struct soap *soap, const char *URL, struct ds__KeyInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ds__KeyInfoType(soap, p), 0) || soap_put_ds__KeyInfoType(soap, p, "ds:KeyInfoType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ds__KeyInfoType(struct soap *soap, const char *URL, struct ds__KeyInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ds__KeyInfoType(soap, p), 0) || soap_put_ds__KeyInfoType(soap, p, "ds:KeyInfoType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__KeyInfoType * SOAP_FMAC4 soap_get_ds__KeyInfoType(struct soap*, struct ds__KeyInfoType *, const char*, const char*);

inline int soap_read_ds__KeyInfoType(struct soap *soap, struct ds__KeyInfoType *p)
{
	if (p)
	{	soap_default_ds__KeyInfoType(soap, p);
		if (soap_begin_recv(soap) || soap_get_ds__KeyInfoType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__KeyInfoType(struct soap *soap, const char *URL, struct ds__KeyInfoType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ds__KeyInfoType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ds__KeyInfoType(struct soap *soap, struct ds__KeyInfoType *p)
{
	if (soap_read_ds__KeyInfoType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ds__SignedInfoType_DEFINED
#define SOAP_TYPE_ds__SignedInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__SignedInfoType(struct soap*, struct ds__SignedInfoType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__SignedInfoType(struct soap*, const struct ds__SignedInfoType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__SignedInfoType(struct soap*, const char*, int, const struct ds__SignedInfoType *, const char*);
SOAP_FMAC3 struct ds__SignedInfoType * SOAP_FMAC4 soap_in_ds__SignedInfoType(struct soap*, const char*, struct ds__SignedInfoType *, const char*);
SOAP_FMAC1 struct ds__SignedInfoType * SOAP_FMAC2 soap_instantiate_ds__SignedInfoType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__SignedInfoType * soap_new_ds__SignedInfoType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__SignedInfoType(soap, n, NULL, NULL, NULL);
}

inline struct ds__SignedInfoType * soap_new_req_ds__SignedInfoType(
	struct soap *soap,
	struct ds__CanonicalizationMethodType *CanonicalizationMethod,
	struct ds__SignatureMethodType *SignatureMethod,
	int __sizeReference,
	struct ds__ReferenceType **Reference)
{
	struct ds__SignedInfoType *_p = soap_new_ds__SignedInfoType(soap);
	if (_p)
	{	soap_default_ds__SignedInfoType(soap, _p);
		_p->CanonicalizationMethod = CanonicalizationMethod;
		_p->SignatureMethod = SignatureMethod;
		_p->__sizeReference = __sizeReference;
		_p->Reference = Reference;
	}
	return _p;
}

inline struct ds__SignedInfoType * soap_new_set_ds__SignedInfoType(
	struct soap *soap,
	struct ds__CanonicalizationMethodType *CanonicalizationMethod,
	struct ds__SignatureMethodType *SignatureMethod,
	int __sizeReference,
	struct ds__ReferenceType **Reference,
	char *Id)
{
	struct ds__SignedInfoType *_p = soap_new_ds__SignedInfoType(soap);
	if (_p)
	{	soap_default_ds__SignedInfoType(soap, _p);
		_p->CanonicalizationMethod = CanonicalizationMethod;
		_p->SignatureMethod = SignatureMethod;
		_p->__sizeReference = __sizeReference;
		_p->Reference = Reference;
		_p->Id = Id;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__SignedInfoType(struct soap*, const struct ds__SignedInfoType *, const char*, const char*);

inline int soap_write_ds__SignedInfoType(struct soap *soap, struct ds__SignedInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ds__SignedInfoType(soap, p), 0) || soap_put_ds__SignedInfoType(soap, p, "ds:SignedInfoType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__SignedInfoType(struct soap *soap, const char *URL, struct ds__SignedInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ds__SignedInfoType(soap, p), 0) || soap_put_ds__SignedInfoType(soap, p, "ds:SignedInfoType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ds__SignedInfoType(struct soap *soap, const char *URL, struct ds__SignedInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ds__SignedInfoType(soap, p), 0) || soap_put_ds__SignedInfoType(soap, p, "ds:SignedInfoType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__SignedInfoType * SOAP_FMAC4 soap_get_ds__SignedInfoType(struct soap*, struct ds__SignedInfoType *, const char*, const char*);

inline int soap_read_ds__SignedInfoType(struct soap *soap, struct ds__SignedInfoType *p)
{
	if (p)
	{	soap_default_ds__SignedInfoType(soap, p);
		if (soap_begin_recv(soap) || soap_get_ds__SignedInfoType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__SignedInfoType(struct soap *soap, const char *URL, struct ds__SignedInfoType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ds__SignedInfoType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ds__SignedInfoType(struct soap *soap, struct ds__SignedInfoType *p)
{
	if (soap_read_ds__SignedInfoType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ds__SignatureType_DEFINED
#define SOAP_TYPE_ds__SignatureType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__SignatureType(struct soap*, struct ds__SignatureType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__SignatureType(struct soap*, const struct ds__SignatureType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__SignatureType(struct soap*, const char*, int, const struct ds__SignatureType *, const char*);
SOAP_FMAC3 struct ds__SignatureType * SOAP_FMAC4 soap_in_ds__SignatureType(struct soap*, const char*, struct ds__SignatureType *, const char*);
SOAP_FMAC1 struct ds__SignatureType * SOAP_FMAC2 soap_instantiate_ds__SignatureType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__SignatureType * soap_new_ds__SignatureType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__SignatureType(soap, n, NULL, NULL, NULL);
}

inline struct ds__SignatureType * soap_new_req_ds__SignatureType(
	struct soap *soap)
{
	struct ds__SignatureType *_p = soap_new_ds__SignatureType(soap);
	if (_p)
	{	soap_default_ds__SignatureType(soap, _p);
	}
	return _p;
}

inline struct ds__SignatureType * soap_new_set_ds__SignatureType(
	struct soap *soap,
	struct ds__SignedInfoType *SignedInfo,
	char *SignatureValue,
	struct ds__KeyInfoType *KeyInfo,
	char *Id)
{
	struct ds__SignatureType *_p = soap_new_ds__SignatureType(soap);
	if (_p)
	{	soap_default_ds__SignatureType(soap, _p);
		_p->SignedInfo = SignedInfo;
		_p->SignatureValue = SignatureValue;
		_p->KeyInfo = KeyInfo;
		_p->Id = Id;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__SignatureType(struct soap*, const struct ds__SignatureType *, const char*, const char*);

inline int soap_write_ds__SignatureType(struct soap *soap, struct ds__SignatureType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ds__SignatureType(soap, p), 0) || soap_put_ds__SignatureType(soap, p, "ds:SignatureType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__SignatureType(struct soap *soap, const char *URL, struct ds__SignatureType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ds__SignatureType(soap, p), 0) || soap_put_ds__SignatureType(soap, p, "ds:SignatureType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ds__SignatureType(struct soap *soap, const char *URL, struct ds__SignatureType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ds__SignatureType(soap, p), 0) || soap_put_ds__SignatureType(soap, p, "ds:SignatureType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__SignatureType * SOAP_FMAC4 soap_get_ds__SignatureType(struct soap*, struct ds__SignatureType *, const char*, const char*);

inline int soap_read_ds__SignatureType(struct soap *soap, struct ds__SignatureType *p)
{
	if (p)
	{	soap_default_ds__SignatureType(soap, p);
		if (soap_begin_recv(soap) || soap_get_ds__SignatureType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__SignatureType(struct soap *soap, const char *URL, struct ds__SignatureType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ds__SignatureType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ds__SignatureType(struct soap *soap, struct ds__SignatureType *p)
{
	if (soap_read_ds__SignatureType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ds__X509DataType_DEFINED
#define SOAP_TYPE_ds__X509DataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__X509DataType(struct soap*, struct ds__X509DataType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__X509DataType(struct soap*, const struct ds__X509DataType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__X509DataType(struct soap*, const char*, int, const struct ds__X509DataType *, const char*);
SOAP_FMAC3 struct ds__X509DataType * SOAP_FMAC4 soap_in_ds__X509DataType(struct soap*, const char*, struct ds__X509DataType *, const char*);
SOAP_FMAC1 struct ds__X509DataType * SOAP_FMAC2 soap_instantiate_ds__X509DataType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__X509DataType * soap_new_ds__X509DataType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__X509DataType(soap, n, NULL, NULL, NULL);
}

inline struct ds__X509DataType * soap_new_req_ds__X509DataType(
	struct soap *soap)
{
	struct ds__X509DataType *_p = soap_new_ds__X509DataType(soap);
	if (_p)
	{	soap_default_ds__X509DataType(soap, _p);
	}
	return _p;
}

inline struct ds__X509DataType * soap_new_set_ds__X509DataType(
	struct soap *soap,
	struct ds__X509IssuerSerialType *X509IssuerSerial,
	char *X509SKI,
	char *X509SubjectName,
	char *X509Certificate,
	char *X509CRL)
{
	struct ds__X509DataType *_p = soap_new_ds__X509DataType(soap);
	if (_p)
	{	soap_default_ds__X509DataType(soap, _p);
		_p->X509IssuerSerial = X509IssuerSerial;
		_p->X509SKI = X509SKI;
		_p->X509SubjectName = X509SubjectName;
		_p->X509Certificate = X509Certificate;
		_p->X509CRL = X509CRL;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__X509DataType(struct soap*, const struct ds__X509DataType *, const char*, const char*);

inline int soap_write_ds__X509DataType(struct soap *soap, struct ds__X509DataType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ds__X509DataType(soap, p), 0) || soap_put_ds__X509DataType(soap, p, "ds:X509DataType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__X509DataType(struct soap *soap, const char *URL, struct ds__X509DataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ds__X509DataType(soap, p), 0) || soap_put_ds__X509DataType(soap, p, "ds:X509DataType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ds__X509DataType(struct soap *soap, const char *URL, struct ds__X509DataType const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ds__X509DataType(soap, p), 0) || soap_put_ds__X509DataType(soap, p, "ds:X509DataType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__X509DataType * SOAP_FMAC4 soap_get_ds__X509DataType(struct soap*, struct ds__X509DataType *, const char*, const char*);

inline int soap_read_ds__X509DataType(struct soap *soap, struct ds__X509DataType *p)
{
	if (p)
	{	soap_default_ds__X509DataType(soap, p);
		if (soap_begin_recv(soap) || soap_get_ds__X509DataType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__X509DataType(struct soap *soap, const char *URL, struct ds__X509DataType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ds__X509DataType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ds__X509DataType(struct soap *soap, struct ds__X509DataType *p)
{
	if (soap_read_ds__X509DataType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsse__SecurityTokenReference_DEFINED
#define SOAP_TYPE__wsse__SecurityTokenReference_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsse__SecurityTokenReference(struct soap*, struct _wsse__SecurityTokenReference *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsse__SecurityTokenReference(struct soap*, const struct _wsse__SecurityTokenReference *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsse__SecurityTokenReference(struct soap*, const char*, int, const struct _wsse__SecurityTokenReference *, const char*);
SOAP_FMAC3 struct _wsse__SecurityTokenReference * SOAP_FMAC4 soap_in__wsse__SecurityTokenReference(struct soap*, const char*, struct _wsse__SecurityTokenReference *, const char*);
SOAP_FMAC1 struct _wsse__SecurityTokenReference * SOAP_FMAC2 soap_instantiate__wsse__SecurityTokenReference(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsse__SecurityTokenReference * soap_new__wsse__SecurityTokenReference(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsse__SecurityTokenReference(soap, n, NULL, NULL, NULL);
}

inline struct _wsse__SecurityTokenReference * soap_new_req__wsse__SecurityTokenReference(
	struct soap *soap)
{
	struct _wsse__SecurityTokenReference *_p = soap_new__wsse__SecurityTokenReference(soap);
	if (_p)
	{	soap_default__wsse__SecurityTokenReference(soap, _p);
	}
	return _p;
}

inline struct _wsse__SecurityTokenReference * soap_new_set__wsse__SecurityTokenReference(
	struct soap *soap,
	struct _wsse__Reference *Reference,
	struct _wsse__KeyIdentifier *KeyIdentifier,
	struct _wsse__Embedded *Embedded,
	struct ds__X509DataType *ds__X509Data,
	char *wsu__Id,
	char *wsc__Instance,
	char *Usage)
{
	struct _wsse__SecurityTokenReference *_p = soap_new__wsse__SecurityTokenReference(soap);
	if (_p)
	{	soap_default__wsse__SecurityTokenReference(soap, _p);
		_p->Reference = Reference;
		_p->KeyIdentifier = KeyIdentifier;
		_p->Embedded = Embedded;
		_p->ds__X509Data = ds__X509Data;
		_p->wsu__Id = wsu__Id;
		_p->wsc__Instance = wsc__Instance;
		_p->Usage = Usage;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsse__SecurityTokenReference(struct soap*, const struct _wsse__SecurityTokenReference *, const char*, const char*);

inline int soap_write__wsse__SecurityTokenReference(struct soap *soap, struct _wsse__SecurityTokenReference const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize__wsse__SecurityTokenReference(soap, p), 0) || soap_put__wsse__SecurityTokenReference(soap, p, "wsse:SecurityTokenReference", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsse__SecurityTokenReference(struct soap *soap, const char *URL, struct _wsse__SecurityTokenReference const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize__wsse__SecurityTokenReference(soap, p), 0) || soap_put__wsse__SecurityTokenReference(soap, p, "wsse:SecurityTokenReference", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__wsse__SecurityTokenReference(struct soap *soap, const char *URL, struct _wsse__SecurityTokenReference const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize__wsse__SecurityTokenReference(soap, p), 0) || soap_put__wsse__SecurityTokenReference(soap, p, "wsse:SecurityTokenReference", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct _wsse__SecurityTokenReference * SOAP_FMAC4 soap_get__wsse__SecurityTokenReference(struct soap*, struct _wsse__SecurityTokenReference *, const char*, const char*);

inline int soap_read__wsse__SecurityTokenReference(struct soap *soap, struct _wsse__SecurityTokenReference *p)
{
	if (p)
	{	soap_default__wsse__SecurityTokenReference(soap, p);
		if (soap_begin_recv(soap) || soap_get__wsse__SecurityTokenReference(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsse__SecurityTokenReference(struct soap *soap, const char *URL, struct _wsse__SecurityTokenReference *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__wsse__SecurityTokenReference(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__wsse__SecurityTokenReference(struct soap *soap, struct _wsse__SecurityTokenReference *p)
{
	if (soap_read__wsse__SecurityTokenReference(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsse__KeyIdentifier_DEFINED
#define SOAP_TYPE__wsse__KeyIdentifier_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsse__KeyIdentifier(struct soap*, struct _wsse__KeyIdentifier *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsse__KeyIdentifier(struct soap*, const struct _wsse__KeyIdentifier *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsse__KeyIdentifier(struct soap*, const char*, int, const struct _wsse__KeyIdentifier *, const char*);
SOAP_FMAC3 struct _wsse__KeyIdentifier * SOAP_FMAC4 soap_in__wsse__KeyIdentifier(struct soap*, const char*, struct _wsse__KeyIdentifier *, const char*);
SOAP_FMAC1 struct _wsse__KeyIdentifier * SOAP_FMAC2 soap_instantiate__wsse__KeyIdentifier(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsse__KeyIdentifier * soap_new__wsse__KeyIdentifier(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsse__KeyIdentifier(soap, n, NULL, NULL, NULL);
}

inline struct _wsse__KeyIdentifier * soap_new_req__wsse__KeyIdentifier(
	struct soap *soap)
{
	struct _wsse__KeyIdentifier *_p = soap_new__wsse__KeyIdentifier(soap);
	if (_p)
	{	soap_default__wsse__KeyIdentifier(soap, _p);
	}
	return _p;
}

inline struct _wsse__KeyIdentifier * soap_new_set__wsse__KeyIdentifier(
	struct soap *soap,
	char *__item,
	char *wsu__Id,
	char *ValueType,
	char *EncodingType)
{
	struct _wsse__KeyIdentifier *_p = soap_new__wsse__KeyIdentifier(soap);
	if (_p)
	{	soap_default__wsse__KeyIdentifier(soap, _p);
		_p->__item = __item;
		_p->wsu__Id = wsu__Id;
		_p->ValueType = ValueType;
		_p->EncodingType = EncodingType;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsse__KeyIdentifier(struct soap*, const struct _wsse__KeyIdentifier *, const char*, const char*);

inline int soap_write__wsse__KeyIdentifier(struct soap *soap, struct _wsse__KeyIdentifier const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize__wsse__KeyIdentifier(soap, p), 0) || soap_put__wsse__KeyIdentifier(soap, p, "wsse:KeyIdentifier", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsse__KeyIdentifier(struct soap *soap, const char *URL, struct _wsse__KeyIdentifier const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize__wsse__KeyIdentifier(soap, p), 0) || soap_put__wsse__KeyIdentifier(soap, p, "wsse:KeyIdentifier", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__wsse__KeyIdentifier(struct soap *soap, const char *URL, struct _wsse__KeyIdentifier const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize__wsse__KeyIdentifier(soap, p), 0) || soap_put__wsse__KeyIdentifier(soap, p, "wsse:KeyIdentifier", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct _wsse__KeyIdentifier * SOAP_FMAC4 soap_get__wsse__KeyIdentifier(struct soap*, struct _wsse__KeyIdentifier *, const char*, const char*);

inline int soap_read__wsse__KeyIdentifier(struct soap *soap, struct _wsse__KeyIdentifier *p)
{
	if (p)
	{	soap_default__wsse__KeyIdentifier(soap, p);
		if (soap_begin_recv(soap) || soap_get__wsse__KeyIdentifier(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsse__KeyIdentifier(struct soap *soap, const char *URL, struct _wsse__KeyIdentifier *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__wsse__KeyIdentifier(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__wsse__KeyIdentifier(struct soap *soap, struct _wsse__KeyIdentifier *p)
{
	if (soap_read__wsse__KeyIdentifier(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsse__Embedded_DEFINED
#define SOAP_TYPE__wsse__Embedded_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsse__Embedded(struct soap*, struct _wsse__Embedded *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsse__Embedded(struct soap*, const struct _wsse__Embedded *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsse__Embedded(struct soap*, const char*, int, const struct _wsse__Embedded *, const char*);
SOAP_FMAC3 struct _wsse__Embedded * SOAP_FMAC4 soap_in__wsse__Embedded(struct soap*, const char*, struct _wsse__Embedded *, const char*);
SOAP_FMAC1 struct _wsse__Embedded * SOAP_FMAC2 soap_instantiate__wsse__Embedded(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsse__Embedded * soap_new__wsse__Embedded(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsse__Embedded(soap, n, NULL, NULL, NULL);
}

inline struct _wsse__Embedded * soap_new_req__wsse__Embedded(
	struct soap *soap)
{
	struct _wsse__Embedded *_p = soap_new__wsse__Embedded(soap);
	if (_p)
	{	soap_default__wsse__Embedded(soap, _p);
	}
	return _p;
}

inline struct _wsse__Embedded * soap_new_set__wsse__Embedded(
	struct soap *soap,
	char *wsu__Id,
	char *ValueType)
{
	struct _wsse__Embedded *_p = soap_new__wsse__Embedded(soap);
	if (_p)
	{	soap_default__wsse__Embedded(soap, _p);
		_p->wsu__Id = wsu__Id;
		_p->ValueType = ValueType;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsse__Embedded(struct soap*, const struct _wsse__Embedded *, const char*, const char*);

inline int soap_write__wsse__Embedded(struct soap *soap, struct _wsse__Embedded const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize__wsse__Embedded(soap, p), 0) || soap_put__wsse__Embedded(soap, p, "wsse:Embedded", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsse__Embedded(struct soap *soap, const char *URL, struct _wsse__Embedded const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize__wsse__Embedded(soap, p), 0) || soap_put__wsse__Embedded(soap, p, "wsse:Embedded", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__wsse__Embedded(struct soap *soap, const char *URL, struct _wsse__Embedded const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize__wsse__Embedded(soap, p), 0) || soap_put__wsse__Embedded(soap, p, "wsse:Embedded", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct _wsse__Embedded * SOAP_FMAC4 soap_get__wsse__Embedded(struct soap*, struct _wsse__Embedded *, const char*, const char*);

inline int soap_read__wsse__Embedded(struct soap *soap, struct _wsse__Embedded *p)
{
	if (p)
	{	soap_default__wsse__Embedded(soap, p);
		if (soap_begin_recv(soap) || soap_get__wsse__Embedded(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsse__Embedded(struct soap *soap, const char *URL, struct _wsse__Embedded *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__wsse__Embedded(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__wsse__Embedded(struct soap *soap, struct _wsse__Embedded *p)
{
	if (soap_read__wsse__Embedded(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsse__Reference_DEFINED
#define SOAP_TYPE__wsse__Reference_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsse__Reference(struct soap*, struct _wsse__Reference *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsse__Reference(struct soap*, const struct _wsse__Reference *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsse__Reference(struct soap*, const char*, int, const struct _wsse__Reference *, const char*);
SOAP_FMAC3 struct _wsse__Reference * SOAP_FMAC4 soap_in__wsse__Reference(struct soap*, const char*, struct _wsse__Reference *, const char*);
SOAP_FMAC1 struct _wsse__Reference * SOAP_FMAC2 soap_instantiate__wsse__Reference(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsse__Reference * soap_new__wsse__Reference(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsse__Reference(soap, n, NULL, NULL, NULL);
}

inline struct _wsse__Reference * soap_new_req__wsse__Reference(
	struct soap *soap)
{
	struct _wsse__Reference *_p = soap_new__wsse__Reference(soap);
	if (_p)
	{	soap_default__wsse__Reference(soap, _p);
	}
	return _p;
}

inline struct _wsse__Reference * soap_new_set__wsse__Reference(
	struct soap *soap,
	char *URI,
	char *ValueType)
{
	struct _wsse__Reference *_p = soap_new__wsse__Reference(soap);
	if (_p)
	{	soap_default__wsse__Reference(soap, _p);
		_p->URI = URI;
		_p->ValueType = ValueType;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsse__Reference(struct soap*, const struct _wsse__Reference *, const char*, const char*);

inline int soap_write__wsse__Reference(struct soap *soap, struct _wsse__Reference const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize__wsse__Reference(soap, p), 0) || soap_put__wsse__Reference(soap, p, "wsse:Reference", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsse__Reference(struct soap *soap, const char *URL, struct _wsse__Reference const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize__wsse__Reference(soap, p), 0) || soap_put__wsse__Reference(soap, p, "wsse:Reference", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__wsse__Reference(struct soap *soap, const char *URL, struct _wsse__Reference const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize__wsse__Reference(soap, p), 0) || soap_put__wsse__Reference(soap, p, "wsse:Reference", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct _wsse__Reference * SOAP_FMAC4 soap_get__wsse__Reference(struct soap*, struct _wsse__Reference *, const char*, const char*);

inline int soap_read__wsse__Reference(struct soap *soap, struct _wsse__Reference *p)
{
	if (p)
	{	soap_default__wsse__Reference(soap, p);
		if (soap_begin_recv(soap) || soap_get__wsse__Reference(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsse__Reference(struct soap *soap, const char *URL, struct _wsse__Reference *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__wsse__Reference(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__wsse__Reference(struct soap *soap, struct _wsse__Reference *p)
{
	if (soap_read__wsse__Reference(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsse__BinarySecurityToken_DEFINED
#define SOAP_TYPE__wsse__BinarySecurityToken_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsse__BinarySecurityToken(struct soap*, struct _wsse__BinarySecurityToken *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsse__BinarySecurityToken(struct soap*, const struct _wsse__BinarySecurityToken *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsse__BinarySecurityToken(struct soap*, const char*, int, const struct _wsse__BinarySecurityToken *, const char*);
SOAP_FMAC3 struct _wsse__BinarySecurityToken * SOAP_FMAC4 soap_in__wsse__BinarySecurityToken(struct soap*, const char*, struct _wsse__BinarySecurityToken *, const char*);
SOAP_FMAC1 struct _wsse__BinarySecurityToken * SOAP_FMAC2 soap_instantiate__wsse__BinarySecurityToken(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsse__BinarySecurityToken * soap_new__wsse__BinarySecurityToken(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsse__BinarySecurityToken(soap, n, NULL, NULL, NULL);
}

inline struct _wsse__BinarySecurityToken * soap_new_req__wsse__BinarySecurityToken(
	struct soap *soap)
{
	struct _wsse__BinarySecurityToken *_p = soap_new__wsse__BinarySecurityToken(soap);
	if (_p)
	{	soap_default__wsse__BinarySecurityToken(soap, _p);
	}
	return _p;
}

inline struct _wsse__BinarySecurityToken * soap_new_set__wsse__BinarySecurityToken(
	struct soap *soap,
	char *__item,
	char *wsu__Id,
	char *ValueType,
	char *EncodingType)
{
	struct _wsse__BinarySecurityToken *_p = soap_new__wsse__BinarySecurityToken(soap);
	if (_p)
	{	soap_default__wsse__BinarySecurityToken(soap, _p);
		_p->__item = __item;
		_p->wsu__Id = wsu__Id;
		_p->ValueType = ValueType;
		_p->EncodingType = EncodingType;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsse__BinarySecurityToken(struct soap*, const struct _wsse__BinarySecurityToken *, const char*, const char*);

inline int soap_write__wsse__BinarySecurityToken(struct soap *soap, struct _wsse__BinarySecurityToken const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize__wsse__BinarySecurityToken(soap, p), 0) || soap_put__wsse__BinarySecurityToken(soap, p, "wsse:BinarySecurityToken", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsse__BinarySecurityToken(struct soap *soap, const char *URL, struct _wsse__BinarySecurityToken const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize__wsse__BinarySecurityToken(soap, p), 0) || soap_put__wsse__BinarySecurityToken(soap, p, "wsse:BinarySecurityToken", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__wsse__BinarySecurityToken(struct soap *soap, const char *URL, struct _wsse__BinarySecurityToken const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize__wsse__BinarySecurityToken(soap, p), 0) || soap_put__wsse__BinarySecurityToken(soap, p, "wsse:BinarySecurityToken", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct _wsse__BinarySecurityToken * SOAP_FMAC4 soap_get__wsse__BinarySecurityToken(struct soap*, struct _wsse__BinarySecurityToken *, const char*, const char*);

inline int soap_read__wsse__BinarySecurityToken(struct soap *soap, struct _wsse__BinarySecurityToken *p)
{
	if (p)
	{	soap_default__wsse__BinarySecurityToken(soap, p);
		if (soap_begin_recv(soap) || soap_get__wsse__BinarySecurityToken(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsse__BinarySecurityToken(struct soap *soap, const char *URL, struct _wsse__BinarySecurityToken *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__wsse__BinarySecurityToken(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__wsse__BinarySecurityToken(struct soap *soap, struct _wsse__BinarySecurityToken *p)
{
	if (soap_read__wsse__BinarySecurityToken(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsse__Password_DEFINED
#define SOAP_TYPE__wsse__Password_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsse__Password(struct soap*, struct _wsse__Password *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsse__Password(struct soap*, const struct _wsse__Password *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsse__Password(struct soap*, const char*, int, const struct _wsse__Password *, const char*);
SOAP_FMAC3 struct _wsse__Password * SOAP_FMAC4 soap_in__wsse__Password(struct soap*, const char*, struct _wsse__Password *, const char*);
SOAP_FMAC1 struct _wsse__Password * SOAP_FMAC2 soap_instantiate__wsse__Password(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsse__Password * soap_new__wsse__Password(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsse__Password(soap, n, NULL, NULL, NULL);
}

inline struct _wsse__Password * soap_new_req__wsse__Password(
	struct soap *soap)
{
	struct _wsse__Password *_p = soap_new__wsse__Password(soap);
	if (_p)
	{	soap_default__wsse__Password(soap, _p);
	}
	return _p;
}

inline struct _wsse__Password * soap_new_set__wsse__Password(
	struct soap *soap,
	char *__item,
	char *Type)
{
	struct _wsse__Password *_p = soap_new__wsse__Password(soap);
	if (_p)
	{	soap_default__wsse__Password(soap, _p);
		_p->__item = __item;
		_p->Type = Type;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsse__Password(struct soap*, const struct _wsse__Password *, const char*, const char*);

inline int soap_write__wsse__Password(struct soap *soap, struct _wsse__Password const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize__wsse__Password(soap, p), 0) || soap_put__wsse__Password(soap, p, "wsse:Password", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsse__Password(struct soap *soap, const char *URL, struct _wsse__Password const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize__wsse__Password(soap, p), 0) || soap_put__wsse__Password(soap, p, "wsse:Password", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__wsse__Password(struct soap *soap, const char *URL, struct _wsse__Password const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize__wsse__Password(soap, p), 0) || soap_put__wsse__Password(soap, p, "wsse:Password", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct _wsse__Password * SOAP_FMAC4 soap_get__wsse__Password(struct soap*, struct _wsse__Password *, const char*, const char*);

inline int soap_read__wsse__Password(struct soap *soap, struct _wsse__Password *p)
{
	if (p)
	{	soap_default__wsse__Password(soap, p);
		if (soap_begin_recv(soap) || soap_get__wsse__Password(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsse__Password(struct soap *soap, const char *URL, struct _wsse__Password *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__wsse__Password(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__wsse__Password(struct soap *soap, struct _wsse__Password *p)
{
	if (soap_read__wsse__Password(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsse__UsernameToken_DEFINED
#define SOAP_TYPE__wsse__UsernameToken_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsse__UsernameToken(struct soap*, struct _wsse__UsernameToken *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsse__UsernameToken(struct soap*, const struct _wsse__UsernameToken *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsse__UsernameToken(struct soap*, const char*, int, const struct _wsse__UsernameToken *, const char*);
SOAP_FMAC3 struct _wsse__UsernameToken * SOAP_FMAC4 soap_in__wsse__UsernameToken(struct soap*, const char*, struct _wsse__UsernameToken *, const char*);
SOAP_FMAC1 struct _wsse__UsernameToken * SOAP_FMAC2 soap_instantiate__wsse__UsernameToken(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsse__UsernameToken * soap_new__wsse__UsernameToken(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsse__UsernameToken(soap, n, NULL, NULL, NULL);
}

inline struct _wsse__UsernameToken * soap_new_req__wsse__UsernameToken(
	struct soap *soap)
{
	struct _wsse__UsernameToken *_p = soap_new__wsse__UsernameToken(soap);
	if (_p)
	{	soap_default__wsse__UsernameToken(soap, _p);
	}
	return _p;
}

inline struct _wsse__UsernameToken * soap_new_set__wsse__UsernameToken(
	struct soap *soap,
	char *Username,
	struct _wsse__Password *Password,
	struct wsse__EncodedString *Nonce,
	char *wsu__Created,
	char *wsu__Id)
{
	struct _wsse__UsernameToken *_p = soap_new__wsse__UsernameToken(soap);
	if (_p)
	{	soap_default__wsse__UsernameToken(soap, _p);
		_p->Username = Username;
		_p->Password = Password;
		_p->Nonce = Nonce;
		_p->wsu__Created = wsu__Created;
		_p->wsu__Id = wsu__Id;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsse__UsernameToken(struct soap*, const struct _wsse__UsernameToken *, const char*, const char*);

inline int soap_write__wsse__UsernameToken(struct soap *soap, struct _wsse__UsernameToken const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize__wsse__UsernameToken(soap, p), 0) || soap_put__wsse__UsernameToken(soap, p, "wsse:UsernameToken", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsse__UsernameToken(struct soap *soap, const char *URL, struct _wsse__UsernameToken const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize__wsse__UsernameToken(soap, p), 0) || soap_put__wsse__UsernameToken(soap, p, "wsse:UsernameToken", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__wsse__UsernameToken(struct soap *soap, const char *URL, struct _wsse__UsernameToken const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize__wsse__UsernameToken(soap, p), 0) || soap_put__wsse__UsernameToken(soap, p, "wsse:UsernameToken", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct _wsse__UsernameToken * SOAP_FMAC4 soap_get__wsse__UsernameToken(struct soap*, struct _wsse__UsernameToken *, const char*, const char*);

inline int soap_read__wsse__UsernameToken(struct soap *soap, struct _wsse__UsernameToken *p)
{
	if (p)
	{	soap_default__wsse__UsernameToken(soap, p);
		if (soap_begin_recv(soap) || soap_get__wsse__UsernameToken(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsse__UsernameToken(struct soap *soap, const char *URL, struct _wsse__UsernameToken *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__wsse__UsernameToken(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__wsse__UsernameToken(struct soap *soap, struct _wsse__UsernameToken *p)
{
	if (soap_read__wsse__UsernameToken(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_wsse__EncodedString_DEFINED
#define SOAP_TYPE_wsse__EncodedString_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsse__EncodedString(struct soap*, struct wsse__EncodedString *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsse__EncodedString(struct soap*, const struct wsse__EncodedString *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsse__EncodedString(struct soap*, const char*, int, const struct wsse__EncodedString *, const char*);
SOAP_FMAC3 struct wsse__EncodedString * SOAP_FMAC4 soap_in_wsse__EncodedString(struct soap*, const char*, struct wsse__EncodedString *, const char*);
SOAP_FMAC1 struct wsse__EncodedString * SOAP_FMAC2 soap_instantiate_wsse__EncodedString(struct soap*, int, const char*, const char*, size_t*);

inline struct wsse__EncodedString * soap_new_wsse__EncodedString(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsse__EncodedString(soap, n, NULL, NULL, NULL);
}

inline struct wsse__EncodedString * soap_new_req_wsse__EncodedString(
	struct soap *soap)
{
	struct wsse__EncodedString *_p = soap_new_wsse__EncodedString(soap);
	if (_p)
	{	soap_default_wsse__EncodedString(soap, _p);
	}
	return _p;
}

inline struct wsse__EncodedString * soap_new_set_wsse__EncodedString(
	struct soap *soap,
	char *__item,
	char *EncodingType,
	char *wsu__Id)
{
	struct wsse__EncodedString *_p = soap_new_wsse__EncodedString(soap);
	if (_p)
	{	soap_default_wsse__EncodedString(soap, _p);
		_p->__item = __item;
		_p->EncodingType = EncodingType;
		_p->wsu__Id = wsu__Id;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsse__EncodedString(struct soap*, const struct wsse__EncodedString *, const char*, const char*);

inline int soap_write_wsse__EncodedString(struct soap *soap, struct wsse__EncodedString const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_wsse__EncodedString(soap, p), 0) || soap_put_wsse__EncodedString(soap, p, "wsse:EncodedString", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsse__EncodedString(struct soap *soap, const char *URL, struct wsse__EncodedString const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_wsse__EncodedString(soap, p), 0) || soap_put_wsse__EncodedString(soap, p, "wsse:EncodedString", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_wsse__EncodedString(struct soap *soap, const char *URL, struct wsse__EncodedString const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_wsse__EncodedString(soap, p), 0) || soap_put_wsse__EncodedString(soap, p, "wsse:EncodedString", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct wsse__EncodedString * SOAP_FMAC4 soap_get_wsse__EncodedString(struct soap*, struct wsse__EncodedString *, const char*, const char*);

inline int soap_read_wsse__EncodedString(struct soap *soap, struct wsse__EncodedString *p)
{
	if (p)
	{	soap_default_wsse__EncodedString(soap, p);
		if (soap_begin_recv(soap) || soap_get_wsse__EncodedString(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsse__EncodedString(struct soap *soap, const char *URL, struct wsse__EncodedString *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_wsse__EncodedString(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_wsse__EncodedString(struct soap *soap, struct wsse__EncodedString *p)
{
	if (soap_read_wsse__EncodedString(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsu__Timestamp_DEFINED
#define SOAP_TYPE__wsu__Timestamp_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsu__Timestamp(struct soap*, struct _wsu__Timestamp *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsu__Timestamp(struct soap*, const struct _wsu__Timestamp *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsu__Timestamp(struct soap*, const char*, int, const struct _wsu__Timestamp *, const char*);
SOAP_FMAC3 struct _wsu__Timestamp * SOAP_FMAC4 soap_in__wsu__Timestamp(struct soap*, const char*, struct _wsu__Timestamp *, const char*);
SOAP_FMAC1 struct _wsu__Timestamp * SOAP_FMAC2 soap_instantiate__wsu__Timestamp(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsu__Timestamp * soap_new__wsu__Timestamp(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsu__Timestamp(soap, n, NULL, NULL, NULL);
}

inline struct _wsu__Timestamp * soap_new_req__wsu__Timestamp(
	struct soap *soap)
{
	struct _wsu__Timestamp *_p = soap_new__wsu__Timestamp(soap);
	if (_p)
	{	soap_default__wsu__Timestamp(soap, _p);
	}
	return _p;
}

inline struct _wsu__Timestamp * soap_new_set__wsu__Timestamp(
	struct soap *soap,
	char *wsu__Id,
	char *Created,
	char *Expires)
{
	struct _wsu__Timestamp *_p = soap_new__wsu__Timestamp(soap);
	if (_p)
	{	soap_default__wsu__Timestamp(soap, _p);
		_p->wsu__Id = wsu__Id;
		_p->Created = Created;
		_p->Expires = Expires;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsu__Timestamp(struct soap*, const struct _wsu__Timestamp *, const char*, const char*);

inline int soap_write__wsu__Timestamp(struct soap *soap, struct _wsu__Timestamp const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize__wsu__Timestamp(soap, p), 0) || soap_put__wsu__Timestamp(soap, p, "wsu:Timestamp", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsu__Timestamp(struct soap *soap, const char *URL, struct _wsu__Timestamp const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize__wsu__Timestamp(soap, p), 0) || soap_put__wsu__Timestamp(soap, p, "wsu:Timestamp", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__wsu__Timestamp(struct soap *soap, const char *URL, struct _wsu__Timestamp const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize__wsu__Timestamp(soap, p), 0) || soap_put__wsu__Timestamp(soap, p, "wsu:Timestamp", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct _wsu__Timestamp * SOAP_FMAC4 soap_get__wsu__Timestamp(struct soap*, struct _wsu__Timestamp *, const char*, const char*);

inline int soap_read__wsu__Timestamp(struct soap *soap, struct _wsu__Timestamp *p)
{
	if (p)
	{	soap_default__wsu__Timestamp(soap, p);
		if (soap_begin_recv(soap) || soap_get__wsu__Timestamp(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsu__Timestamp(struct soap *soap, const char *URL, struct _wsu__Timestamp *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__wsu__Timestamp(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__wsu__Timestamp(struct soap *soap, struct _wsu__Timestamp *p)
{
	if (soap_read__wsu__Timestamp(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetCacheMethodList_DEFINED
#define SOAP_TYPE___ns1__GetCacheMethodList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetCacheMethodList(struct soap*, struct __ns1__GetCacheMethodList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetCacheMethodList(struct soap*, const struct __ns1__GetCacheMethodList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetCacheMethodList(struct soap*, const char*, int, const struct __ns1__GetCacheMethodList *, const char*);
SOAP_FMAC3 struct __ns1__GetCacheMethodList * SOAP_FMAC4 soap_in___ns1__GetCacheMethodList(struct soap*, const char*, struct __ns1__GetCacheMethodList *, const char*);
SOAP_FMAC1 struct __ns1__GetCacheMethodList * SOAP_FMAC2 soap_instantiate___ns1__GetCacheMethodList(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetCacheMethodList * soap_new___ns1__GetCacheMethodList(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetCacheMethodList(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetCacheMethodList * soap_new_req___ns1__GetCacheMethodList(
	struct soap *soap)
{
	struct __ns1__GetCacheMethodList *_p = soap_new___ns1__GetCacheMethodList(soap);
	if (_p)
	{	soap_default___ns1__GetCacheMethodList(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetCacheMethodList * soap_new_set___ns1__GetCacheMethodList(
	struct soap *soap,
	_ns1__GetCacheMethodList *ns1__GetCacheMethodList)
{
	struct __ns1__GetCacheMethodList *_p = soap_new___ns1__GetCacheMethodList(soap);
	if (_p)
	{	soap_default___ns1__GetCacheMethodList(soap, _p);
		_p->ns1__GetCacheMethodList = ns1__GetCacheMethodList;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetCacheMethodList(struct soap*, const struct __ns1__GetCacheMethodList *, const char*, const char*);

inline int soap_write___ns1__GetCacheMethodList(struct soap *soap, struct __ns1__GetCacheMethodList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetCacheMethodList(soap, p), 0) || soap_put___ns1__GetCacheMethodList(soap, p, "-ns1:GetCacheMethodList", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetCacheMethodList(struct soap *soap, const char *URL, struct __ns1__GetCacheMethodList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__GetCacheMethodList(soap, p), 0) || soap_put___ns1__GetCacheMethodList(soap, p, "-ns1:GetCacheMethodList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetCacheMethodList(struct soap *soap, const char *URL, struct __ns1__GetCacheMethodList const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__GetCacheMethodList(soap, p), 0) || soap_put___ns1__GetCacheMethodList(soap, p, "-ns1:GetCacheMethodList", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetCacheMethodList * SOAP_FMAC4 soap_get___ns1__GetCacheMethodList(struct soap*, struct __ns1__GetCacheMethodList *, const char*, const char*);

inline int soap_read___ns1__GetCacheMethodList(struct soap *soap, struct __ns1__GetCacheMethodList *p)
{
	if (p)
	{	soap_default___ns1__GetCacheMethodList(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetCacheMethodList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetCacheMethodList(struct soap *soap, const char *URL, struct __ns1__GetCacheMethodList *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetCacheMethodList(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetCacheMethodList(struct soap *soap, struct __ns1__GetCacheMethodList *p)
{
	if (soap_read___ns1__GetCacheMethodList(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData_DEFINED
#define SOAP_TYPE___ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData(struct soap*, struct __ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData(struct soap*, const struct __ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData(struct soap*, const char*, int, const struct __ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData *, const char*);
SOAP_FMAC3 struct __ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData * SOAP_FMAC4 soap_in___ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData(struct soap*, const char*, struct __ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData *, const char*);
SOAP_FMAC1 struct __ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData * SOAP_FMAC2 soap_instantiate___ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData * soap_new___ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData * soap_new_req___ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData(
	struct soap *soap)
{
	struct __ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData *_p = soap_new___ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData(soap);
	if (_p)
	{	soap_default___ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData * soap_new_set___ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData(
	struct soap *soap,
	_ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData *ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData)
{
	struct __ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData *_p = soap_new___ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData(soap);
	if (_p)
	{	soap_default___ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData(soap, _p);
		_p->ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData = ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData(struct soap*, const struct __ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData *, const char*, const char*);

inline int soap_write___ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData(struct soap *soap, struct __ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData(soap, p), 0) || soap_put___ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData(soap, p, "-ns1:GetCasinoChallengeAwardNotificationCustomWithMediaData", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData(struct soap *soap, const char *URL, struct __ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData(soap, p), 0) || soap_put___ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData(soap, p, "-ns1:GetCasinoChallengeAwardNotificationCustomWithMediaData", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData(struct soap *soap, const char *URL, struct __ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData(soap, p), 0) || soap_put___ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData(soap, p, "-ns1:GetCasinoChallengeAwardNotificationCustomWithMediaData", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData * SOAP_FMAC4 soap_get___ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData(struct soap*, struct __ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData *, const char*, const char*);

inline int soap_read___ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData(struct soap *soap, struct __ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData *p)
{
	if (p)
	{	soap_default___ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData(struct soap *soap, const char *URL, struct __ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData(struct soap *soap, struct __ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData *p)
{
	if (soap_read___ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetCasinoChallengeAwardNotificationCustom_DEFINED
#define SOAP_TYPE___ns1__GetCasinoChallengeAwardNotificationCustom_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetCasinoChallengeAwardNotificationCustom(struct soap*, struct __ns1__GetCasinoChallengeAwardNotificationCustom *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetCasinoChallengeAwardNotificationCustom(struct soap*, const struct __ns1__GetCasinoChallengeAwardNotificationCustom *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetCasinoChallengeAwardNotificationCustom(struct soap*, const char*, int, const struct __ns1__GetCasinoChallengeAwardNotificationCustom *, const char*);
SOAP_FMAC3 struct __ns1__GetCasinoChallengeAwardNotificationCustom * SOAP_FMAC4 soap_in___ns1__GetCasinoChallengeAwardNotificationCustom(struct soap*, const char*, struct __ns1__GetCasinoChallengeAwardNotificationCustom *, const char*);
SOAP_FMAC1 struct __ns1__GetCasinoChallengeAwardNotificationCustom * SOAP_FMAC2 soap_instantiate___ns1__GetCasinoChallengeAwardNotificationCustom(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetCasinoChallengeAwardNotificationCustom * soap_new___ns1__GetCasinoChallengeAwardNotificationCustom(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetCasinoChallengeAwardNotificationCustom(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetCasinoChallengeAwardNotificationCustom * soap_new_req___ns1__GetCasinoChallengeAwardNotificationCustom(
	struct soap *soap)
{
	struct __ns1__GetCasinoChallengeAwardNotificationCustom *_p = soap_new___ns1__GetCasinoChallengeAwardNotificationCustom(soap);
	if (_p)
	{	soap_default___ns1__GetCasinoChallengeAwardNotificationCustom(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetCasinoChallengeAwardNotificationCustom * soap_new_set___ns1__GetCasinoChallengeAwardNotificationCustom(
	struct soap *soap,
	_ns1__GetCasinoChallengeAwardNotificationCustom *ns1__GetCasinoChallengeAwardNotificationCustom)
{
	struct __ns1__GetCasinoChallengeAwardNotificationCustom *_p = soap_new___ns1__GetCasinoChallengeAwardNotificationCustom(soap);
	if (_p)
	{	soap_default___ns1__GetCasinoChallengeAwardNotificationCustom(soap, _p);
		_p->ns1__GetCasinoChallengeAwardNotificationCustom = ns1__GetCasinoChallengeAwardNotificationCustom;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetCasinoChallengeAwardNotificationCustom(struct soap*, const struct __ns1__GetCasinoChallengeAwardNotificationCustom *, const char*, const char*);

inline int soap_write___ns1__GetCasinoChallengeAwardNotificationCustom(struct soap *soap, struct __ns1__GetCasinoChallengeAwardNotificationCustom const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetCasinoChallengeAwardNotificationCustom(soap, p), 0) || soap_put___ns1__GetCasinoChallengeAwardNotificationCustom(soap, p, "-ns1:GetCasinoChallengeAwardNotificationCustom", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetCasinoChallengeAwardNotificationCustom(struct soap *soap, const char *URL, struct __ns1__GetCasinoChallengeAwardNotificationCustom const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__GetCasinoChallengeAwardNotificationCustom(soap, p), 0) || soap_put___ns1__GetCasinoChallengeAwardNotificationCustom(soap, p, "-ns1:GetCasinoChallengeAwardNotificationCustom", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetCasinoChallengeAwardNotificationCustom(struct soap *soap, const char *URL, struct __ns1__GetCasinoChallengeAwardNotificationCustom const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__GetCasinoChallengeAwardNotificationCustom(soap, p), 0) || soap_put___ns1__GetCasinoChallengeAwardNotificationCustom(soap, p, "-ns1:GetCasinoChallengeAwardNotificationCustom", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetCasinoChallengeAwardNotificationCustom * SOAP_FMAC4 soap_get___ns1__GetCasinoChallengeAwardNotificationCustom(struct soap*, struct __ns1__GetCasinoChallengeAwardNotificationCustom *, const char*, const char*);

inline int soap_read___ns1__GetCasinoChallengeAwardNotificationCustom(struct soap *soap, struct __ns1__GetCasinoChallengeAwardNotificationCustom *p)
{
	if (p)
	{	soap_default___ns1__GetCasinoChallengeAwardNotificationCustom(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetCasinoChallengeAwardNotificationCustom(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetCasinoChallengeAwardNotificationCustom(struct soap *soap, const char *URL, struct __ns1__GetCasinoChallengeAwardNotificationCustom *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetCasinoChallengeAwardNotificationCustom(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetCasinoChallengeAwardNotificationCustom(struct soap *soap, struct __ns1__GetCasinoChallengeAwardNotificationCustom *p)
{
	if (soap_read___ns1__GetCasinoChallengeAwardNotificationCustom(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetCasinoChallangeEventEndNotificationCustom_DEFINED
#define SOAP_TYPE___ns1__GetCasinoChallangeEventEndNotificationCustom_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetCasinoChallangeEventEndNotificationCustom(struct soap*, struct __ns1__GetCasinoChallangeEventEndNotificationCustom *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetCasinoChallangeEventEndNotificationCustom(struct soap*, const struct __ns1__GetCasinoChallangeEventEndNotificationCustom *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetCasinoChallangeEventEndNotificationCustom(struct soap*, const char*, int, const struct __ns1__GetCasinoChallangeEventEndNotificationCustom *, const char*);
SOAP_FMAC3 struct __ns1__GetCasinoChallangeEventEndNotificationCustom * SOAP_FMAC4 soap_in___ns1__GetCasinoChallangeEventEndNotificationCustom(struct soap*, const char*, struct __ns1__GetCasinoChallangeEventEndNotificationCustom *, const char*);
SOAP_FMAC1 struct __ns1__GetCasinoChallangeEventEndNotificationCustom * SOAP_FMAC2 soap_instantiate___ns1__GetCasinoChallangeEventEndNotificationCustom(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetCasinoChallangeEventEndNotificationCustom * soap_new___ns1__GetCasinoChallangeEventEndNotificationCustom(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetCasinoChallangeEventEndNotificationCustom(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetCasinoChallangeEventEndNotificationCustom * soap_new_req___ns1__GetCasinoChallangeEventEndNotificationCustom(
	struct soap *soap)
{
	struct __ns1__GetCasinoChallangeEventEndNotificationCustom *_p = soap_new___ns1__GetCasinoChallangeEventEndNotificationCustom(soap);
	if (_p)
	{	soap_default___ns1__GetCasinoChallangeEventEndNotificationCustom(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetCasinoChallangeEventEndNotificationCustom * soap_new_set___ns1__GetCasinoChallangeEventEndNotificationCustom(
	struct soap *soap,
	_ns1__GetCasinoChallangeEventEndNotificationCustom *ns1__GetCasinoChallangeEventEndNotificationCustom)
{
	struct __ns1__GetCasinoChallangeEventEndNotificationCustom *_p = soap_new___ns1__GetCasinoChallangeEventEndNotificationCustom(soap);
	if (_p)
	{	soap_default___ns1__GetCasinoChallangeEventEndNotificationCustom(soap, _p);
		_p->ns1__GetCasinoChallangeEventEndNotificationCustom = ns1__GetCasinoChallangeEventEndNotificationCustom;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetCasinoChallangeEventEndNotificationCustom(struct soap*, const struct __ns1__GetCasinoChallangeEventEndNotificationCustom *, const char*, const char*);

inline int soap_write___ns1__GetCasinoChallangeEventEndNotificationCustom(struct soap *soap, struct __ns1__GetCasinoChallangeEventEndNotificationCustom const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetCasinoChallangeEventEndNotificationCustom(soap, p), 0) || soap_put___ns1__GetCasinoChallangeEventEndNotificationCustom(soap, p, "-ns1:GetCasinoChallangeEventEndNotificationCustom", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetCasinoChallangeEventEndNotificationCustom(struct soap *soap, const char *URL, struct __ns1__GetCasinoChallangeEventEndNotificationCustom const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__GetCasinoChallangeEventEndNotificationCustom(soap, p), 0) || soap_put___ns1__GetCasinoChallangeEventEndNotificationCustom(soap, p, "-ns1:GetCasinoChallangeEventEndNotificationCustom", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetCasinoChallangeEventEndNotificationCustom(struct soap *soap, const char *URL, struct __ns1__GetCasinoChallangeEventEndNotificationCustom const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__GetCasinoChallangeEventEndNotificationCustom(soap, p), 0) || soap_put___ns1__GetCasinoChallangeEventEndNotificationCustom(soap, p, "-ns1:GetCasinoChallangeEventEndNotificationCustom", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetCasinoChallangeEventEndNotificationCustom * SOAP_FMAC4 soap_get___ns1__GetCasinoChallangeEventEndNotificationCustom(struct soap*, struct __ns1__GetCasinoChallangeEventEndNotificationCustom *, const char*, const char*);

inline int soap_read___ns1__GetCasinoChallangeEventEndNotificationCustom(struct soap *soap, struct __ns1__GetCasinoChallangeEventEndNotificationCustom *p)
{
	if (p)
	{	soap_default___ns1__GetCasinoChallangeEventEndNotificationCustom(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetCasinoChallangeEventEndNotificationCustom(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetCasinoChallangeEventEndNotificationCustom(struct soap *soap, const char *URL, struct __ns1__GetCasinoChallangeEventEndNotificationCustom *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetCasinoChallangeEventEndNotificationCustom(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetCasinoChallangeEventEndNotificationCustom(struct soap *soap, struct __ns1__GetCasinoChallangeEventEndNotificationCustom *p)
{
	if (soap_read___ns1__GetCasinoChallangeEventEndNotificationCustom(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetCasinoChallangeIncrementNotification_DEFINED
#define SOAP_TYPE___ns1__GetCasinoChallangeIncrementNotification_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetCasinoChallangeIncrementNotification(struct soap*, struct __ns1__GetCasinoChallangeIncrementNotification *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetCasinoChallangeIncrementNotification(struct soap*, const struct __ns1__GetCasinoChallangeIncrementNotification *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetCasinoChallangeIncrementNotification(struct soap*, const char*, int, const struct __ns1__GetCasinoChallangeIncrementNotification *, const char*);
SOAP_FMAC3 struct __ns1__GetCasinoChallangeIncrementNotification * SOAP_FMAC4 soap_in___ns1__GetCasinoChallangeIncrementNotification(struct soap*, const char*, struct __ns1__GetCasinoChallangeIncrementNotification *, const char*);
SOAP_FMAC1 struct __ns1__GetCasinoChallangeIncrementNotification * SOAP_FMAC2 soap_instantiate___ns1__GetCasinoChallangeIncrementNotification(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetCasinoChallangeIncrementNotification * soap_new___ns1__GetCasinoChallangeIncrementNotification(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetCasinoChallangeIncrementNotification(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetCasinoChallangeIncrementNotification * soap_new_req___ns1__GetCasinoChallangeIncrementNotification(
	struct soap *soap)
{
	struct __ns1__GetCasinoChallangeIncrementNotification *_p = soap_new___ns1__GetCasinoChallangeIncrementNotification(soap);
	if (_p)
	{	soap_default___ns1__GetCasinoChallangeIncrementNotification(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetCasinoChallangeIncrementNotification * soap_new_set___ns1__GetCasinoChallangeIncrementNotification(
	struct soap *soap,
	_ns1__GetCasinoChallangeIncrementNotification *ns1__GetCasinoChallangeIncrementNotification)
{
	struct __ns1__GetCasinoChallangeIncrementNotification *_p = soap_new___ns1__GetCasinoChallangeIncrementNotification(soap);
	if (_p)
	{	soap_default___ns1__GetCasinoChallangeIncrementNotification(soap, _p);
		_p->ns1__GetCasinoChallangeIncrementNotification = ns1__GetCasinoChallangeIncrementNotification;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetCasinoChallangeIncrementNotification(struct soap*, const struct __ns1__GetCasinoChallangeIncrementNotification *, const char*, const char*);

inline int soap_write___ns1__GetCasinoChallangeIncrementNotification(struct soap *soap, struct __ns1__GetCasinoChallangeIncrementNotification const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetCasinoChallangeIncrementNotification(soap, p), 0) || soap_put___ns1__GetCasinoChallangeIncrementNotification(soap, p, "-ns1:GetCasinoChallangeIncrementNotification", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetCasinoChallangeIncrementNotification(struct soap *soap, const char *URL, struct __ns1__GetCasinoChallangeIncrementNotification const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__GetCasinoChallangeIncrementNotification(soap, p), 0) || soap_put___ns1__GetCasinoChallangeIncrementNotification(soap, p, "-ns1:GetCasinoChallangeIncrementNotification", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetCasinoChallangeIncrementNotification(struct soap *soap, const char *URL, struct __ns1__GetCasinoChallangeIncrementNotification const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__GetCasinoChallangeIncrementNotification(soap, p), 0) || soap_put___ns1__GetCasinoChallangeIncrementNotification(soap, p, "-ns1:GetCasinoChallangeIncrementNotification", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetCasinoChallangeIncrementNotification * SOAP_FMAC4 soap_get___ns1__GetCasinoChallangeIncrementNotification(struct soap*, struct __ns1__GetCasinoChallangeIncrementNotification *, const char*, const char*);

inline int soap_read___ns1__GetCasinoChallangeIncrementNotification(struct soap *soap, struct __ns1__GetCasinoChallangeIncrementNotification *p)
{
	if (p)
	{	soap_default___ns1__GetCasinoChallangeIncrementNotification(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetCasinoChallangeIncrementNotification(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetCasinoChallangeIncrementNotification(struct soap *soap, const char *URL, struct __ns1__GetCasinoChallangeIncrementNotification *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetCasinoChallangeIncrementNotification(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetCasinoChallangeIncrementNotification(struct soap *soap, struct __ns1__GetCasinoChallangeIncrementNotification *p)
{
	if (soap_read___ns1__GetCasinoChallangeIncrementNotification(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetCasinoChallengeTriggeredEventNotificationCustom_DEFINED
#define SOAP_TYPE___ns1__GetCasinoChallengeTriggeredEventNotificationCustom_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetCasinoChallengeTriggeredEventNotificationCustom(struct soap*, struct __ns1__GetCasinoChallengeTriggeredEventNotificationCustom *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetCasinoChallengeTriggeredEventNotificationCustom(struct soap*, const struct __ns1__GetCasinoChallengeTriggeredEventNotificationCustom *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetCasinoChallengeTriggeredEventNotificationCustom(struct soap*, const char*, int, const struct __ns1__GetCasinoChallengeTriggeredEventNotificationCustom *, const char*);
SOAP_FMAC3 struct __ns1__GetCasinoChallengeTriggeredEventNotificationCustom * SOAP_FMAC4 soap_in___ns1__GetCasinoChallengeTriggeredEventNotificationCustom(struct soap*, const char*, struct __ns1__GetCasinoChallengeTriggeredEventNotificationCustom *, const char*);
SOAP_FMAC1 struct __ns1__GetCasinoChallengeTriggeredEventNotificationCustom * SOAP_FMAC2 soap_instantiate___ns1__GetCasinoChallengeTriggeredEventNotificationCustom(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetCasinoChallengeTriggeredEventNotificationCustom * soap_new___ns1__GetCasinoChallengeTriggeredEventNotificationCustom(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetCasinoChallengeTriggeredEventNotificationCustom(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetCasinoChallengeTriggeredEventNotificationCustom * soap_new_req___ns1__GetCasinoChallengeTriggeredEventNotificationCustom(
	struct soap *soap)
{
	struct __ns1__GetCasinoChallengeTriggeredEventNotificationCustom *_p = soap_new___ns1__GetCasinoChallengeTriggeredEventNotificationCustom(soap);
	if (_p)
	{	soap_default___ns1__GetCasinoChallengeTriggeredEventNotificationCustom(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetCasinoChallengeTriggeredEventNotificationCustom * soap_new_set___ns1__GetCasinoChallengeTriggeredEventNotificationCustom(
	struct soap *soap,
	_ns1__GetCasinoChallengeTriggeredEventNotificationCustom *ns1__GetCasinoChallengeTriggeredEventNotificationCustom)
{
	struct __ns1__GetCasinoChallengeTriggeredEventNotificationCustom *_p = soap_new___ns1__GetCasinoChallengeTriggeredEventNotificationCustom(soap);
	if (_p)
	{	soap_default___ns1__GetCasinoChallengeTriggeredEventNotificationCustom(soap, _p);
		_p->ns1__GetCasinoChallengeTriggeredEventNotificationCustom = ns1__GetCasinoChallengeTriggeredEventNotificationCustom;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetCasinoChallengeTriggeredEventNotificationCustom(struct soap*, const struct __ns1__GetCasinoChallengeTriggeredEventNotificationCustom *, const char*, const char*);

inline int soap_write___ns1__GetCasinoChallengeTriggeredEventNotificationCustom(struct soap *soap, struct __ns1__GetCasinoChallengeTriggeredEventNotificationCustom const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetCasinoChallengeTriggeredEventNotificationCustom(soap, p), 0) || soap_put___ns1__GetCasinoChallengeTriggeredEventNotificationCustom(soap, p, "-ns1:GetCasinoChallengeTriggeredEventNotificationCustom", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetCasinoChallengeTriggeredEventNotificationCustom(struct soap *soap, const char *URL, struct __ns1__GetCasinoChallengeTriggeredEventNotificationCustom const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__GetCasinoChallengeTriggeredEventNotificationCustom(soap, p), 0) || soap_put___ns1__GetCasinoChallengeTriggeredEventNotificationCustom(soap, p, "-ns1:GetCasinoChallengeTriggeredEventNotificationCustom", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetCasinoChallengeTriggeredEventNotificationCustom(struct soap *soap, const char *URL, struct __ns1__GetCasinoChallengeTriggeredEventNotificationCustom const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__GetCasinoChallengeTriggeredEventNotificationCustom(soap, p), 0) || soap_put___ns1__GetCasinoChallengeTriggeredEventNotificationCustom(soap, p, "-ns1:GetCasinoChallengeTriggeredEventNotificationCustom", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetCasinoChallengeTriggeredEventNotificationCustom * SOAP_FMAC4 soap_get___ns1__GetCasinoChallengeTriggeredEventNotificationCustom(struct soap*, struct __ns1__GetCasinoChallengeTriggeredEventNotificationCustom *, const char*, const char*);

inline int soap_read___ns1__GetCasinoChallengeTriggeredEventNotificationCustom(struct soap *soap, struct __ns1__GetCasinoChallengeTriggeredEventNotificationCustom *p)
{
	if (p)
	{	soap_default___ns1__GetCasinoChallengeTriggeredEventNotificationCustom(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetCasinoChallengeTriggeredEventNotificationCustom(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetCasinoChallengeTriggeredEventNotificationCustom(struct soap *soap, const char *URL, struct __ns1__GetCasinoChallengeTriggeredEventNotificationCustom *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetCasinoChallengeTriggeredEventNotificationCustom(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetCasinoChallengeTriggeredEventNotificationCustom(struct soap *soap, struct __ns1__GetCasinoChallengeTriggeredEventNotificationCustom *p)
{
	if (soap_read___ns1__GetCasinoChallengeTriggeredEventNotificationCustom(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetEventTriggerNotification_DEFINED
#define SOAP_TYPE___ns1__GetEventTriggerNotification_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetEventTriggerNotification(struct soap*, struct __ns1__GetEventTriggerNotification *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetEventTriggerNotification(struct soap*, const struct __ns1__GetEventTriggerNotification *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetEventTriggerNotification(struct soap*, const char*, int, const struct __ns1__GetEventTriggerNotification *, const char*);
SOAP_FMAC3 struct __ns1__GetEventTriggerNotification * SOAP_FMAC4 soap_in___ns1__GetEventTriggerNotification(struct soap*, const char*, struct __ns1__GetEventTriggerNotification *, const char*);
SOAP_FMAC1 struct __ns1__GetEventTriggerNotification * SOAP_FMAC2 soap_instantiate___ns1__GetEventTriggerNotification(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetEventTriggerNotification * soap_new___ns1__GetEventTriggerNotification(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetEventTriggerNotification(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetEventTriggerNotification * soap_new_req___ns1__GetEventTriggerNotification(
	struct soap *soap)
{
	struct __ns1__GetEventTriggerNotification *_p = soap_new___ns1__GetEventTriggerNotification(soap);
	if (_p)
	{	soap_default___ns1__GetEventTriggerNotification(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetEventTriggerNotification * soap_new_set___ns1__GetEventTriggerNotification(
	struct soap *soap,
	_ns1__GetEventTriggerNotification *ns1__GetEventTriggerNotification)
{
	struct __ns1__GetEventTriggerNotification *_p = soap_new___ns1__GetEventTriggerNotification(soap);
	if (_p)
	{	soap_default___ns1__GetEventTriggerNotification(soap, _p);
		_p->ns1__GetEventTriggerNotification = ns1__GetEventTriggerNotification;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetEventTriggerNotification(struct soap*, const struct __ns1__GetEventTriggerNotification *, const char*, const char*);

inline int soap_write___ns1__GetEventTriggerNotification(struct soap *soap, struct __ns1__GetEventTriggerNotification const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetEventTriggerNotification(soap, p), 0) || soap_put___ns1__GetEventTriggerNotification(soap, p, "-ns1:GetEventTriggerNotification", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetEventTriggerNotification(struct soap *soap, const char *URL, struct __ns1__GetEventTriggerNotification const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__GetEventTriggerNotification(soap, p), 0) || soap_put___ns1__GetEventTriggerNotification(soap, p, "-ns1:GetEventTriggerNotification", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetEventTriggerNotification(struct soap *soap, const char *URL, struct __ns1__GetEventTriggerNotification const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__GetEventTriggerNotification(soap, p), 0) || soap_put___ns1__GetEventTriggerNotification(soap, p, "-ns1:GetEventTriggerNotification", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetEventTriggerNotification * SOAP_FMAC4 soap_get___ns1__GetEventTriggerNotification(struct soap*, struct __ns1__GetEventTriggerNotification *, const char*, const char*);

inline int soap_read___ns1__GetEventTriggerNotification(struct soap *soap, struct __ns1__GetEventTriggerNotification *p)
{
	if (p)
	{	soap_default___ns1__GetEventTriggerNotification(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetEventTriggerNotification(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetEventTriggerNotification(struct soap *soap, const char *URL, struct __ns1__GetEventTriggerNotification *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetEventTriggerNotification(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetEventTriggerNotification(struct soap *soap, struct __ns1__GetEventTriggerNotification *p)
{
	if (soap_read___ns1__GetEventTriggerNotification(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__SendBlobToThirdParty_DEFINED
#define SOAP_TYPE___ns1__SendBlobToThirdParty_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SendBlobToThirdParty(struct soap*, struct __ns1__SendBlobToThirdParty *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SendBlobToThirdParty(struct soap*, const struct __ns1__SendBlobToThirdParty *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SendBlobToThirdParty(struct soap*, const char*, int, const struct __ns1__SendBlobToThirdParty *, const char*);
SOAP_FMAC3 struct __ns1__SendBlobToThirdParty * SOAP_FMAC4 soap_in___ns1__SendBlobToThirdParty(struct soap*, const char*, struct __ns1__SendBlobToThirdParty *, const char*);
SOAP_FMAC1 struct __ns1__SendBlobToThirdParty * SOAP_FMAC2 soap_instantiate___ns1__SendBlobToThirdParty(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SendBlobToThirdParty * soap_new___ns1__SendBlobToThirdParty(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__SendBlobToThirdParty(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__SendBlobToThirdParty * soap_new_req___ns1__SendBlobToThirdParty(
	struct soap *soap)
{
	struct __ns1__SendBlobToThirdParty *_p = soap_new___ns1__SendBlobToThirdParty(soap);
	if (_p)
	{	soap_default___ns1__SendBlobToThirdParty(soap, _p);
	}
	return _p;
}

inline struct __ns1__SendBlobToThirdParty * soap_new_set___ns1__SendBlobToThirdParty(
	struct soap *soap,
	_ns1__SendBlobToThirdParty *ns1__SendBlobToThirdParty)
{
	struct __ns1__SendBlobToThirdParty *_p = soap_new___ns1__SendBlobToThirdParty(soap);
	if (_p)
	{	soap_default___ns1__SendBlobToThirdParty(soap, _p);
		_p->ns1__SendBlobToThirdParty = ns1__SendBlobToThirdParty;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SendBlobToThirdParty(struct soap*, const struct __ns1__SendBlobToThirdParty *, const char*, const char*);

inline int soap_write___ns1__SendBlobToThirdParty(struct soap *soap, struct __ns1__SendBlobToThirdParty const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__SendBlobToThirdParty(soap, p), 0) || soap_put___ns1__SendBlobToThirdParty(soap, p, "-ns1:SendBlobToThirdParty", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__SendBlobToThirdParty(struct soap *soap, const char *URL, struct __ns1__SendBlobToThirdParty const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__SendBlobToThirdParty(soap, p), 0) || soap_put___ns1__SendBlobToThirdParty(soap, p, "-ns1:SendBlobToThirdParty", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__SendBlobToThirdParty(struct soap *soap, const char *URL, struct __ns1__SendBlobToThirdParty const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__SendBlobToThirdParty(soap, p), 0) || soap_put___ns1__SendBlobToThirdParty(soap, p, "-ns1:SendBlobToThirdParty", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__SendBlobToThirdParty * SOAP_FMAC4 soap_get___ns1__SendBlobToThirdParty(struct soap*, struct __ns1__SendBlobToThirdParty *, const char*, const char*);

inline int soap_read___ns1__SendBlobToThirdParty(struct soap *soap, struct __ns1__SendBlobToThirdParty *p)
{
	if (p)
	{	soap_default___ns1__SendBlobToThirdParty(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__SendBlobToThirdParty(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__SendBlobToThirdParty(struct soap *soap, const char *URL, struct __ns1__SendBlobToThirdParty *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__SendBlobToThirdParty(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__SendBlobToThirdParty(struct soap *soap, struct __ns1__SendBlobToThirdParty *p)
{
	if (soap_read___ns1__SendBlobToThirdParty(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetThirdPartyBlob_DEFINED
#define SOAP_TYPE___ns1__GetThirdPartyBlob_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetThirdPartyBlob(struct soap*, struct __ns1__GetThirdPartyBlob *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetThirdPartyBlob(struct soap*, const struct __ns1__GetThirdPartyBlob *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetThirdPartyBlob(struct soap*, const char*, int, const struct __ns1__GetThirdPartyBlob *, const char*);
SOAP_FMAC3 struct __ns1__GetThirdPartyBlob * SOAP_FMAC4 soap_in___ns1__GetThirdPartyBlob(struct soap*, const char*, struct __ns1__GetThirdPartyBlob *, const char*);
SOAP_FMAC1 struct __ns1__GetThirdPartyBlob * SOAP_FMAC2 soap_instantiate___ns1__GetThirdPartyBlob(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetThirdPartyBlob * soap_new___ns1__GetThirdPartyBlob(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetThirdPartyBlob(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetThirdPartyBlob * soap_new_req___ns1__GetThirdPartyBlob(
	struct soap *soap)
{
	struct __ns1__GetThirdPartyBlob *_p = soap_new___ns1__GetThirdPartyBlob(soap);
	if (_p)
	{	soap_default___ns1__GetThirdPartyBlob(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetThirdPartyBlob * soap_new_set___ns1__GetThirdPartyBlob(
	struct soap *soap,
	_ns1__GetThirdPartyBlob *ns1__GetThirdPartyBlob)
{
	struct __ns1__GetThirdPartyBlob *_p = soap_new___ns1__GetThirdPartyBlob(soap);
	if (_p)
	{	soap_default___ns1__GetThirdPartyBlob(soap, _p);
		_p->ns1__GetThirdPartyBlob = ns1__GetThirdPartyBlob;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetThirdPartyBlob(struct soap*, const struct __ns1__GetThirdPartyBlob *, const char*, const char*);

inline int soap_write___ns1__GetThirdPartyBlob(struct soap *soap, struct __ns1__GetThirdPartyBlob const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetThirdPartyBlob(soap, p), 0) || soap_put___ns1__GetThirdPartyBlob(soap, p, "-ns1:GetThirdPartyBlob", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetThirdPartyBlob(struct soap *soap, const char *URL, struct __ns1__GetThirdPartyBlob const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__GetThirdPartyBlob(soap, p), 0) || soap_put___ns1__GetThirdPartyBlob(soap, p, "-ns1:GetThirdPartyBlob", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetThirdPartyBlob(struct soap *soap, const char *URL, struct __ns1__GetThirdPartyBlob const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__GetThirdPartyBlob(soap, p), 0) || soap_put___ns1__GetThirdPartyBlob(soap, p, "-ns1:GetThirdPartyBlob", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetThirdPartyBlob * SOAP_FMAC4 soap_get___ns1__GetThirdPartyBlob(struct soap*, struct __ns1__GetThirdPartyBlob *, const char*, const char*);

inline int soap_read___ns1__GetThirdPartyBlob(struct soap *soap, struct __ns1__GetThirdPartyBlob *p)
{
	if (p)
	{	soap_default___ns1__GetThirdPartyBlob(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetThirdPartyBlob(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetThirdPartyBlob(struct soap *soap, const char *URL, struct __ns1__GetThirdPartyBlob *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetThirdPartyBlob(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetThirdPartyBlob(struct soap *soap, struct __ns1__GetThirdPartyBlob *p)
{
	if (soap_read___ns1__GetThirdPartyBlob(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__ReportSentinelInformation25_DEFINED
#define SOAP_TYPE___ns1__ReportSentinelInformation25_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ReportSentinelInformation25(struct soap*, struct __ns1__ReportSentinelInformation25 *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ReportSentinelInformation25(struct soap*, const struct __ns1__ReportSentinelInformation25 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ReportSentinelInformation25(struct soap*, const char*, int, const struct __ns1__ReportSentinelInformation25 *, const char*);
SOAP_FMAC3 struct __ns1__ReportSentinelInformation25 * SOAP_FMAC4 soap_in___ns1__ReportSentinelInformation25(struct soap*, const char*, struct __ns1__ReportSentinelInformation25 *, const char*);
SOAP_FMAC1 struct __ns1__ReportSentinelInformation25 * SOAP_FMAC2 soap_instantiate___ns1__ReportSentinelInformation25(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ReportSentinelInformation25 * soap_new___ns1__ReportSentinelInformation25(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__ReportSentinelInformation25(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__ReportSentinelInformation25 * soap_new_req___ns1__ReportSentinelInformation25(
	struct soap *soap)
{
	struct __ns1__ReportSentinelInformation25 *_p = soap_new___ns1__ReportSentinelInformation25(soap);
	if (_p)
	{	soap_default___ns1__ReportSentinelInformation25(soap, _p);
	}
	return _p;
}

inline struct __ns1__ReportSentinelInformation25 * soap_new_set___ns1__ReportSentinelInformation25(
	struct soap *soap,
	_ns1__ReportSentinelInformation25 *ns1__ReportSentinelInformation25)
{
	struct __ns1__ReportSentinelInformation25 *_p = soap_new___ns1__ReportSentinelInformation25(soap);
	if (_p)
	{	soap_default___ns1__ReportSentinelInformation25(soap, _p);
		_p->ns1__ReportSentinelInformation25 = ns1__ReportSentinelInformation25;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ReportSentinelInformation25(struct soap*, const struct __ns1__ReportSentinelInformation25 *, const char*, const char*);

inline int soap_write___ns1__ReportSentinelInformation25(struct soap *soap, struct __ns1__ReportSentinelInformation25 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__ReportSentinelInformation25(soap, p), 0) || soap_put___ns1__ReportSentinelInformation25(soap, p, "-ns1:ReportSentinelInformation25", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__ReportSentinelInformation25(struct soap *soap, const char *URL, struct __ns1__ReportSentinelInformation25 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__ReportSentinelInformation25(soap, p), 0) || soap_put___ns1__ReportSentinelInformation25(soap, p, "-ns1:ReportSentinelInformation25", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__ReportSentinelInformation25(struct soap *soap, const char *URL, struct __ns1__ReportSentinelInformation25 const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__ReportSentinelInformation25(soap, p), 0) || soap_put___ns1__ReportSentinelInformation25(soap, p, "-ns1:ReportSentinelInformation25", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__ReportSentinelInformation25 * SOAP_FMAC4 soap_get___ns1__ReportSentinelInformation25(struct soap*, struct __ns1__ReportSentinelInformation25 *, const char*, const char*);

inline int soap_read___ns1__ReportSentinelInformation25(struct soap *soap, struct __ns1__ReportSentinelInformation25 *p)
{
	if (p)
	{	soap_default___ns1__ReportSentinelInformation25(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__ReportSentinelInformation25(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__ReportSentinelInformation25(struct soap *soap, const char *URL, struct __ns1__ReportSentinelInformation25 *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__ReportSentinelInformation25(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__ReportSentinelInformation25(struct soap *soap, struct __ns1__ReportSentinelInformation25 *p)
{
	if (soap_read___ns1__ReportSentinelInformation25(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__ReportSentinelInformationEx_DEFINED
#define SOAP_TYPE___ns1__ReportSentinelInformationEx_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ReportSentinelInformationEx(struct soap*, struct __ns1__ReportSentinelInformationEx *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ReportSentinelInformationEx(struct soap*, const struct __ns1__ReportSentinelInformationEx *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ReportSentinelInformationEx(struct soap*, const char*, int, const struct __ns1__ReportSentinelInformationEx *, const char*);
SOAP_FMAC3 struct __ns1__ReportSentinelInformationEx * SOAP_FMAC4 soap_in___ns1__ReportSentinelInformationEx(struct soap*, const char*, struct __ns1__ReportSentinelInformationEx *, const char*);
SOAP_FMAC1 struct __ns1__ReportSentinelInformationEx * SOAP_FMAC2 soap_instantiate___ns1__ReportSentinelInformationEx(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ReportSentinelInformationEx * soap_new___ns1__ReportSentinelInformationEx(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__ReportSentinelInformationEx(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__ReportSentinelInformationEx * soap_new_req___ns1__ReportSentinelInformationEx(
	struct soap *soap)
{
	struct __ns1__ReportSentinelInformationEx *_p = soap_new___ns1__ReportSentinelInformationEx(soap);
	if (_p)
	{	soap_default___ns1__ReportSentinelInformationEx(soap, _p);
	}
	return _p;
}

inline struct __ns1__ReportSentinelInformationEx * soap_new_set___ns1__ReportSentinelInformationEx(
	struct soap *soap,
	_ns1__ReportSentinelInformationEx *ns1__ReportSentinelInformationEx)
{
	struct __ns1__ReportSentinelInformationEx *_p = soap_new___ns1__ReportSentinelInformationEx(soap);
	if (_p)
	{	soap_default___ns1__ReportSentinelInformationEx(soap, _p);
		_p->ns1__ReportSentinelInformationEx = ns1__ReportSentinelInformationEx;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ReportSentinelInformationEx(struct soap*, const struct __ns1__ReportSentinelInformationEx *, const char*, const char*);

inline int soap_write___ns1__ReportSentinelInformationEx(struct soap *soap, struct __ns1__ReportSentinelInformationEx const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__ReportSentinelInformationEx(soap, p), 0) || soap_put___ns1__ReportSentinelInformationEx(soap, p, "-ns1:ReportSentinelInformationEx", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__ReportSentinelInformationEx(struct soap *soap, const char *URL, struct __ns1__ReportSentinelInformationEx const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__ReportSentinelInformationEx(soap, p), 0) || soap_put___ns1__ReportSentinelInformationEx(soap, p, "-ns1:ReportSentinelInformationEx", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__ReportSentinelInformationEx(struct soap *soap, const char *URL, struct __ns1__ReportSentinelInformationEx const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__ReportSentinelInformationEx(soap, p), 0) || soap_put___ns1__ReportSentinelInformationEx(soap, p, "-ns1:ReportSentinelInformationEx", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__ReportSentinelInformationEx * SOAP_FMAC4 soap_get___ns1__ReportSentinelInformationEx(struct soap*, struct __ns1__ReportSentinelInformationEx *, const char*, const char*);

inline int soap_read___ns1__ReportSentinelInformationEx(struct soap *soap, struct __ns1__ReportSentinelInformationEx *p)
{
	if (p)
	{	soap_default___ns1__ReportSentinelInformationEx(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__ReportSentinelInformationEx(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__ReportSentinelInformationEx(struct soap *soap, const char *URL, struct __ns1__ReportSentinelInformationEx *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__ReportSentinelInformationEx(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__ReportSentinelInformationEx(struct soap *soap, struct __ns1__ReportSentinelInformationEx *p)
{
	if (soap_read___ns1__ReportSentinelInformationEx(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__ReportSentinelInformationWithOrientation_DEFINED
#define SOAP_TYPE___ns1__ReportSentinelInformationWithOrientation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ReportSentinelInformationWithOrientation(struct soap*, struct __ns1__ReportSentinelInformationWithOrientation *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ReportSentinelInformationWithOrientation(struct soap*, const struct __ns1__ReportSentinelInformationWithOrientation *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ReportSentinelInformationWithOrientation(struct soap*, const char*, int, const struct __ns1__ReportSentinelInformationWithOrientation *, const char*);
SOAP_FMAC3 struct __ns1__ReportSentinelInformationWithOrientation * SOAP_FMAC4 soap_in___ns1__ReportSentinelInformationWithOrientation(struct soap*, const char*, struct __ns1__ReportSentinelInformationWithOrientation *, const char*);
SOAP_FMAC1 struct __ns1__ReportSentinelInformationWithOrientation * SOAP_FMAC2 soap_instantiate___ns1__ReportSentinelInformationWithOrientation(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ReportSentinelInformationWithOrientation * soap_new___ns1__ReportSentinelInformationWithOrientation(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__ReportSentinelInformationWithOrientation(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__ReportSentinelInformationWithOrientation * soap_new_req___ns1__ReportSentinelInformationWithOrientation(
	struct soap *soap)
{
	struct __ns1__ReportSentinelInformationWithOrientation *_p = soap_new___ns1__ReportSentinelInformationWithOrientation(soap);
	if (_p)
	{	soap_default___ns1__ReportSentinelInformationWithOrientation(soap, _p);
	}
	return _p;
}

inline struct __ns1__ReportSentinelInformationWithOrientation * soap_new_set___ns1__ReportSentinelInformationWithOrientation(
	struct soap *soap,
	_ns1__ReportSentinelInformationWithOrientation *ns1__ReportSentinelInformationWithOrientation)
{
	struct __ns1__ReportSentinelInformationWithOrientation *_p = soap_new___ns1__ReportSentinelInformationWithOrientation(soap);
	if (_p)
	{	soap_default___ns1__ReportSentinelInformationWithOrientation(soap, _p);
		_p->ns1__ReportSentinelInformationWithOrientation = ns1__ReportSentinelInformationWithOrientation;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ReportSentinelInformationWithOrientation(struct soap*, const struct __ns1__ReportSentinelInformationWithOrientation *, const char*, const char*);

inline int soap_write___ns1__ReportSentinelInformationWithOrientation(struct soap *soap, struct __ns1__ReportSentinelInformationWithOrientation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__ReportSentinelInformationWithOrientation(soap, p), 0) || soap_put___ns1__ReportSentinelInformationWithOrientation(soap, p, "-ns1:ReportSentinelInformationWithOrientation", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__ReportSentinelInformationWithOrientation(struct soap *soap, const char *URL, struct __ns1__ReportSentinelInformationWithOrientation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__ReportSentinelInformationWithOrientation(soap, p), 0) || soap_put___ns1__ReportSentinelInformationWithOrientation(soap, p, "-ns1:ReportSentinelInformationWithOrientation", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__ReportSentinelInformationWithOrientation(struct soap *soap, const char *URL, struct __ns1__ReportSentinelInformationWithOrientation const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__ReportSentinelInformationWithOrientation(soap, p), 0) || soap_put___ns1__ReportSentinelInformationWithOrientation(soap, p, "-ns1:ReportSentinelInformationWithOrientation", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__ReportSentinelInformationWithOrientation * SOAP_FMAC4 soap_get___ns1__ReportSentinelInformationWithOrientation(struct soap*, struct __ns1__ReportSentinelInformationWithOrientation *, const char*, const char*);

inline int soap_read___ns1__ReportSentinelInformationWithOrientation(struct soap *soap, struct __ns1__ReportSentinelInformationWithOrientation *p)
{
	if (p)
	{	soap_default___ns1__ReportSentinelInformationWithOrientation(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__ReportSentinelInformationWithOrientation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__ReportSentinelInformationWithOrientation(struct soap *soap, const char *URL, struct __ns1__ReportSentinelInformationWithOrientation *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__ReportSentinelInformationWithOrientation(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__ReportSentinelInformationWithOrientation(struct soap *soap, struct __ns1__ReportSentinelInformationWithOrientation *p)
{
	if (soap_read___ns1__ReportSentinelInformationWithOrientation(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__ReportSentinelInformation_DEFINED
#define SOAP_TYPE___ns1__ReportSentinelInformation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ReportSentinelInformation(struct soap*, struct __ns1__ReportSentinelInformation *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ReportSentinelInformation(struct soap*, const struct __ns1__ReportSentinelInformation *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ReportSentinelInformation(struct soap*, const char*, int, const struct __ns1__ReportSentinelInformation *, const char*);
SOAP_FMAC3 struct __ns1__ReportSentinelInformation * SOAP_FMAC4 soap_in___ns1__ReportSentinelInformation(struct soap*, const char*, struct __ns1__ReportSentinelInformation *, const char*);
SOAP_FMAC1 struct __ns1__ReportSentinelInformation * SOAP_FMAC2 soap_instantiate___ns1__ReportSentinelInformation(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ReportSentinelInformation * soap_new___ns1__ReportSentinelInformation(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__ReportSentinelInformation(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__ReportSentinelInformation * soap_new_req___ns1__ReportSentinelInformation(
	struct soap *soap)
{
	struct __ns1__ReportSentinelInformation *_p = soap_new___ns1__ReportSentinelInformation(soap);
	if (_p)
	{	soap_default___ns1__ReportSentinelInformation(soap, _p);
	}
	return _p;
}

inline struct __ns1__ReportSentinelInformation * soap_new_set___ns1__ReportSentinelInformation(
	struct soap *soap,
	_ns1__ReportSentinelInformation *ns1__ReportSentinelInformation)
{
	struct __ns1__ReportSentinelInformation *_p = soap_new___ns1__ReportSentinelInformation(soap);
	if (_p)
	{	soap_default___ns1__ReportSentinelInformation(soap, _p);
		_p->ns1__ReportSentinelInformation = ns1__ReportSentinelInformation;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ReportSentinelInformation(struct soap*, const struct __ns1__ReportSentinelInformation *, const char*, const char*);

inline int soap_write___ns1__ReportSentinelInformation(struct soap *soap, struct __ns1__ReportSentinelInformation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__ReportSentinelInformation(soap, p), 0) || soap_put___ns1__ReportSentinelInformation(soap, p, "-ns1:ReportSentinelInformation", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__ReportSentinelInformation(struct soap *soap, const char *URL, struct __ns1__ReportSentinelInformation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__ReportSentinelInformation(soap, p), 0) || soap_put___ns1__ReportSentinelInformation(soap, p, "-ns1:ReportSentinelInformation", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__ReportSentinelInformation(struct soap *soap, const char *URL, struct __ns1__ReportSentinelInformation const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__ReportSentinelInformation(soap, p), 0) || soap_put___ns1__ReportSentinelInformation(soap, p, "-ns1:ReportSentinelInformation", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__ReportSentinelInformation * SOAP_FMAC4 soap_get___ns1__ReportSentinelInformation(struct soap*, struct __ns1__ReportSentinelInformation *, const char*, const char*);

inline int soap_read___ns1__ReportSentinelInformation(struct soap *soap, struct __ns1__ReportSentinelInformation *p)
{
	if (p)
	{	soap_default___ns1__ReportSentinelInformation(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__ReportSentinelInformation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__ReportSentinelInformation(struct soap *soap, const char *URL, struct __ns1__ReportSentinelInformation *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__ReportSentinelInformation(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__ReportSentinelInformation(struct soap *soap, struct __ns1__ReportSentinelInformation *p)
{
	if (soap_read___ns1__ReportSentinelInformation(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__ReportStatus_DEFINED
#define SOAP_TYPE___ns1__ReportStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ReportStatus(struct soap*, struct __ns1__ReportStatus *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ReportStatus(struct soap*, const struct __ns1__ReportStatus *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ReportStatus(struct soap*, const char*, int, const struct __ns1__ReportStatus *, const char*);
SOAP_FMAC3 struct __ns1__ReportStatus * SOAP_FMAC4 soap_in___ns1__ReportStatus(struct soap*, const char*, struct __ns1__ReportStatus *, const char*);
SOAP_FMAC1 struct __ns1__ReportStatus * SOAP_FMAC2 soap_instantiate___ns1__ReportStatus(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ReportStatus * soap_new___ns1__ReportStatus(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__ReportStatus(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__ReportStatus * soap_new_req___ns1__ReportStatus(
	struct soap *soap)
{
	struct __ns1__ReportStatus *_p = soap_new___ns1__ReportStatus(soap);
	if (_p)
	{	soap_default___ns1__ReportStatus(soap, _p);
	}
	return _p;
}

inline struct __ns1__ReportStatus * soap_new_set___ns1__ReportStatus(
	struct soap *soap,
	_ns1__ReportStatus *ns1__ReportStatus)
{
	struct __ns1__ReportStatus *_p = soap_new___ns1__ReportStatus(soap);
	if (_p)
	{	soap_default___ns1__ReportStatus(soap, _p);
		_p->ns1__ReportStatus = ns1__ReportStatus;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ReportStatus(struct soap*, const struct __ns1__ReportStatus *, const char*, const char*);

inline int soap_write___ns1__ReportStatus(struct soap *soap, struct __ns1__ReportStatus const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__ReportStatus(soap, p), 0) || soap_put___ns1__ReportStatus(soap, p, "-ns1:ReportStatus", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__ReportStatus(struct soap *soap, const char *URL, struct __ns1__ReportStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__ReportStatus(soap, p), 0) || soap_put___ns1__ReportStatus(soap, p, "-ns1:ReportStatus", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__ReportStatus(struct soap *soap, const char *URL, struct __ns1__ReportStatus const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__ReportStatus(soap, p), 0) || soap_put___ns1__ReportStatus(soap, p, "-ns1:ReportStatus", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__ReportStatus * SOAP_FMAC4 soap_get___ns1__ReportStatus(struct soap*, struct __ns1__ReportStatus *, const char*, const char*);

inline int soap_read___ns1__ReportStatus(struct soap *soap, struct __ns1__ReportStatus *p)
{
	if (p)
	{	soap_default___ns1__ReportStatus(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__ReportStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__ReportStatus(struct soap *soap, const char *URL, struct __ns1__ReportStatus *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__ReportStatus(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__ReportStatus(struct soap *soap, struct __ns1__ReportStatus *p)
{
	if (soap_read___ns1__ReportStatus(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__AcknowledgeExternalPaid_DEFINED
#define SOAP_TYPE___ns1__AcknowledgeExternalPaid_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AcknowledgeExternalPaid(struct soap*, struct __ns1__AcknowledgeExternalPaid *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AcknowledgeExternalPaid(struct soap*, const struct __ns1__AcknowledgeExternalPaid *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AcknowledgeExternalPaid(struct soap*, const char*, int, const struct __ns1__AcknowledgeExternalPaid *, const char*);
SOAP_FMAC3 struct __ns1__AcknowledgeExternalPaid * SOAP_FMAC4 soap_in___ns1__AcknowledgeExternalPaid(struct soap*, const char*, struct __ns1__AcknowledgeExternalPaid *, const char*);
SOAP_FMAC1 struct __ns1__AcknowledgeExternalPaid * SOAP_FMAC2 soap_instantiate___ns1__AcknowledgeExternalPaid(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__AcknowledgeExternalPaid * soap_new___ns1__AcknowledgeExternalPaid(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__AcknowledgeExternalPaid(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__AcknowledgeExternalPaid * soap_new_req___ns1__AcknowledgeExternalPaid(
	struct soap *soap)
{
	struct __ns1__AcknowledgeExternalPaid *_p = soap_new___ns1__AcknowledgeExternalPaid(soap);
	if (_p)
	{	soap_default___ns1__AcknowledgeExternalPaid(soap, _p);
	}
	return _p;
}

inline struct __ns1__AcknowledgeExternalPaid * soap_new_set___ns1__AcknowledgeExternalPaid(
	struct soap *soap,
	_ns1__AcknowledgeExternalPaid *ns1__AcknowledgeExternalPaid)
{
	struct __ns1__AcknowledgeExternalPaid *_p = soap_new___ns1__AcknowledgeExternalPaid(soap);
	if (_p)
	{	soap_default___ns1__AcknowledgeExternalPaid(soap, _p);
		_p->ns1__AcknowledgeExternalPaid = ns1__AcknowledgeExternalPaid;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AcknowledgeExternalPaid(struct soap*, const struct __ns1__AcknowledgeExternalPaid *, const char*, const char*);

inline int soap_write___ns1__AcknowledgeExternalPaid(struct soap *soap, struct __ns1__AcknowledgeExternalPaid const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__AcknowledgeExternalPaid(soap, p), 0) || soap_put___ns1__AcknowledgeExternalPaid(soap, p, "-ns1:AcknowledgeExternalPaid", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__AcknowledgeExternalPaid(struct soap *soap, const char *URL, struct __ns1__AcknowledgeExternalPaid const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__AcknowledgeExternalPaid(soap, p), 0) || soap_put___ns1__AcknowledgeExternalPaid(soap, p, "-ns1:AcknowledgeExternalPaid", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__AcknowledgeExternalPaid(struct soap *soap, const char *URL, struct __ns1__AcknowledgeExternalPaid const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__AcknowledgeExternalPaid(soap, p), 0) || soap_put___ns1__AcknowledgeExternalPaid(soap, p, "-ns1:AcknowledgeExternalPaid", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__AcknowledgeExternalPaid * SOAP_FMAC4 soap_get___ns1__AcknowledgeExternalPaid(struct soap*, struct __ns1__AcknowledgeExternalPaid *, const char*, const char*);

inline int soap_read___ns1__AcknowledgeExternalPaid(struct soap *soap, struct __ns1__AcknowledgeExternalPaid *p)
{
	if (p)
	{	soap_default___ns1__AcknowledgeExternalPaid(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__AcknowledgeExternalPaid(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__AcknowledgeExternalPaid(struct soap *soap, const char *URL, struct __ns1__AcknowledgeExternalPaid *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__AcknowledgeExternalPaid(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__AcknowledgeExternalPaid(struct soap *soap, struct __ns1__AcknowledgeExternalPaid *p)
{
	if (soap_read___ns1__AcknowledgeExternalPaid(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__ReportGameStart_DEFINED
#define SOAP_TYPE___ns1__ReportGameStart_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ReportGameStart(struct soap*, struct __ns1__ReportGameStart *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ReportGameStart(struct soap*, const struct __ns1__ReportGameStart *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ReportGameStart(struct soap*, const char*, int, const struct __ns1__ReportGameStart *, const char*);
SOAP_FMAC3 struct __ns1__ReportGameStart * SOAP_FMAC4 soap_in___ns1__ReportGameStart(struct soap*, const char*, struct __ns1__ReportGameStart *, const char*);
SOAP_FMAC1 struct __ns1__ReportGameStart * SOAP_FMAC2 soap_instantiate___ns1__ReportGameStart(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ReportGameStart * soap_new___ns1__ReportGameStart(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__ReportGameStart(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__ReportGameStart * soap_new_req___ns1__ReportGameStart(
	struct soap *soap)
{
	struct __ns1__ReportGameStart *_p = soap_new___ns1__ReportGameStart(soap);
	if (_p)
	{	soap_default___ns1__ReportGameStart(soap, _p);
	}
	return _p;
}

inline struct __ns1__ReportGameStart * soap_new_set___ns1__ReportGameStart(
	struct soap *soap,
	_ns1__ReportGameStart *ns1__ReportGameStart)
{
	struct __ns1__ReportGameStart *_p = soap_new___ns1__ReportGameStart(soap);
	if (_p)
	{	soap_default___ns1__ReportGameStart(soap, _p);
		_p->ns1__ReportGameStart = ns1__ReportGameStart;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ReportGameStart(struct soap*, const struct __ns1__ReportGameStart *, const char*, const char*);

inline int soap_write___ns1__ReportGameStart(struct soap *soap, struct __ns1__ReportGameStart const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__ReportGameStart(soap, p), 0) || soap_put___ns1__ReportGameStart(soap, p, "-ns1:ReportGameStart", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__ReportGameStart(struct soap *soap, const char *URL, struct __ns1__ReportGameStart const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__ReportGameStart(soap, p), 0) || soap_put___ns1__ReportGameStart(soap, p, "-ns1:ReportGameStart", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__ReportGameStart(struct soap *soap, const char *URL, struct __ns1__ReportGameStart const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__ReportGameStart(soap, p), 0) || soap_put___ns1__ReportGameStart(soap, p, "-ns1:ReportGameStart", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__ReportGameStart * SOAP_FMAC4 soap_get___ns1__ReportGameStart(struct soap*, struct __ns1__ReportGameStart *, const char*, const char*);

inline int soap_read___ns1__ReportGameStart(struct soap *soap, struct __ns1__ReportGameStart *p)
{
	if (p)
	{	soap_default___ns1__ReportGameStart(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__ReportGameStart(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__ReportGameStart(struct soap *soap, const char *URL, struct __ns1__ReportGameStart *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__ReportGameStart(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__ReportGameStart(struct soap *soap, struct __ns1__ReportGameStart *p)
{
	if (soap_read___ns1__ReportGameStart(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__ReportEventMeterDeltas_DEFINED
#define SOAP_TYPE___ns1__ReportEventMeterDeltas_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ReportEventMeterDeltas(struct soap*, struct __ns1__ReportEventMeterDeltas *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ReportEventMeterDeltas(struct soap*, const struct __ns1__ReportEventMeterDeltas *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ReportEventMeterDeltas(struct soap*, const char*, int, const struct __ns1__ReportEventMeterDeltas *, const char*);
SOAP_FMAC3 struct __ns1__ReportEventMeterDeltas * SOAP_FMAC4 soap_in___ns1__ReportEventMeterDeltas(struct soap*, const char*, struct __ns1__ReportEventMeterDeltas *, const char*);
SOAP_FMAC1 struct __ns1__ReportEventMeterDeltas * SOAP_FMAC2 soap_instantiate___ns1__ReportEventMeterDeltas(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ReportEventMeterDeltas * soap_new___ns1__ReportEventMeterDeltas(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__ReportEventMeterDeltas(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__ReportEventMeterDeltas * soap_new_req___ns1__ReportEventMeterDeltas(
	struct soap *soap)
{
	struct __ns1__ReportEventMeterDeltas *_p = soap_new___ns1__ReportEventMeterDeltas(soap);
	if (_p)
	{	soap_default___ns1__ReportEventMeterDeltas(soap, _p);
	}
	return _p;
}

inline struct __ns1__ReportEventMeterDeltas * soap_new_set___ns1__ReportEventMeterDeltas(
	struct soap *soap,
	_ns1__ReportEventMeterDeltas *ns1__ReportEventMeterDeltas)
{
	struct __ns1__ReportEventMeterDeltas *_p = soap_new___ns1__ReportEventMeterDeltas(soap);
	if (_p)
	{	soap_default___ns1__ReportEventMeterDeltas(soap, _p);
		_p->ns1__ReportEventMeterDeltas = ns1__ReportEventMeterDeltas;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ReportEventMeterDeltas(struct soap*, const struct __ns1__ReportEventMeterDeltas *, const char*, const char*);

inline int soap_write___ns1__ReportEventMeterDeltas(struct soap *soap, struct __ns1__ReportEventMeterDeltas const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__ReportEventMeterDeltas(soap, p), 0) || soap_put___ns1__ReportEventMeterDeltas(soap, p, "-ns1:ReportEventMeterDeltas", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__ReportEventMeterDeltas(struct soap *soap, const char *URL, struct __ns1__ReportEventMeterDeltas const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__ReportEventMeterDeltas(soap, p), 0) || soap_put___ns1__ReportEventMeterDeltas(soap, p, "-ns1:ReportEventMeterDeltas", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__ReportEventMeterDeltas(struct soap *soap, const char *URL, struct __ns1__ReportEventMeterDeltas const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__ReportEventMeterDeltas(soap, p), 0) || soap_put___ns1__ReportEventMeterDeltas(soap, p, "-ns1:ReportEventMeterDeltas", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__ReportEventMeterDeltas * SOAP_FMAC4 soap_get___ns1__ReportEventMeterDeltas(struct soap*, struct __ns1__ReportEventMeterDeltas *, const char*, const char*);

inline int soap_read___ns1__ReportEventMeterDeltas(struct soap *soap, struct __ns1__ReportEventMeterDeltas *p)
{
	if (p)
	{	soap_default___ns1__ReportEventMeterDeltas(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__ReportEventMeterDeltas(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__ReportEventMeterDeltas(struct soap *soap, const char *URL, struct __ns1__ReportEventMeterDeltas *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__ReportEventMeterDeltas(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__ReportEventMeterDeltas(struct soap *soap, struct __ns1__ReportEventMeterDeltas *p)
{
	if (soap_read___ns1__ReportEventMeterDeltas(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InTriggeredEventTrigger_DEFINED
#define SOAP_TYPE___ns1__InTriggeredEventTrigger_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InTriggeredEventTrigger(struct soap*, struct __ns1__InTriggeredEventTrigger *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InTriggeredEventTrigger(struct soap*, const struct __ns1__InTriggeredEventTrigger *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InTriggeredEventTrigger(struct soap*, const char*, int, const struct __ns1__InTriggeredEventTrigger *, const char*);
SOAP_FMAC3 struct __ns1__InTriggeredEventTrigger * SOAP_FMAC4 soap_in___ns1__InTriggeredEventTrigger(struct soap*, const char*, struct __ns1__InTriggeredEventTrigger *, const char*);
SOAP_FMAC1 struct __ns1__InTriggeredEventTrigger * SOAP_FMAC2 soap_instantiate___ns1__InTriggeredEventTrigger(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InTriggeredEventTrigger * soap_new___ns1__InTriggeredEventTrigger(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InTriggeredEventTrigger(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InTriggeredEventTrigger * soap_new_req___ns1__InTriggeredEventTrigger(
	struct soap *soap)
{
	struct __ns1__InTriggeredEventTrigger *_p = soap_new___ns1__InTriggeredEventTrigger(soap);
	if (_p)
	{	soap_default___ns1__InTriggeredEventTrigger(soap, _p);
	}
	return _p;
}

inline struct __ns1__InTriggeredEventTrigger * soap_new_set___ns1__InTriggeredEventTrigger(
	struct soap *soap,
	_ns1__InTriggeredEventTrigger *ns1__InTriggeredEventTrigger)
{
	struct __ns1__InTriggeredEventTrigger *_p = soap_new___ns1__InTriggeredEventTrigger(soap);
	if (_p)
	{	soap_default___ns1__InTriggeredEventTrigger(soap, _p);
		_p->ns1__InTriggeredEventTrigger = ns1__InTriggeredEventTrigger;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InTriggeredEventTrigger(struct soap*, const struct __ns1__InTriggeredEventTrigger *, const char*, const char*);

inline int soap_write___ns1__InTriggeredEventTrigger(struct soap *soap, struct __ns1__InTriggeredEventTrigger const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InTriggeredEventTrigger(soap, p), 0) || soap_put___ns1__InTriggeredEventTrigger(soap, p, "-ns1:InTriggeredEventTrigger", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InTriggeredEventTrigger(struct soap *soap, const char *URL, struct __ns1__InTriggeredEventTrigger const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__InTriggeredEventTrigger(soap, p), 0) || soap_put___ns1__InTriggeredEventTrigger(soap, p, "-ns1:InTriggeredEventTrigger", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InTriggeredEventTrigger(struct soap *soap, const char *URL, struct __ns1__InTriggeredEventTrigger const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__InTriggeredEventTrigger(soap, p), 0) || soap_put___ns1__InTriggeredEventTrigger(soap, p, "-ns1:InTriggeredEventTrigger", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InTriggeredEventTrigger * SOAP_FMAC4 soap_get___ns1__InTriggeredEventTrigger(struct soap*, struct __ns1__InTriggeredEventTrigger *, const char*, const char*);

inline int soap_read___ns1__InTriggeredEventTrigger(struct soap *soap, struct __ns1__InTriggeredEventTrigger *p)
{
	if (p)
	{	soap_default___ns1__InTriggeredEventTrigger(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InTriggeredEventTrigger(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InTriggeredEventTrigger(struct soap *soap, const char *URL, struct __ns1__InTriggeredEventTrigger *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InTriggeredEventTrigger(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InTriggeredEventTrigger(struct soap *soap, struct __ns1__InTriggeredEventTrigger *p)
{
	if (soap_read___ns1__InTriggeredEventTrigger(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InEventTrigger_DEFINED
#define SOAP_TYPE___ns1__InEventTrigger_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InEventTrigger(struct soap*, struct __ns1__InEventTrigger *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InEventTrigger(struct soap*, const struct __ns1__InEventTrigger *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InEventTrigger(struct soap*, const char*, int, const struct __ns1__InEventTrigger *, const char*);
SOAP_FMAC3 struct __ns1__InEventTrigger * SOAP_FMAC4 soap_in___ns1__InEventTrigger(struct soap*, const char*, struct __ns1__InEventTrigger *, const char*);
SOAP_FMAC1 struct __ns1__InEventTrigger * SOAP_FMAC2 soap_instantiate___ns1__InEventTrigger(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InEventTrigger * soap_new___ns1__InEventTrigger(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InEventTrigger(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InEventTrigger * soap_new_req___ns1__InEventTrigger(
	struct soap *soap)
{
	struct __ns1__InEventTrigger *_p = soap_new___ns1__InEventTrigger(soap);
	if (_p)
	{	soap_default___ns1__InEventTrigger(soap, _p);
	}
	return _p;
}

inline struct __ns1__InEventTrigger * soap_new_set___ns1__InEventTrigger(
	struct soap *soap,
	_ns1__InEventTrigger *ns1__InEventTrigger)
{
	struct __ns1__InEventTrigger *_p = soap_new___ns1__InEventTrigger(soap);
	if (_p)
	{	soap_default___ns1__InEventTrigger(soap, _p);
		_p->ns1__InEventTrigger = ns1__InEventTrigger;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InEventTrigger(struct soap*, const struct __ns1__InEventTrigger *, const char*, const char*);

inline int soap_write___ns1__InEventTrigger(struct soap *soap, struct __ns1__InEventTrigger const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__InEventTrigger(soap, p), 0) || soap_put___ns1__InEventTrigger(soap, p, "-ns1:InEventTrigger", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__InEventTrigger(struct soap *soap, const char *URL, struct __ns1__InEventTrigger const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__InEventTrigger(soap, p), 0) || soap_put___ns1__InEventTrigger(soap, p, "-ns1:InEventTrigger", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__InEventTrigger(struct soap *soap, const char *URL, struct __ns1__InEventTrigger const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__InEventTrigger(soap, p), 0) || soap_put___ns1__InEventTrigger(soap, p, "-ns1:InEventTrigger", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InEventTrigger * SOAP_FMAC4 soap_get___ns1__InEventTrigger(struct soap*, struct __ns1__InEventTrigger *, const char*, const char*);

inline int soap_read___ns1__InEventTrigger(struct soap *soap, struct __ns1__InEventTrigger *p)
{
	if (p)
	{	soap_default___ns1__InEventTrigger(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InEventTrigger(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__InEventTrigger(struct soap *soap, const char *URL, struct __ns1__InEventTrigger *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__InEventTrigger(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__InEventTrigger(struct soap *soap, struct __ns1__InEventTrigger *p)
{
	if (soap_read___ns1__InEventTrigger(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetEventXMLFile_DEFINED
#define SOAP_TYPE___ns1__GetEventXMLFile_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetEventXMLFile(struct soap*, struct __ns1__GetEventXMLFile *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetEventXMLFile(struct soap*, const struct __ns1__GetEventXMLFile *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetEventXMLFile(struct soap*, const char*, int, const struct __ns1__GetEventXMLFile *, const char*);
SOAP_FMAC3 struct __ns1__GetEventXMLFile * SOAP_FMAC4 soap_in___ns1__GetEventXMLFile(struct soap*, const char*, struct __ns1__GetEventXMLFile *, const char*);
SOAP_FMAC1 struct __ns1__GetEventXMLFile * SOAP_FMAC2 soap_instantiate___ns1__GetEventXMLFile(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetEventXMLFile * soap_new___ns1__GetEventXMLFile(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetEventXMLFile(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetEventXMLFile * soap_new_req___ns1__GetEventXMLFile(
	struct soap *soap)
{
	struct __ns1__GetEventXMLFile *_p = soap_new___ns1__GetEventXMLFile(soap);
	if (_p)
	{	soap_default___ns1__GetEventXMLFile(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetEventXMLFile * soap_new_set___ns1__GetEventXMLFile(
	struct soap *soap,
	_ns1__GetEventXMLFile *ns1__GetEventXMLFile)
{
	struct __ns1__GetEventXMLFile *_p = soap_new___ns1__GetEventXMLFile(soap);
	if (_p)
	{	soap_default___ns1__GetEventXMLFile(soap, _p);
		_p->ns1__GetEventXMLFile = ns1__GetEventXMLFile;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetEventXMLFile(struct soap*, const struct __ns1__GetEventXMLFile *, const char*, const char*);

inline int soap_write___ns1__GetEventXMLFile(struct soap *soap, struct __ns1__GetEventXMLFile const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetEventXMLFile(soap, p), 0) || soap_put___ns1__GetEventXMLFile(soap, p, "-ns1:GetEventXMLFile", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetEventXMLFile(struct soap *soap, const char *URL, struct __ns1__GetEventXMLFile const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__GetEventXMLFile(soap, p), 0) || soap_put___ns1__GetEventXMLFile(soap, p, "-ns1:GetEventXMLFile", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetEventXMLFile(struct soap *soap, const char *URL, struct __ns1__GetEventXMLFile const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__GetEventXMLFile(soap, p), 0) || soap_put___ns1__GetEventXMLFile(soap, p, "-ns1:GetEventXMLFile", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetEventXMLFile * SOAP_FMAC4 soap_get___ns1__GetEventXMLFile(struct soap*, struct __ns1__GetEventXMLFile *, const char*, const char*);

inline int soap_read___ns1__GetEventXMLFile(struct soap *soap, struct __ns1__GetEventXMLFile *p)
{
	if (p)
	{	soap_default___ns1__GetEventXMLFile(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetEventXMLFile(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetEventXMLFile(struct soap *soap, const char *URL, struct __ns1__GetEventXMLFile *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetEventXMLFile(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetEventXMLFile(struct soap *soap, struct __ns1__GetEventXMLFile *p)
{
	if (soap_read___ns1__GetEventXMLFile(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetConfigEx_DEFINED
#define SOAP_TYPE___ns1__GetConfigEx_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetConfigEx(struct soap*, struct __ns1__GetConfigEx *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetConfigEx(struct soap*, const struct __ns1__GetConfigEx *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetConfigEx(struct soap*, const char*, int, const struct __ns1__GetConfigEx *, const char*);
SOAP_FMAC3 struct __ns1__GetConfigEx * SOAP_FMAC4 soap_in___ns1__GetConfigEx(struct soap*, const char*, struct __ns1__GetConfigEx *, const char*);
SOAP_FMAC1 struct __ns1__GetConfigEx * SOAP_FMAC2 soap_instantiate___ns1__GetConfigEx(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetConfigEx * soap_new___ns1__GetConfigEx(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetConfigEx(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetConfigEx * soap_new_req___ns1__GetConfigEx(
	struct soap *soap)
{
	struct __ns1__GetConfigEx *_p = soap_new___ns1__GetConfigEx(soap);
	if (_p)
	{	soap_default___ns1__GetConfigEx(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetConfigEx * soap_new_set___ns1__GetConfigEx(
	struct soap *soap,
	_ns1__GetConfigEx *ns1__GetConfigEx)
{
	struct __ns1__GetConfigEx *_p = soap_new___ns1__GetConfigEx(soap);
	if (_p)
	{	soap_default___ns1__GetConfigEx(soap, _p);
		_p->ns1__GetConfigEx = ns1__GetConfigEx;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetConfigEx(struct soap*, const struct __ns1__GetConfigEx *, const char*, const char*);

inline int soap_write___ns1__GetConfigEx(struct soap *soap, struct __ns1__GetConfigEx const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetConfigEx(soap, p), 0) || soap_put___ns1__GetConfigEx(soap, p, "-ns1:GetConfigEx", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetConfigEx(struct soap *soap, const char *URL, struct __ns1__GetConfigEx const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__GetConfigEx(soap, p), 0) || soap_put___ns1__GetConfigEx(soap, p, "-ns1:GetConfigEx", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetConfigEx(struct soap *soap, const char *URL, struct __ns1__GetConfigEx const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__GetConfigEx(soap, p), 0) || soap_put___ns1__GetConfigEx(soap, p, "-ns1:GetConfigEx", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetConfigEx * SOAP_FMAC4 soap_get___ns1__GetConfigEx(struct soap*, struct __ns1__GetConfigEx *, const char*, const char*);

inline int soap_read___ns1__GetConfigEx(struct soap *soap, struct __ns1__GetConfigEx *p)
{
	if (p)
	{	soap_default___ns1__GetConfigEx(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetConfigEx(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetConfigEx(struct soap *soap, const char *URL, struct __ns1__GetConfigEx *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetConfigEx(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetConfigEx(struct soap *soap, struct __ns1__GetConfigEx *p)
{
	if (soap_read___ns1__GetConfigEx(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetConfig_DEFINED
#define SOAP_TYPE___ns1__GetConfig_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetConfig(struct soap*, struct __ns1__GetConfig *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetConfig(struct soap*, const struct __ns1__GetConfig *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetConfig(struct soap*, const char*, int, const struct __ns1__GetConfig *, const char*);
SOAP_FMAC3 struct __ns1__GetConfig * SOAP_FMAC4 soap_in___ns1__GetConfig(struct soap*, const char*, struct __ns1__GetConfig *, const char*);
SOAP_FMAC1 struct __ns1__GetConfig * SOAP_FMAC2 soap_instantiate___ns1__GetConfig(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetConfig * soap_new___ns1__GetConfig(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetConfig(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetConfig * soap_new_req___ns1__GetConfig(
	struct soap *soap)
{
	struct __ns1__GetConfig *_p = soap_new___ns1__GetConfig(soap);
	if (_p)
	{	soap_default___ns1__GetConfig(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetConfig * soap_new_set___ns1__GetConfig(
	struct soap *soap,
	_ns1__GetConfig *ns1__GetConfig)
{
	struct __ns1__GetConfig *_p = soap_new___ns1__GetConfig(soap);
	if (_p)
	{	soap_default___ns1__GetConfig(soap, _p);
		_p->ns1__GetConfig = ns1__GetConfig;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetConfig(struct soap*, const struct __ns1__GetConfig *, const char*, const char*);

inline int soap_write___ns1__GetConfig(struct soap *soap, struct __ns1__GetConfig const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetConfig(soap, p), 0) || soap_put___ns1__GetConfig(soap, p, "-ns1:GetConfig", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetConfig(struct soap *soap, const char *URL, struct __ns1__GetConfig const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__GetConfig(soap, p), 0) || soap_put___ns1__GetConfig(soap, p, "-ns1:GetConfig", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetConfig(struct soap *soap, const char *URL, struct __ns1__GetConfig const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__GetConfig(soap, p), 0) || soap_put___ns1__GetConfig(soap, p, "-ns1:GetConfig", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetConfig * SOAP_FMAC4 soap_get___ns1__GetConfig(struct soap*, struct __ns1__GetConfig *, const char*, const char*);

inline int soap_read___ns1__GetConfig(struct soap *soap, struct __ns1__GetConfig *p)
{
	if (p)
	{	soap_default___ns1__GetConfig(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetConfig(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetConfig(struct soap *soap, const char *URL, struct __ns1__GetConfig *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetConfig(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetConfig(struct soap *soap, struct __ns1__GetConfig *p)
{
	if (soap_read___ns1__GetConfig(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetFileInformation_DEFINED
#define SOAP_TYPE___ns1__GetFileInformation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetFileInformation(struct soap*, struct __ns1__GetFileInformation *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetFileInformation(struct soap*, const struct __ns1__GetFileInformation *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetFileInformation(struct soap*, const char*, int, const struct __ns1__GetFileInformation *, const char*);
SOAP_FMAC3 struct __ns1__GetFileInformation * SOAP_FMAC4 soap_in___ns1__GetFileInformation(struct soap*, const char*, struct __ns1__GetFileInformation *, const char*);
SOAP_FMAC1 struct __ns1__GetFileInformation * SOAP_FMAC2 soap_instantiate___ns1__GetFileInformation(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetFileInformation * soap_new___ns1__GetFileInformation(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetFileInformation(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetFileInformation * soap_new_req___ns1__GetFileInformation(
	struct soap *soap)
{
	struct __ns1__GetFileInformation *_p = soap_new___ns1__GetFileInformation(soap);
	if (_p)
	{	soap_default___ns1__GetFileInformation(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetFileInformation * soap_new_set___ns1__GetFileInformation(
	struct soap *soap,
	_ns1__GetFileInformation *ns1__GetFileInformation)
{
	struct __ns1__GetFileInformation *_p = soap_new___ns1__GetFileInformation(soap);
	if (_p)
	{	soap_default___ns1__GetFileInformation(soap, _p);
		_p->ns1__GetFileInformation = ns1__GetFileInformation;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetFileInformation(struct soap*, const struct __ns1__GetFileInformation *, const char*, const char*);

inline int soap_write___ns1__GetFileInformation(struct soap *soap, struct __ns1__GetFileInformation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetFileInformation(soap, p), 0) || soap_put___ns1__GetFileInformation(soap, p, "-ns1:GetFileInformation", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetFileInformation(struct soap *soap, const char *URL, struct __ns1__GetFileInformation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__GetFileInformation(soap, p), 0) || soap_put___ns1__GetFileInformation(soap, p, "-ns1:GetFileInformation", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetFileInformation(struct soap *soap, const char *URL, struct __ns1__GetFileInformation const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__GetFileInformation(soap, p), 0) || soap_put___ns1__GetFileInformation(soap, p, "-ns1:GetFileInformation", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetFileInformation * SOAP_FMAC4 soap_get___ns1__GetFileInformation(struct soap*, struct __ns1__GetFileInformation *, const char*, const char*);

inline int soap_read___ns1__GetFileInformation(struct soap *soap, struct __ns1__GetFileInformation *p)
{
	if (p)
	{	soap_default___ns1__GetFileInformation(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetFileInformation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetFileInformation(struct soap *soap, const char *URL, struct __ns1__GetFileInformation *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetFileInformation(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetFileInformation(struct soap *soap, struct __ns1__GetFileInformation *p)
{
	if (soap_read___ns1__GetFileInformation(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetFlashUdpCompleteAnnouncement_DEFINED
#define SOAP_TYPE___ns1__GetFlashUdpCompleteAnnouncement_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetFlashUdpCompleteAnnouncement(struct soap*, struct __ns1__GetFlashUdpCompleteAnnouncement *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetFlashUdpCompleteAnnouncement(struct soap*, const struct __ns1__GetFlashUdpCompleteAnnouncement *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetFlashUdpCompleteAnnouncement(struct soap*, const char*, int, const struct __ns1__GetFlashUdpCompleteAnnouncement *, const char*);
SOAP_FMAC3 struct __ns1__GetFlashUdpCompleteAnnouncement * SOAP_FMAC4 soap_in___ns1__GetFlashUdpCompleteAnnouncement(struct soap*, const char*, struct __ns1__GetFlashUdpCompleteAnnouncement *, const char*);
SOAP_FMAC1 struct __ns1__GetFlashUdpCompleteAnnouncement * SOAP_FMAC2 soap_instantiate___ns1__GetFlashUdpCompleteAnnouncement(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetFlashUdpCompleteAnnouncement * soap_new___ns1__GetFlashUdpCompleteAnnouncement(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetFlashUdpCompleteAnnouncement(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetFlashUdpCompleteAnnouncement * soap_new_req___ns1__GetFlashUdpCompleteAnnouncement(
	struct soap *soap)
{
	struct __ns1__GetFlashUdpCompleteAnnouncement *_p = soap_new___ns1__GetFlashUdpCompleteAnnouncement(soap);
	if (_p)
	{	soap_default___ns1__GetFlashUdpCompleteAnnouncement(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetFlashUdpCompleteAnnouncement * soap_new_set___ns1__GetFlashUdpCompleteAnnouncement(
	struct soap *soap,
	_ns1__GetFlashUdpCompleteAnnouncement *ns1__GetFlashUdpCompleteAnnouncement)
{
	struct __ns1__GetFlashUdpCompleteAnnouncement *_p = soap_new___ns1__GetFlashUdpCompleteAnnouncement(soap);
	if (_p)
	{	soap_default___ns1__GetFlashUdpCompleteAnnouncement(soap, _p);
		_p->ns1__GetFlashUdpCompleteAnnouncement = ns1__GetFlashUdpCompleteAnnouncement;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetFlashUdpCompleteAnnouncement(struct soap*, const struct __ns1__GetFlashUdpCompleteAnnouncement *, const char*, const char*);

inline int soap_write___ns1__GetFlashUdpCompleteAnnouncement(struct soap *soap, struct __ns1__GetFlashUdpCompleteAnnouncement const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetFlashUdpCompleteAnnouncement(soap, p), 0) || soap_put___ns1__GetFlashUdpCompleteAnnouncement(soap, p, "-ns1:GetFlashUdpCompleteAnnouncement", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetFlashUdpCompleteAnnouncement(struct soap *soap, const char *URL, struct __ns1__GetFlashUdpCompleteAnnouncement const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__GetFlashUdpCompleteAnnouncement(soap, p), 0) || soap_put___ns1__GetFlashUdpCompleteAnnouncement(soap, p, "-ns1:GetFlashUdpCompleteAnnouncement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetFlashUdpCompleteAnnouncement(struct soap *soap, const char *URL, struct __ns1__GetFlashUdpCompleteAnnouncement const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__GetFlashUdpCompleteAnnouncement(soap, p), 0) || soap_put___ns1__GetFlashUdpCompleteAnnouncement(soap, p, "-ns1:GetFlashUdpCompleteAnnouncement", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetFlashUdpCompleteAnnouncement * SOAP_FMAC4 soap_get___ns1__GetFlashUdpCompleteAnnouncement(struct soap*, struct __ns1__GetFlashUdpCompleteAnnouncement *, const char*, const char*);

inline int soap_read___ns1__GetFlashUdpCompleteAnnouncement(struct soap *soap, struct __ns1__GetFlashUdpCompleteAnnouncement *p)
{
	if (p)
	{	soap_default___ns1__GetFlashUdpCompleteAnnouncement(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetFlashUdpCompleteAnnouncement(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetFlashUdpCompleteAnnouncement(struct soap *soap, const char *URL, struct __ns1__GetFlashUdpCompleteAnnouncement *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetFlashUdpCompleteAnnouncement(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetFlashUdpCompleteAnnouncement(struct soap *soap, struct __ns1__GetFlashUdpCompleteAnnouncement *p)
{
	if (soap_read___ns1__GetFlashUdpCompleteAnnouncement(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetFlashStartAnnouncement_DEFINED
#define SOAP_TYPE___ns1__GetFlashStartAnnouncement_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetFlashStartAnnouncement(struct soap*, struct __ns1__GetFlashStartAnnouncement *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetFlashStartAnnouncement(struct soap*, const struct __ns1__GetFlashStartAnnouncement *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetFlashStartAnnouncement(struct soap*, const char*, int, const struct __ns1__GetFlashStartAnnouncement *, const char*);
SOAP_FMAC3 struct __ns1__GetFlashStartAnnouncement * SOAP_FMAC4 soap_in___ns1__GetFlashStartAnnouncement(struct soap*, const char*, struct __ns1__GetFlashStartAnnouncement *, const char*);
SOAP_FMAC1 struct __ns1__GetFlashStartAnnouncement * SOAP_FMAC2 soap_instantiate___ns1__GetFlashStartAnnouncement(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetFlashStartAnnouncement * soap_new___ns1__GetFlashStartAnnouncement(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetFlashStartAnnouncement(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetFlashStartAnnouncement * soap_new_req___ns1__GetFlashStartAnnouncement(
	struct soap *soap)
{
	struct __ns1__GetFlashStartAnnouncement *_p = soap_new___ns1__GetFlashStartAnnouncement(soap);
	if (_p)
	{	soap_default___ns1__GetFlashStartAnnouncement(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetFlashStartAnnouncement * soap_new_set___ns1__GetFlashStartAnnouncement(
	struct soap *soap,
	_ns1__GetFlashStartAnnouncement *ns1__GetFlashStartAnnouncement)
{
	struct __ns1__GetFlashStartAnnouncement *_p = soap_new___ns1__GetFlashStartAnnouncement(soap);
	if (_p)
	{	soap_default___ns1__GetFlashStartAnnouncement(soap, _p);
		_p->ns1__GetFlashStartAnnouncement = ns1__GetFlashStartAnnouncement;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetFlashStartAnnouncement(struct soap*, const struct __ns1__GetFlashStartAnnouncement *, const char*, const char*);

inline int soap_write___ns1__GetFlashStartAnnouncement(struct soap *soap, struct __ns1__GetFlashStartAnnouncement const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetFlashStartAnnouncement(soap, p), 0) || soap_put___ns1__GetFlashStartAnnouncement(soap, p, "-ns1:GetFlashStartAnnouncement", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetFlashStartAnnouncement(struct soap *soap, const char *URL, struct __ns1__GetFlashStartAnnouncement const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__GetFlashStartAnnouncement(soap, p), 0) || soap_put___ns1__GetFlashStartAnnouncement(soap, p, "-ns1:GetFlashStartAnnouncement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetFlashStartAnnouncement(struct soap *soap, const char *URL, struct __ns1__GetFlashStartAnnouncement const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__GetFlashStartAnnouncement(soap, p), 0) || soap_put___ns1__GetFlashStartAnnouncement(soap, p, "-ns1:GetFlashStartAnnouncement", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetFlashStartAnnouncement * SOAP_FMAC4 soap_get___ns1__GetFlashStartAnnouncement(struct soap*, struct __ns1__GetFlashStartAnnouncement *, const char*, const char*);

inline int soap_read___ns1__GetFlashStartAnnouncement(struct soap *soap, struct __ns1__GetFlashStartAnnouncement *p)
{
	if (p)
	{	soap_default___ns1__GetFlashStartAnnouncement(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetFlashStartAnnouncement(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetFlashStartAnnouncement(struct soap *soap, const char *URL, struct __ns1__GetFlashStartAnnouncement *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetFlashStartAnnouncement(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetFlashStartAnnouncement(struct soap *soap, struct __ns1__GetFlashStartAnnouncement *p)
{
	if (soap_read___ns1__GetFlashStartAnnouncement(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__RequestNonCardedEvents_DEFINED
#define SOAP_TYPE___ns1__RequestNonCardedEvents_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__RequestNonCardedEvents(struct soap*, struct __ns1__RequestNonCardedEvents *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__RequestNonCardedEvents(struct soap*, const struct __ns1__RequestNonCardedEvents *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__RequestNonCardedEvents(struct soap*, const char*, int, const struct __ns1__RequestNonCardedEvents *, const char*);
SOAP_FMAC3 struct __ns1__RequestNonCardedEvents * SOAP_FMAC4 soap_in___ns1__RequestNonCardedEvents(struct soap*, const char*, struct __ns1__RequestNonCardedEvents *, const char*);
SOAP_FMAC1 struct __ns1__RequestNonCardedEvents * SOAP_FMAC2 soap_instantiate___ns1__RequestNonCardedEvents(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__RequestNonCardedEvents * soap_new___ns1__RequestNonCardedEvents(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__RequestNonCardedEvents(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__RequestNonCardedEvents * soap_new_req___ns1__RequestNonCardedEvents(
	struct soap *soap)
{
	struct __ns1__RequestNonCardedEvents *_p = soap_new___ns1__RequestNonCardedEvents(soap);
	if (_p)
	{	soap_default___ns1__RequestNonCardedEvents(soap, _p);
	}
	return _p;
}

inline struct __ns1__RequestNonCardedEvents * soap_new_set___ns1__RequestNonCardedEvents(
	struct soap *soap,
	_ns1__RequestNonCardedEvents *ns1__RequestNonCardedEvents)
{
	struct __ns1__RequestNonCardedEvents *_p = soap_new___ns1__RequestNonCardedEvents(soap);
	if (_p)
	{	soap_default___ns1__RequestNonCardedEvents(soap, _p);
		_p->ns1__RequestNonCardedEvents = ns1__RequestNonCardedEvents;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__RequestNonCardedEvents(struct soap*, const struct __ns1__RequestNonCardedEvents *, const char*, const char*);

inline int soap_write___ns1__RequestNonCardedEvents(struct soap *soap, struct __ns1__RequestNonCardedEvents const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__RequestNonCardedEvents(soap, p), 0) || soap_put___ns1__RequestNonCardedEvents(soap, p, "-ns1:RequestNonCardedEvents", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__RequestNonCardedEvents(struct soap *soap, const char *URL, struct __ns1__RequestNonCardedEvents const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__RequestNonCardedEvents(soap, p), 0) || soap_put___ns1__RequestNonCardedEvents(soap, p, "-ns1:RequestNonCardedEvents", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__RequestNonCardedEvents(struct soap *soap, const char *URL, struct __ns1__RequestNonCardedEvents const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__RequestNonCardedEvents(soap, p), 0) || soap_put___ns1__RequestNonCardedEvents(soap, p, "-ns1:RequestNonCardedEvents", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__RequestNonCardedEvents * SOAP_FMAC4 soap_get___ns1__RequestNonCardedEvents(struct soap*, struct __ns1__RequestNonCardedEvents *, const char*, const char*);

inline int soap_read___ns1__RequestNonCardedEvents(struct soap *soap, struct __ns1__RequestNonCardedEvents *p)
{
	if (p)
	{	soap_default___ns1__RequestNonCardedEvents(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__RequestNonCardedEvents(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__RequestNonCardedEvents(struct soap *soap, const char *URL, struct __ns1__RequestNonCardedEvents *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__RequestNonCardedEvents(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__RequestNonCardedEvents(struct soap *soap, struct __ns1__RequestNonCardedEvents *p)
{
	if (soap_read___ns1__RequestNonCardedEvents(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GamePlayedAfterCardIn_DEFINED
#define SOAP_TYPE___ns1__GamePlayedAfterCardIn_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GamePlayedAfterCardIn(struct soap*, struct __ns1__GamePlayedAfterCardIn *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GamePlayedAfterCardIn(struct soap*, const struct __ns1__GamePlayedAfterCardIn *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GamePlayedAfterCardIn(struct soap*, const char*, int, const struct __ns1__GamePlayedAfterCardIn *, const char*);
SOAP_FMAC3 struct __ns1__GamePlayedAfterCardIn * SOAP_FMAC4 soap_in___ns1__GamePlayedAfterCardIn(struct soap*, const char*, struct __ns1__GamePlayedAfterCardIn *, const char*);
SOAP_FMAC1 struct __ns1__GamePlayedAfterCardIn * SOAP_FMAC2 soap_instantiate___ns1__GamePlayedAfterCardIn(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GamePlayedAfterCardIn * soap_new___ns1__GamePlayedAfterCardIn(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GamePlayedAfterCardIn(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GamePlayedAfterCardIn * soap_new_req___ns1__GamePlayedAfterCardIn(
	struct soap *soap)
{
	struct __ns1__GamePlayedAfterCardIn *_p = soap_new___ns1__GamePlayedAfterCardIn(soap);
	if (_p)
	{	soap_default___ns1__GamePlayedAfterCardIn(soap, _p);
	}
	return _p;
}

inline struct __ns1__GamePlayedAfterCardIn * soap_new_set___ns1__GamePlayedAfterCardIn(
	struct soap *soap,
	_ns1__GamePlayedAfterCardIn *ns1__GamePlayedAfterCardIn)
{
	struct __ns1__GamePlayedAfterCardIn *_p = soap_new___ns1__GamePlayedAfterCardIn(soap);
	if (_p)
	{	soap_default___ns1__GamePlayedAfterCardIn(soap, _p);
		_p->ns1__GamePlayedAfterCardIn = ns1__GamePlayedAfterCardIn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GamePlayedAfterCardIn(struct soap*, const struct __ns1__GamePlayedAfterCardIn *, const char*, const char*);

inline int soap_write___ns1__GamePlayedAfterCardIn(struct soap *soap, struct __ns1__GamePlayedAfterCardIn const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GamePlayedAfterCardIn(soap, p), 0) || soap_put___ns1__GamePlayedAfterCardIn(soap, p, "-ns1:GamePlayedAfterCardIn", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GamePlayedAfterCardIn(struct soap *soap, const char *URL, struct __ns1__GamePlayedAfterCardIn const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__GamePlayedAfterCardIn(soap, p), 0) || soap_put___ns1__GamePlayedAfterCardIn(soap, p, "-ns1:GamePlayedAfterCardIn", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GamePlayedAfterCardIn(struct soap *soap, const char *URL, struct __ns1__GamePlayedAfterCardIn const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__GamePlayedAfterCardIn(soap, p), 0) || soap_put___ns1__GamePlayedAfterCardIn(soap, p, "-ns1:GamePlayedAfterCardIn", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GamePlayedAfterCardIn * SOAP_FMAC4 soap_get___ns1__GamePlayedAfterCardIn(struct soap*, struct __ns1__GamePlayedAfterCardIn *, const char*, const char*);

inline int soap_read___ns1__GamePlayedAfterCardIn(struct soap *soap, struct __ns1__GamePlayedAfterCardIn *p)
{
	if (p)
	{	soap_default___ns1__GamePlayedAfterCardIn(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GamePlayedAfterCardIn(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GamePlayedAfterCardIn(struct soap *soap, const char *URL, struct __ns1__GamePlayedAfterCardIn *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GamePlayedAfterCardIn(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GamePlayedAfterCardIn(struct soap *soap, struct __ns1__GamePlayedAfterCardIn *p)
{
	if (soap_read___ns1__GamePlayedAfterCardIn(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__CardOut_DEFINED
#define SOAP_TYPE___ns1__CardOut_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CardOut(struct soap*, struct __ns1__CardOut *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CardOut(struct soap*, const struct __ns1__CardOut *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CardOut(struct soap*, const char*, int, const struct __ns1__CardOut *, const char*);
SOAP_FMAC3 struct __ns1__CardOut * SOAP_FMAC4 soap_in___ns1__CardOut(struct soap*, const char*, struct __ns1__CardOut *, const char*);
SOAP_FMAC1 struct __ns1__CardOut * SOAP_FMAC2 soap_instantiate___ns1__CardOut(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__CardOut * soap_new___ns1__CardOut(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__CardOut(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__CardOut * soap_new_req___ns1__CardOut(
	struct soap *soap)
{
	struct __ns1__CardOut *_p = soap_new___ns1__CardOut(soap);
	if (_p)
	{	soap_default___ns1__CardOut(soap, _p);
	}
	return _p;
}

inline struct __ns1__CardOut * soap_new_set___ns1__CardOut(
	struct soap *soap,
	_ns1__CardOut *ns1__CardOut)
{
	struct __ns1__CardOut *_p = soap_new___ns1__CardOut(soap);
	if (_p)
	{	soap_default___ns1__CardOut(soap, _p);
		_p->ns1__CardOut = ns1__CardOut;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CardOut(struct soap*, const struct __ns1__CardOut *, const char*, const char*);

inline int soap_write___ns1__CardOut(struct soap *soap, struct __ns1__CardOut const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__CardOut(soap, p), 0) || soap_put___ns1__CardOut(soap, p, "-ns1:CardOut", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__CardOut(struct soap *soap, const char *URL, struct __ns1__CardOut const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__CardOut(soap, p), 0) || soap_put___ns1__CardOut(soap, p, "-ns1:CardOut", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__CardOut(struct soap *soap, const char *URL, struct __ns1__CardOut const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__CardOut(soap, p), 0) || soap_put___ns1__CardOut(soap, p, "-ns1:CardOut", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__CardOut * SOAP_FMAC4 soap_get___ns1__CardOut(struct soap*, struct __ns1__CardOut *, const char*, const char*);

inline int soap_read___ns1__CardOut(struct soap *soap, struct __ns1__CardOut *p)
{
	if (p)
	{	soap_default___ns1__CardOut(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__CardOut(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__CardOut(struct soap *soap, const char *URL, struct __ns1__CardOut *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__CardOut(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__CardOut(struct soap *soap, struct __ns1__CardOut *p)
{
	if (soap_read___ns1__CardOut(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__CardIn_DEFINED
#define SOAP_TYPE___ns1__CardIn_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CardIn(struct soap*, struct __ns1__CardIn *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CardIn(struct soap*, const struct __ns1__CardIn *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CardIn(struct soap*, const char*, int, const struct __ns1__CardIn *, const char*);
SOAP_FMAC3 struct __ns1__CardIn * SOAP_FMAC4 soap_in___ns1__CardIn(struct soap*, const char*, struct __ns1__CardIn *, const char*);
SOAP_FMAC1 struct __ns1__CardIn * SOAP_FMAC2 soap_instantiate___ns1__CardIn(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__CardIn * soap_new___ns1__CardIn(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__CardIn(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__CardIn * soap_new_req___ns1__CardIn(
	struct soap *soap)
{
	struct __ns1__CardIn *_p = soap_new___ns1__CardIn(soap);
	if (_p)
	{	soap_default___ns1__CardIn(soap, _p);
	}
	return _p;
}

inline struct __ns1__CardIn * soap_new_set___ns1__CardIn(
	struct soap *soap,
	_ns1__CardIn *ns1__CardIn)
{
	struct __ns1__CardIn *_p = soap_new___ns1__CardIn(soap);
	if (_p)
	{	soap_default___ns1__CardIn(soap, _p);
		_p->ns1__CardIn = ns1__CardIn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CardIn(struct soap*, const struct __ns1__CardIn *, const char*, const char*);

inline int soap_write___ns1__CardIn(struct soap *soap, struct __ns1__CardIn const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__CardIn(soap, p), 0) || soap_put___ns1__CardIn(soap, p, "-ns1:CardIn", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__CardIn(struct soap *soap, const char *URL, struct __ns1__CardIn const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__CardIn(soap, p), 0) || soap_put___ns1__CardIn(soap, p, "-ns1:CardIn", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__CardIn(struct soap *soap, const char *URL, struct __ns1__CardIn const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__CardIn(soap, p), 0) || soap_put___ns1__CardIn(soap, p, "-ns1:CardIn", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__CardIn * SOAP_FMAC4 soap_get___ns1__CardIn(struct soap*, struct __ns1__CardIn *, const char*, const char*);

inline int soap_read___ns1__CardIn(struct soap *soap, struct __ns1__CardIn *p)
{
	if (p)
	{	soap_default___ns1__CardIn(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__CardIn(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__CardIn(struct soap *soap, const char *URL, struct __ns1__CardIn *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__CardIn(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__CardIn(struct soap *soap, struct __ns1__CardIn *p)
{
	if (soap_read___ns1__CardIn(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetSpeedMediaVersion_DEFINED
#define SOAP_TYPE___ns1__GetSpeedMediaVersion_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetSpeedMediaVersion(struct soap*, struct __ns1__GetSpeedMediaVersion *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetSpeedMediaVersion(struct soap*, const struct __ns1__GetSpeedMediaVersion *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetSpeedMediaVersion(struct soap*, const char*, int, const struct __ns1__GetSpeedMediaVersion *, const char*);
SOAP_FMAC3 struct __ns1__GetSpeedMediaVersion * SOAP_FMAC4 soap_in___ns1__GetSpeedMediaVersion(struct soap*, const char*, struct __ns1__GetSpeedMediaVersion *, const char*);
SOAP_FMAC1 struct __ns1__GetSpeedMediaVersion * SOAP_FMAC2 soap_instantiate___ns1__GetSpeedMediaVersion(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetSpeedMediaVersion * soap_new___ns1__GetSpeedMediaVersion(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetSpeedMediaVersion(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetSpeedMediaVersion * soap_new_req___ns1__GetSpeedMediaVersion(
	struct soap *soap)
{
	struct __ns1__GetSpeedMediaVersion *_p = soap_new___ns1__GetSpeedMediaVersion(soap);
	if (_p)
	{	soap_default___ns1__GetSpeedMediaVersion(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetSpeedMediaVersion * soap_new_set___ns1__GetSpeedMediaVersion(
	struct soap *soap,
	_ns1__GetSpeedMediaVersion *ns1__GetSpeedMediaVersion)
{
	struct __ns1__GetSpeedMediaVersion *_p = soap_new___ns1__GetSpeedMediaVersion(soap);
	if (_p)
	{	soap_default___ns1__GetSpeedMediaVersion(soap, _p);
		_p->ns1__GetSpeedMediaVersion = ns1__GetSpeedMediaVersion;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetSpeedMediaVersion(struct soap*, const struct __ns1__GetSpeedMediaVersion *, const char*, const char*);

inline int soap_write___ns1__GetSpeedMediaVersion(struct soap *soap, struct __ns1__GetSpeedMediaVersion const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetSpeedMediaVersion(soap, p), 0) || soap_put___ns1__GetSpeedMediaVersion(soap, p, "-ns1:GetSpeedMediaVersion", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetSpeedMediaVersion(struct soap *soap, const char *URL, struct __ns1__GetSpeedMediaVersion const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__GetSpeedMediaVersion(soap, p), 0) || soap_put___ns1__GetSpeedMediaVersion(soap, p, "-ns1:GetSpeedMediaVersion", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetSpeedMediaVersion(struct soap *soap, const char *URL, struct __ns1__GetSpeedMediaVersion const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__GetSpeedMediaVersion(soap, p), 0) || soap_put___ns1__GetSpeedMediaVersion(soap, p, "-ns1:GetSpeedMediaVersion", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetSpeedMediaVersion * SOAP_FMAC4 soap_get___ns1__GetSpeedMediaVersion(struct soap*, struct __ns1__GetSpeedMediaVersion *, const char*, const char*);

inline int soap_read___ns1__GetSpeedMediaVersion(struct soap *soap, struct __ns1__GetSpeedMediaVersion *p)
{
	if (p)
	{	soap_default___ns1__GetSpeedMediaVersion(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetSpeedMediaVersion(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetSpeedMediaVersion(struct soap *soap, const char *URL, struct __ns1__GetSpeedMediaVersion *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetSpeedMediaVersion(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetSpeedMediaVersion(struct soap *soap, struct __ns1__GetSpeedMediaVersion *p)
{
	if (soap_read___ns1__GetSpeedMediaVersion(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetTriggerRejectedNotification_DEFINED
#define SOAP_TYPE___ns1__GetTriggerRejectedNotification_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetTriggerRejectedNotification(struct soap*, struct __ns1__GetTriggerRejectedNotification *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetTriggerRejectedNotification(struct soap*, const struct __ns1__GetTriggerRejectedNotification *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetTriggerRejectedNotification(struct soap*, const char*, int, const struct __ns1__GetTriggerRejectedNotification *, const char*);
SOAP_FMAC3 struct __ns1__GetTriggerRejectedNotification * SOAP_FMAC4 soap_in___ns1__GetTriggerRejectedNotification(struct soap*, const char*, struct __ns1__GetTriggerRejectedNotification *, const char*);
SOAP_FMAC1 struct __ns1__GetTriggerRejectedNotification * SOAP_FMAC2 soap_instantiate___ns1__GetTriggerRejectedNotification(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetTriggerRejectedNotification * soap_new___ns1__GetTriggerRejectedNotification(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetTriggerRejectedNotification(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetTriggerRejectedNotification * soap_new_req___ns1__GetTriggerRejectedNotification(
	struct soap *soap)
{
	struct __ns1__GetTriggerRejectedNotification *_p = soap_new___ns1__GetTriggerRejectedNotification(soap);
	if (_p)
	{	soap_default___ns1__GetTriggerRejectedNotification(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetTriggerRejectedNotification * soap_new_set___ns1__GetTriggerRejectedNotification(
	struct soap *soap,
	_ns1__GetTriggerRejectedNotification *ns1__GetTriggerRejectedNotification)
{
	struct __ns1__GetTriggerRejectedNotification *_p = soap_new___ns1__GetTriggerRejectedNotification(soap);
	if (_p)
	{	soap_default___ns1__GetTriggerRejectedNotification(soap, _p);
		_p->ns1__GetTriggerRejectedNotification = ns1__GetTriggerRejectedNotification;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetTriggerRejectedNotification(struct soap*, const struct __ns1__GetTriggerRejectedNotification *, const char*, const char*);

inline int soap_write___ns1__GetTriggerRejectedNotification(struct soap *soap, struct __ns1__GetTriggerRejectedNotification const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetTriggerRejectedNotification(soap, p), 0) || soap_put___ns1__GetTriggerRejectedNotification(soap, p, "-ns1:GetTriggerRejectedNotification", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetTriggerRejectedNotification(struct soap *soap, const char *URL, struct __ns1__GetTriggerRejectedNotification const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__GetTriggerRejectedNotification(soap, p), 0) || soap_put___ns1__GetTriggerRejectedNotification(soap, p, "-ns1:GetTriggerRejectedNotification", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetTriggerRejectedNotification(struct soap *soap, const char *URL, struct __ns1__GetTriggerRejectedNotification const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__GetTriggerRejectedNotification(soap, p), 0) || soap_put___ns1__GetTriggerRejectedNotification(soap, p, "-ns1:GetTriggerRejectedNotification", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetTriggerRejectedNotification * SOAP_FMAC4 soap_get___ns1__GetTriggerRejectedNotification(struct soap*, struct __ns1__GetTriggerRejectedNotification *, const char*, const char*);

inline int soap_read___ns1__GetTriggerRejectedNotification(struct soap *soap, struct __ns1__GetTriggerRejectedNotification *p)
{
	if (p)
	{	soap_default___ns1__GetTriggerRejectedNotification(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetTriggerRejectedNotification(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetTriggerRejectedNotification(struct soap *soap, const char *URL, struct __ns1__GetTriggerRejectedNotification *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetTriggerRejectedNotification(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetTriggerRejectedNotification(struct soap *soap, struct __ns1__GetTriggerRejectedNotification *p)
{
	if (soap_read___ns1__GetTriggerRejectedNotification(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetExternalPaidNotification_DEFINED
#define SOAP_TYPE___ns1__GetExternalPaidNotification_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetExternalPaidNotification(struct soap*, struct __ns1__GetExternalPaidNotification *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetExternalPaidNotification(struct soap*, const struct __ns1__GetExternalPaidNotification *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetExternalPaidNotification(struct soap*, const char*, int, const struct __ns1__GetExternalPaidNotification *, const char*);
SOAP_FMAC3 struct __ns1__GetExternalPaidNotification * SOAP_FMAC4 soap_in___ns1__GetExternalPaidNotification(struct soap*, const char*, struct __ns1__GetExternalPaidNotification *, const char*);
SOAP_FMAC1 struct __ns1__GetExternalPaidNotification * SOAP_FMAC2 soap_instantiate___ns1__GetExternalPaidNotification(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetExternalPaidNotification * soap_new___ns1__GetExternalPaidNotification(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetExternalPaidNotification(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetExternalPaidNotification * soap_new_req___ns1__GetExternalPaidNotification(
	struct soap *soap)
{
	struct __ns1__GetExternalPaidNotification *_p = soap_new___ns1__GetExternalPaidNotification(soap);
	if (_p)
	{	soap_default___ns1__GetExternalPaidNotification(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetExternalPaidNotification * soap_new_set___ns1__GetExternalPaidNotification(
	struct soap *soap,
	_ns1__GetExternalPaidNotification *ns1__GetExternalPaidNotification)
{
	struct __ns1__GetExternalPaidNotification *_p = soap_new___ns1__GetExternalPaidNotification(soap);
	if (_p)
	{	soap_default___ns1__GetExternalPaidNotification(soap, _p);
		_p->ns1__GetExternalPaidNotification = ns1__GetExternalPaidNotification;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetExternalPaidNotification(struct soap*, const struct __ns1__GetExternalPaidNotification *, const char*, const char*);

inline int soap_write___ns1__GetExternalPaidNotification(struct soap *soap, struct __ns1__GetExternalPaidNotification const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetExternalPaidNotification(soap, p), 0) || soap_put___ns1__GetExternalPaidNotification(soap, p, "-ns1:GetExternalPaidNotification", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetExternalPaidNotification(struct soap *soap, const char *URL, struct __ns1__GetExternalPaidNotification const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__GetExternalPaidNotification(soap, p), 0) || soap_put___ns1__GetExternalPaidNotification(soap, p, "-ns1:GetExternalPaidNotification", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetExternalPaidNotification(struct soap *soap, const char *URL, struct __ns1__GetExternalPaidNotification const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__GetExternalPaidNotification(soap, p), 0) || soap_put___ns1__GetExternalPaidNotification(soap, p, "-ns1:GetExternalPaidNotification", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetExternalPaidNotification * SOAP_FMAC4 soap_get___ns1__GetExternalPaidNotification(struct soap*, struct __ns1__GetExternalPaidNotification *, const char*, const char*);

inline int soap_read___ns1__GetExternalPaidNotification(struct soap *soap, struct __ns1__GetExternalPaidNotification *p)
{
	if (p)
	{	soap_default___ns1__GetExternalPaidNotification(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetExternalPaidNotification(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetExternalPaidNotification(struct soap *soap, const char *URL, struct __ns1__GetExternalPaidNotification *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetExternalPaidNotification(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetExternalPaidNotification(struct soap *soap, struct __ns1__GetExternalPaidNotification *p)
{
	if (soap_read___ns1__GetExternalPaidNotification(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetTriggerlessAnnouncementNotification_DEFINED
#define SOAP_TYPE___ns1__GetTriggerlessAnnouncementNotification_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetTriggerlessAnnouncementNotification(struct soap*, struct __ns1__GetTriggerlessAnnouncementNotification *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetTriggerlessAnnouncementNotification(struct soap*, const struct __ns1__GetTriggerlessAnnouncementNotification *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetTriggerlessAnnouncementNotification(struct soap*, const char*, int, const struct __ns1__GetTriggerlessAnnouncementNotification *, const char*);
SOAP_FMAC3 struct __ns1__GetTriggerlessAnnouncementNotification * SOAP_FMAC4 soap_in___ns1__GetTriggerlessAnnouncementNotification(struct soap*, const char*, struct __ns1__GetTriggerlessAnnouncementNotification *, const char*);
SOAP_FMAC1 struct __ns1__GetTriggerlessAnnouncementNotification * SOAP_FMAC2 soap_instantiate___ns1__GetTriggerlessAnnouncementNotification(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetTriggerlessAnnouncementNotification * soap_new___ns1__GetTriggerlessAnnouncementNotification(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetTriggerlessAnnouncementNotification(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetTriggerlessAnnouncementNotification * soap_new_req___ns1__GetTriggerlessAnnouncementNotification(
	struct soap *soap)
{
	struct __ns1__GetTriggerlessAnnouncementNotification *_p = soap_new___ns1__GetTriggerlessAnnouncementNotification(soap);
	if (_p)
	{	soap_default___ns1__GetTriggerlessAnnouncementNotification(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetTriggerlessAnnouncementNotification * soap_new_set___ns1__GetTriggerlessAnnouncementNotification(
	struct soap *soap,
	_ns1__GetTriggerlessAnnouncementNotification *ns1__GetTriggerlessAnnouncementNotification)
{
	struct __ns1__GetTriggerlessAnnouncementNotification *_p = soap_new___ns1__GetTriggerlessAnnouncementNotification(soap);
	if (_p)
	{	soap_default___ns1__GetTriggerlessAnnouncementNotification(soap, _p);
		_p->ns1__GetTriggerlessAnnouncementNotification = ns1__GetTriggerlessAnnouncementNotification;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetTriggerlessAnnouncementNotification(struct soap*, const struct __ns1__GetTriggerlessAnnouncementNotification *, const char*, const char*);

inline int soap_write___ns1__GetTriggerlessAnnouncementNotification(struct soap *soap, struct __ns1__GetTriggerlessAnnouncementNotification const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetTriggerlessAnnouncementNotification(soap, p), 0) || soap_put___ns1__GetTriggerlessAnnouncementNotification(soap, p, "-ns1:GetTriggerlessAnnouncementNotification", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetTriggerlessAnnouncementNotification(struct soap *soap, const char *URL, struct __ns1__GetTriggerlessAnnouncementNotification const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__GetTriggerlessAnnouncementNotification(soap, p), 0) || soap_put___ns1__GetTriggerlessAnnouncementNotification(soap, p, "-ns1:GetTriggerlessAnnouncementNotification", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetTriggerlessAnnouncementNotification(struct soap *soap, const char *URL, struct __ns1__GetTriggerlessAnnouncementNotification const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__GetTriggerlessAnnouncementNotification(soap, p), 0) || soap_put___ns1__GetTriggerlessAnnouncementNotification(soap, p, "-ns1:GetTriggerlessAnnouncementNotification", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetTriggerlessAnnouncementNotification * SOAP_FMAC4 soap_get___ns1__GetTriggerlessAnnouncementNotification(struct soap*, struct __ns1__GetTriggerlessAnnouncementNotification *, const char*, const char*);

inline int soap_read___ns1__GetTriggerlessAnnouncementNotification(struct soap *soap, struct __ns1__GetTriggerlessAnnouncementNotification *p)
{
	if (p)
	{	soap_default___ns1__GetTriggerlessAnnouncementNotification(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetTriggerlessAnnouncementNotification(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetTriggerlessAnnouncementNotification(struct soap *soap, const char *URL, struct __ns1__GetTriggerlessAnnouncementNotification *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetTriggerlessAnnouncementNotification(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetTriggerlessAnnouncementNotification(struct soap *soap, struct __ns1__GetTriggerlessAnnouncementNotification *p)
{
	if (soap_read___ns1__GetTriggerlessAnnouncementNotification(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetJackpotAnnouncementNotification_DEFINED
#define SOAP_TYPE___ns1__GetJackpotAnnouncementNotification_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetJackpotAnnouncementNotification(struct soap*, struct __ns1__GetJackpotAnnouncementNotification *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetJackpotAnnouncementNotification(struct soap*, const struct __ns1__GetJackpotAnnouncementNotification *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetJackpotAnnouncementNotification(struct soap*, const char*, int, const struct __ns1__GetJackpotAnnouncementNotification *, const char*);
SOAP_FMAC3 struct __ns1__GetJackpotAnnouncementNotification * SOAP_FMAC4 soap_in___ns1__GetJackpotAnnouncementNotification(struct soap*, const char*, struct __ns1__GetJackpotAnnouncementNotification *, const char*);
SOAP_FMAC1 struct __ns1__GetJackpotAnnouncementNotification * SOAP_FMAC2 soap_instantiate___ns1__GetJackpotAnnouncementNotification(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetJackpotAnnouncementNotification * soap_new___ns1__GetJackpotAnnouncementNotification(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetJackpotAnnouncementNotification(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetJackpotAnnouncementNotification * soap_new_req___ns1__GetJackpotAnnouncementNotification(
	struct soap *soap)
{
	struct __ns1__GetJackpotAnnouncementNotification *_p = soap_new___ns1__GetJackpotAnnouncementNotification(soap);
	if (_p)
	{	soap_default___ns1__GetJackpotAnnouncementNotification(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetJackpotAnnouncementNotification * soap_new_set___ns1__GetJackpotAnnouncementNotification(
	struct soap *soap,
	_ns1__GetJackpotAnnouncementNotification *ns1__GetJackpotAnnouncementNotification)
{
	struct __ns1__GetJackpotAnnouncementNotification *_p = soap_new___ns1__GetJackpotAnnouncementNotification(soap);
	if (_p)
	{	soap_default___ns1__GetJackpotAnnouncementNotification(soap, _p);
		_p->ns1__GetJackpotAnnouncementNotification = ns1__GetJackpotAnnouncementNotification;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetJackpotAnnouncementNotification(struct soap*, const struct __ns1__GetJackpotAnnouncementNotification *, const char*, const char*);

inline int soap_write___ns1__GetJackpotAnnouncementNotification(struct soap *soap, struct __ns1__GetJackpotAnnouncementNotification const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetJackpotAnnouncementNotification(soap, p), 0) || soap_put___ns1__GetJackpotAnnouncementNotification(soap, p, "-ns1:GetJackpotAnnouncementNotification", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetJackpotAnnouncementNotification(struct soap *soap, const char *URL, struct __ns1__GetJackpotAnnouncementNotification const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__GetJackpotAnnouncementNotification(soap, p), 0) || soap_put___ns1__GetJackpotAnnouncementNotification(soap, p, "-ns1:GetJackpotAnnouncementNotification", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetJackpotAnnouncementNotification(struct soap *soap, const char *URL, struct __ns1__GetJackpotAnnouncementNotification const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__GetJackpotAnnouncementNotification(soap, p), 0) || soap_put___ns1__GetJackpotAnnouncementNotification(soap, p, "-ns1:GetJackpotAnnouncementNotification", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetJackpotAnnouncementNotification * SOAP_FMAC4 soap_get___ns1__GetJackpotAnnouncementNotification(struct soap*, struct __ns1__GetJackpotAnnouncementNotification *, const char*, const char*);

inline int soap_read___ns1__GetJackpotAnnouncementNotification(struct soap *soap, struct __ns1__GetJackpotAnnouncementNotification *p)
{
	if (p)
	{	soap_default___ns1__GetJackpotAnnouncementNotification(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetJackpotAnnouncementNotification(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetJackpotAnnouncementNotification(struct soap *soap, const char *URL, struct __ns1__GetJackpotAnnouncementNotification *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetJackpotAnnouncementNotification(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetJackpotAnnouncementNotification(struct soap *soap, struct __ns1__GetJackpotAnnouncementNotification *p)
{
	if (soap_read___ns1__GetJackpotAnnouncementNotification(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetRicochetAwardNotificationCustomWithMediaData_DEFINED
#define SOAP_TYPE___ns1__GetRicochetAwardNotificationCustomWithMediaData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetRicochetAwardNotificationCustomWithMediaData(struct soap*, struct __ns1__GetRicochetAwardNotificationCustomWithMediaData *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetRicochetAwardNotificationCustomWithMediaData(struct soap*, const struct __ns1__GetRicochetAwardNotificationCustomWithMediaData *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetRicochetAwardNotificationCustomWithMediaData(struct soap*, const char*, int, const struct __ns1__GetRicochetAwardNotificationCustomWithMediaData *, const char*);
SOAP_FMAC3 struct __ns1__GetRicochetAwardNotificationCustomWithMediaData * SOAP_FMAC4 soap_in___ns1__GetRicochetAwardNotificationCustomWithMediaData(struct soap*, const char*, struct __ns1__GetRicochetAwardNotificationCustomWithMediaData *, const char*);
SOAP_FMAC1 struct __ns1__GetRicochetAwardNotificationCustomWithMediaData * SOAP_FMAC2 soap_instantiate___ns1__GetRicochetAwardNotificationCustomWithMediaData(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetRicochetAwardNotificationCustomWithMediaData * soap_new___ns1__GetRicochetAwardNotificationCustomWithMediaData(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetRicochetAwardNotificationCustomWithMediaData(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetRicochetAwardNotificationCustomWithMediaData * soap_new_req___ns1__GetRicochetAwardNotificationCustomWithMediaData(
	struct soap *soap)
{
	struct __ns1__GetRicochetAwardNotificationCustomWithMediaData *_p = soap_new___ns1__GetRicochetAwardNotificationCustomWithMediaData(soap);
	if (_p)
	{	soap_default___ns1__GetRicochetAwardNotificationCustomWithMediaData(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetRicochetAwardNotificationCustomWithMediaData * soap_new_set___ns1__GetRicochetAwardNotificationCustomWithMediaData(
	struct soap *soap,
	_ns1__GetRicochetAwardNotificationCustomWithMediaData *ns1__GetRicochetAwardNotificationCustomWithMediaData)
{
	struct __ns1__GetRicochetAwardNotificationCustomWithMediaData *_p = soap_new___ns1__GetRicochetAwardNotificationCustomWithMediaData(soap);
	if (_p)
	{	soap_default___ns1__GetRicochetAwardNotificationCustomWithMediaData(soap, _p);
		_p->ns1__GetRicochetAwardNotificationCustomWithMediaData = ns1__GetRicochetAwardNotificationCustomWithMediaData;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetRicochetAwardNotificationCustomWithMediaData(struct soap*, const struct __ns1__GetRicochetAwardNotificationCustomWithMediaData *, const char*, const char*);

inline int soap_write___ns1__GetRicochetAwardNotificationCustomWithMediaData(struct soap *soap, struct __ns1__GetRicochetAwardNotificationCustomWithMediaData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetRicochetAwardNotificationCustomWithMediaData(soap, p), 0) || soap_put___ns1__GetRicochetAwardNotificationCustomWithMediaData(soap, p, "-ns1:GetRicochetAwardNotificationCustomWithMediaData", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetRicochetAwardNotificationCustomWithMediaData(struct soap *soap, const char *URL, struct __ns1__GetRicochetAwardNotificationCustomWithMediaData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__GetRicochetAwardNotificationCustomWithMediaData(soap, p), 0) || soap_put___ns1__GetRicochetAwardNotificationCustomWithMediaData(soap, p, "-ns1:GetRicochetAwardNotificationCustomWithMediaData", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetRicochetAwardNotificationCustomWithMediaData(struct soap *soap, const char *URL, struct __ns1__GetRicochetAwardNotificationCustomWithMediaData const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__GetRicochetAwardNotificationCustomWithMediaData(soap, p), 0) || soap_put___ns1__GetRicochetAwardNotificationCustomWithMediaData(soap, p, "-ns1:GetRicochetAwardNotificationCustomWithMediaData", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetRicochetAwardNotificationCustomWithMediaData * SOAP_FMAC4 soap_get___ns1__GetRicochetAwardNotificationCustomWithMediaData(struct soap*, struct __ns1__GetRicochetAwardNotificationCustomWithMediaData *, const char*, const char*);

inline int soap_read___ns1__GetRicochetAwardNotificationCustomWithMediaData(struct soap *soap, struct __ns1__GetRicochetAwardNotificationCustomWithMediaData *p)
{
	if (p)
	{	soap_default___ns1__GetRicochetAwardNotificationCustomWithMediaData(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetRicochetAwardNotificationCustomWithMediaData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetRicochetAwardNotificationCustomWithMediaData(struct soap *soap, const char *URL, struct __ns1__GetRicochetAwardNotificationCustomWithMediaData *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetRicochetAwardNotificationCustomWithMediaData(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetRicochetAwardNotificationCustomWithMediaData(struct soap *soap, struct __ns1__GetRicochetAwardNotificationCustomWithMediaData *p)
{
	if (soap_read___ns1__GetRicochetAwardNotificationCustomWithMediaData(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetRicochetAwardNotificationCustom_DEFINED
#define SOAP_TYPE___ns1__GetRicochetAwardNotificationCustom_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetRicochetAwardNotificationCustom(struct soap*, struct __ns1__GetRicochetAwardNotificationCustom *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetRicochetAwardNotificationCustom(struct soap*, const struct __ns1__GetRicochetAwardNotificationCustom *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetRicochetAwardNotificationCustom(struct soap*, const char*, int, const struct __ns1__GetRicochetAwardNotificationCustom *, const char*);
SOAP_FMAC3 struct __ns1__GetRicochetAwardNotificationCustom * SOAP_FMAC4 soap_in___ns1__GetRicochetAwardNotificationCustom(struct soap*, const char*, struct __ns1__GetRicochetAwardNotificationCustom *, const char*);
SOAP_FMAC1 struct __ns1__GetRicochetAwardNotificationCustom * SOAP_FMAC2 soap_instantiate___ns1__GetRicochetAwardNotificationCustom(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetRicochetAwardNotificationCustom * soap_new___ns1__GetRicochetAwardNotificationCustom(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetRicochetAwardNotificationCustom(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetRicochetAwardNotificationCustom * soap_new_req___ns1__GetRicochetAwardNotificationCustom(
	struct soap *soap)
{
	struct __ns1__GetRicochetAwardNotificationCustom *_p = soap_new___ns1__GetRicochetAwardNotificationCustom(soap);
	if (_p)
	{	soap_default___ns1__GetRicochetAwardNotificationCustom(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetRicochetAwardNotificationCustom * soap_new_set___ns1__GetRicochetAwardNotificationCustom(
	struct soap *soap,
	_ns1__GetRicochetAwardNotificationCustom *ns1__GetRicochetAwardNotificationCustom)
{
	struct __ns1__GetRicochetAwardNotificationCustom *_p = soap_new___ns1__GetRicochetAwardNotificationCustom(soap);
	if (_p)
	{	soap_default___ns1__GetRicochetAwardNotificationCustom(soap, _p);
		_p->ns1__GetRicochetAwardNotificationCustom = ns1__GetRicochetAwardNotificationCustom;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetRicochetAwardNotificationCustom(struct soap*, const struct __ns1__GetRicochetAwardNotificationCustom *, const char*, const char*);

inline int soap_write___ns1__GetRicochetAwardNotificationCustom(struct soap *soap, struct __ns1__GetRicochetAwardNotificationCustom const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetRicochetAwardNotificationCustom(soap, p), 0) || soap_put___ns1__GetRicochetAwardNotificationCustom(soap, p, "-ns1:GetRicochetAwardNotificationCustom", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetRicochetAwardNotificationCustom(struct soap *soap, const char *URL, struct __ns1__GetRicochetAwardNotificationCustom const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__GetRicochetAwardNotificationCustom(soap, p), 0) || soap_put___ns1__GetRicochetAwardNotificationCustom(soap, p, "-ns1:GetRicochetAwardNotificationCustom", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetRicochetAwardNotificationCustom(struct soap *soap, const char *URL, struct __ns1__GetRicochetAwardNotificationCustom const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__GetRicochetAwardNotificationCustom(soap, p), 0) || soap_put___ns1__GetRicochetAwardNotificationCustom(soap, p, "-ns1:GetRicochetAwardNotificationCustom", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetRicochetAwardNotificationCustom * SOAP_FMAC4 soap_get___ns1__GetRicochetAwardNotificationCustom(struct soap*, struct __ns1__GetRicochetAwardNotificationCustom *, const char*, const char*);

inline int soap_read___ns1__GetRicochetAwardNotificationCustom(struct soap *soap, struct __ns1__GetRicochetAwardNotificationCustom *p)
{
	if (p)
	{	soap_default___ns1__GetRicochetAwardNotificationCustom(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetRicochetAwardNotificationCustom(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetRicochetAwardNotificationCustom(struct soap *soap, const char *URL, struct __ns1__GetRicochetAwardNotificationCustom *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetRicochetAwardNotificationCustom(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetRicochetAwardNotificationCustom(struct soap *soap, struct __ns1__GetRicochetAwardNotificationCustom *p)
{
	if (soap_read___ns1__GetRicochetAwardNotificationCustom(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetRicochetTriggeredEventNotificationCustom_DEFINED
#define SOAP_TYPE___ns1__GetRicochetTriggeredEventNotificationCustom_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetRicochetTriggeredEventNotificationCustom(struct soap*, struct __ns1__GetRicochetTriggeredEventNotificationCustom *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetRicochetTriggeredEventNotificationCustom(struct soap*, const struct __ns1__GetRicochetTriggeredEventNotificationCustom *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetRicochetTriggeredEventNotificationCustom(struct soap*, const char*, int, const struct __ns1__GetRicochetTriggeredEventNotificationCustom *, const char*);
SOAP_FMAC3 struct __ns1__GetRicochetTriggeredEventNotificationCustom * SOAP_FMAC4 soap_in___ns1__GetRicochetTriggeredEventNotificationCustom(struct soap*, const char*, struct __ns1__GetRicochetTriggeredEventNotificationCustom *, const char*);
SOAP_FMAC1 struct __ns1__GetRicochetTriggeredEventNotificationCustom * SOAP_FMAC2 soap_instantiate___ns1__GetRicochetTriggeredEventNotificationCustom(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetRicochetTriggeredEventNotificationCustom * soap_new___ns1__GetRicochetTriggeredEventNotificationCustom(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetRicochetTriggeredEventNotificationCustom(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetRicochetTriggeredEventNotificationCustom * soap_new_req___ns1__GetRicochetTriggeredEventNotificationCustom(
	struct soap *soap)
{
	struct __ns1__GetRicochetTriggeredEventNotificationCustom *_p = soap_new___ns1__GetRicochetTriggeredEventNotificationCustom(soap);
	if (_p)
	{	soap_default___ns1__GetRicochetTriggeredEventNotificationCustom(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetRicochetTriggeredEventNotificationCustom * soap_new_set___ns1__GetRicochetTriggeredEventNotificationCustom(
	struct soap *soap,
	_ns1__GetRicochetTriggeredEventNotificationCustom *ns1__GetRicochetTriggeredEventNotificationCustom)
{
	struct __ns1__GetRicochetTriggeredEventNotificationCustom *_p = soap_new___ns1__GetRicochetTriggeredEventNotificationCustom(soap);
	if (_p)
	{	soap_default___ns1__GetRicochetTriggeredEventNotificationCustom(soap, _p);
		_p->ns1__GetRicochetTriggeredEventNotificationCustom = ns1__GetRicochetTriggeredEventNotificationCustom;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetRicochetTriggeredEventNotificationCustom(struct soap*, const struct __ns1__GetRicochetTriggeredEventNotificationCustom *, const char*, const char*);

inline int soap_write___ns1__GetRicochetTriggeredEventNotificationCustom(struct soap *soap, struct __ns1__GetRicochetTriggeredEventNotificationCustom const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetRicochetTriggeredEventNotificationCustom(soap, p), 0) || soap_put___ns1__GetRicochetTriggeredEventNotificationCustom(soap, p, "-ns1:GetRicochetTriggeredEventNotificationCustom", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetRicochetTriggeredEventNotificationCustom(struct soap *soap, const char *URL, struct __ns1__GetRicochetTriggeredEventNotificationCustom const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__GetRicochetTriggeredEventNotificationCustom(soap, p), 0) || soap_put___ns1__GetRicochetTriggeredEventNotificationCustom(soap, p, "-ns1:GetRicochetTriggeredEventNotificationCustom", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetRicochetTriggeredEventNotificationCustom(struct soap *soap, const char *URL, struct __ns1__GetRicochetTriggeredEventNotificationCustom const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__GetRicochetTriggeredEventNotificationCustom(soap, p), 0) || soap_put___ns1__GetRicochetTriggeredEventNotificationCustom(soap, p, "-ns1:GetRicochetTriggeredEventNotificationCustom", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetRicochetTriggeredEventNotificationCustom * SOAP_FMAC4 soap_get___ns1__GetRicochetTriggeredEventNotificationCustom(struct soap*, struct __ns1__GetRicochetTriggeredEventNotificationCustom *, const char*, const char*);

inline int soap_read___ns1__GetRicochetTriggeredEventNotificationCustom(struct soap *soap, struct __ns1__GetRicochetTriggeredEventNotificationCustom *p)
{
	if (p)
	{	soap_default___ns1__GetRicochetTriggeredEventNotificationCustom(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetRicochetTriggeredEventNotificationCustom(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetRicochetTriggeredEventNotificationCustom(struct soap *soap, const char *URL, struct __ns1__GetRicochetTriggeredEventNotificationCustom *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetRicochetTriggeredEventNotificationCustom(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetRicochetTriggeredEventNotificationCustom(struct soap *soap, struct __ns1__GetRicochetTriggeredEventNotificationCustom *p)
{
	if (soap_read___ns1__GetRicochetTriggeredEventNotificationCustom(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetSplashdownAwardNotificationCustomWithMediaData_DEFINED
#define SOAP_TYPE___ns1__GetSplashdownAwardNotificationCustomWithMediaData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetSplashdownAwardNotificationCustomWithMediaData(struct soap*, struct __ns1__GetSplashdownAwardNotificationCustomWithMediaData *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetSplashdownAwardNotificationCustomWithMediaData(struct soap*, const struct __ns1__GetSplashdownAwardNotificationCustomWithMediaData *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetSplashdownAwardNotificationCustomWithMediaData(struct soap*, const char*, int, const struct __ns1__GetSplashdownAwardNotificationCustomWithMediaData *, const char*);
SOAP_FMAC3 struct __ns1__GetSplashdownAwardNotificationCustomWithMediaData * SOAP_FMAC4 soap_in___ns1__GetSplashdownAwardNotificationCustomWithMediaData(struct soap*, const char*, struct __ns1__GetSplashdownAwardNotificationCustomWithMediaData *, const char*);
SOAP_FMAC1 struct __ns1__GetSplashdownAwardNotificationCustomWithMediaData * SOAP_FMAC2 soap_instantiate___ns1__GetSplashdownAwardNotificationCustomWithMediaData(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetSplashdownAwardNotificationCustomWithMediaData * soap_new___ns1__GetSplashdownAwardNotificationCustomWithMediaData(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetSplashdownAwardNotificationCustomWithMediaData(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetSplashdownAwardNotificationCustomWithMediaData * soap_new_req___ns1__GetSplashdownAwardNotificationCustomWithMediaData(
	struct soap *soap)
{
	struct __ns1__GetSplashdownAwardNotificationCustomWithMediaData *_p = soap_new___ns1__GetSplashdownAwardNotificationCustomWithMediaData(soap);
	if (_p)
	{	soap_default___ns1__GetSplashdownAwardNotificationCustomWithMediaData(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetSplashdownAwardNotificationCustomWithMediaData * soap_new_set___ns1__GetSplashdownAwardNotificationCustomWithMediaData(
	struct soap *soap,
	_ns1__GetSplashdownAwardNotificationCustomWithMediaData *ns1__GetSplashdownAwardNotificationCustomWithMediaData)
{
	struct __ns1__GetSplashdownAwardNotificationCustomWithMediaData *_p = soap_new___ns1__GetSplashdownAwardNotificationCustomWithMediaData(soap);
	if (_p)
	{	soap_default___ns1__GetSplashdownAwardNotificationCustomWithMediaData(soap, _p);
		_p->ns1__GetSplashdownAwardNotificationCustomWithMediaData = ns1__GetSplashdownAwardNotificationCustomWithMediaData;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetSplashdownAwardNotificationCustomWithMediaData(struct soap*, const struct __ns1__GetSplashdownAwardNotificationCustomWithMediaData *, const char*, const char*);

inline int soap_write___ns1__GetSplashdownAwardNotificationCustomWithMediaData(struct soap *soap, struct __ns1__GetSplashdownAwardNotificationCustomWithMediaData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetSplashdownAwardNotificationCustomWithMediaData(soap, p), 0) || soap_put___ns1__GetSplashdownAwardNotificationCustomWithMediaData(soap, p, "-ns1:GetSplashdownAwardNotificationCustomWithMediaData", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetSplashdownAwardNotificationCustomWithMediaData(struct soap *soap, const char *URL, struct __ns1__GetSplashdownAwardNotificationCustomWithMediaData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__GetSplashdownAwardNotificationCustomWithMediaData(soap, p), 0) || soap_put___ns1__GetSplashdownAwardNotificationCustomWithMediaData(soap, p, "-ns1:GetSplashdownAwardNotificationCustomWithMediaData", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetSplashdownAwardNotificationCustomWithMediaData(struct soap *soap, const char *URL, struct __ns1__GetSplashdownAwardNotificationCustomWithMediaData const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__GetSplashdownAwardNotificationCustomWithMediaData(soap, p), 0) || soap_put___ns1__GetSplashdownAwardNotificationCustomWithMediaData(soap, p, "-ns1:GetSplashdownAwardNotificationCustomWithMediaData", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetSplashdownAwardNotificationCustomWithMediaData * SOAP_FMAC4 soap_get___ns1__GetSplashdownAwardNotificationCustomWithMediaData(struct soap*, struct __ns1__GetSplashdownAwardNotificationCustomWithMediaData *, const char*, const char*);

inline int soap_read___ns1__GetSplashdownAwardNotificationCustomWithMediaData(struct soap *soap, struct __ns1__GetSplashdownAwardNotificationCustomWithMediaData *p)
{
	if (p)
	{	soap_default___ns1__GetSplashdownAwardNotificationCustomWithMediaData(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetSplashdownAwardNotificationCustomWithMediaData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetSplashdownAwardNotificationCustomWithMediaData(struct soap *soap, const char *URL, struct __ns1__GetSplashdownAwardNotificationCustomWithMediaData *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetSplashdownAwardNotificationCustomWithMediaData(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetSplashdownAwardNotificationCustomWithMediaData(struct soap *soap, struct __ns1__GetSplashdownAwardNotificationCustomWithMediaData *p)
{
	if (soap_read___ns1__GetSplashdownAwardNotificationCustomWithMediaData(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetSplashdownAwardNotificationCustom_DEFINED
#define SOAP_TYPE___ns1__GetSplashdownAwardNotificationCustom_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetSplashdownAwardNotificationCustom(struct soap*, struct __ns1__GetSplashdownAwardNotificationCustom *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetSplashdownAwardNotificationCustom(struct soap*, const struct __ns1__GetSplashdownAwardNotificationCustom *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetSplashdownAwardNotificationCustom(struct soap*, const char*, int, const struct __ns1__GetSplashdownAwardNotificationCustom *, const char*);
SOAP_FMAC3 struct __ns1__GetSplashdownAwardNotificationCustom * SOAP_FMAC4 soap_in___ns1__GetSplashdownAwardNotificationCustom(struct soap*, const char*, struct __ns1__GetSplashdownAwardNotificationCustom *, const char*);
SOAP_FMAC1 struct __ns1__GetSplashdownAwardNotificationCustom * SOAP_FMAC2 soap_instantiate___ns1__GetSplashdownAwardNotificationCustom(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetSplashdownAwardNotificationCustom * soap_new___ns1__GetSplashdownAwardNotificationCustom(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetSplashdownAwardNotificationCustom(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetSplashdownAwardNotificationCustom * soap_new_req___ns1__GetSplashdownAwardNotificationCustom(
	struct soap *soap)
{
	struct __ns1__GetSplashdownAwardNotificationCustom *_p = soap_new___ns1__GetSplashdownAwardNotificationCustom(soap);
	if (_p)
	{	soap_default___ns1__GetSplashdownAwardNotificationCustom(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetSplashdownAwardNotificationCustom * soap_new_set___ns1__GetSplashdownAwardNotificationCustom(
	struct soap *soap,
	_ns1__GetSplashdownAwardNotificationCustom *ns1__GetSplashdownAwardNotificationCustom)
{
	struct __ns1__GetSplashdownAwardNotificationCustom *_p = soap_new___ns1__GetSplashdownAwardNotificationCustom(soap);
	if (_p)
	{	soap_default___ns1__GetSplashdownAwardNotificationCustom(soap, _p);
		_p->ns1__GetSplashdownAwardNotificationCustom = ns1__GetSplashdownAwardNotificationCustom;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetSplashdownAwardNotificationCustom(struct soap*, const struct __ns1__GetSplashdownAwardNotificationCustom *, const char*, const char*);

inline int soap_write___ns1__GetSplashdownAwardNotificationCustom(struct soap *soap, struct __ns1__GetSplashdownAwardNotificationCustom const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetSplashdownAwardNotificationCustom(soap, p), 0) || soap_put___ns1__GetSplashdownAwardNotificationCustom(soap, p, "-ns1:GetSplashdownAwardNotificationCustom", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetSplashdownAwardNotificationCustom(struct soap *soap, const char *URL, struct __ns1__GetSplashdownAwardNotificationCustom const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__GetSplashdownAwardNotificationCustom(soap, p), 0) || soap_put___ns1__GetSplashdownAwardNotificationCustom(soap, p, "-ns1:GetSplashdownAwardNotificationCustom", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetSplashdownAwardNotificationCustom(struct soap *soap, const char *URL, struct __ns1__GetSplashdownAwardNotificationCustom const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__GetSplashdownAwardNotificationCustom(soap, p), 0) || soap_put___ns1__GetSplashdownAwardNotificationCustom(soap, p, "-ns1:GetSplashdownAwardNotificationCustom", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetSplashdownAwardNotificationCustom * SOAP_FMAC4 soap_get___ns1__GetSplashdownAwardNotificationCustom(struct soap*, struct __ns1__GetSplashdownAwardNotificationCustom *, const char*, const char*);

inline int soap_read___ns1__GetSplashdownAwardNotificationCustom(struct soap *soap, struct __ns1__GetSplashdownAwardNotificationCustom *p)
{
	if (p)
	{	soap_default___ns1__GetSplashdownAwardNotificationCustom(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetSplashdownAwardNotificationCustom(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetSplashdownAwardNotificationCustom(struct soap *soap, const char *URL, struct __ns1__GetSplashdownAwardNotificationCustom *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetSplashdownAwardNotificationCustom(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetSplashdownAwardNotificationCustom(struct soap *soap, struct __ns1__GetSplashdownAwardNotificationCustom *p)
{
	if (soap_read___ns1__GetSplashdownAwardNotificationCustom(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetSplashdownTriggeredEventNotificationCustom_DEFINED
#define SOAP_TYPE___ns1__GetSplashdownTriggeredEventNotificationCustom_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetSplashdownTriggeredEventNotificationCustom(struct soap*, struct __ns1__GetSplashdownTriggeredEventNotificationCustom *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetSplashdownTriggeredEventNotificationCustom(struct soap*, const struct __ns1__GetSplashdownTriggeredEventNotificationCustom *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetSplashdownTriggeredEventNotificationCustom(struct soap*, const char*, int, const struct __ns1__GetSplashdownTriggeredEventNotificationCustom *, const char*);
SOAP_FMAC3 struct __ns1__GetSplashdownTriggeredEventNotificationCustom * SOAP_FMAC4 soap_in___ns1__GetSplashdownTriggeredEventNotificationCustom(struct soap*, const char*, struct __ns1__GetSplashdownTriggeredEventNotificationCustom *, const char*);
SOAP_FMAC1 struct __ns1__GetSplashdownTriggeredEventNotificationCustom * SOAP_FMAC2 soap_instantiate___ns1__GetSplashdownTriggeredEventNotificationCustom(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetSplashdownTriggeredEventNotificationCustom * soap_new___ns1__GetSplashdownTriggeredEventNotificationCustom(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetSplashdownTriggeredEventNotificationCustom(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetSplashdownTriggeredEventNotificationCustom * soap_new_req___ns1__GetSplashdownTriggeredEventNotificationCustom(
	struct soap *soap)
{
	struct __ns1__GetSplashdownTriggeredEventNotificationCustom *_p = soap_new___ns1__GetSplashdownTriggeredEventNotificationCustom(soap);
	if (_p)
	{	soap_default___ns1__GetSplashdownTriggeredEventNotificationCustom(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetSplashdownTriggeredEventNotificationCustom * soap_new_set___ns1__GetSplashdownTriggeredEventNotificationCustom(
	struct soap *soap,
	_ns1__GetSplashdownTriggeredEventNotificationCustom *ns1__GetSplashdownTriggeredEventNotificationCustom)
{
	struct __ns1__GetSplashdownTriggeredEventNotificationCustom *_p = soap_new___ns1__GetSplashdownTriggeredEventNotificationCustom(soap);
	if (_p)
	{	soap_default___ns1__GetSplashdownTriggeredEventNotificationCustom(soap, _p);
		_p->ns1__GetSplashdownTriggeredEventNotificationCustom = ns1__GetSplashdownTriggeredEventNotificationCustom;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetSplashdownTriggeredEventNotificationCustom(struct soap*, const struct __ns1__GetSplashdownTriggeredEventNotificationCustom *, const char*, const char*);

inline int soap_write___ns1__GetSplashdownTriggeredEventNotificationCustom(struct soap *soap, struct __ns1__GetSplashdownTriggeredEventNotificationCustom const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetSplashdownTriggeredEventNotificationCustom(soap, p), 0) || soap_put___ns1__GetSplashdownTriggeredEventNotificationCustom(soap, p, "-ns1:GetSplashdownTriggeredEventNotificationCustom", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetSplashdownTriggeredEventNotificationCustom(struct soap *soap, const char *URL, struct __ns1__GetSplashdownTriggeredEventNotificationCustom const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__GetSplashdownTriggeredEventNotificationCustom(soap, p), 0) || soap_put___ns1__GetSplashdownTriggeredEventNotificationCustom(soap, p, "-ns1:GetSplashdownTriggeredEventNotificationCustom", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetSplashdownTriggeredEventNotificationCustom(struct soap *soap, const char *URL, struct __ns1__GetSplashdownTriggeredEventNotificationCustom const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__GetSplashdownTriggeredEventNotificationCustom(soap, p), 0) || soap_put___ns1__GetSplashdownTriggeredEventNotificationCustom(soap, p, "-ns1:GetSplashdownTriggeredEventNotificationCustom", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetSplashdownTriggeredEventNotificationCustom * SOAP_FMAC4 soap_get___ns1__GetSplashdownTriggeredEventNotificationCustom(struct soap*, struct __ns1__GetSplashdownTriggeredEventNotificationCustom *, const char*, const char*);

inline int soap_read___ns1__GetSplashdownTriggeredEventNotificationCustom(struct soap *soap, struct __ns1__GetSplashdownTriggeredEventNotificationCustom *p)
{
	if (p)
	{	soap_default___ns1__GetSplashdownTriggeredEventNotificationCustom(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetSplashdownTriggeredEventNotificationCustom(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetSplashdownTriggeredEventNotificationCustom(struct soap *soap, const char *URL, struct __ns1__GetSplashdownTriggeredEventNotificationCustom *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetSplashdownTriggeredEventNotificationCustom(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetSplashdownTriggeredEventNotificationCustom(struct soap *soap, struct __ns1__GetSplashdownTriggeredEventNotificationCustom *p)
{
	if (soap_read___ns1__GetSplashdownTriggeredEventNotificationCustom(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetSentinelConfigNotification_DEFINED
#define SOAP_TYPE___ns1__GetSentinelConfigNotification_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetSentinelConfigNotification(struct soap*, struct __ns1__GetSentinelConfigNotification *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetSentinelConfigNotification(struct soap*, const struct __ns1__GetSentinelConfigNotification *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetSentinelConfigNotification(struct soap*, const char*, int, const struct __ns1__GetSentinelConfigNotification *, const char*);
SOAP_FMAC3 struct __ns1__GetSentinelConfigNotification * SOAP_FMAC4 soap_in___ns1__GetSentinelConfigNotification(struct soap*, const char*, struct __ns1__GetSentinelConfigNotification *, const char*);
SOAP_FMAC1 struct __ns1__GetSentinelConfigNotification * SOAP_FMAC2 soap_instantiate___ns1__GetSentinelConfigNotification(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetSentinelConfigNotification * soap_new___ns1__GetSentinelConfigNotification(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetSentinelConfigNotification(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetSentinelConfigNotification * soap_new_req___ns1__GetSentinelConfigNotification(
	struct soap *soap)
{
	struct __ns1__GetSentinelConfigNotification *_p = soap_new___ns1__GetSentinelConfigNotification(soap);
	if (_p)
	{	soap_default___ns1__GetSentinelConfigNotification(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetSentinelConfigNotification * soap_new_set___ns1__GetSentinelConfigNotification(
	struct soap *soap,
	_ns1__GetSentinelConfigNotification *ns1__GetSentinelConfigNotification)
{
	struct __ns1__GetSentinelConfigNotification *_p = soap_new___ns1__GetSentinelConfigNotification(soap);
	if (_p)
	{	soap_default___ns1__GetSentinelConfigNotification(soap, _p);
		_p->ns1__GetSentinelConfigNotification = ns1__GetSentinelConfigNotification;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetSentinelConfigNotification(struct soap*, const struct __ns1__GetSentinelConfigNotification *, const char*, const char*);

inline int soap_write___ns1__GetSentinelConfigNotification(struct soap *soap, struct __ns1__GetSentinelConfigNotification const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetSentinelConfigNotification(soap, p), 0) || soap_put___ns1__GetSentinelConfigNotification(soap, p, "-ns1:GetSentinelConfigNotification", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetSentinelConfigNotification(struct soap *soap, const char *URL, struct __ns1__GetSentinelConfigNotification const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__GetSentinelConfigNotification(soap, p), 0) || soap_put___ns1__GetSentinelConfigNotification(soap, p, "-ns1:GetSentinelConfigNotification", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetSentinelConfigNotification(struct soap *soap, const char *URL, struct __ns1__GetSentinelConfigNotification const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__GetSentinelConfigNotification(soap, p), 0) || soap_put___ns1__GetSentinelConfigNotification(soap, p, "-ns1:GetSentinelConfigNotification", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetSentinelConfigNotification * SOAP_FMAC4 soap_get___ns1__GetSentinelConfigNotification(struct soap*, struct __ns1__GetSentinelConfigNotification *, const char*, const char*);

inline int soap_read___ns1__GetSentinelConfigNotification(struct soap *soap, struct __ns1__GetSentinelConfigNotification *p)
{
	if (p)
	{	soap_default___ns1__GetSentinelConfigNotification(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetSentinelConfigNotification(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetSentinelConfigNotification(struct soap *soap, const char *URL, struct __ns1__GetSentinelConfigNotification *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetSentinelConfigNotification(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetSentinelConfigNotification(struct soap *soap, struct __ns1__GetSentinelConfigNotification *p)
{
	if (soap_read___ns1__GetSentinelConfigNotification(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetCMPStatusNotification_DEFINED
#define SOAP_TYPE___ns1__GetCMPStatusNotification_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetCMPStatusNotification(struct soap*, struct __ns1__GetCMPStatusNotification *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetCMPStatusNotification(struct soap*, const struct __ns1__GetCMPStatusNotification *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetCMPStatusNotification(struct soap*, const char*, int, const struct __ns1__GetCMPStatusNotification *, const char*);
SOAP_FMAC3 struct __ns1__GetCMPStatusNotification * SOAP_FMAC4 soap_in___ns1__GetCMPStatusNotification(struct soap*, const char*, struct __ns1__GetCMPStatusNotification *, const char*);
SOAP_FMAC1 struct __ns1__GetCMPStatusNotification * SOAP_FMAC2 soap_instantiate___ns1__GetCMPStatusNotification(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetCMPStatusNotification * soap_new___ns1__GetCMPStatusNotification(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetCMPStatusNotification(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetCMPStatusNotification * soap_new_req___ns1__GetCMPStatusNotification(
	struct soap *soap)
{
	struct __ns1__GetCMPStatusNotification *_p = soap_new___ns1__GetCMPStatusNotification(soap);
	if (_p)
	{	soap_default___ns1__GetCMPStatusNotification(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetCMPStatusNotification * soap_new_set___ns1__GetCMPStatusNotification(
	struct soap *soap,
	_ns1__GetCMPStatusNotification *ns1__GetCMPStatusNotification)
{
	struct __ns1__GetCMPStatusNotification *_p = soap_new___ns1__GetCMPStatusNotification(soap);
	if (_p)
	{	soap_default___ns1__GetCMPStatusNotification(soap, _p);
		_p->ns1__GetCMPStatusNotification = ns1__GetCMPStatusNotification;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetCMPStatusNotification(struct soap*, const struct __ns1__GetCMPStatusNotification *, const char*, const char*);

inline int soap_write___ns1__GetCMPStatusNotification(struct soap *soap, struct __ns1__GetCMPStatusNotification const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetCMPStatusNotification(soap, p), 0) || soap_put___ns1__GetCMPStatusNotification(soap, p, "-ns1:GetCMPStatusNotification", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetCMPStatusNotification(struct soap *soap, const char *URL, struct __ns1__GetCMPStatusNotification const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__GetCMPStatusNotification(soap, p), 0) || soap_put___ns1__GetCMPStatusNotification(soap, p, "-ns1:GetCMPStatusNotification", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetCMPStatusNotification(struct soap *soap, const char *URL, struct __ns1__GetCMPStatusNotification const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__GetCMPStatusNotification(soap, p), 0) || soap_put___ns1__GetCMPStatusNotification(soap, p, "-ns1:GetCMPStatusNotification", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetCMPStatusNotification * SOAP_FMAC4 soap_get___ns1__GetCMPStatusNotification(struct soap*, struct __ns1__GetCMPStatusNotification *, const char*, const char*);

inline int soap_read___ns1__GetCMPStatusNotification(struct soap *soap, struct __ns1__GetCMPStatusNotification *p)
{
	if (p)
	{	soap_default___ns1__GetCMPStatusNotification(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetCMPStatusNotification(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetCMPStatusNotification(struct soap *soap, const char *URL, struct __ns1__GetCMPStatusNotification *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetCMPStatusNotification(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetCMPStatusNotification(struct soap *soap, struct __ns1__GetCMPStatusNotification *p)
{
	if (soap_read___ns1__GetCMPStatusNotification(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetEventStartNotificationV25_DEFINED
#define SOAP_TYPE___ns1__GetEventStartNotificationV25_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetEventStartNotificationV25(struct soap*, struct __ns1__GetEventStartNotificationV25 *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetEventStartNotificationV25(struct soap*, const struct __ns1__GetEventStartNotificationV25 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetEventStartNotificationV25(struct soap*, const char*, int, const struct __ns1__GetEventStartNotificationV25 *, const char*);
SOAP_FMAC3 struct __ns1__GetEventStartNotificationV25 * SOAP_FMAC4 soap_in___ns1__GetEventStartNotificationV25(struct soap*, const char*, struct __ns1__GetEventStartNotificationV25 *, const char*);
SOAP_FMAC1 struct __ns1__GetEventStartNotificationV25 * SOAP_FMAC2 soap_instantiate___ns1__GetEventStartNotificationV25(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetEventStartNotificationV25 * soap_new___ns1__GetEventStartNotificationV25(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetEventStartNotificationV25(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetEventStartNotificationV25 * soap_new_req___ns1__GetEventStartNotificationV25(
	struct soap *soap)
{
	struct __ns1__GetEventStartNotificationV25 *_p = soap_new___ns1__GetEventStartNotificationV25(soap);
	if (_p)
	{	soap_default___ns1__GetEventStartNotificationV25(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetEventStartNotificationV25 * soap_new_set___ns1__GetEventStartNotificationV25(
	struct soap *soap,
	_ns1__GetEventStartNotificationV25 *ns1__GetEventStartNotificationV25)
{
	struct __ns1__GetEventStartNotificationV25 *_p = soap_new___ns1__GetEventStartNotificationV25(soap);
	if (_p)
	{	soap_default___ns1__GetEventStartNotificationV25(soap, _p);
		_p->ns1__GetEventStartNotificationV25 = ns1__GetEventStartNotificationV25;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetEventStartNotificationV25(struct soap*, const struct __ns1__GetEventStartNotificationV25 *, const char*, const char*);

inline int soap_write___ns1__GetEventStartNotificationV25(struct soap *soap, struct __ns1__GetEventStartNotificationV25 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetEventStartNotificationV25(soap, p), 0) || soap_put___ns1__GetEventStartNotificationV25(soap, p, "-ns1:GetEventStartNotificationV25", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetEventStartNotificationV25(struct soap *soap, const char *URL, struct __ns1__GetEventStartNotificationV25 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__GetEventStartNotificationV25(soap, p), 0) || soap_put___ns1__GetEventStartNotificationV25(soap, p, "-ns1:GetEventStartNotificationV25", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetEventStartNotificationV25(struct soap *soap, const char *URL, struct __ns1__GetEventStartNotificationV25 const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__GetEventStartNotificationV25(soap, p), 0) || soap_put___ns1__GetEventStartNotificationV25(soap, p, "-ns1:GetEventStartNotificationV25", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetEventStartNotificationV25 * SOAP_FMAC4 soap_get___ns1__GetEventStartNotificationV25(struct soap*, struct __ns1__GetEventStartNotificationV25 *, const char*, const char*);

inline int soap_read___ns1__GetEventStartNotificationV25(struct soap *soap, struct __ns1__GetEventStartNotificationV25 *p)
{
	if (p)
	{	soap_default___ns1__GetEventStartNotificationV25(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetEventStartNotificationV25(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetEventStartNotificationV25(struct soap *soap, const char *URL, struct __ns1__GetEventStartNotificationV25 *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetEventStartNotificationV25(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetEventStartNotificationV25(struct soap *soap, struct __ns1__GetEventStartNotificationV25 *p)
{
	if (soap_read___ns1__GetEventStartNotificationV25(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetEventStartNotification_DEFINED
#define SOAP_TYPE___ns1__GetEventStartNotification_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetEventStartNotification(struct soap*, struct __ns1__GetEventStartNotification *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetEventStartNotification(struct soap*, const struct __ns1__GetEventStartNotification *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetEventStartNotification(struct soap*, const char*, int, const struct __ns1__GetEventStartNotification *, const char*);
SOAP_FMAC3 struct __ns1__GetEventStartNotification * SOAP_FMAC4 soap_in___ns1__GetEventStartNotification(struct soap*, const char*, struct __ns1__GetEventStartNotification *, const char*);
SOAP_FMAC1 struct __ns1__GetEventStartNotification * SOAP_FMAC2 soap_instantiate___ns1__GetEventStartNotification(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetEventStartNotification * soap_new___ns1__GetEventStartNotification(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetEventStartNotification(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetEventStartNotification * soap_new_req___ns1__GetEventStartNotification(
	struct soap *soap)
{
	struct __ns1__GetEventStartNotification *_p = soap_new___ns1__GetEventStartNotification(soap);
	if (_p)
	{	soap_default___ns1__GetEventStartNotification(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetEventStartNotification * soap_new_set___ns1__GetEventStartNotification(
	struct soap *soap,
	_ns1__GetEventStartNotification *ns1__GetEventStartNotification)
{
	struct __ns1__GetEventStartNotification *_p = soap_new___ns1__GetEventStartNotification(soap);
	if (_p)
	{	soap_default___ns1__GetEventStartNotification(soap, _p);
		_p->ns1__GetEventStartNotification = ns1__GetEventStartNotification;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetEventStartNotification(struct soap*, const struct __ns1__GetEventStartNotification *, const char*, const char*);

inline int soap_write___ns1__GetEventStartNotification(struct soap *soap, struct __ns1__GetEventStartNotification const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetEventStartNotification(soap, p), 0) || soap_put___ns1__GetEventStartNotification(soap, p, "-ns1:GetEventStartNotification", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetEventStartNotification(struct soap *soap, const char *URL, struct __ns1__GetEventStartNotification const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__GetEventStartNotification(soap, p), 0) || soap_put___ns1__GetEventStartNotification(soap, p, "-ns1:GetEventStartNotification", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetEventStartNotification(struct soap *soap, const char *URL, struct __ns1__GetEventStartNotification const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__GetEventStartNotification(soap, p), 0) || soap_put___ns1__GetEventStartNotification(soap, p, "-ns1:GetEventStartNotification", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetEventStartNotification * SOAP_FMAC4 soap_get___ns1__GetEventStartNotification(struct soap*, struct __ns1__GetEventStartNotification *, const char*, const char*);

inline int soap_read___ns1__GetEventStartNotification(struct soap *soap, struct __ns1__GetEventStartNotification *p)
{
	if (p)
	{	soap_default___ns1__GetEventStartNotification(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetEventStartNotification(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetEventStartNotification(struct soap *soap, const char *URL, struct __ns1__GetEventStartNotification *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetEventStartNotification(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetEventStartNotification(struct soap *soap, struct __ns1__GetEventStartNotification *p)
{
	if (soap_read___ns1__GetEventStartNotification(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__Checkin_DEFINED
#define SOAP_TYPE___ns1__Checkin_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Checkin(struct soap*, struct __ns1__Checkin *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Checkin(struct soap*, const struct __ns1__Checkin *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Checkin(struct soap*, const char*, int, const struct __ns1__Checkin *, const char*);
SOAP_FMAC3 struct __ns1__Checkin * SOAP_FMAC4 soap_in___ns1__Checkin(struct soap*, const char*, struct __ns1__Checkin *, const char*);
SOAP_FMAC1 struct __ns1__Checkin * SOAP_FMAC2 soap_instantiate___ns1__Checkin(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Checkin * soap_new___ns1__Checkin(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__Checkin(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__Checkin * soap_new_req___ns1__Checkin(
	struct soap *soap)
{
	struct __ns1__Checkin *_p = soap_new___ns1__Checkin(soap);
	if (_p)
	{	soap_default___ns1__Checkin(soap, _p);
	}
	return _p;
}

inline struct __ns1__Checkin * soap_new_set___ns1__Checkin(
	struct soap *soap,
	_ns1__Checkin *ns1__Checkin)
{
	struct __ns1__Checkin *_p = soap_new___ns1__Checkin(soap);
	if (_p)
	{	soap_default___ns1__Checkin(soap, _p);
		_p->ns1__Checkin = ns1__Checkin;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Checkin(struct soap*, const struct __ns1__Checkin *, const char*, const char*);

inline int soap_write___ns1__Checkin(struct soap *soap, struct __ns1__Checkin const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__Checkin(soap, p), 0) || soap_put___ns1__Checkin(soap, p, "-ns1:Checkin", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__Checkin(struct soap *soap, const char *URL, struct __ns1__Checkin const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__Checkin(soap, p), 0) || soap_put___ns1__Checkin(soap, p, "-ns1:Checkin", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__Checkin(struct soap *soap, const char *URL, struct __ns1__Checkin const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__Checkin(soap, p), 0) || soap_put___ns1__Checkin(soap, p, "-ns1:Checkin", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__Checkin * SOAP_FMAC4 soap_get___ns1__Checkin(struct soap*, struct __ns1__Checkin *, const char*, const char*);

inline int soap_read___ns1__Checkin(struct soap *soap, struct __ns1__Checkin *p)
{
	if (p)
	{	soap_default___ns1__Checkin(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__Checkin(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__Checkin(struct soap *soap, const char *URL, struct __ns1__Checkin *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__Checkin(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__Checkin(struct soap *soap, struct __ns1__Checkin *p)
{
	if (soap_read___ns1__Checkin(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__wsc__union_DerivedKeyTokenType_DEFINED
#define SOAP_TYPE__wsc__union_DerivedKeyTokenType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsc__union_DerivedKeyTokenType(struct soap*, int, const union _wsc__union_DerivedKeyTokenType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsc__union_DerivedKeyTokenType(struct soap*, int, const union _wsc__union_DerivedKeyTokenType *);
SOAP_FMAC3 union _wsc__union_DerivedKeyTokenType * SOAP_FMAC4 soap_in__wsc__union_DerivedKeyTokenType(struct soap*, int*, union _wsc__union_DerivedKeyTokenType *);
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTo_wsse__Security_DEFINED
#define SOAP_TYPE_PointerTo_wsse__Security_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsse__Security(struct soap*, struct _wsse__Security *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsse__Security(struct soap*, const char *, int, struct _wsse__Security *const*, const char *);
SOAP_FMAC3 struct _wsse__Security ** SOAP_FMAC4 soap_in_PointerTo_wsse__Security(struct soap*, const char*, struct _wsse__Security **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsse__Security(struct soap*, struct _wsse__Security *const*, const char*, const char*);
SOAP_FMAC3 struct _wsse__Security ** SOAP_FMAC4 soap_get_PointerTo_wsse__Security(struct soap*, struct _wsse__Security **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__SignatureType_DEFINED
#define SOAP_TYPE_PointerTods__SignatureType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__SignatureType(struct soap*, struct ds__SignatureType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__SignatureType(struct soap*, const char *, int, struct ds__SignatureType *const*, const char *);
SOAP_FMAC3 struct ds__SignatureType ** SOAP_FMAC4 soap_in_PointerTods__SignatureType(struct soap*, const char*, struct ds__SignatureType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__SignatureType(struct soap*, struct ds__SignatureType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__SignatureType ** SOAP_FMAC4 soap_get_PointerTods__SignatureType(struct soap*, struct ds__SignatureType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsc__SecurityContextTokenType_DEFINED
#define SOAP_TYPE_PointerTowsc__SecurityContextTokenType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsc__SecurityContextTokenType(struct soap*, struct wsc__SecurityContextTokenType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsc__SecurityContextTokenType(struct soap*, const char *, int, struct wsc__SecurityContextTokenType *const*, const char *);
SOAP_FMAC3 struct wsc__SecurityContextTokenType ** SOAP_FMAC4 soap_in_PointerTowsc__SecurityContextTokenType(struct soap*, const char*, struct wsc__SecurityContextTokenType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsc__SecurityContextTokenType(struct soap*, struct wsc__SecurityContextTokenType *const*, const char*, const char*);
SOAP_FMAC3 struct wsc__SecurityContextTokenType ** SOAP_FMAC4 soap_get_PointerTowsc__SecurityContextTokenType(struct soap*, struct wsc__SecurityContextTokenType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsse__BinarySecurityToken_DEFINED
#define SOAP_TYPE_PointerTo_wsse__BinarySecurityToken_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsse__BinarySecurityToken(struct soap*, struct _wsse__BinarySecurityToken *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsse__BinarySecurityToken(struct soap*, const char *, int, struct _wsse__BinarySecurityToken *const*, const char *);
SOAP_FMAC3 struct _wsse__BinarySecurityToken ** SOAP_FMAC4 soap_in_PointerTo_wsse__BinarySecurityToken(struct soap*, const char*, struct _wsse__BinarySecurityToken **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsse__BinarySecurityToken(struct soap*, struct _wsse__BinarySecurityToken *const*, const char*, const char*);
SOAP_FMAC3 struct _wsse__BinarySecurityToken ** SOAP_FMAC4 soap_get_PointerTo_wsse__BinarySecurityToken(struct soap*, struct _wsse__BinarySecurityToken **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsse__UsernameToken_DEFINED
#define SOAP_TYPE_PointerTo_wsse__UsernameToken_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsse__UsernameToken(struct soap*, struct _wsse__UsernameToken *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsse__UsernameToken(struct soap*, const char *, int, struct _wsse__UsernameToken *const*, const char *);
SOAP_FMAC3 struct _wsse__UsernameToken ** SOAP_FMAC4 soap_in_PointerTo_wsse__UsernameToken(struct soap*, const char*, struct _wsse__UsernameToken **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsse__UsernameToken(struct soap*, struct _wsse__UsernameToken *const*, const char*, const char*);
SOAP_FMAC3 struct _wsse__UsernameToken ** SOAP_FMAC4 soap_get_PointerTo_wsse__UsernameToken(struct soap*, struct _wsse__UsernameToken **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsu__Timestamp_DEFINED
#define SOAP_TYPE_PointerTo_wsu__Timestamp_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsu__Timestamp(struct soap*, struct _wsu__Timestamp *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsu__Timestamp(struct soap*, const char *, int, struct _wsu__Timestamp *const*, const char *);
SOAP_FMAC3 struct _wsu__Timestamp ** SOAP_FMAC4 soap_in_PointerTo_wsu__Timestamp(struct soap*, const char*, struct _wsu__Timestamp **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsu__Timestamp(struct soap*, struct _wsu__Timestamp *const*, const char*, const char*);
SOAP_FMAC3 struct _wsu__Timestamp ** SOAP_FMAC4 soap_get_PointerTo_wsu__Timestamp(struct soap*, struct _wsu__Timestamp **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTo_ds__KeyInfo_DEFINED
#define SOAP_TYPE_PointerToPointerTo_ds__KeyInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTo_ds__KeyInfo(struct soap*, struct ds__KeyInfoType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTo_ds__KeyInfo(struct soap*, const char *, int, struct ds__KeyInfoType **const*, const char *);
SOAP_FMAC3 struct ds__KeyInfoType *** SOAP_FMAC4 soap_in_PointerToPointerTo_ds__KeyInfo(struct soap*, const char*, struct ds__KeyInfoType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTo_ds__KeyInfo(struct soap*, struct ds__KeyInfoType **const*, const char*, const char*);
SOAP_FMAC3 struct ds__KeyInfoType *** SOAP_FMAC4 soap_get_PointerToPointerTo_ds__KeyInfo(struct soap*, struct ds__KeyInfoType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__saml2__union_AttributeStatementType_DEFINED
#define SOAP_TYPE_PointerTo__saml2__union_AttributeStatementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__saml2__union_AttributeStatementType(struct soap*, struct __saml2__union_AttributeStatementType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__saml2__union_AttributeStatementType(struct soap*, const char *, int, struct __saml2__union_AttributeStatementType *const*, const char *);
SOAP_FMAC3 struct __saml2__union_AttributeStatementType ** SOAP_FMAC4 soap_in_PointerTo__saml2__union_AttributeStatementType(struct soap*, const char*, struct __saml2__union_AttributeStatementType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__saml2__union_AttributeStatementType(struct soap*, struct __saml2__union_AttributeStatementType *const*, const char*, const char*);
SOAP_FMAC3 struct __saml2__union_AttributeStatementType ** SOAP_FMAC4 soap_get_PointerTo__saml2__union_AttributeStatementType(struct soap*, struct __saml2__union_AttributeStatementType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__AttributeType_DEFINED
#define SOAP_TYPE_PointerTosaml2__AttributeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__AttributeType(struct soap*, struct saml2__AttributeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__AttributeType(struct soap*, const char *, int, struct saml2__AttributeType *const*, const char *);
SOAP_FMAC3 struct saml2__AttributeType ** SOAP_FMAC4 soap_in_PointerTosaml2__AttributeType(struct soap*, const char*, struct saml2__AttributeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__AttributeType(struct soap*, struct saml2__AttributeType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__AttributeType ** SOAP_FMAC4 soap_get_PointerTosaml2__AttributeType(struct soap*, struct saml2__AttributeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__EvidenceType_DEFINED
#define SOAP_TYPE_PointerTosaml2__EvidenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__EvidenceType(struct soap*, struct saml2__EvidenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__EvidenceType(struct soap*, const char *, int, struct saml2__EvidenceType *const*, const char *);
SOAP_FMAC3 struct saml2__EvidenceType ** SOAP_FMAC4 soap_in_PointerTosaml2__EvidenceType(struct soap*, const char*, struct saml2__EvidenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__EvidenceType(struct soap*, struct saml2__EvidenceType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__EvidenceType ** SOAP_FMAC4 soap_get_PointerTosaml2__EvidenceType(struct soap*, struct saml2__EvidenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__ActionType_DEFINED
#define SOAP_TYPE_PointerTosaml2__ActionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__ActionType(struct soap*, struct saml2__ActionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__ActionType(struct soap*, const char *, int, struct saml2__ActionType *const*, const char *);
SOAP_FMAC3 struct saml2__ActionType ** SOAP_FMAC4 soap_in_PointerTosaml2__ActionType(struct soap*, const char*, struct saml2__ActionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__ActionType(struct soap*, struct saml2__ActionType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__ActionType ** SOAP_FMAC4 soap_get_PointerTosaml2__ActionType(struct soap*, struct saml2__ActionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__AuthnContextType_DEFINED
#define SOAP_TYPE_PointerTosaml2__AuthnContextType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__AuthnContextType(struct soap*, struct saml2__AuthnContextType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__AuthnContextType(struct soap*, const char *, int, struct saml2__AuthnContextType *const*, const char *);
SOAP_FMAC3 struct saml2__AuthnContextType ** SOAP_FMAC4 soap_in_PointerTosaml2__AuthnContextType(struct soap*, const char*, struct saml2__AuthnContextType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__AuthnContextType(struct soap*, struct saml2__AuthnContextType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__AuthnContextType ** SOAP_FMAC4 soap_get_PointerTosaml2__AuthnContextType(struct soap*, struct saml2__AuthnContextType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__SubjectLocalityType_DEFINED
#define SOAP_TYPE_PointerTosaml2__SubjectLocalityType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__SubjectLocalityType(struct soap*, struct saml2__SubjectLocalityType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__SubjectLocalityType(struct soap*, const char *, int, struct saml2__SubjectLocalityType *const*, const char *);
SOAP_FMAC3 struct saml2__SubjectLocalityType ** SOAP_FMAC4 soap_in_PointerTosaml2__SubjectLocalityType(struct soap*, const char*, struct saml2__SubjectLocalityType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__SubjectLocalityType(struct soap*, struct saml2__SubjectLocalityType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__SubjectLocalityType ** SOAP_FMAC4 soap_get_PointerTosaml2__SubjectLocalityType(struct soap*, struct saml2__SubjectLocalityType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__saml2__union_EvidenceType_DEFINED
#define SOAP_TYPE_PointerTo__saml2__union_EvidenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__saml2__union_EvidenceType(struct soap*, struct __saml2__union_EvidenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__saml2__union_EvidenceType(struct soap*, const char *, int, struct __saml2__union_EvidenceType *const*, const char *);
SOAP_FMAC3 struct __saml2__union_EvidenceType ** SOAP_FMAC4 soap_in_PointerTo__saml2__union_EvidenceType(struct soap*, const char*, struct __saml2__union_EvidenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__saml2__union_EvidenceType(struct soap*, struct __saml2__union_EvidenceType *const*, const char*, const char*);
SOAP_FMAC3 struct __saml2__union_EvidenceType ** SOAP_FMAC4 soap_get_PointerTo__saml2__union_EvidenceType(struct soap*, struct __saml2__union_EvidenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__saml2__union_AdviceType_DEFINED
#define SOAP_TYPE_PointerTo__saml2__union_AdviceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__saml2__union_AdviceType(struct soap*, struct __saml2__union_AdviceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__saml2__union_AdviceType(struct soap*, const char *, int, struct __saml2__union_AdviceType *const*, const char *);
SOAP_FMAC3 struct __saml2__union_AdviceType ** SOAP_FMAC4 soap_in_PointerTo__saml2__union_AdviceType(struct soap*, const char*, struct __saml2__union_AdviceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__saml2__union_AdviceType(struct soap*, struct __saml2__union_AdviceType *const*, const char*, const char*);
SOAP_FMAC3 struct __saml2__union_AdviceType ** SOAP_FMAC4 soap_get_PointerTo__saml2__union_AdviceType(struct soap*, struct __saml2__union_AdviceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__AssertionType_DEFINED
#define SOAP_TYPE_PointerTosaml2__AssertionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__AssertionType(struct soap*, struct saml2__AssertionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__AssertionType(struct soap*, const char *, int, struct saml2__AssertionType *const*, const char *);
SOAP_FMAC3 struct saml2__AssertionType ** SOAP_FMAC4 soap_in_PointerTosaml2__AssertionType(struct soap*, const char*, struct saml2__AssertionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__AssertionType(struct soap*, struct saml2__AssertionType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__AssertionType ** SOAP_FMAC4 soap_get_PointerTosaml2__AssertionType(struct soap*, struct saml2__AssertionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__saml2__union_ConditionsType_DEFINED
#define SOAP_TYPE_PointerTo__saml2__union_ConditionsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__saml2__union_ConditionsType(struct soap*, struct __saml2__union_ConditionsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__saml2__union_ConditionsType(struct soap*, const char *, int, struct __saml2__union_ConditionsType *const*, const char *);
SOAP_FMAC3 struct __saml2__union_ConditionsType ** SOAP_FMAC4 soap_in_PointerTo__saml2__union_ConditionsType(struct soap*, const char*, struct __saml2__union_ConditionsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__saml2__union_ConditionsType(struct soap*, struct __saml2__union_ConditionsType *const*, const char*, const char*);
SOAP_FMAC3 struct __saml2__union_ConditionsType ** SOAP_FMAC4 soap_get_PointerTo__saml2__union_ConditionsType(struct soap*, struct __saml2__union_ConditionsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__ProxyRestrictionType_DEFINED
#define SOAP_TYPE_PointerTosaml2__ProxyRestrictionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__ProxyRestrictionType(struct soap*, struct saml2__ProxyRestrictionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__ProxyRestrictionType(struct soap*, const char *, int, struct saml2__ProxyRestrictionType *const*, const char *);
SOAP_FMAC3 struct saml2__ProxyRestrictionType ** SOAP_FMAC4 soap_in_PointerTosaml2__ProxyRestrictionType(struct soap*, const char*, struct saml2__ProxyRestrictionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__ProxyRestrictionType(struct soap*, struct saml2__ProxyRestrictionType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__ProxyRestrictionType ** SOAP_FMAC4 soap_get_PointerTosaml2__ProxyRestrictionType(struct soap*, struct saml2__ProxyRestrictionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__OneTimeUseType_DEFINED
#define SOAP_TYPE_PointerTosaml2__OneTimeUseType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__OneTimeUseType(struct soap*, struct saml2__OneTimeUseType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__OneTimeUseType(struct soap*, const char *, int, struct saml2__OneTimeUseType *const*, const char *);
SOAP_FMAC3 struct saml2__OneTimeUseType ** SOAP_FMAC4 soap_in_PointerTosaml2__OneTimeUseType(struct soap*, const char*, struct saml2__OneTimeUseType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__OneTimeUseType(struct soap*, struct saml2__OneTimeUseType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__OneTimeUseType ** SOAP_FMAC4 soap_get_PointerTosaml2__OneTimeUseType(struct soap*, struct saml2__OneTimeUseType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__AudienceRestrictionType_DEFINED
#define SOAP_TYPE_PointerTosaml2__AudienceRestrictionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__AudienceRestrictionType(struct soap*, struct saml2__AudienceRestrictionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__AudienceRestrictionType(struct soap*, const char *, int, struct saml2__AudienceRestrictionType *const*, const char *);
SOAP_FMAC3 struct saml2__AudienceRestrictionType ** SOAP_FMAC4 soap_in_PointerTosaml2__AudienceRestrictionType(struct soap*, const char*, struct saml2__AudienceRestrictionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__AudienceRestrictionType(struct soap*, struct saml2__AudienceRestrictionType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__AudienceRestrictionType ** SOAP_FMAC4 soap_get_PointerTosaml2__AudienceRestrictionType(struct soap*, struct saml2__AudienceRestrictionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__ConditionAbstractType_DEFINED
#define SOAP_TYPE_PointerTosaml2__ConditionAbstractType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__ConditionAbstractType(struct soap*, struct saml2__ConditionAbstractType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__ConditionAbstractType(struct soap*, const char *, int, struct saml2__ConditionAbstractType *const*, const char *);
SOAP_FMAC3 struct saml2__ConditionAbstractType ** SOAP_FMAC4 soap_in_PointerTosaml2__ConditionAbstractType(struct soap*, const char*, struct saml2__ConditionAbstractType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__ConditionAbstractType(struct soap*, struct saml2__ConditionAbstractType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__ConditionAbstractType ** SOAP_FMAC4 soap_get_PointerTosaml2__ConditionAbstractType(struct soap*, struct saml2__ConditionAbstractType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__SubjectConfirmationDataType_DEFINED
#define SOAP_TYPE_PointerTosaml2__SubjectConfirmationDataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__SubjectConfirmationDataType(struct soap*, struct saml2__SubjectConfirmationDataType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__SubjectConfirmationDataType(struct soap*, const char *, int, struct saml2__SubjectConfirmationDataType *const*, const char *);
SOAP_FMAC3 struct saml2__SubjectConfirmationDataType ** SOAP_FMAC4 soap_in_PointerTosaml2__SubjectConfirmationDataType(struct soap*, const char*, struct saml2__SubjectConfirmationDataType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__SubjectConfirmationDataType(struct soap*, struct saml2__SubjectConfirmationDataType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__SubjectConfirmationDataType ** SOAP_FMAC4 soap_get_PointerTosaml2__SubjectConfirmationDataType(struct soap*, struct saml2__SubjectConfirmationDataType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__SubjectConfirmationType_DEFINED
#define SOAP_TYPE_PointerTosaml2__SubjectConfirmationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__SubjectConfirmationType(struct soap*, struct saml2__SubjectConfirmationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__SubjectConfirmationType(struct soap*, const char *, int, struct saml2__SubjectConfirmationType *const*, const char *);
SOAP_FMAC3 struct saml2__SubjectConfirmationType ** SOAP_FMAC4 soap_in_PointerTosaml2__SubjectConfirmationType(struct soap*, const char*, struct saml2__SubjectConfirmationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__SubjectConfirmationType(struct soap*, struct saml2__SubjectConfirmationType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__SubjectConfirmationType ** SOAP_FMAC4 soap_get_PointerTosaml2__SubjectConfirmationType(struct soap*, struct saml2__SubjectConfirmationType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__EncryptedElementType_DEFINED
#define SOAP_TYPE_PointerTosaml2__EncryptedElementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__EncryptedElementType(struct soap*, struct saml2__EncryptedElementType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__EncryptedElementType(struct soap*, const char *, int, struct saml2__EncryptedElementType *const*, const char *);
SOAP_FMAC3 struct saml2__EncryptedElementType ** SOAP_FMAC4 soap_in_PointerTosaml2__EncryptedElementType(struct soap*, const char*, struct saml2__EncryptedElementType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__EncryptedElementType(struct soap*, struct saml2__EncryptedElementType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__EncryptedElementType ** SOAP_FMAC4 soap_get_PointerTosaml2__EncryptedElementType(struct soap*, struct saml2__EncryptedElementType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__BaseIDAbstractType_DEFINED
#define SOAP_TYPE_PointerTosaml2__BaseIDAbstractType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__BaseIDAbstractType(struct soap*, struct saml2__BaseIDAbstractType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__BaseIDAbstractType(struct soap*, const char *, int, struct saml2__BaseIDAbstractType *const*, const char *);
SOAP_FMAC3 struct saml2__BaseIDAbstractType ** SOAP_FMAC4 soap_in_PointerTosaml2__BaseIDAbstractType(struct soap*, const char*, struct saml2__BaseIDAbstractType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__BaseIDAbstractType(struct soap*, struct saml2__BaseIDAbstractType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__BaseIDAbstractType ** SOAP_FMAC4 soap_get_PointerTosaml2__BaseIDAbstractType(struct soap*, struct saml2__BaseIDAbstractType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__saml2__union_AssertionType_DEFINED
#define SOAP_TYPE_PointerTo__saml2__union_AssertionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__saml2__union_AssertionType(struct soap*, struct __saml2__union_AssertionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__saml2__union_AssertionType(struct soap*, const char *, int, struct __saml2__union_AssertionType *const*, const char *);
SOAP_FMAC3 struct __saml2__union_AssertionType ** SOAP_FMAC4 soap_in_PointerTo__saml2__union_AssertionType(struct soap*, const char*, struct __saml2__union_AssertionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__saml2__union_AssertionType(struct soap*, struct __saml2__union_AssertionType *const*, const char*, const char*);
SOAP_FMAC3 struct __saml2__union_AssertionType ** SOAP_FMAC4 soap_get_PointerTo__saml2__union_AssertionType(struct soap*, struct __saml2__union_AssertionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__AttributeStatementType_DEFINED
#define SOAP_TYPE_PointerTosaml2__AttributeStatementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__AttributeStatementType(struct soap*, struct saml2__AttributeStatementType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__AttributeStatementType(struct soap*, const char *, int, struct saml2__AttributeStatementType *const*, const char *);
SOAP_FMAC3 struct saml2__AttributeStatementType ** SOAP_FMAC4 soap_in_PointerTosaml2__AttributeStatementType(struct soap*, const char*, struct saml2__AttributeStatementType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__AttributeStatementType(struct soap*, struct saml2__AttributeStatementType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__AttributeStatementType ** SOAP_FMAC4 soap_get_PointerTosaml2__AttributeStatementType(struct soap*, struct saml2__AttributeStatementType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__AuthzDecisionStatementType_DEFINED
#define SOAP_TYPE_PointerTosaml2__AuthzDecisionStatementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__AuthzDecisionStatementType(struct soap*, struct saml2__AuthzDecisionStatementType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__AuthzDecisionStatementType(struct soap*, const char *, int, struct saml2__AuthzDecisionStatementType *const*, const char *);
SOAP_FMAC3 struct saml2__AuthzDecisionStatementType ** SOAP_FMAC4 soap_in_PointerTosaml2__AuthzDecisionStatementType(struct soap*, const char*, struct saml2__AuthzDecisionStatementType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__AuthzDecisionStatementType(struct soap*, struct saml2__AuthzDecisionStatementType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__AuthzDecisionStatementType ** SOAP_FMAC4 soap_get_PointerTosaml2__AuthzDecisionStatementType(struct soap*, struct saml2__AuthzDecisionStatementType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__AuthnStatementType_DEFINED
#define SOAP_TYPE_PointerTosaml2__AuthnStatementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__AuthnStatementType(struct soap*, struct saml2__AuthnStatementType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__AuthnStatementType(struct soap*, const char *, int, struct saml2__AuthnStatementType *const*, const char *);
SOAP_FMAC3 struct saml2__AuthnStatementType ** SOAP_FMAC4 soap_in_PointerTosaml2__AuthnStatementType(struct soap*, const char*, struct saml2__AuthnStatementType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__AuthnStatementType(struct soap*, struct saml2__AuthnStatementType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__AuthnStatementType ** SOAP_FMAC4 soap_get_PointerTosaml2__AuthnStatementType(struct soap*, struct saml2__AuthnStatementType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__StatementAbstractType_DEFINED
#define SOAP_TYPE_PointerTosaml2__StatementAbstractType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__StatementAbstractType(struct soap*, struct saml2__StatementAbstractType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__StatementAbstractType(struct soap*, const char *, int, struct saml2__StatementAbstractType *const*, const char *);
SOAP_FMAC3 struct saml2__StatementAbstractType ** SOAP_FMAC4 soap_in_PointerTosaml2__StatementAbstractType(struct soap*, const char*, struct saml2__StatementAbstractType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__StatementAbstractType(struct soap*, struct saml2__StatementAbstractType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__StatementAbstractType ** SOAP_FMAC4 soap_get_PointerTosaml2__StatementAbstractType(struct soap*, struct saml2__StatementAbstractType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__AdviceType_DEFINED
#define SOAP_TYPE_PointerTosaml2__AdviceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__AdviceType(struct soap*, struct saml2__AdviceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__AdviceType(struct soap*, const char *, int, struct saml2__AdviceType *const*, const char *);
SOAP_FMAC3 struct saml2__AdviceType ** SOAP_FMAC4 soap_in_PointerTosaml2__AdviceType(struct soap*, const char*, struct saml2__AdviceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__AdviceType(struct soap*, struct saml2__AdviceType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__AdviceType ** SOAP_FMAC4 soap_get_PointerTosaml2__AdviceType(struct soap*, struct saml2__AdviceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__ConditionsType_DEFINED
#define SOAP_TYPE_PointerTosaml2__ConditionsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__ConditionsType(struct soap*, struct saml2__ConditionsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__ConditionsType(struct soap*, const char *, int, struct saml2__ConditionsType *const*, const char *);
SOAP_FMAC3 struct saml2__ConditionsType ** SOAP_FMAC4 soap_in_PointerTosaml2__ConditionsType(struct soap*, const char*, struct saml2__ConditionsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__ConditionsType(struct soap*, struct saml2__ConditionsType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__ConditionsType ** SOAP_FMAC4 soap_get_PointerTosaml2__ConditionsType(struct soap*, struct saml2__ConditionsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__SubjectType_DEFINED
#define SOAP_TYPE_PointerTosaml2__SubjectType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__SubjectType(struct soap*, struct saml2__SubjectType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__SubjectType(struct soap*, const char *, int, struct saml2__SubjectType *const*, const char *);
SOAP_FMAC3 struct saml2__SubjectType ** SOAP_FMAC4 soap_in_PointerTosaml2__SubjectType(struct soap*, const char*, struct saml2__SubjectType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__SubjectType(struct soap*, struct saml2__SubjectType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__SubjectType ** SOAP_FMAC4 soap_get_PointerTosaml2__SubjectType(struct soap*, struct saml2__SubjectType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__NameIDType_DEFINED
#define SOAP_TYPE_PointerTosaml2__NameIDType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__NameIDType(struct soap*, struct saml2__NameIDType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__NameIDType(struct soap*, const char *, int, struct saml2__NameIDType *const*, const char *);
SOAP_FMAC3 struct saml2__NameIDType ** SOAP_FMAC4 soap_in_PointerTosaml2__NameIDType(struct soap*, const char*, struct saml2__NameIDType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__NameIDType(struct soap*, struct saml2__NameIDType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__NameIDType ** SOAP_FMAC4 soap_get_PointerTosaml2__NameIDType(struct soap*, struct saml2__NameIDType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerToxenc__EncryptedKeyType_DEFINED
#define SOAP_TYPE_PointerToPointerToxenc__EncryptedKeyType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToxenc__EncryptedKeyType(struct soap*, struct xenc__EncryptedKeyType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToxenc__EncryptedKeyType(struct soap*, const char *, int, struct xenc__EncryptedKeyType **const*, const char *);
SOAP_FMAC3 struct xenc__EncryptedKeyType *** SOAP_FMAC4 soap_in_PointerToPointerToxenc__EncryptedKeyType(struct soap*, const char*, struct xenc__EncryptedKeyType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToxenc__EncryptedKeyType(struct soap*, struct xenc__EncryptedKeyType **const*, const char*, const char*);
SOAP_FMAC3 struct xenc__EncryptedKeyType *** SOAP_FMAC4 soap_get_PointerToPointerToxenc__EncryptedKeyType(struct soap*, struct xenc__EncryptedKeyType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxenc__EncryptedKeyType_DEFINED
#define SOAP_TYPE_PointerToxenc__EncryptedKeyType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxenc__EncryptedKeyType(struct soap*, struct xenc__EncryptedKeyType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxenc__EncryptedKeyType(struct soap*, const char *, int, struct xenc__EncryptedKeyType *const*, const char *);
SOAP_FMAC3 struct xenc__EncryptedKeyType ** SOAP_FMAC4 soap_in_PointerToxenc__EncryptedKeyType(struct soap*, const char*, struct xenc__EncryptedKeyType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxenc__EncryptedKeyType(struct soap*, struct xenc__EncryptedKeyType *const*, const char*, const char*);
SOAP_FMAC3 struct xenc__EncryptedKeyType ** SOAP_FMAC4 soap_get_PointerToxenc__EncryptedKeyType(struct soap*, struct xenc__EncryptedKeyType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__AttributeType_DEFINED
#define SOAP_TYPE_PointerTosaml1__AttributeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__AttributeType(struct soap*, struct saml1__AttributeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__AttributeType(struct soap*, const char *, int, struct saml1__AttributeType *const*, const char *);
SOAP_FMAC3 struct saml1__AttributeType ** SOAP_FMAC4 soap_in_PointerTosaml1__AttributeType(struct soap*, const char*, struct saml1__AttributeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__AttributeType(struct soap*, struct saml1__AttributeType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__AttributeType ** SOAP_FMAC4 soap_get_PointerTosaml1__AttributeType(struct soap*, struct saml1__AttributeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__EvidenceType_DEFINED
#define SOAP_TYPE_PointerTosaml1__EvidenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__EvidenceType(struct soap*, struct saml1__EvidenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__EvidenceType(struct soap*, const char *, int, struct saml1__EvidenceType *const*, const char *);
SOAP_FMAC3 struct saml1__EvidenceType ** SOAP_FMAC4 soap_in_PointerTosaml1__EvidenceType(struct soap*, const char*, struct saml1__EvidenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__EvidenceType(struct soap*, struct saml1__EvidenceType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__EvidenceType ** SOAP_FMAC4 soap_get_PointerTosaml1__EvidenceType(struct soap*, struct saml1__EvidenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__ActionType_DEFINED
#define SOAP_TYPE_PointerTosaml1__ActionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__ActionType(struct soap*, struct saml1__ActionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__ActionType(struct soap*, const char *, int, struct saml1__ActionType *const*, const char *);
SOAP_FMAC3 struct saml1__ActionType ** SOAP_FMAC4 soap_in_PointerTosaml1__ActionType(struct soap*, const char*, struct saml1__ActionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__ActionType(struct soap*, struct saml1__ActionType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__ActionType ** SOAP_FMAC4 soap_get_PointerTosaml1__ActionType(struct soap*, struct saml1__ActionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__AuthorityBindingType_DEFINED
#define SOAP_TYPE_PointerTosaml1__AuthorityBindingType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__AuthorityBindingType(struct soap*, struct saml1__AuthorityBindingType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__AuthorityBindingType(struct soap*, const char *, int, struct saml1__AuthorityBindingType *const*, const char *);
SOAP_FMAC3 struct saml1__AuthorityBindingType ** SOAP_FMAC4 soap_in_PointerTosaml1__AuthorityBindingType(struct soap*, const char*, struct saml1__AuthorityBindingType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__AuthorityBindingType(struct soap*, struct saml1__AuthorityBindingType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__AuthorityBindingType ** SOAP_FMAC4 soap_get_PointerTosaml1__AuthorityBindingType(struct soap*, struct saml1__AuthorityBindingType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__SubjectLocalityType_DEFINED
#define SOAP_TYPE_PointerTosaml1__SubjectLocalityType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__SubjectLocalityType(struct soap*, struct saml1__SubjectLocalityType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__SubjectLocalityType(struct soap*, const char *, int, struct saml1__SubjectLocalityType *const*, const char *);
SOAP_FMAC3 struct saml1__SubjectLocalityType ** SOAP_FMAC4 soap_in_PointerTosaml1__SubjectLocalityType(struct soap*, const char*, struct saml1__SubjectLocalityType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__SubjectLocalityType(struct soap*, struct saml1__SubjectLocalityType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__SubjectLocalityType ** SOAP_FMAC4 soap_get_PointerTosaml1__SubjectLocalityType(struct soap*, struct saml1__SubjectLocalityType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_XML_DEFINED
#define SOAP_TYPE_PointerTo_XML_DEFINED
#endif

#ifndef SOAP_TYPE_PointerTosaml1__SubjectType_DEFINED
#define SOAP_TYPE_PointerTosaml1__SubjectType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__SubjectType(struct soap*, struct saml1__SubjectType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__SubjectType(struct soap*, const char *, int, struct saml1__SubjectType *const*, const char *);
SOAP_FMAC3 struct saml1__SubjectType ** SOAP_FMAC4 soap_in_PointerTosaml1__SubjectType(struct soap*, const char*, struct saml1__SubjectType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__SubjectType(struct soap*, struct saml1__SubjectType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__SubjectType ** SOAP_FMAC4 soap_get_PointerTosaml1__SubjectType(struct soap*, struct saml1__SubjectType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__saml1__union_EvidenceType_DEFINED
#define SOAP_TYPE_PointerTo__saml1__union_EvidenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__saml1__union_EvidenceType(struct soap*, struct __saml1__union_EvidenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__saml1__union_EvidenceType(struct soap*, const char *, int, struct __saml1__union_EvidenceType *const*, const char *);
SOAP_FMAC3 struct __saml1__union_EvidenceType ** SOAP_FMAC4 soap_in_PointerTo__saml1__union_EvidenceType(struct soap*, const char*, struct __saml1__union_EvidenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__saml1__union_EvidenceType(struct soap*, struct __saml1__union_EvidenceType *const*, const char*, const char*);
SOAP_FMAC3 struct __saml1__union_EvidenceType ** SOAP_FMAC4 soap_get_PointerTo__saml1__union_EvidenceType(struct soap*, struct __saml1__union_EvidenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__SubjectConfirmationType_DEFINED
#define SOAP_TYPE_PointerTosaml1__SubjectConfirmationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__SubjectConfirmationType(struct soap*, struct saml1__SubjectConfirmationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__SubjectConfirmationType(struct soap*, const char *, int, struct saml1__SubjectConfirmationType *const*, const char *);
SOAP_FMAC3 struct saml1__SubjectConfirmationType ** SOAP_FMAC4 soap_in_PointerTosaml1__SubjectConfirmationType(struct soap*, const char*, struct saml1__SubjectConfirmationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__SubjectConfirmationType(struct soap*, struct saml1__SubjectConfirmationType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__SubjectConfirmationType ** SOAP_FMAC4 soap_get_PointerTosaml1__SubjectConfirmationType(struct soap*, struct saml1__SubjectConfirmationType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__NameIdentifierType_DEFINED
#define SOAP_TYPE_PointerTosaml1__NameIdentifierType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__NameIdentifierType(struct soap*, struct saml1__NameIdentifierType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__NameIdentifierType(struct soap*, const char *, int, struct saml1__NameIdentifierType *const*, const char *);
SOAP_FMAC3 struct saml1__NameIdentifierType ** SOAP_FMAC4 soap_in_PointerTosaml1__NameIdentifierType(struct soap*, const char*, struct saml1__NameIdentifierType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__NameIdentifierType(struct soap*, struct saml1__NameIdentifierType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__NameIdentifierType ** SOAP_FMAC4 soap_get_PointerTosaml1__NameIdentifierType(struct soap*, struct saml1__NameIdentifierType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__saml1__union_AdviceType_DEFINED
#define SOAP_TYPE_PointerTo__saml1__union_AdviceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__saml1__union_AdviceType(struct soap*, struct __saml1__union_AdviceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__saml1__union_AdviceType(struct soap*, const char *, int, struct __saml1__union_AdviceType *const*, const char *);
SOAP_FMAC3 struct __saml1__union_AdviceType ** SOAP_FMAC4 soap_in_PointerTo__saml1__union_AdviceType(struct soap*, const char*, struct __saml1__union_AdviceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__saml1__union_AdviceType(struct soap*, struct __saml1__union_AdviceType *const*, const char*, const char*);
SOAP_FMAC3 struct __saml1__union_AdviceType ** SOAP_FMAC4 soap_get_PointerTo__saml1__union_AdviceType(struct soap*, struct __saml1__union_AdviceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__AssertionType_DEFINED
#define SOAP_TYPE_PointerTosaml1__AssertionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__AssertionType(struct soap*, struct saml1__AssertionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__AssertionType(struct soap*, const char *, int, struct saml1__AssertionType *const*, const char *);
SOAP_FMAC3 struct saml1__AssertionType ** SOAP_FMAC4 soap_in_PointerTosaml1__AssertionType(struct soap*, const char*, struct saml1__AssertionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__AssertionType(struct soap*, struct saml1__AssertionType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__AssertionType ** SOAP_FMAC4 soap_get_PointerTosaml1__AssertionType(struct soap*, struct saml1__AssertionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTodateTime_DEFINED
#define SOAP_TYPE_PointerTodateTime_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTodateTime(struct soap*, time_t *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTodateTime(struct soap*, const char *, int, time_t *const*, const char *);
SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_in_PointerTodateTime(struct soap*, const char*, time_t **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTodateTime(struct soap*, time_t *const*, const char*, const char*);
SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_get_PointerTodateTime(struct soap*, time_t **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__saml1__union_ConditionsType_DEFINED
#define SOAP_TYPE_PointerTo__saml1__union_ConditionsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__saml1__union_ConditionsType(struct soap*, struct __saml1__union_ConditionsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__saml1__union_ConditionsType(struct soap*, const char *, int, struct __saml1__union_ConditionsType *const*, const char *);
SOAP_FMAC3 struct __saml1__union_ConditionsType ** SOAP_FMAC4 soap_in_PointerTo__saml1__union_ConditionsType(struct soap*, const char*, struct __saml1__union_ConditionsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__saml1__union_ConditionsType(struct soap*, struct __saml1__union_ConditionsType *const*, const char*, const char*);
SOAP_FMAC3 struct __saml1__union_ConditionsType ** SOAP_FMAC4 soap_get_PointerTo__saml1__union_ConditionsType(struct soap*, struct __saml1__union_ConditionsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__ConditionAbstractType_DEFINED
#define SOAP_TYPE_PointerTosaml1__ConditionAbstractType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__ConditionAbstractType(struct soap*, struct saml1__ConditionAbstractType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__ConditionAbstractType(struct soap*, const char *, int, struct saml1__ConditionAbstractType *const*, const char *);
SOAP_FMAC3 struct saml1__ConditionAbstractType ** SOAP_FMAC4 soap_in_PointerTosaml1__ConditionAbstractType(struct soap*, const char*, struct saml1__ConditionAbstractType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__ConditionAbstractType(struct soap*, struct saml1__ConditionAbstractType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__ConditionAbstractType ** SOAP_FMAC4 soap_get_PointerTosaml1__ConditionAbstractType(struct soap*, struct saml1__ConditionAbstractType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__DoNotCacheConditionType_DEFINED
#define SOAP_TYPE_PointerTosaml1__DoNotCacheConditionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__DoNotCacheConditionType(struct soap*, struct saml1__DoNotCacheConditionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__DoNotCacheConditionType(struct soap*, const char *, int, struct saml1__DoNotCacheConditionType *const*, const char *);
SOAP_FMAC3 struct saml1__DoNotCacheConditionType ** SOAP_FMAC4 soap_in_PointerTosaml1__DoNotCacheConditionType(struct soap*, const char*, struct saml1__DoNotCacheConditionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__DoNotCacheConditionType(struct soap*, struct saml1__DoNotCacheConditionType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__DoNotCacheConditionType ** SOAP_FMAC4 soap_get_PointerTosaml1__DoNotCacheConditionType(struct soap*, struct saml1__DoNotCacheConditionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__AudienceRestrictionConditionType_DEFINED
#define SOAP_TYPE_PointerTosaml1__AudienceRestrictionConditionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__AudienceRestrictionConditionType(struct soap*, struct saml1__AudienceRestrictionConditionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__AudienceRestrictionConditionType(struct soap*, const char *, int, struct saml1__AudienceRestrictionConditionType *const*, const char *);
SOAP_FMAC3 struct saml1__AudienceRestrictionConditionType ** SOAP_FMAC4 soap_in_PointerTosaml1__AudienceRestrictionConditionType(struct soap*, const char*, struct saml1__AudienceRestrictionConditionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__AudienceRestrictionConditionType(struct soap*, struct saml1__AudienceRestrictionConditionType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__AudienceRestrictionConditionType ** SOAP_FMAC4 soap_get_PointerTosaml1__AudienceRestrictionConditionType(struct soap*, struct saml1__AudienceRestrictionConditionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ds__Signature_DEFINED
#define SOAP_TYPE_PointerTo_ds__Signature_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ds__Signature(struct soap*, struct ds__SignatureType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ds__Signature(struct soap*, const char *, int, struct ds__SignatureType *const*, const char *);
SOAP_FMAC3 struct ds__SignatureType ** SOAP_FMAC4 soap_in_PointerTo_ds__Signature(struct soap*, const char*, struct ds__SignatureType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ds__Signature(struct soap*, struct ds__SignatureType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__SignatureType ** SOAP_FMAC4 soap_get_PointerTo_ds__Signature(struct soap*, struct ds__SignatureType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__saml1__union_AssertionType_DEFINED
#define SOAP_TYPE_PointerTo__saml1__union_AssertionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__saml1__union_AssertionType(struct soap*, struct __saml1__union_AssertionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__saml1__union_AssertionType(struct soap*, const char *, int, struct __saml1__union_AssertionType *const*, const char *);
SOAP_FMAC3 struct __saml1__union_AssertionType ** SOAP_FMAC4 soap_in_PointerTo__saml1__union_AssertionType(struct soap*, const char*, struct __saml1__union_AssertionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__saml1__union_AssertionType(struct soap*, struct __saml1__union_AssertionType *const*, const char*, const char*);
SOAP_FMAC3 struct __saml1__union_AssertionType ** SOAP_FMAC4 soap_get_PointerTo__saml1__union_AssertionType(struct soap*, struct __saml1__union_AssertionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__AttributeStatementType_DEFINED
#define SOAP_TYPE_PointerTosaml1__AttributeStatementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__AttributeStatementType(struct soap*, struct saml1__AttributeStatementType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__AttributeStatementType(struct soap*, const char *, int, struct saml1__AttributeStatementType *const*, const char *);
SOAP_FMAC3 struct saml1__AttributeStatementType ** SOAP_FMAC4 soap_in_PointerTosaml1__AttributeStatementType(struct soap*, const char*, struct saml1__AttributeStatementType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__AttributeStatementType(struct soap*, struct saml1__AttributeStatementType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__AttributeStatementType ** SOAP_FMAC4 soap_get_PointerTosaml1__AttributeStatementType(struct soap*, struct saml1__AttributeStatementType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__AuthorizationDecisionStatementType_DEFINED
#define SOAP_TYPE_PointerTosaml1__AuthorizationDecisionStatementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__AuthorizationDecisionStatementType(struct soap*, struct saml1__AuthorizationDecisionStatementType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__AuthorizationDecisionStatementType(struct soap*, const char *, int, struct saml1__AuthorizationDecisionStatementType *const*, const char *);
SOAP_FMAC3 struct saml1__AuthorizationDecisionStatementType ** SOAP_FMAC4 soap_in_PointerTosaml1__AuthorizationDecisionStatementType(struct soap*, const char*, struct saml1__AuthorizationDecisionStatementType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__AuthorizationDecisionStatementType(struct soap*, struct saml1__AuthorizationDecisionStatementType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__AuthorizationDecisionStatementType ** SOAP_FMAC4 soap_get_PointerTosaml1__AuthorizationDecisionStatementType(struct soap*, struct saml1__AuthorizationDecisionStatementType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__AuthenticationStatementType_DEFINED
#define SOAP_TYPE_PointerTosaml1__AuthenticationStatementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__AuthenticationStatementType(struct soap*, struct saml1__AuthenticationStatementType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__AuthenticationStatementType(struct soap*, const char *, int, struct saml1__AuthenticationStatementType *const*, const char *);
SOAP_FMAC3 struct saml1__AuthenticationStatementType ** SOAP_FMAC4 soap_in_PointerTosaml1__AuthenticationStatementType(struct soap*, const char*, struct saml1__AuthenticationStatementType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__AuthenticationStatementType(struct soap*, struct saml1__AuthenticationStatementType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__AuthenticationStatementType ** SOAP_FMAC4 soap_get_PointerTosaml1__AuthenticationStatementType(struct soap*, struct saml1__AuthenticationStatementType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__SubjectStatementAbstractType_DEFINED
#define SOAP_TYPE_PointerTosaml1__SubjectStatementAbstractType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__SubjectStatementAbstractType(struct soap*, struct saml1__SubjectStatementAbstractType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__SubjectStatementAbstractType(struct soap*, const char *, int, struct saml1__SubjectStatementAbstractType *const*, const char *);
SOAP_FMAC3 struct saml1__SubjectStatementAbstractType ** SOAP_FMAC4 soap_in_PointerTosaml1__SubjectStatementAbstractType(struct soap*, const char*, struct saml1__SubjectStatementAbstractType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__SubjectStatementAbstractType(struct soap*, struct saml1__SubjectStatementAbstractType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__SubjectStatementAbstractType ** SOAP_FMAC4 soap_get_PointerTosaml1__SubjectStatementAbstractType(struct soap*, struct saml1__SubjectStatementAbstractType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__StatementAbstractType_DEFINED
#define SOAP_TYPE_PointerTosaml1__StatementAbstractType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__StatementAbstractType(struct soap*, struct saml1__StatementAbstractType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__StatementAbstractType(struct soap*, const char *, int, struct saml1__StatementAbstractType *const*, const char *);
SOAP_FMAC3 struct saml1__StatementAbstractType ** SOAP_FMAC4 soap_in_PointerTosaml1__StatementAbstractType(struct soap*, const char*, struct saml1__StatementAbstractType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__StatementAbstractType(struct soap*, struct saml1__StatementAbstractType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__StatementAbstractType ** SOAP_FMAC4 soap_get_PointerTosaml1__StatementAbstractType(struct soap*, struct saml1__StatementAbstractType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__AdviceType_DEFINED
#define SOAP_TYPE_PointerTosaml1__AdviceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__AdviceType(struct soap*, struct saml1__AdviceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__AdviceType(struct soap*, const char *, int, struct saml1__AdviceType *const*, const char *);
SOAP_FMAC3 struct saml1__AdviceType ** SOAP_FMAC4 soap_in_PointerTosaml1__AdviceType(struct soap*, const char*, struct saml1__AdviceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__AdviceType(struct soap*, struct saml1__AdviceType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__AdviceType ** SOAP_FMAC4 soap_get_PointerTosaml1__AdviceType(struct soap*, struct saml1__AdviceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__ConditionsType_DEFINED
#define SOAP_TYPE_PointerTosaml1__ConditionsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__ConditionsType(struct soap*, struct saml1__ConditionsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__ConditionsType(struct soap*, const char *, int, struct saml1__ConditionsType *const*, const char *);
SOAP_FMAC3 struct saml1__ConditionsType ** SOAP_FMAC4 soap_in_PointerTosaml1__ConditionsType(struct soap*, const char*, struct saml1__ConditionsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__ConditionsType(struct soap*, struct saml1__ConditionsType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__ConditionsType ** SOAP_FMAC4 soap_get_PointerTosaml1__ConditionsType(struct soap*, struct saml1__ConditionsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__wsc__DerivedKeyTokenType_sequence_DEFINED
#define SOAP_TYPE_PointerTo__wsc__DerivedKeyTokenType_sequence_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__wsc__DerivedKeyTokenType_sequence(struct soap*, struct __wsc__DerivedKeyTokenType_sequence *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__wsc__DerivedKeyTokenType_sequence(struct soap*, const char *, int, struct __wsc__DerivedKeyTokenType_sequence *const*, const char *);
SOAP_FMAC3 struct __wsc__DerivedKeyTokenType_sequence ** SOAP_FMAC4 soap_in_PointerTo__wsc__DerivedKeyTokenType_sequence(struct soap*, const char*, struct __wsc__DerivedKeyTokenType_sequence **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__wsc__DerivedKeyTokenType_sequence(struct soap*, struct __wsc__DerivedKeyTokenType_sequence *const*, const char*, const char*);
SOAP_FMAC3 struct __wsc__DerivedKeyTokenType_sequence ** SOAP_FMAC4 soap_get_PointerTo__wsc__DerivedKeyTokenType_sequence(struct soap*, struct __wsc__DerivedKeyTokenType_sequence **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToULONG64_DEFINED
#define SOAP_TYPE_PointerToULONG64_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToULONG64(struct soap*, ULONG64 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToULONG64(struct soap*, const char *, int, ULONG64 *const*, const char *);
SOAP_FMAC3 ULONG64 ** SOAP_FMAC4 soap_in_PointerToULONG64(struct soap*, const char*, ULONG64 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToULONG64(struct soap*, ULONG64 *const*, const char*, const char*);
SOAP_FMAC3 ULONG64 ** SOAP_FMAC4 soap_get_PointerToULONG64(struct soap*, ULONG64 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsc__PropertiesType_DEFINED
#define SOAP_TYPE_PointerTowsc__PropertiesType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsc__PropertiesType(struct soap*, struct wsc__PropertiesType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsc__PropertiesType(struct soap*, const char *, int, struct wsc__PropertiesType *const*, const char *);
SOAP_FMAC3 struct wsc__PropertiesType ** SOAP_FMAC4 soap_in_PointerTowsc__PropertiesType(struct soap*, const char*, struct wsc__PropertiesType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsc__PropertiesType(struct soap*, struct wsc__PropertiesType *const*, const char*, const char*);
SOAP_FMAC3 struct wsc__PropertiesType ** SOAP_FMAC4 soap_get_PointerTowsc__PropertiesType(struct soap*, struct wsc__PropertiesType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_wsc__FaultCodeOpenEnumType_DEFINED
#define SOAP_TYPE_wsc__FaultCodeOpenEnumType_DEFINED

inline void soap_default_wsc__FaultCodeOpenEnumType(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wsc__FaultCodeOpenEnumType
	*a = SOAP_DEFAULT_wsc__FaultCodeOpenEnumType;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsc__FaultCodeOpenEnumType(struct soap*, char *const*);

#define soap_wsc__FaultCodeOpenEnumType2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsc__FaultCodeOpenEnumType(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2wsc__FaultCodeOpenEnumType(soap, s, a) soap_s2char((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_wsc__FaultCodeOpenEnumType(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_wsc__FaultCodeOpenEnumType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsc__FaultCodeOpenEnumType(struct soap*, char *const*, const char*, const char*);

inline int soap_write_wsc__FaultCodeOpenEnumType(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_wsc__FaultCodeOpenEnumType(soap, p, "wsc:FaultCodeOpenEnumType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wsc__FaultCodeOpenEnumType(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_wsc__FaultCodeOpenEnumType(soap, p, "wsc:FaultCodeOpenEnumType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_wsc__FaultCodeOpenEnumType(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_wsc__FaultCodeOpenEnumType(soap, p, "wsc:FaultCodeOpenEnumType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_wsc__FaultCodeOpenEnumType(struct soap*, char **, const char*, const char*);

inline int soap_read_wsc__FaultCodeOpenEnumType(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_wsc__FaultCodeOpenEnumType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsc__FaultCodeOpenEnumType(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_wsc__FaultCodeOpenEnumType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_wsc__FaultCodeOpenEnumType(struct soap *soap, char **p)
{
	if (soap_read_wsc__FaultCodeOpenEnumType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_PointerTo_xenc__ReferenceList_DEFINED
#define SOAP_TYPE_PointerTo_xenc__ReferenceList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_xenc__ReferenceList(struct soap*, struct _xenc__ReferenceList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_xenc__ReferenceList(struct soap*, const char *, int, struct _xenc__ReferenceList *const*, const char *);
SOAP_FMAC3 struct _xenc__ReferenceList ** SOAP_FMAC4 soap_in_PointerTo_xenc__ReferenceList(struct soap*, const char*, struct _xenc__ReferenceList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_xenc__ReferenceList(struct soap*, struct _xenc__ReferenceList *const*, const char*, const char*);
SOAP_FMAC3 struct _xenc__ReferenceList ** SOAP_FMAC4 soap_get_PointerTo_xenc__ReferenceList(struct soap*, struct _xenc__ReferenceList **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__xenc__union_ReferenceList_DEFINED
#define SOAP_TYPE_PointerTo__xenc__union_ReferenceList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__xenc__union_ReferenceList(struct soap*, struct __xenc__union_ReferenceList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__xenc__union_ReferenceList(struct soap*, const char *, int, struct __xenc__union_ReferenceList *const*, const char *);
SOAP_FMAC3 struct __xenc__union_ReferenceList ** SOAP_FMAC4 soap_in_PointerTo__xenc__union_ReferenceList(struct soap*, const char*, struct __xenc__union_ReferenceList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__xenc__union_ReferenceList(struct soap*, struct __xenc__union_ReferenceList *const*, const char*, const char*);
SOAP_FMAC3 struct __xenc__union_ReferenceList ** SOAP_FMAC4 soap_get_PointerTo__xenc__union_ReferenceList(struct soap*, struct __xenc__union_ReferenceList **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxenc__ReferenceType_DEFINED
#define SOAP_TYPE_PointerToxenc__ReferenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxenc__ReferenceType(struct soap*, struct xenc__ReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxenc__ReferenceType(struct soap*, const char *, int, struct xenc__ReferenceType *const*, const char *);
SOAP_FMAC3 struct xenc__ReferenceType ** SOAP_FMAC4 soap_in_PointerToxenc__ReferenceType(struct soap*, const char*, struct xenc__ReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxenc__ReferenceType(struct soap*, struct xenc__ReferenceType *const*, const char*, const char*);
SOAP_FMAC3 struct xenc__ReferenceType ** SOAP_FMAC4 soap_get_PointerToxenc__ReferenceType(struct soap*, struct xenc__ReferenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxenc__EncryptionPropertyType_DEFINED
#define SOAP_TYPE_PointerToxenc__EncryptionPropertyType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxenc__EncryptionPropertyType(struct soap*, struct xenc__EncryptionPropertyType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxenc__EncryptionPropertyType(struct soap*, const char *, int, struct xenc__EncryptionPropertyType *const*, const char *);
SOAP_FMAC3 struct xenc__EncryptionPropertyType ** SOAP_FMAC4 soap_in_PointerToxenc__EncryptionPropertyType(struct soap*, const char*, struct xenc__EncryptionPropertyType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxenc__EncryptionPropertyType(struct soap*, struct xenc__EncryptionPropertyType *const*, const char*, const char*);
SOAP_FMAC3 struct xenc__EncryptionPropertyType ** SOAP_FMAC4 soap_get_PointerToxenc__EncryptionPropertyType(struct soap*, struct xenc__EncryptionPropertyType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxenc__TransformsType_DEFINED
#define SOAP_TYPE_PointerToxenc__TransformsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxenc__TransformsType(struct soap*, struct xenc__TransformsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxenc__TransformsType(struct soap*, const char *, int, struct xenc__TransformsType *const*, const char *);
SOAP_FMAC3 struct xenc__TransformsType ** SOAP_FMAC4 soap_in_PointerToxenc__TransformsType(struct soap*, const char*, struct xenc__TransformsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxenc__TransformsType(struct soap*, struct xenc__TransformsType *const*, const char*, const char*);
SOAP_FMAC3 struct xenc__TransformsType ** SOAP_FMAC4 soap_get_PointerToxenc__TransformsType(struct soap*, struct xenc__TransformsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxenc__CipherReferenceType_DEFINED
#define SOAP_TYPE_PointerToxenc__CipherReferenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxenc__CipherReferenceType(struct soap*, struct xenc__CipherReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxenc__CipherReferenceType(struct soap*, const char *, int, struct xenc__CipherReferenceType *const*, const char *);
SOAP_FMAC3 struct xenc__CipherReferenceType ** SOAP_FMAC4 soap_in_PointerToxenc__CipherReferenceType(struct soap*, const char*, struct xenc__CipherReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxenc__CipherReferenceType(struct soap*, struct xenc__CipherReferenceType *const*, const char*, const char*);
SOAP_FMAC3 struct xenc__CipherReferenceType ** SOAP_FMAC4 soap_get_PointerToxenc__CipherReferenceType(struct soap*, struct xenc__CipherReferenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxenc__EncryptionPropertiesType_DEFINED
#define SOAP_TYPE_PointerToxenc__EncryptionPropertiesType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxenc__EncryptionPropertiesType(struct soap*, struct xenc__EncryptionPropertiesType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxenc__EncryptionPropertiesType(struct soap*, const char *, int, struct xenc__EncryptionPropertiesType *const*, const char *);
SOAP_FMAC3 struct xenc__EncryptionPropertiesType ** SOAP_FMAC4 soap_in_PointerToxenc__EncryptionPropertiesType(struct soap*, const char*, struct xenc__EncryptionPropertiesType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxenc__EncryptionPropertiesType(struct soap*, struct xenc__EncryptionPropertiesType *const*, const char*, const char*);
SOAP_FMAC3 struct xenc__EncryptionPropertiesType ** SOAP_FMAC4 soap_get_PointerToxenc__EncryptionPropertiesType(struct soap*, struct xenc__EncryptionPropertiesType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxenc__CipherDataType_DEFINED
#define SOAP_TYPE_PointerToxenc__CipherDataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxenc__CipherDataType(struct soap*, struct xenc__CipherDataType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxenc__CipherDataType(struct soap*, const char *, int, struct xenc__CipherDataType *const*, const char *);
SOAP_FMAC3 struct xenc__CipherDataType ** SOAP_FMAC4 soap_in_PointerToxenc__CipherDataType(struct soap*, const char*, struct xenc__CipherDataType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxenc__CipherDataType(struct soap*, struct xenc__CipherDataType *const*, const char*, const char*);
SOAP_FMAC3 struct xenc__CipherDataType ** SOAP_FMAC4 soap_get_PointerToxenc__CipherDataType(struct soap*, struct xenc__CipherDataType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ds__KeyInfo_DEFINED
#define SOAP_TYPE_PointerTo_ds__KeyInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ds__KeyInfo(struct soap*, struct ds__KeyInfoType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ds__KeyInfo(struct soap*, const char *, int, struct ds__KeyInfoType *const*, const char *);
SOAP_FMAC3 struct ds__KeyInfoType ** SOAP_FMAC4 soap_in_PointerTo_ds__KeyInfo(struct soap*, const char*, struct ds__KeyInfoType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ds__KeyInfo(struct soap*, struct ds__KeyInfoType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__KeyInfoType ** SOAP_FMAC4 soap_get_PointerTo_ds__KeyInfo(struct soap*, struct ds__KeyInfoType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxenc__EncryptionMethodType_DEFINED
#define SOAP_TYPE_PointerToxenc__EncryptionMethodType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxenc__EncryptionMethodType(struct soap*, struct xenc__EncryptionMethodType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxenc__EncryptionMethodType(struct soap*, const char *, int, struct xenc__EncryptionMethodType *const*, const char *);
SOAP_FMAC3 struct xenc__EncryptionMethodType ** SOAP_FMAC4 soap_in_PointerToxenc__EncryptionMethodType(struct soap*, const char*, struct xenc__EncryptionMethodType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxenc__EncryptionMethodType(struct soap*, struct xenc__EncryptionMethodType *const*, const char*, const char*);
SOAP_FMAC3 struct xenc__EncryptionMethodType ** SOAP_FMAC4 soap_get_PointerToxenc__EncryptionMethodType(struct soap*, struct xenc__EncryptionMethodType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__X509IssuerSerialType_DEFINED
#define SOAP_TYPE_PointerTods__X509IssuerSerialType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__X509IssuerSerialType(struct soap*, struct ds__X509IssuerSerialType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__X509IssuerSerialType(struct soap*, const char *, int, struct ds__X509IssuerSerialType *const*, const char *);
SOAP_FMAC3 struct ds__X509IssuerSerialType ** SOAP_FMAC4 soap_in_PointerTods__X509IssuerSerialType(struct soap*, const char*, struct ds__X509IssuerSerialType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__X509IssuerSerialType(struct soap*, struct ds__X509IssuerSerialType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__X509IssuerSerialType ** SOAP_FMAC4 soap_get_PointerTods__X509IssuerSerialType(struct soap*, struct ds__X509IssuerSerialType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__RSAKeyValueType_DEFINED
#define SOAP_TYPE_PointerTods__RSAKeyValueType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__RSAKeyValueType(struct soap*, struct ds__RSAKeyValueType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__RSAKeyValueType(struct soap*, const char *, int, struct ds__RSAKeyValueType *const*, const char *);
SOAP_FMAC3 struct ds__RSAKeyValueType ** SOAP_FMAC4 soap_in_PointerTods__RSAKeyValueType(struct soap*, const char*, struct ds__RSAKeyValueType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__RSAKeyValueType(struct soap*, struct ds__RSAKeyValueType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__RSAKeyValueType ** SOAP_FMAC4 soap_get_PointerTods__RSAKeyValueType(struct soap*, struct ds__RSAKeyValueType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__DSAKeyValueType_DEFINED
#define SOAP_TYPE_PointerTods__DSAKeyValueType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__DSAKeyValueType(struct soap*, struct ds__DSAKeyValueType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__DSAKeyValueType(struct soap*, const char *, int, struct ds__DSAKeyValueType *const*, const char *);
SOAP_FMAC3 struct ds__DSAKeyValueType ** SOAP_FMAC4 soap_in_PointerTods__DSAKeyValueType(struct soap*, const char*, struct ds__DSAKeyValueType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__DSAKeyValueType(struct soap*, struct ds__DSAKeyValueType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__DSAKeyValueType ** SOAP_FMAC4 soap_get_PointerTods__DSAKeyValueType(struct soap*, struct ds__DSAKeyValueType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__TransformType_DEFINED
#define SOAP_TYPE_PointerTods__TransformType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__TransformType(struct soap*, struct ds__TransformType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__TransformType(struct soap*, const char *, int, struct ds__TransformType *const*, const char *);
SOAP_FMAC3 struct ds__TransformType ** SOAP_FMAC4 soap_in_PointerTods__TransformType(struct soap*, const char*, struct ds__TransformType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__TransformType(struct soap*, struct ds__TransformType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__TransformType ** SOAP_FMAC4 soap_get_PointerTods__TransformType(struct soap*, struct ds__TransformType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__DigestMethodType_DEFINED
#define SOAP_TYPE_PointerTods__DigestMethodType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__DigestMethodType(struct soap*, struct ds__DigestMethodType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__DigestMethodType(struct soap*, const char *, int, struct ds__DigestMethodType *const*, const char *);
SOAP_FMAC3 struct ds__DigestMethodType ** SOAP_FMAC4 soap_in_PointerTods__DigestMethodType(struct soap*, const char*, struct ds__DigestMethodType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__DigestMethodType(struct soap*, struct ds__DigestMethodType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__DigestMethodType ** SOAP_FMAC4 soap_get_PointerTods__DigestMethodType(struct soap*, struct ds__DigestMethodType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__TransformsType_DEFINED
#define SOAP_TYPE_PointerTods__TransformsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__TransformsType(struct soap*, struct ds__TransformsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__TransformsType(struct soap*, const char *, int, struct ds__TransformsType *const*, const char *);
SOAP_FMAC3 struct ds__TransformsType ** SOAP_FMAC4 soap_in_PointerTods__TransformsType(struct soap*, const char*, struct ds__TransformsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__TransformsType(struct soap*, struct ds__TransformsType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__TransformsType ** SOAP_FMAC4 soap_get_PointerTods__TransformsType(struct soap*, struct ds__TransformsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTods__ReferenceType_DEFINED
#define SOAP_TYPE_PointerToPointerTods__ReferenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTods__ReferenceType(struct soap*, struct ds__ReferenceType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTods__ReferenceType(struct soap*, const char *, int, struct ds__ReferenceType **const*, const char *);
SOAP_FMAC3 struct ds__ReferenceType *** SOAP_FMAC4 soap_in_PointerToPointerTods__ReferenceType(struct soap*, const char*, struct ds__ReferenceType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTods__ReferenceType(struct soap*, struct ds__ReferenceType **const*, const char*, const char*);
SOAP_FMAC3 struct ds__ReferenceType *** SOAP_FMAC4 soap_get_PointerToPointerTods__ReferenceType(struct soap*, struct ds__ReferenceType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__ReferenceType_DEFINED
#define SOAP_TYPE_PointerTods__ReferenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__ReferenceType(struct soap*, struct ds__ReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__ReferenceType(struct soap*, const char *, int, struct ds__ReferenceType *const*, const char *);
SOAP_FMAC3 struct ds__ReferenceType ** SOAP_FMAC4 soap_in_PointerTods__ReferenceType(struct soap*, const char*, struct ds__ReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__ReferenceType(struct soap*, struct ds__ReferenceType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__ReferenceType ** SOAP_FMAC4 soap_get_PointerTods__ReferenceType(struct soap*, struct ds__ReferenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__SignatureMethodType_DEFINED
#define SOAP_TYPE_PointerTods__SignatureMethodType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__SignatureMethodType(struct soap*, struct ds__SignatureMethodType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__SignatureMethodType(struct soap*, const char *, int, struct ds__SignatureMethodType *const*, const char *);
SOAP_FMAC3 struct ds__SignatureMethodType ** SOAP_FMAC4 soap_in_PointerTods__SignatureMethodType(struct soap*, const char*, struct ds__SignatureMethodType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__SignatureMethodType(struct soap*, struct ds__SignatureMethodType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__SignatureMethodType ** SOAP_FMAC4 soap_get_PointerTods__SignatureMethodType(struct soap*, struct ds__SignatureMethodType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__CanonicalizationMethodType_DEFINED
#define SOAP_TYPE_PointerTods__CanonicalizationMethodType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__CanonicalizationMethodType(struct soap*, struct ds__CanonicalizationMethodType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__CanonicalizationMethodType(struct soap*, const char *, int, struct ds__CanonicalizationMethodType *const*, const char *);
SOAP_FMAC3 struct ds__CanonicalizationMethodType ** SOAP_FMAC4 soap_in_PointerTods__CanonicalizationMethodType(struct soap*, const char*, struct ds__CanonicalizationMethodType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__CanonicalizationMethodType(struct soap*, struct ds__CanonicalizationMethodType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__CanonicalizationMethodType ** SOAP_FMAC4 soap_get_PointerTods__CanonicalizationMethodType(struct soap*, struct ds__CanonicalizationMethodType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsse__SecurityTokenReference_DEFINED
#define SOAP_TYPE_PointerTo_wsse__SecurityTokenReference_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsse__SecurityTokenReference(struct soap*, struct _wsse__SecurityTokenReference *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsse__SecurityTokenReference(struct soap*, const char *, int, struct _wsse__SecurityTokenReference *const*, const char *);
SOAP_FMAC3 struct _wsse__SecurityTokenReference ** SOAP_FMAC4 soap_in_PointerTo_wsse__SecurityTokenReference(struct soap*, const char*, struct _wsse__SecurityTokenReference **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsse__SecurityTokenReference(struct soap*, struct _wsse__SecurityTokenReference *const*, const char*, const char*);
SOAP_FMAC3 struct _wsse__SecurityTokenReference ** SOAP_FMAC4 soap_get_PointerTo_wsse__SecurityTokenReference(struct soap*, struct _wsse__SecurityTokenReference **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__RetrievalMethodType_DEFINED
#define SOAP_TYPE_PointerTods__RetrievalMethodType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__RetrievalMethodType(struct soap*, struct ds__RetrievalMethodType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__RetrievalMethodType(struct soap*, const char *, int, struct ds__RetrievalMethodType *const*, const char *);
SOAP_FMAC3 struct ds__RetrievalMethodType ** SOAP_FMAC4 soap_in_PointerTods__RetrievalMethodType(struct soap*, const char*, struct ds__RetrievalMethodType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__RetrievalMethodType(struct soap*, struct ds__RetrievalMethodType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__RetrievalMethodType ** SOAP_FMAC4 soap_get_PointerTods__RetrievalMethodType(struct soap*, struct ds__RetrievalMethodType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__KeyValueType_DEFINED
#define SOAP_TYPE_PointerTods__KeyValueType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__KeyValueType(struct soap*, struct ds__KeyValueType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__KeyValueType(struct soap*, const char *, int, struct ds__KeyValueType *const*, const char *);
SOAP_FMAC3 struct ds__KeyValueType ** SOAP_FMAC4 soap_in_PointerTods__KeyValueType(struct soap*, const char*, struct ds__KeyValueType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__KeyValueType(struct soap*, struct ds__KeyValueType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__KeyValueType ** SOAP_FMAC4 soap_get_PointerTods__KeyValueType(struct soap*, struct ds__KeyValueType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_c14n__InclusiveNamespaces_DEFINED
#define SOAP_TYPE_PointerTo_c14n__InclusiveNamespaces_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_c14n__InclusiveNamespaces(struct soap*, struct _c14n__InclusiveNamespaces *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_c14n__InclusiveNamespaces(struct soap*, const char *, int, struct _c14n__InclusiveNamespaces *const*, const char *);
SOAP_FMAC3 struct _c14n__InclusiveNamespaces ** SOAP_FMAC4 soap_in_PointerTo_c14n__InclusiveNamespaces(struct soap*, const char*, struct _c14n__InclusiveNamespaces **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_c14n__InclusiveNamespaces(struct soap*, struct _c14n__InclusiveNamespaces *const*, const char*, const char*);
SOAP_FMAC3 struct _c14n__InclusiveNamespaces ** SOAP_FMAC4 soap_get_PointerTo_c14n__InclusiveNamespaces(struct soap*, struct _c14n__InclusiveNamespaces **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__KeyInfoType_DEFINED
#define SOAP_TYPE_PointerTods__KeyInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__KeyInfoType(struct soap*, struct ds__KeyInfoType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__KeyInfoType(struct soap*, const char *, int, struct ds__KeyInfoType *const*, const char *);
SOAP_FMAC3 struct ds__KeyInfoType ** SOAP_FMAC4 soap_in_PointerTods__KeyInfoType(struct soap*, const char*, struct ds__KeyInfoType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__KeyInfoType(struct soap*, struct ds__KeyInfoType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__KeyInfoType ** SOAP_FMAC4 soap_get_PointerTods__KeyInfoType(struct soap*, struct ds__KeyInfoType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__SignedInfoType_DEFINED
#define SOAP_TYPE_PointerTods__SignedInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__SignedInfoType(struct soap*, struct ds__SignedInfoType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__SignedInfoType(struct soap*, const char *, int, struct ds__SignedInfoType *const*, const char *);
SOAP_FMAC3 struct ds__SignedInfoType ** SOAP_FMAC4 soap_in_PointerTods__SignedInfoType(struct soap*, const char*, struct ds__SignedInfoType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__SignedInfoType(struct soap*, struct ds__SignedInfoType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__SignedInfoType ** SOAP_FMAC4 soap_get_PointerTods__SignedInfoType(struct soap*, struct ds__SignedInfoType **, const char*, const char*);
#endif
/* _ds__SignatureValue is a typedef synonym for string */

#ifndef SOAP_TYPE__ds__SignatureValue_DEFINED
#define SOAP_TYPE__ds__SignatureValue_DEFINED

#define soap_default__ds__SignatureValue soap_default_string


#define soap_serialize__ds__SignatureValue soap_serialize_string


#define soap__ds__SignatureValue2s(soap, a) (a)

#define soap_out__ds__SignatureValue soap_out_string


#define soap_s2_ds__SignatureValue(soap, s, a) soap_s2char((soap), (s), (char**)(a), 0, -1, NULL)

#define soap_in__ds__SignatureValue soap_in_string


SOAP_FMAC3 char * * SOAP_FMAC4 soap_new__ds__SignatureValue(struct soap *soap, int n = -1);

#define soap_put__ds__SignatureValue soap_put_string


#define soap_write__ds__SignatureValue soap_write_string


#define soap_PUT__ds__SignatureValue soap_PUT_string


#define soap_POST_send__ds__SignatureValue soap_POST_send_string


#define soap_get__ds__SignatureValue soap_get_string


#define soap_read__ds__SignatureValue soap_read_string


#define soap_GET__ds__SignatureValue soap_GET_string


#define soap_POST_recv__ds__SignatureValue soap_POST_recv_string

#endif

#ifndef SOAP_TYPE_PointerTods__X509DataType_DEFINED
#define SOAP_TYPE_PointerTods__X509DataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__X509DataType(struct soap*, struct ds__X509DataType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__X509DataType(struct soap*, const char *, int, struct ds__X509DataType *const*, const char *);
SOAP_FMAC3 struct ds__X509DataType ** SOAP_FMAC4 soap_in_PointerTods__X509DataType(struct soap*, const char*, struct ds__X509DataType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__X509DataType(struct soap*, struct ds__X509DataType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__X509DataType ** SOAP_FMAC4 soap_get_PointerTods__X509DataType(struct soap*, struct ds__X509DataType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsse__Embedded_DEFINED
#define SOAP_TYPE_PointerTo_wsse__Embedded_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsse__Embedded(struct soap*, struct _wsse__Embedded *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsse__Embedded(struct soap*, const char *, int, struct _wsse__Embedded *const*, const char *);
SOAP_FMAC3 struct _wsse__Embedded ** SOAP_FMAC4 soap_in_PointerTo_wsse__Embedded(struct soap*, const char*, struct _wsse__Embedded **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsse__Embedded(struct soap*, struct _wsse__Embedded *const*, const char*, const char*);
SOAP_FMAC3 struct _wsse__Embedded ** SOAP_FMAC4 soap_get_PointerTo_wsse__Embedded(struct soap*, struct _wsse__Embedded **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsse__KeyIdentifier_DEFINED
#define SOAP_TYPE_PointerTo_wsse__KeyIdentifier_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsse__KeyIdentifier(struct soap*, struct _wsse__KeyIdentifier *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsse__KeyIdentifier(struct soap*, const char *, int, struct _wsse__KeyIdentifier *const*, const char *);
SOAP_FMAC3 struct _wsse__KeyIdentifier ** SOAP_FMAC4 soap_in_PointerTo_wsse__KeyIdentifier(struct soap*, const char*, struct _wsse__KeyIdentifier **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsse__KeyIdentifier(struct soap*, struct _wsse__KeyIdentifier *const*, const char*, const char*);
SOAP_FMAC3 struct _wsse__KeyIdentifier ** SOAP_FMAC4 soap_get_PointerTo_wsse__KeyIdentifier(struct soap*, struct _wsse__KeyIdentifier **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsse__Reference_DEFINED
#define SOAP_TYPE_PointerTo_wsse__Reference_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsse__Reference(struct soap*, struct _wsse__Reference *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsse__Reference(struct soap*, const char *, int, struct _wsse__Reference *const*, const char *);
SOAP_FMAC3 struct _wsse__Reference ** SOAP_FMAC4 soap_in_PointerTo_wsse__Reference(struct soap*, const char*, struct _wsse__Reference **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsse__Reference(struct soap*, struct _wsse__Reference *const*, const char*, const char*);
SOAP_FMAC3 struct _wsse__Reference ** SOAP_FMAC4 soap_get_PointerTo_wsse__Reference(struct soap*, struct _wsse__Reference **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsse__EncodedString_DEFINED
#define SOAP_TYPE_PointerTowsse__EncodedString_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsse__EncodedString(struct soap*, struct wsse__EncodedString *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsse__EncodedString(struct soap*, const char *, int, struct wsse__EncodedString *const*, const char *);
SOAP_FMAC3 struct wsse__EncodedString ** SOAP_FMAC4 soap_in_PointerTowsse__EncodedString(struct soap*, const char*, struct wsse__EncodedString **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsse__EncodedString(struct soap*, struct wsse__EncodedString *const*, const char*, const char*);
SOAP_FMAC3 struct wsse__EncodedString ** SOAP_FMAC4 soap_get_PointerTowsse__EncodedString(struct soap*, struct wsse__EncodedString **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsse__Password_DEFINED
#define SOAP_TYPE_PointerTo_wsse__Password_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsse__Password(struct soap*, struct _wsse__Password *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsse__Password(struct soap*, const char *, int, struct _wsse__Password *const*, const char *);
SOAP_FMAC3 struct _wsse__Password ** SOAP_FMAC4 soap_in_PointerTo_wsse__Password(struct soap*, const char*, struct _wsse__Password **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsse__Password(struct soap*, struct _wsse__Password *const*, const char*, const char*);
SOAP_FMAC3 struct _wsse__Password ** SOAP_FMAC4 soap_get_PointerTo_wsse__Password(struct soap*, struct _wsse__Password **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetCacheMethodList_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetCacheMethodList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetCacheMethodList(struct soap*, _ns1__GetCacheMethodList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetCacheMethodList(struct soap*, const char *, int, _ns1__GetCacheMethodList *const*, const char *);
SOAP_FMAC3 _ns1__GetCacheMethodList ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetCacheMethodList(struct soap*, const char*, _ns1__GetCacheMethodList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetCacheMethodList(struct soap*, _ns1__GetCacheMethodList *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetCacheMethodList ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetCacheMethodList(struct soap*, _ns1__GetCacheMethodList **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData(struct soap*, _ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData(struct soap*, const char *, int, _ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData *const*, const char *);
SOAP_FMAC3 _ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData(struct soap*, const char*, _ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData(struct soap*, _ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData(struct soap*, _ns1__GetCasinoChallengeAwardNotificationCustomWithMediaData **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetCasinoChallengeAwardNotificationCustom_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetCasinoChallengeAwardNotificationCustom_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetCasinoChallengeAwardNotificationCustom(struct soap*, _ns1__GetCasinoChallengeAwardNotificationCustom *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetCasinoChallengeAwardNotificationCustom(struct soap*, const char *, int, _ns1__GetCasinoChallengeAwardNotificationCustom *const*, const char *);
SOAP_FMAC3 _ns1__GetCasinoChallengeAwardNotificationCustom ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetCasinoChallengeAwardNotificationCustom(struct soap*, const char*, _ns1__GetCasinoChallengeAwardNotificationCustom **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetCasinoChallengeAwardNotificationCustom(struct soap*, _ns1__GetCasinoChallengeAwardNotificationCustom *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetCasinoChallengeAwardNotificationCustom ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetCasinoChallengeAwardNotificationCustom(struct soap*, _ns1__GetCasinoChallengeAwardNotificationCustom **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetCasinoChallangeEventEndNotificationCustom_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetCasinoChallangeEventEndNotificationCustom_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetCasinoChallangeEventEndNotificationCustom(struct soap*, _ns1__GetCasinoChallangeEventEndNotificationCustom *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetCasinoChallangeEventEndNotificationCustom(struct soap*, const char *, int, _ns1__GetCasinoChallangeEventEndNotificationCustom *const*, const char *);
SOAP_FMAC3 _ns1__GetCasinoChallangeEventEndNotificationCustom ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetCasinoChallangeEventEndNotificationCustom(struct soap*, const char*, _ns1__GetCasinoChallangeEventEndNotificationCustom **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetCasinoChallangeEventEndNotificationCustom(struct soap*, _ns1__GetCasinoChallangeEventEndNotificationCustom *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetCasinoChallangeEventEndNotificationCustom ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetCasinoChallangeEventEndNotificationCustom(struct soap*, _ns1__GetCasinoChallangeEventEndNotificationCustom **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetCasinoChallangeIncrementNotification_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetCasinoChallangeIncrementNotification_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetCasinoChallangeIncrementNotification(struct soap*, _ns1__GetCasinoChallangeIncrementNotification *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetCasinoChallangeIncrementNotification(struct soap*, const char *, int, _ns1__GetCasinoChallangeIncrementNotification *const*, const char *);
SOAP_FMAC3 _ns1__GetCasinoChallangeIncrementNotification ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetCasinoChallangeIncrementNotification(struct soap*, const char*, _ns1__GetCasinoChallangeIncrementNotification **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetCasinoChallangeIncrementNotification(struct soap*, _ns1__GetCasinoChallangeIncrementNotification *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetCasinoChallangeIncrementNotification ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetCasinoChallangeIncrementNotification(struct soap*, _ns1__GetCasinoChallangeIncrementNotification **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetCasinoChallengeTriggeredEventNotificationCustom_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetCasinoChallengeTriggeredEventNotificationCustom_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetCasinoChallengeTriggeredEventNotificationCustom(struct soap*, _ns1__GetCasinoChallengeTriggeredEventNotificationCustom *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetCasinoChallengeTriggeredEventNotificationCustom(struct soap*, const char *, int, _ns1__GetCasinoChallengeTriggeredEventNotificationCustom *const*, const char *);
SOAP_FMAC3 _ns1__GetCasinoChallengeTriggeredEventNotificationCustom ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetCasinoChallengeTriggeredEventNotificationCustom(struct soap*, const char*, _ns1__GetCasinoChallengeTriggeredEventNotificationCustom **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetCasinoChallengeTriggeredEventNotificationCustom(struct soap*, _ns1__GetCasinoChallengeTriggeredEventNotificationCustom *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetCasinoChallengeTriggeredEventNotificationCustom ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetCasinoChallengeTriggeredEventNotificationCustom(struct soap*, _ns1__GetCasinoChallengeTriggeredEventNotificationCustom **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetEventTriggerNotification_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetEventTriggerNotification_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetEventTriggerNotification(struct soap*, _ns1__GetEventTriggerNotification *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetEventTriggerNotification(struct soap*, const char *, int, _ns1__GetEventTriggerNotification *const*, const char *);
SOAP_FMAC3 _ns1__GetEventTriggerNotification ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetEventTriggerNotification(struct soap*, const char*, _ns1__GetEventTriggerNotification **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetEventTriggerNotification(struct soap*, _ns1__GetEventTriggerNotification *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetEventTriggerNotification ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetEventTriggerNotification(struct soap*, _ns1__GetEventTriggerNotification **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__SendBlobToThirdParty_DEFINED
#define SOAP_TYPE_PointerTo_ns1__SendBlobToThirdParty_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SendBlobToThirdParty(struct soap*, _ns1__SendBlobToThirdParty *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SendBlobToThirdParty(struct soap*, const char *, int, _ns1__SendBlobToThirdParty *const*, const char *);
SOAP_FMAC3 _ns1__SendBlobToThirdParty ** SOAP_FMAC4 soap_in_PointerTo_ns1__SendBlobToThirdParty(struct soap*, const char*, _ns1__SendBlobToThirdParty **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SendBlobToThirdParty(struct soap*, _ns1__SendBlobToThirdParty *const*, const char*, const char*);
SOAP_FMAC3 _ns1__SendBlobToThirdParty ** SOAP_FMAC4 soap_get_PointerTo_ns1__SendBlobToThirdParty(struct soap*, _ns1__SendBlobToThirdParty **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetThirdPartyBlob_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetThirdPartyBlob_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetThirdPartyBlob(struct soap*, _ns1__GetThirdPartyBlob *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetThirdPartyBlob(struct soap*, const char *, int, _ns1__GetThirdPartyBlob *const*, const char *);
SOAP_FMAC3 _ns1__GetThirdPartyBlob ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetThirdPartyBlob(struct soap*, const char*, _ns1__GetThirdPartyBlob **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetThirdPartyBlob(struct soap*, _ns1__GetThirdPartyBlob *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetThirdPartyBlob ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetThirdPartyBlob(struct soap*, _ns1__GetThirdPartyBlob **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__ReportSentinelInformation25_DEFINED
#define SOAP_TYPE_PointerTo_ns1__ReportSentinelInformation25_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ReportSentinelInformation25(struct soap*, _ns1__ReportSentinelInformation25 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ReportSentinelInformation25(struct soap*, const char *, int, _ns1__ReportSentinelInformation25 *const*, const char *);
SOAP_FMAC3 _ns1__ReportSentinelInformation25 ** SOAP_FMAC4 soap_in_PointerTo_ns1__ReportSentinelInformation25(struct soap*, const char*, _ns1__ReportSentinelInformation25 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ReportSentinelInformation25(struct soap*, _ns1__ReportSentinelInformation25 *const*, const char*, const char*);
SOAP_FMAC3 _ns1__ReportSentinelInformation25 ** SOAP_FMAC4 soap_get_PointerTo_ns1__ReportSentinelInformation25(struct soap*, _ns1__ReportSentinelInformation25 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__ReportSentinelInformationEx_DEFINED
#define SOAP_TYPE_PointerTo_ns1__ReportSentinelInformationEx_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ReportSentinelInformationEx(struct soap*, _ns1__ReportSentinelInformationEx *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ReportSentinelInformationEx(struct soap*, const char *, int, _ns1__ReportSentinelInformationEx *const*, const char *);
SOAP_FMAC3 _ns1__ReportSentinelInformationEx ** SOAP_FMAC4 soap_in_PointerTo_ns1__ReportSentinelInformationEx(struct soap*, const char*, _ns1__ReportSentinelInformationEx **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ReportSentinelInformationEx(struct soap*, _ns1__ReportSentinelInformationEx *const*, const char*, const char*);
SOAP_FMAC3 _ns1__ReportSentinelInformationEx ** SOAP_FMAC4 soap_get_PointerTo_ns1__ReportSentinelInformationEx(struct soap*, _ns1__ReportSentinelInformationEx **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__ReportSentinelInformationWithOrientation_DEFINED
#define SOAP_TYPE_PointerTo_ns1__ReportSentinelInformationWithOrientation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ReportSentinelInformationWithOrientation(struct soap*, _ns1__ReportSentinelInformationWithOrientation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ReportSentinelInformationWithOrientation(struct soap*, const char *, int, _ns1__ReportSentinelInformationWithOrientation *const*, const char *);
SOAP_FMAC3 _ns1__ReportSentinelInformationWithOrientation ** SOAP_FMAC4 soap_in_PointerTo_ns1__ReportSentinelInformationWithOrientation(struct soap*, const char*, _ns1__ReportSentinelInformationWithOrientation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ReportSentinelInformationWithOrientation(struct soap*, _ns1__ReportSentinelInformationWithOrientation *const*, const char*, const char*);
SOAP_FMAC3 _ns1__ReportSentinelInformationWithOrientation ** SOAP_FMAC4 soap_get_PointerTo_ns1__ReportSentinelInformationWithOrientation(struct soap*, _ns1__ReportSentinelInformationWithOrientation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__ReportSentinelInformation_DEFINED
#define SOAP_TYPE_PointerTo_ns1__ReportSentinelInformation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ReportSentinelInformation(struct soap*, _ns1__ReportSentinelInformation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ReportSentinelInformation(struct soap*, const char *, int, _ns1__ReportSentinelInformation *const*, const char *);
SOAP_FMAC3 _ns1__ReportSentinelInformation ** SOAP_FMAC4 soap_in_PointerTo_ns1__ReportSentinelInformation(struct soap*, const char*, _ns1__ReportSentinelInformation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ReportSentinelInformation(struct soap*, _ns1__ReportSentinelInformation *const*, const char*, const char*);
SOAP_FMAC3 _ns1__ReportSentinelInformation ** SOAP_FMAC4 soap_get_PointerTo_ns1__ReportSentinelInformation(struct soap*, _ns1__ReportSentinelInformation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__ReportStatus_DEFINED
#define SOAP_TYPE_PointerTo_ns1__ReportStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ReportStatus(struct soap*, _ns1__ReportStatus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ReportStatus(struct soap*, const char *, int, _ns1__ReportStatus *const*, const char *);
SOAP_FMAC3 _ns1__ReportStatus ** SOAP_FMAC4 soap_in_PointerTo_ns1__ReportStatus(struct soap*, const char*, _ns1__ReportStatus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ReportStatus(struct soap*, _ns1__ReportStatus *const*, const char*, const char*);
SOAP_FMAC3 _ns1__ReportStatus ** SOAP_FMAC4 soap_get_PointerTo_ns1__ReportStatus(struct soap*, _ns1__ReportStatus **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__AcknowledgeExternalPaid_DEFINED
#define SOAP_TYPE_PointerTo_ns1__AcknowledgeExternalPaid_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__AcknowledgeExternalPaid(struct soap*, _ns1__AcknowledgeExternalPaid *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__AcknowledgeExternalPaid(struct soap*, const char *, int, _ns1__AcknowledgeExternalPaid *const*, const char *);
SOAP_FMAC3 _ns1__AcknowledgeExternalPaid ** SOAP_FMAC4 soap_in_PointerTo_ns1__AcknowledgeExternalPaid(struct soap*, const char*, _ns1__AcknowledgeExternalPaid **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__AcknowledgeExternalPaid(struct soap*, _ns1__AcknowledgeExternalPaid *const*, const char*, const char*);
SOAP_FMAC3 _ns1__AcknowledgeExternalPaid ** SOAP_FMAC4 soap_get_PointerTo_ns1__AcknowledgeExternalPaid(struct soap*, _ns1__AcknowledgeExternalPaid **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__ReportGameStart_DEFINED
#define SOAP_TYPE_PointerTo_ns1__ReportGameStart_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ReportGameStart(struct soap*, _ns1__ReportGameStart *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ReportGameStart(struct soap*, const char *, int, _ns1__ReportGameStart *const*, const char *);
SOAP_FMAC3 _ns1__ReportGameStart ** SOAP_FMAC4 soap_in_PointerTo_ns1__ReportGameStart(struct soap*, const char*, _ns1__ReportGameStart **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ReportGameStart(struct soap*, _ns1__ReportGameStart *const*, const char*, const char*);
SOAP_FMAC3 _ns1__ReportGameStart ** SOAP_FMAC4 soap_get_PointerTo_ns1__ReportGameStart(struct soap*, _ns1__ReportGameStart **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__ReportEventMeterDeltas_DEFINED
#define SOAP_TYPE_PointerTo_ns1__ReportEventMeterDeltas_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ReportEventMeterDeltas(struct soap*, _ns1__ReportEventMeterDeltas *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ReportEventMeterDeltas(struct soap*, const char *, int, _ns1__ReportEventMeterDeltas *const*, const char *);
SOAP_FMAC3 _ns1__ReportEventMeterDeltas ** SOAP_FMAC4 soap_in_PointerTo_ns1__ReportEventMeterDeltas(struct soap*, const char*, _ns1__ReportEventMeterDeltas **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ReportEventMeterDeltas(struct soap*, _ns1__ReportEventMeterDeltas *const*, const char*, const char*);
SOAP_FMAC3 _ns1__ReportEventMeterDeltas ** SOAP_FMAC4 soap_get_PointerTo_ns1__ReportEventMeterDeltas(struct soap*, _ns1__ReportEventMeterDeltas **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__InTriggeredEventTrigger_DEFINED
#define SOAP_TYPE_PointerTo_ns1__InTriggeredEventTrigger_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__InTriggeredEventTrigger(struct soap*, _ns1__InTriggeredEventTrigger *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__InTriggeredEventTrigger(struct soap*, const char *, int, _ns1__InTriggeredEventTrigger *const*, const char *);
SOAP_FMAC3 _ns1__InTriggeredEventTrigger ** SOAP_FMAC4 soap_in_PointerTo_ns1__InTriggeredEventTrigger(struct soap*, const char*, _ns1__InTriggeredEventTrigger **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__InTriggeredEventTrigger(struct soap*, _ns1__InTriggeredEventTrigger *const*, const char*, const char*);
SOAP_FMAC3 _ns1__InTriggeredEventTrigger ** SOAP_FMAC4 soap_get_PointerTo_ns1__InTriggeredEventTrigger(struct soap*, _ns1__InTriggeredEventTrigger **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__InEventTrigger_DEFINED
#define SOAP_TYPE_PointerTo_ns1__InEventTrigger_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__InEventTrigger(struct soap*, _ns1__InEventTrigger *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__InEventTrigger(struct soap*, const char *, int, _ns1__InEventTrigger *const*, const char *);
SOAP_FMAC3 _ns1__InEventTrigger ** SOAP_FMAC4 soap_in_PointerTo_ns1__InEventTrigger(struct soap*, const char*, _ns1__InEventTrigger **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__InEventTrigger(struct soap*, _ns1__InEventTrigger *const*, const char*, const char*);
SOAP_FMAC3 _ns1__InEventTrigger ** SOAP_FMAC4 soap_get_PointerTo_ns1__InEventTrigger(struct soap*, _ns1__InEventTrigger **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetEventXMLFile_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetEventXMLFile_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetEventXMLFile(struct soap*, _ns1__GetEventXMLFile *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetEventXMLFile(struct soap*, const char *, int, _ns1__GetEventXMLFile *const*, const char *);
SOAP_FMAC3 _ns1__GetEventXMLFile ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetEventXMLFile(struct soap*, const char*, _ns1__GetEventXMLFile **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetEventXMLFile(struct soap*, _ns1__GetEventXMLFile *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetEventXMLFile ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetEventXMLFile(struct soap*, _ns1__GetEventXMLFile **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetConfigEx_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetConfigEx_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetConfigEx(struct soap*, _ns1__GetConfigEx *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetConfigEx(struct soap*, const char *, int, _ns1__GetConfigEx *const*, const char *);
SOAP_FMAC3 _ns1__GetConfigEx ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetConfigEx(struct soap*, const char*, _ns1__GetConfigEx **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetConfigEx(struct soap*, _ns1__GetConfigEx *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetConfigEx ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetConfigEx(struct soap*, _ns1__GetConfigEx **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetConfig_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetConfig_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetConfig(struct soap*, _ns1__GetConfig *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetConfig(struct soap*, const char *, int, _ns1__GetConfig *const*, const char *);
SOAP_FMAC3 _ns1__GetConfig ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetConfig(struct soap*, const char*, _ns1__GetConfig **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetConfig(struct soap*, _ns1__GetConfig *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetConfig ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetConfig(struct soap*, _ns1__GetConfig **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetFileInformation_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetFileInformation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetFileInformation(struct soap*, _ns1__GetFileInformation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetFileInformation(struct soap*, const char *, int, _ns1__GetFileInformation *const*, const char *);
SOAP_FMAC3 _ns1__GetFileInformation ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetFileInformation(struct soap*, const char*, _ns1__GetFileInformation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetFileInformation(struct soap*, _ns1__GetFileInformation *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetFileInformation ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetFileInformation(struct soap*, _ns1__GetFileInformation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetFlashUdpCompleteAnnouncement_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetFlashUdpCompleteAnnouncement_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetFlashUdpCompleteAnnouncement(struct soap*, _ns1__GetFlashUdpCompleteAnnouncement *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetFlashUdpCompleteAnnouncement(struct soap*, const char *, int, _ns1__GetFlashUdpCompleteAnnouncement *const*, const char *);
SOAP_FMAC3 _ns1__GetFlashUdpCompleteAnnouncement ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetFlashUdpCompleteAnnouncement(struct soap*, const char*, _ns1__GetFlashUdpCompleteAnnouncement **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetFlashUdpCompleteAnnouncement(struct soap*, _ns1__GetFlashUdpCompleteAnnouncement *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetFlashUdpCompleteAnnouncement ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetFlashUdpCompleteAnnouncement(struct soap*, _ns1__GetFlashUdpCompleteAnnouncement **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetFlashStartAnnouncement_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetFlashStartAnnouncement_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetFlashStartAnnouncement(struct soap*, _ns1__GetFlashStartAnnouncement *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetFlashStartAnnouncement(struct soap*, const char *, int, _ns1__GetFlashStartAnnouncement *const*, const char *);
SOAP_FMAC3 _ns1__GetFlashStartAnnouncement ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetFlashStartAnnouncement(struct soap*, const char*, _ns1__GetFlashStartAnnouncement **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetFlashStartAnnouncement(struct soap*, _ns1__GetFlashStartAnnouncement *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetFlashStartAnnouncement ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetFlashStartAnnouncement(struct soap*, _ns1__GetFlashStartAnnouncement **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__RequestNonCardedEvents_DEFINED
#define SOAP_TYPE_PointerTo_ns1__RequestNonCardedEvents_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__RequestNonCardedEvents(struct soap*, _ns1__RequestNonCardedEvents *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__RequestNonCardedEvents(struct soap*, const char *, int, _ns1__RequestNonCardedEvents *const*, const char *);
SOAP_FMAC3 _ns1__RequestNonCardedEvents ** SOAP_FMAC4 soap_in_PointerTo_ns1__RequestNonCardedEvents(struct soap*, const char*, _ns1__RequestNonCardedEvents **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__RequestNonCardedEvents(struct soap*, _ns1__RequestNonCardedEvents *const*, const char*, const char*);
SOAP_FMAC3 _ns1__RequestNonCardedEvents ** SOAP_FMAC4 soap_get_PointerTo_ns1__RequestNonCardedEvents(struct soap*, _ns1__RequestNonCardedEvents **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GamePlayedAfterCardIn_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GamePlayedAfterCardIn_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GamePlayedAfterCardIn(struct soap*, _ns1__GamePlayedAfterCardIn *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GamePlayedAfterCardIn(struct soap*, const char *, int, _ns1__GamePlayedAfterCardIn *const*, const char *);
SOAP_FMAC3 _ns1__GamePlayedAfterCardIn ** SOAP_FMAC4 soap_in_PointerTo_ns1__GamePlayedAfterCardIn(struct soap*, const char*, _ns1__GamePlayedAfterCardIn **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GamePlayedAfterCardIn(struct soap*, _ns1__GamePlayedAfterCardIn *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GamePlayedAfterCardIn ** SOAP_FMAC4 soap_get_PointerTo_ns1__GamePlayedAfterCardIn(struct soap*, _ns1__GamePlayedAfterCardIn **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__CardOut_DEFINED
#define SOAP_TYPE_PointerTo_ns1__CardOut_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CardOut(struct soap*, _ns1__CardOut *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CardOut(struct soap*, const char *, int, _ns1__CardOut *const*, const char *);
SOAP_FMAC3 _ns1__CardOut ** SOAP_FMAC4 soap_in_PointerTo_ns1__CardOut(struct soap*, const char*, _ns1__CardOut **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CardOut(struct soap*, _ns1__CardOut *const*, const char*, const char*);
SOAP_FMAC3 _ns1__CardOut ** SOAP_FMAC4 soap_get_PointerTo_ns1__CardOut(struct soap*, _ns1__CardOut **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__CardIn_DEFINED
#define SOAP_TYPE_PointerTo_ns1__CardIn_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CardIn(struct soap*, _ns1__CardIn *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CardIn(struct soap*, const char *, int, _ns1__CardIn *const*, const char *);
SOAP_FMAC3 _ns1__CardIn ** SOAP_FMAC4 soap_in_PointerTo_ns1__CardIn(struct soap*, const char*, _ns1__CardIn **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CardIn(struct soap*, _ns1__CardIn *const*, const char*, const char*);
SOAP_FMAC3 _ns1__CardIn ** SOAP_FMAC4 soap_get_PointerTo_ns1__CardIn(struct soap*, _ns1__CardIn **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetSpeedMediaVersion_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetSpeedMediaVersion_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetSpeedMediaVersion(struct soap*, _ns1__GetSpeedMediaVersion *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetSpeedMediaVersion(struct soap*, const char *, int, _ns1__GetSpeedMediaVersion *const*, const char *);
SOAP_FMAC3 _ns1__GetSpeedMediaVersion ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetSpeedMediaVersion(struct soap*, const char*, _ns1__GetSpeedMediaVersion **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetSpeedMediaVersion(struct soap*, _ns1__GetSpeedMediaVersion *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetSpeedMediaVersion ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetSpeedMediaVersion(struct soap*, _ns1__GetSpeedMediaVersion **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetTriggerRejectedNotification_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetTriggerRejectedNotification_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetTriggerRejectedNotification(struct soap*, _ns1__GetTriggerRejectedNotification *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetTriggerRejectedNotification(struct soap*, const char *, int, _ns1__GetTriggerRejectedNotification *const*, const char *);
SOAP_FMAC3 _ns1__GetTriggerRejectedNotification ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetTriggerRejectedNotification(struct soap*, const char*, _ns1__GetTriggerRejectedNotification **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetTriggerRejectedNotification(struct soap*, _ns1__GetTriggerRejectedNotification *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetTriggerRejectedNotification ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetTriggerRejectedNotification(struct soap*, _ns1__GetTriggerRejectedNotification **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetExternalPaidNotification_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetExternalPaidNotification_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetExternalPaidNotification(struct soap*, _ns1__GetExternalPaidNotification *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetExternalPaidNotification(struct soap*, const char *, int, _ns1__GetExternalPaidNotification *const*, const char *);
SOAP_FMAC3 _ns1__GetExternalPaidNotification ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetExternalPaidNotification(struct soap*, const char*, _ns1__GetExternalPaidNotification **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetExternalPaidNotification(struct soap*, _ns1__GetExternalPaidNotification *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetExternalPaidNotification ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetExternalPaidNotification(struct soap*, _ns1__GetExternalPaidNotification **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetTriggerlessAnnouncementNotification_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetTriggerlessAnnouncementNotification_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetTriggerlessAnnouncementNotification(struct soap*, _ns1__GetTriggerlessAnnouncementNotification *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetTriggerlessAnnouncementNotification(struct soap*, const char *, int, _ns1__GetTriggerlessAnnouncementNotification *const*, const char *);
SOAP_FMAC3 _ns1__GetTriggerlessAnnouncementNotification ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetTriggerlessAnnouncementNotification(struct soap*, const char*, _ns1__GetTriggerlessAnnouncementNotification **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetTriggerlessAnnouncementNotification(struct soap*, _ns1__GetTriggerlessAnnouncementNotification *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetTriggerlessAnnouncementNotification ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetTriggerlessAnnouncementNotification(struct soap*, _ns1__GetTriggerlessAnnouncementNotification **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetJackpotAnnouncementNotification_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetJackpotAnnouncementNotification_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetJackpotAnnouncementNotification(struct soap*, _ns1__GetJackpotAnnouncementNotification *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetJackpotAnnouncementNotification(struct soap*, const char *, int, _ns1__GetJackpotAnnouncementNotification *const*, const char *);
SOAP_FMAC3 _ns1__GetJackpotAnnouncementNotification ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetJackpotAnnouncementNotification(struct soap*, const char*, _ns1__GetJackpotAnnouncementNotification **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetJackpotAnnouncementNotification(struct soap*, _ns1__GetJackpotAnnouncementNotification *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetJackpotAnnouncementNotification ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetJackpotAnnouncementNotification(struct soap*, _ns1__GetJackpotAnnouncementNotification **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetRicochetAwardNotificationCustomWithMediaData_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetRicochetAwardNotificationCustomWithMediaData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetRicochetAwardNotificationCustomWithMediaData(struct soap*, _ns1__GetRicochetAwardNotificationCustomWithMediaData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetRicochetAwardNotificationCustomWithMediaData(struct soap*, const char *, int, _ns1__GetRicochetAwardNotificationCustomWithMediaData *const*, const char *);
SOAP_FMAC3 _ns1__GetRicochetAwardNotificationCustomWithMediaData ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetRicochetAwardNotificationCustomWithMediaData(struct soap*, const char*, _ns1__GetRicochetAwardNotificationCustomWithMediaData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetRicochetAwardNotificationCustomWithMediaData(struct soap*, _ns1__GetRicochetAwardNotificationCustomWithMediaData *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetRicochetAwardNotificationCustomWithMediaData ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetRicochetAwardNotificationCustomWithMediaData(struct soap*, _ns1__GetRicochetAwardNotificationCustomWithMediaData **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetRicochetAwardNotificationCustom_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetRicochetAwardNotificationCustom_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetRicochetAwardNotificationCustom(struct soap*, _ns1__GetRicochetAwardNotificationCustom *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetRicochetAwardNotificationCustom(struct soap*, const char *, int, _ns1__GetRicochetAwardNotificationCustom *const*, const char *);
SOAP_FMAC3 _ns1__GetRicochetAwardNotificationCustom ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetRicochetAwardNotificationCustom(struct soap*, const char*, _ns1__GetRicochetAwardNotificationCustom **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetRicochetAwardNotificationCustom(struct soap*, _ns1__GetRicochetAwardNotificationCustom *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetRicochetAwardNotificationCustom ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetRicochetAwardNotificationCustom(struct soap*, _ns1__GetRicochetAwardNotificationCustom **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetRicochetTriggeredEventNotificationCustom_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetRicochetTriggeredEventNotificationCustom_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetRicochetTriggeredEventNotificationCustom(struct soap*, _ns1__GetRicochetTriggeredEventNotificationCustom *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetRicochetTriggeredEventNotificationCustom(struct soap*, const char *, int, _ns1__GetRicochetTriggeredEventNotificationCustom *const*, const char *);
SOAP_FMAC3 _ns1__GetRicochetTriggeredEventNotificationCustom ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetRicochetTriggeredEventNotificationCustom(struct soap*, const char*, _ns1__GetRicochetTriggeredEventNotificationCustom **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetRicochetTriggeredEventNotificationCustom(struct soap*, _ns1__GetRicochetTriggeredEventNotificationCustom *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetRicochetTriggeredEventNotificationCustom ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetRicochetTriggeredEventNotificationCustom(struct soap*, _ns1__GetRicochetTriggeredEventNotificationCustom **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetSplashdownAwardNotificationCustomWithMediaData_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetSplashdownAwardNotificationCustomWithMediaData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetSplashdownAwardNotificationCustomWithMediaData(struct soap*, _ns1__GetSplashdownAwardNotificationCustomWithMediaData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetSplashdownAwardNotificationCustomWithMediaData(struct soap*, const char *, int, _ns1__GetSplashdownAwardNotificationCustomWithMediaData *const*, const char *);
SOAP_FMAC3 _ns1__GetSplashdownAwardNotificationCustomWithMediaData ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetSplashdownAwardNotificationCustomWithMediaData(struct soap*, const char*, _ns1__GetSplashdownAwardNotificationCustomWithMediaData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetSplashdownAwardNotificationCustomWithMediaData(struct soap*, _ns1__GetSplashdownAwardNotificationCustomWithMediaData *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetSplashdownAwardNotificationCustomWithMediaData ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetSplashdownAwardNotificationCustomWithMediaData(struct soap*, _ns1__GetSplashdownAwardNotificationCustomWithMediaData **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetSplashdownAwardNotificationCustom_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetSplashdownAwardNotificationCustom_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetSplashdownAwardNotificationCustom(struct soap*, _ns1__GetSplashdownAwardNotificationCustom *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetSplashdownAwardNotificationCustom(struct soap*, const char *, int, _ns1__GetSplashdownAwardNotificationCustom *const*, const char *);
SOAP_FMAC3 _ns1__GetSplashdownAwardNotificationCustom ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetSplashdownAwardNotificationCustom(struct soap*, const char*, _ns1__GetSplashdownAwardNotificationCustom **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetSplashdownAwardNotificationCustom(struct soap*, _ns1__GetSplashdownAwardNotificationCustom *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetSplashdownAwardNotificationCustom ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetSplashdownAwardNotificationCustom(struct soap*, _ns1__GetSplashdownAwardNotificationCustom **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetSplashdownTriggeredEventNotificationCustom_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetSplashdownTriggeredEventNotificationCustom_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetSplashdownTriggeredEventNotificationCustom(struct soap*, _ns1__GetSplashdownTriggeredEventNotificationCustom *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetSplashdownTriggeredEventNotificationCustom(struct soap*, const char *, int, _ns1__GetSplashdownTriggeredEventNotificationCustom *const*, const char *);
SOAP_FMAC3 _ns1__GetSplashdownTriggeredEventNotificationCustom ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetSplashdownTriggeredEventNotificationCustom(struct soap*, const char*, _ns1__GetSplashdownTriggeredEventNotificationCustom **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetSplashdownTriggeredEventNotificationCustom(struct soap*, _ns1__GetSplashdownTriggeredEventNotificationCustom *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetSplashdownTriggeredEventNotificationCustom ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetSplashdownTriggeredEventNotificationCustom(struct soap*, _ns1__GetSplashdownTriggeredEventNotificationCustom **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetSentinelConfigNotification_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetSentinelConfigNotification_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetSentinelConfigNotification(struct soap*, _ns1__GetSentinelConfigNotification *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetSentinelConfigNotification(struct soap*, const char *, int, _ns1__GetSentinelConfigNotification *const*, const char *);
SOAP_FMAC3 _ns1__GetSentinelConfigNotification ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetSentinelConfigNotification(struct soap*, const char*, _ns1__GetSentinelConfigNotification **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetSentinelConfigNotification(struct soap*, _ns1__GetSentinelConfigNotification *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetSentinelConfigNotification ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetSentinelConfigNotification(struct soap*, _ns1__GetSentinelConfigNotification **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetCMPStatusNotification_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetCMPStatusNotification_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetCMPStatusNotification(struct soap*, _ns1__GetCMPStatusNotification *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetCMPStatusNotification(struct soap*, const char *, int, _ns1__GetCMPStatusNotification *const*, const char *);
SOAP_FMAC3 _ns1__GetCMPStatusNotification ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetCMPStatusNotification(struct soap*, const char*, _ns1__GetCMPStatusNotification **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetCMPStatusNotification(struct soap*, _ns1__GetCMPStatusNotification *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetCMPStatusNotification ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetCMPStatusNotification(struct soap*, _ns1__GetCMPStatusNotification **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetEventStartNotificationV25_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetEventStartNotificationV25_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetEventStartNotificationV25(struct soap*, _ns1__GetEventStartNotificationV25 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetEventStartNotificationV25(struct soap*, const char *, int, _ns1__GetEventStartNotificationV25 *const*, const char *);
SOAP_FMAC3 _ns1__GetEventStartNotificationV25 ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetEventStartNotificationV25(struct soap*, const char*, _ns1__GetEventStartNotificationV25 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetEventStartNotificationV25(struct soap*, _ns1__GetEventStartNotificationV25 *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetEventStartNotificationV25 ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetEventStartNotificationV25(struct soap*, _ns1__GetEventStartNotificationV25 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetEventStartNotification_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetEventStartNotification_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetEventStartNotification(struct soap*, _ns1__GetEventStartNotification *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetEventStartNotification(struct soap*, const char *, int, _ns1__GetEventStartNotification *const*, const char *);
SOAP_FMAC3 _ns1__GetEventStartNotification ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetEventStartNotification(struct soap*, const char*, _ns1__GetEventStartNotification **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetEventStartNotification(struct soap*, _ns1__GetEventStartNotification *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetEventStartNotification ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetEventStartNotification(struct soap*, _ns1__GetEventStartNotification **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__Checkin_DEFINED
#define SOAP_TYPE_PointerTo_ns1__Checkin_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Checkin(struct soap*, _ns1__Checkin *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Checkin(struct soap*, const char *, int, _ns1__Checkin *const*, const char *);
SOAP_FMAC3 _ns1__Checkin ** SOAP_FMAC4 soap_in_PointerTo_ns1__Checkin(struct soap*, const char*, _ns1__Checkin **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Checkin(struct soap*, _ns1__Checkin *const*, const char*, const char*);
SOAP_FMAC3 _ns1__Checkin ** SOAP_FMAC4 soap_get_PointerTo_ns1__Checkin(struct soap*, _ns1__Checkin **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__EventData_x002eCustomMessageJustificationType_DEFINED
#define SOAP_TYPE_PointerTons3__EventData_x002eCustomMessageJustificationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__EventData_x002eCustomMessageJustificationType(struct soap*, enum ns3__EventData_x002eCustomMessageJustificationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__EventData_x002eCustomMessageJustificationType(struct soap*, const char *, int, enum ns3__EventData_x002eCustomMessageJustificationType *const*, const char *);
SOAP_FMAC3 enum ns3__EventData_x002eCustomMessageJustificationType ** SOAP_FMAC4 soap_in_PointerTons3__EventData_x002eCustomMessageJustificationType(struct soap*, const char*, enum ns3__EventData_x002eCustomMessageJustificationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__EventData_x002eCustomMessageJustificationType(struct soap*, enum ns3__EventData_x002eCustomMessageJustificationType *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__EventData_x002eCustomMessageJustificationType ** SOAP_FMAC4 soap_get_PointerTons3__EventData_x002eCustomMessageJustificationType(struct soap*, enum ns3__EventData_x002eCustomMessageJustificationType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTounsignedInt_DEFINED
#define SOAP_TYPE_PointerTounsignedInt_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedInt(struct soap*, unsigned int *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedInt(struct soap*, const char *, int, unsigned int *const*, const char *);
SOAP_FMAC3 unsigned int ** SOAP_FMAC4 soap_in_PointerTounsignedInt(struct soap*, const char*, unsigned int **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedInt(struct soap*, unsigned int *const*, const char*, const char*);
SOAP_FMAC3 unsigned int ** SOAP_FMAC4 soap_get_PointerTounsignedInt(struct soap*, unsigned int **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons3__CustomMessageLine_DEFINED
#define SOAP_TYPE_PointerToPointerTons3__CustomMessageLine_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons3__CustomMessageLine(struct soap*, ns3__CustomMessageLine **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons3__CustomMessageLine(struct soap*, const char *, int, ns3__CustomMessageLine **const*, const char *);
SOAP_FMAC3 ns3__CustomMessageLine *** SOAP_FMAC4 soap_in_PointerToPointerTons3__CustomMessageLine(struct soap*, const char*, ns3__CustomMessageLine ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons3__CustomMessageLine(struct soap*, ns3__CustomMessageLine **const*, const char*, const char*);
SOAP_FMAC3 ns3__CustomMessageLine *** SOAP_FMAC4 soap_get_PointerToPointerTons3__CustomMessageLine(struct soap*, ns3__CustomMessageLine ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__CustomMessageLine_DEFINED
#define SOAP_TYPE_PointerTons3__CustomMessageLine_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__CustomMessageLine(struct soap*, ns3__CustomMessageLine *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__CustomMessageLine(struct soap*, const char *, int, ns3__CustomMessageLine *const*, const char *);
SOAP_FMAC3 ns3__CustomMessageLine ** SOAP_FMAC4 soap_in_PointerTons3__CustomMessageLine(struct soap*, const char*, ns3__CustomMessageLine **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__CustomMessageLine(struct soap*, ns3__CustomMessageLine *const*, const char*, const char*);
SOAP_FMAC3 ns3__CustomMessageLine ** SOAP_FMAC4 soap_get_PointerTons3__CustomMessageLine(struct soap*, ns3__CustomMessageLine **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ArrayOfCustomMessageLine_DEFINED
#define SOAP_TYPE_PointerTons3__ArrayOfCustomMessageLine_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ArrayOfCustomMessageLine(struct soap*, ns3__ArrayOfCustomMessageLine *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ArrayOfCustomMessageLine(struct soap*, const char *, int, ns3__ArrayOfCustomMessageLine *const*, const char *);
SOAP_FMAC3 ns3__ArrayOfCustomMessageLine ** SOAP_FMAC4 soap_in_PointerTons3__ArrayOfCustomMessageLine(struct soap*, const char*, ns3__ArrayOfCustomMessageLine **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ArrayOfCustomMessageLine(struct soap*, ns3__ArrayOfCustomMessageLine *const*, const char*, const char*);
SOAP_FMAC3 ns3__ArrayOfCustomMessageLine ** SOAP_FMAC4 soap_get_PointerTons3__ArrayOfCustomMessageLine(struct soap*, ns3__ArrayOfCustomMessageLine **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostring_DEFINED
#define SOAP_TYPE_PointerTostring_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostring(struct soap*, char **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostring(struct soap*, const char *, int, char **const*, const char *);
SOAP_FMAC3 char *** SOAP_FMAC4 soap_in_PointerTostring(struct soap*, const char*, char ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostring(struct soap*, char **const*, const char*, const char*);
SOAP_FMAC3 char *** SOAP_FMAC4 soap_get_PointerTostring(struct soap*, char ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring_DEFINED
#define SOAP_TYPE_PointerTo_ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(struct soap*, _ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(struct soap*, const char *, int, _ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring *const*, const char *);
SOAP_FMAC3 _ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring ** SOAP_FMAC4 soap_in_PointerTo_ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(struct soap*, const char*, _ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(struct soap*, _ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring *const*, const char*, const char*);
SOAP_FMAC3 _ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring ** SOAP_FMAC4 soap_get_PointerTo_ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(struct soap*, _ns2__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__ArrayOfstring_DEFINED
#define SOAP_TYPE_PointerTons2__ArrayOfstring_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ArrayOfstring(struct soap*, ns2__ArrayOfstring *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ArrayOfstring(struct soap*, const char *, int, ns2__ArrayOfstring *const*, const char *);
SOAP_FMAC3 ns2__ArrayOfstring ** SOAP_FMAC4 soap_in_PointerTons2__ArrayOfstring(struct soap*, const char*, ns2__ArrayOfstring **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ArrayOfstring(struct soap*, ns2__ArrayOfstring *const*, const char*, const char*);
SOAP_FMAC3 ns2__ArrayOfstring ** SOAP_FMAC4 soap_get_PointerTons2__ArrayOfstring(struct soap*, ns2__ArrayOfstring **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__unsignedByte_DEFINED
#define SOAP_TYPE_PointerToxsd__unsignedByte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__unsignedByte(struct soap*, unsigned char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__unsignedByte(struct soap*, const char *, int, unsigned char *const*, const char *);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerToxsd__unsignedByte(struct soap*, const char*, unsigned char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__unsignedByte(struct soap*, unsigned char *const*, const char*, const char*);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerToxsd__unsignedByte(struct soap*, unsigned char **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToLONG64_DEFINED
#define SOAP_TYPE_PointerToLONG64_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToLONG64(struct soap*, LONG64 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToLONG64(struct soap*, const char *, int, LONG64 *const*, const char *);
SOAP_FMAC3 LONG64 ** SOAP_FMAC4 soap_in_PointerToLONG64(struct soap*, const char*, LONG64 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToLONG64(struct soap*, LONG64 *const*, const char*, const char*);
SOAP_FMAC3 LONG64 ** SOAP_FMAC4 soap_get_PointerToLONG64(struct soap*, LONG64 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTodouble_DEFINED
#define SOAP_TYPE_PointerTodouble_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTodouble(struct soap*, double *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTodouble(struct soap*, const char *, int, double *const*, const char *);
SOAP_FMAC3 double ** SOAP_FMAC4 soap_in_PointerTodouble(struct soap*, const char*, double **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTodouble(struct soap*, double *const*, const char*, const char*);
SOAP_FMAC3 double ** SOAP_FMAC4 soap_get_PointerTodouble(struct soap*, double **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__CustomMessageScreen_DEFINED
#define SOAP_TYPE_PointerTons3__CustomMessageScreen_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__CustomMessageScreen(struct soap*, ns3__CustomMessageScreen *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__CustomMessageScreen(struct soap*, const char *, int, ns3__CustomMessageScreen *const*, const char *);
SOAP_FMAC3 ns3__CustomMessageScreen ** SOAP_FMAC4 soap_in_PointerTons3__CustomMessageScreen(struct soap*, const char*, ns3__CustomMessageScreen **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__CustomMessageScreen(struct soap*, ns3__CustomMessageScreen *const*, const char*, const char*);
SOAP_FMAC3 ns3__CustomMessageScreen ** SOAP_FMAC4 soap_get_PointerTons3__CustomMessageScreen(struct soap*, ns3__CustomMessageScreen **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__ArrayOfKeyValueOfstringstring_DEFINED
#define SOAP_TYPE_PointerTons2__ArrayOfKeyValueOfstringstring_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ArrayOfKeyValueOfstringstring(struct soap*, ns2__ArrayOfKeyValueOfstringstring *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ArrayOfKeyValueOfstringstring(struct soap*, const char *, int, ns2__ArrayOfKeyValueOfstringstring *const*, const char *);
SOAP_FMAC3 ns2__ArrayOfKeyValueOfstringstring ** SOAP_FMAC4 soap_in_PointerTons2__ArrayOfKeyValueOfstringstring(struct soap*, const char*, ns2__ArrayOfKeyValueOfstringstring **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ArrayOfKeyValueOfstringstring(struct soap*, ns2__ArrayOfKeyValueOfstringstring *const*, const char*, const char*);
SOAP_FMAC3 ns2__ArrayOfKeyValueOfstringstring ** SOAP_FMAC4 soap_get_PointerTons2__ArrayOfKeyValueOfstringstring(struct soap*, ns2__ArrayOfKeyValueOfstringstring **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__ArrayOflong_DEFINED
#define SOAP_TYPE_PointerTons2__ArrayOflong_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ArrayOflong(struct soap*, ns2__ArrayOflong *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ArrayOflong(struct soap*, const char *, int, ns2__ArrayOflong *const*, const char *);
SOAP_FMAC3 ns2__ArrayOflong ** SOAP_FMAC4 soap_in_PointerTons2__ArrayOflong(struct soap*, const char*, ns2__ArrayOflong **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ArrayOflong(struct soap*, ns2__ArrayOflong *const*, const char*, const char*);
SOAP_FMAC3 ns2__ArrayOflong ** SOAP_FMAC4 soap_get_PointerTons2__ArrayOflong(struct soap*, ns2__ArrayOflong **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__ArrayOfint_DEFINED
#define SOAP_TYPE_PointerTons2__ArrayOfint_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ArrayOfint(struct soap*, ns2__ArrayOfint *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ArrayOfint(struct soap*, const char *, int, ns2__ArrayOfint *const*, const char *);
SOAP_FMAC3 ns2__ArrayOfint ** SOAP_FMAC4 soap_in_PointerTons2__ArrayOfint(struct soap*, const char*, ns2__ArrayOfint **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ArrayOfint(struct soap*, ns2__ArrayOfint *const*, const char*, const char*);
SOAP_FMAC3 ns2__ArrayOfint ** SOAP_FMAC4 soap_get_PointerTons2__ArrayOfint(struct soap*, ns2__ArrayOfint **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__ArrayOfbase64Binary_DEFINED
#define SOAP_TYPE_PointerTons2__ArrayOfbase64Binary_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ArrayOfbase64Binary(struct soap*, ns2__ArrayOfbase64Binary *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ArrayOfbase64Binary(struct soap*, const char *, int, ns2__ArrayOfbase64Binary *const*, const char *);
SOAP_FMAC3 ns2__ArrayOfbase64Binary ** SOAP_FMAC4 soap_in_PointerTons2__ArrayOfbase64Binary(struct soap*, const char*, ns2__ArrayOfbase64Binary **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ArrayOfbase64Binary(struct soap*, ns2__ArrayOfbase64Binary *const*, const char*, const char*);
SOAP_FMAC3 ns2__ArrayOfbase64Binary ** SOAP_FMAC4 soap_get_PointerTons2__ArrayOfbase64Binary(struct soap*, ns2__ArrayOfbase64Binary **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTobool_DEFINED
#define SOAP_TYPE_PointerTobool_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTobool(struct soap*, bool *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTobool(struct soap*, const char *, int, bool *const*, const char *);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_in_PointerTobool(struct soap*, const char*, bool **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTobool(struct soap*, bool *const*, const char*, const char*);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_get_PointerTobool(struct soap*, bool **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__base64Binary_DEFINED
#define SOAP_TYPE_PointerToxsd__base64Binary_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__base64Binary(struct soap*, xsd__base64Binary *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__base64Binary(struct soap*, const char *, int, xsd__base64Binary *const*, const char *);
SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_in_PointerToxsd__base64Binary(struct soap*, const char*, xsd__base64Binary **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__base64Binary(struct soap*, xsd__base64Binary *const*, const char*, const char*);
SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_get_PointerToxsd__base64Binary(struct soap*, xsd__base64Binary **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToint_DEFINED
#define SOAP_TYPE_PointerToint_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap*, int *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap*, const char *, int, int *const*, const char *);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap*, const char*, int **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap*, int *const*, const char*, const char*);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap*, int **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_ns4__guid_DEFINED
#define SOAP_TYPE_ns4__guid_DEFINED

inline void soap_default_ns4__guid(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns4__guid
	*a = SOAP_DEFAULT_ns4__guid;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__guid(struct soap*, char *const*);

#define soap_ns4__guid2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__guid(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2ns4__guid(soap, s, a) soap_s2char((soap), (s), (char**)(a), 0, -1, "[\\da-fA-F]{8}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{12}")
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_ns4__guid(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_ns4__guid(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__guid(struct soap*, char *const*, const char*, const char*);

inline int soap_write_ns4__guid(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns4__guid(soap, p, "ns4:guid", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns4__guid(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_ns4__guid(soap, p, "ns4:guid", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns4__guid(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_ns4__guid(soap, p, "ns4:guid", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_ns4__guid(struct soap*, char **, const char*, const char*);

inline int soap_read_ns4__guid(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns4__guid(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__guid(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns4__guid(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns4__guid(struct soap *soap, char **p)
{
	if (soap_read_ns4__guid(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns4__duration_DEFINED
#define SOAP_TYPE_ns4__duration_DEFINED

inline void soap_default_ns4__duration(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns4__duration
	*a = SOAP_DEFAULT_ns4__duration;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__duration(struct soap*, char *const*);

#define soap_ns4__duration2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__duration(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2ns4__duration(soap, s, a) soap_s2char((soap), (s), (char**)(a), 0, -1, "\\-?P(\\d*D)?(T(\\d*H)?(\\d*M)?(\\d*(\\.\\d*)?S)?)?")
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_ns4__duration(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_ns4__duration(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__duration(struct soap*, char *const*, const char*, const char*);

inline int soap_write_ns4__duration(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns4__duration(soap, p, "ns4:duration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns4__duration(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_ns4__duration(soap, p, "ns4:duration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns4__duration(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_ns4__duration(soap, p, "ns4:duration", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_ns4__duration(struct soap*, char **, const char*, const char*);

inline int soap_read_ns4__duration(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns4__duration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__duration(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns4__duration(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns4__duration(struct soap *soap, char **p)
{
	if (soap_read_ns4__duration(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__duration_DEFINED
#define SOAP_TYPE_xsd__duration_DEFINED

inline void soap_default_xsd__duration(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_xsd__duration
	*a = SOAP_DEFAULT_xsd__duration;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__duration(struct soap*, char *const*);

#define soap_xsd__duration2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__duration(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2xsd__duration(soap, s, a) soap_s2char((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__duration(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_xsd__duration(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__duration(struct soap*, char *const*, const char*, const char*);

inline int soap_write_xsd__duration(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__duration(soap, p, "xsd:duration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__duration(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_xsd__duration(soap, p, "xsd:duration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_xsd__duration(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_xsd__duration(soap, p, "xsd:duration", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__duration(struct soap*, char **, const char*, const char*);

inline int soap_read_xsd__duration(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__duration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__duration(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__duration(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__duration(struct soap *soap, char **p)
{
	if (soap_read_xsd__duration(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__decimal_DEFINED
#define SOAP_TYPE_xsd__decimal_DEFINED

inline void soap_default_xsd__decimal(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_xsd__decimal
	*a = SOAP_DEFAULT_xsd__decimal;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__decimal(struct soap*, char *const*);

#define soap_xsd__decimal2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__decimal(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2xsd__decimal(soap, s, a) soap_s2char((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__decimal(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_xsd__decimal(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__decimal(struct soap*, char *const*, const char*, const char*);

inline int soap_write_xsd__decimal(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__decimal(soap, p, "xsd:decimal", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__decimal(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_xsd__decimal(soap, p, "xsd:decimal", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_xsd__decimal(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_xsd__decimal(soap, p, "xsd:decimal", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__decimal(struct soap*, char **, const char*, const char*);

inline int soap_read_xsd__decimal(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__decimal(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__decimal(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__decimal(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__decimal(struct soap *soap, char **p)
{
	if (soap_read_xsd__decimal(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__anyURI_DEFINED
#define SOAP_TYPE_xsd__anyURI_DEFINED

inline void soap_default_xsd__anyURI(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_xsd__anyURI
	*a = SOAP_DEFAULT_xsd__anyURI;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anyURI(struct soap*, char *const*);

#define soap_xsd__anyURI2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2xsd__anyURI(soap, s, a) soap_s2char((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__anyURI(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_xsd__anyURI(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyURI(struct soap*, char *const*, const char*, const char*);

inline int soap_write_xsd__anyURI(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__anyURI(soap, p, "xsd:anyURI", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__anyURI(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_xsd__anyURI(soap, p, "xsd:anyURI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_xsd__anyURI(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_xsd__anyURI(soap, p, "xsd:anyURI", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__anyURI(struct soap*, char **, const char*, const char*);

inline int soap_read_xsd__anyURI(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__anyURI(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__anyURI(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__anyURI(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__anyURI(struct soap *soap, char **p)
{
	if (soap_read_xsd__anyURI(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__IDREF_DEFINED
#define SOAP_TYPE_xsd__IDREF_DEFINED

inline void soap_default_xsd__IDREF(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_xsd__IDREF
	*a = SOAP_DEFAULT_xsd__IDREF;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__IDREF(struct soap*, char *const*);

#define soap_xsd__IDREF2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__IDREF(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2xsd__IDREF(soap, s, a) soap_s2char((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__IDREF(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_xsd__IDREF(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__IDREF(struct soap*, char *const*, const char*, const char*);

inline int soap_write_xsd__IDREF(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__IDREF(soap, p, "xsd:IDREF", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__IDREF(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_xsd__IDREF(soap, p, "xsd:IDREF", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_xsd__IDREF(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_xsd__IDREF(soap, p, "xsd:IDREF", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__IDREF(struct soap*, char **, const char*, const char*);

inline int soap_read_xsd__IDREF(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__IDREF(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__IDREF(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__IDREF(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__IDREF(struct soap *soap, char **p)
{
	if (soap_read_xsd__IDREF(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__ID_DEFINED
#define SOAP_TYPE_xsd__ID_DEFINED

inline void soap_default_xsd__ID(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_xsd__ID
	*a = SOAP_DEFAULT_xsd__ID;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__ID(struct soap*, char *const*);

#define soap_xsd__ID2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__ID(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2xsd__ID(soap, s, a) soap_s2char((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__ID(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_xsd__ID(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__ID(struct soap*, char *const*, const char*, const char*);

inline int soap_write_xsd__ID(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__ID(soap, p, "xsd:ID", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__ID(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_xsd__ID(soap, p, "xsd:ID", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_xsd__ID(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_xsd__ID(soap, p, "xsd:ID", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__ID(struct soap*, char **, const char*, const char*);

inline int soap_read_xsd__ID(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__ID(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__ID(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__ID(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__ID(struct soap *soap, char **p)
{
	if (soap_read_xsd__ID(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_PointerTounsignedByte_DEFINED
#define SOAP_TYPE_PointerTounsignedByte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap*, unsigned char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap*, const char *, int, unsigned char *const*, const char *);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap*, const char*, unsigned char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap*, unsigned char *const*, const char*, const char*);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap*, unsigned char **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new__QName(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__QName(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (soap_read__QName(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_string(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (soap_read_string(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

/* End of soapH.h */
