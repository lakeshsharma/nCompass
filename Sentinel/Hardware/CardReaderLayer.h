#pragma once
#include "HIDContext.h"
#include "../../CardReaderLayer/CardReaderLayerAPI.h"
#include "CardReaderConfig.h"
#include "CardReader.h"

enum MACHINE_STATE
{
	IN_THE_CLEAR,
	SOCIAL_DISTANCE,
	CLEANING_IN_PROGRESS
};

extern EnumMap<MACHINE_STATE> MachineStateEnumMap;

enum CARD_STYLE
{
	CARD_STYLE_INVALID = -1,
	CARD_REMOVED,
	CARD_STYLE_PLAYER,
	CARD_BAD_READ,
	CARD_STYLE_EMPLOYEE,
	CARD_STYLE_SOCIAL_DISTANCE,
	CARD_STYLE_CLEANING_IN_PROGRESS
};

extern EnumMap<CARD_STYLE> CardStyleEnumMap;

typedef enum 
{
	CARD_DATA_TRACK1,
	CARD_DATA_TRACK2,
	CARD_DATA_RFID,
} CardDataTrackType;

class CCardReaderLayer
{
public:
	/// <summary>
	/// Standard constructor.
	/// </summary>
	CCardReaderLayer(void);

	/// <summary>
	/// Deconstructor.
	/// </summary>
	virtual ~CCardReaderLayer(void);

	///	<summary>
	/// Load the config file.
	///	</summary>
	void LoadConfig();

	/// <summary>
	/// Returns whether a card reader device is found and there is an existing.
	/// </summary>
	/// <returns>'true' if card reader device is found.</returns>
	/// <remarks>
	/// When 'FindCardReader' provides a valid context, this will return 'true'. 'Cleanup' will set this back to false.
	/// </remarks>
	bool IsReady();

	/// <summary>
	/// Searches HID devices for supported card readers, then creates a context and initializes.
	/// </summary>
	/// <returns>'true' if supported card reader device is found.</returns>
	/// <remarks>
	/// Will clear any pre-existing context and rebuild the context if a supported device is found.
	/// </remarks>
	bool FindCardReader();

//	/// <summary>
//	/// Report is a request of an 'input report' is still pending.
//	/// </summary>
//	/// <param name="numberOfBytesTransferred">OUT - number of bytes read</param>
//	/// <returns>'true' if still pending.</returns>
//	/// <remarks>
//	/// Uses an OVERLAPPED event and structure passed to 'ReadReportData'.
//	/// In general, there are 4 possible results:
//	///     A return value of false indicates that the request is still pending.
//	///     A return value of true indicates one of the following:
//	///         The request completed successfully and numberOfBytesTransferred was determined.
//	///         The request completed successfully, but an error occurred while determing the numberOfBytesTransferred.
//	///         The request completed abnormally.
//	/// </remarks>
//	bool IsRequestPending(DWORD &numberOfBytesTransferred);

	/// <summary>
	/// Enables the card reader.
	/// </summary>
	/// <returns>ERROR_SUCCESS if successful. Last error, otherwise</returns>
	/// <remarks>
	/// Wraps use of 'SetFeature'.
	/// </remarks>
	DWORD Enable();

	/// <summary>
	/// Disables the card reader.
	/// </summary>
	/// <returns>ERROR_SUCCESS if successful. Last error, otherwise</returns>
	/// <remarks>
	/// Wraps use of 'SetFeature'.
	/// </remarks>
	DWORD Disable();

	/// <summary>
	/// Commands the card reader to read the card.
	/// </summary>
	/// <param name="firstTrack">IN - 'true' if reading the 1st track of the card's magnetic strip. If 'false' the 2nd track is read.</param>
	/// <returns>true if successful. False otherwise</returns>
	/// <remarks>
	/// Wraps use of 'SetFeature'. 'ReadReportData' is later used to obtain the card data.
	/// </remarks>
	bool ReadCardData(CardDataTrackType track);

	/// <summary>
	/// Get's the data generated by the last 'SetFeature' call.
	/// </summary>
	/// <param name="reportBuf">OUT - report data generated</param>
	/// <param name="bytes">OUT - number of bytes read</param>
	/// <returns>True if successful.</returns>
	/// <remarks>
	/// Mostly used in conjunction with 'ReadCardData' to get the data on the card.
	/// </remarks>
	bool ReadReportData(PUCHAR reportBuf, int &bytes);

	/// <summary>
	/// Clears the card reader's buffer.
	/// </summary>
	/// <returns>True if successful.</returns>
	/// otherwise</returns> 
	/// <remarks>
	/// Wraps use of 'SetFeature'.
	/// </remarks>
	bool ClearBuffer();

	/// <summary>
	/// Set the color of the card reader's bezel.
	/// </summary>
	/// <param name="style">IN - the style or state of the card reader (inserted, bad card, etc.).</param>
	/// <param name="rankId">IN - player rank identifier.  Ignored if style != CARD_STYLE_PLAYER.</param>
	/// <returns>True if successful.</returns>
	/// <remarks>
	/// Wraps use of 'SetFeature'.
	/// </remarks>
	bool SetBezelStyle(CARD_STYLE style, DWORD rankId);

	/// <summary>
	/// Indicates if this is a RFID reader
	/// </summary>
	/// <returns>Is RFID Reader.</returns>
	bool IsRfidReader();

	/// <summary>
	/// Returns the current card reader config.
	/// </summary>
	/// <returns>The current card reader config..</returns>
	std::shared_ptr<CardReaderConfig> GetCardReaderConfig() const;
	
	void Cleanup(void);

	///	<summary>
	/// Writes HTML.
	///	</summary>
	/// <param name="os">The ostream to write to.</param>
	///	<remarks>
	/// This is implemented in ProcessDump\WebDiagnosticsCardReader.cpp
	///	</remarks>
	void WriteHtml(std::ostream& os) const;

private:
	static const USHORT HID_FEATURE_DATAB_LOCK_SIZE = 64;
	static const int FEATURE_COMMAND = 0;
	static const int FEATURE_DATA = 1;

	bool FindUSBCardReader();
	bool InitCardReader();

	bool SetFeature(PUCHAR reportBuf);

	mutable std::recursive_mutex m_cardReaderConfigCriticalSection;
	std::shared_ptr<CardReaderConfig> m_cardReaderConfig;
	std::shared_ptr<CardReader> m_cardReader;
	std::string m_cardReadersPathname; // used by web diagnostics

	CHIDContext m_context;

	bool m_insertRemoveErrorReported; // Has error been reported since the card reader device was found.
	bool m_rfidReader;
};

