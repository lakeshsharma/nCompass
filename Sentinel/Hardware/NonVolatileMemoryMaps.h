
//NVRAM 
//end = FFC00
// TBD add some sort of nvram checking here.
// Sprinkle values throughout to be checked?
#ifndef NON_VOLATILE_MEMORY_MAPS
#define NON_VOLATILE_MEMORY_MAPS

#include "IOCTLOffsets.h"
#include "../GlobalDefs.h"
#include "../Utilities.h"


// All the NVRAM versions
static const DWORD NVRAM_ORIGINAL_VERSION	= 0x0005;
static const DWORD NVRAM_UNIVERSAL_VERSION	= 0x0006;
static const DWORD NVRAM_125_COMPATIBLE_VERSION = 0X0007;
static const DWORD NVRAM_UNIVERSAL_POINTS_VERSION	= 0x0008;
static const DWORD NVRAM_NCL_CARD_TRACK_VERSION	= 0x0009;
static const DWORD NVRAM_REBOOT_DIAGNOSTIC_VERSION = 0x000a;
static const DWORD NVRAM_PLAYER_RANK_VERSION = 0x000b;
static const DWORD NVRAM_EGM_AWARD_VERSION = 0x000c;
static const DWORD NVRAM_CONFIG_EXT_VERSION = 0x000d;
static const DWORD NVRAM_CONFIG_VERSION_2 = 0x000e;
static const DWORD NVRAM_CONFIG_EXT2_VERSION = 0x000f;
static const DWORD NVRAM_EGM_AWARD_STANDARD_VERSION = 0x0010;
static const DWORD NVRAM_CUMULATIVE_PROGRESSIVE_VERSION = 0x0011;
static const DWORD NVRAM_CONFIG_EXT3_VERSION = 0x0012;
static const DWORD NVRAM_CONFIG_EXT4_VERSION = 0x0013;
static const DWORD NVRAM_DISPLAY_PLAYER_PROFILE_BUTTON_VERSION = 0x0014;
static const DWORD NVRAM_MGMD_VERSION = 0x0015;
static const DWORD NVRAM_GAME_LIST_CHUNKS_VERSION = 0x0016;
static const DWORD NVRAM_EXTERNAL_CREDIT_TRANSFER_TO_GAME = 0x0017;
static const DWORD NVRAM_MOBILE_NCOMPASS_VERSION = 0x0018;
static const DWORD NVRAM_EXCESSIVE_VOUCHER_OUT_VERSION = 0x0019;
static const DWORD NVRAM_2826_MR_CLEAR_SUBGAMES = 0x1a;
static const DWORD NVRAM_PARTIAL_WAT_OUT_VERSION = 0x001b;
static const DWORD NVRAM_EXTENSIBLE_FLAGS = 0x001c;
static const DWORD NVRAM_UJP_TAX_WITHHOLDING_VERSION = 0x001d;
static const DWORD NVRAM_NUMBER_OF_SUBGAMES_MISMATCH_CHECK = 0x001e;
static const DWORD NVRAM_NUMBER_OF_SYSTEM_TIME = 0x001f;
static const DWORD NVRAM_RESET_EXTENSIBLE_SETTINGS = 0x0020;
static const DWORD NVRAM_MAP_VERSION_VALUE = NVRAM_RESET_EXTENSIBLE_SETTINGS;// This value will change

static const DWORD NVRAM_MAP_VERSION_OFFSET	= 0x0000;
static const DWORD NVRAM_MAP_VERSION_SIZE	= 0x0004;

static const int NVRAM_CHASSIS_DOOR_LOCATION = -1;

const BYTE NVRAM_SPEEDMEDIA_TRANSACTION_BLOCK_USED = 0xff;
const BYTE NVRAM_SPEEDMEDIA_TRANSACTION_BLOCK_UNUSED = 0;

//-------------------
//-----SPRINKLE------
static const BYTE ZERO_SPRINKLE_VALUE = 0x00;
static const BYTE OLD_SPRINKLE_VALUE = 0x38;	// This specifies that it was NVRAM version number 5
static const BYTE SPRINKLE_VALUE = 0x39;
static const int NUM_SPRINKLE_VALUES = 16;
static const DWORD SPRINKLE1_OFFSET = NVRAM_MAP_VERSION_OFFSET + NVRAM_MAP_VERSION_SIZE;

//--------------------------------------------
//------------------GAMES---------------------
static const DWORD NVRAM_LOCATION_IS_ACTIVE	= 1;
static const DWORD NVRAM_METER_SIZE	 = (9 + NVRAM_LOCATION_IS_ACTIVE); //1 byte for meter number, 8 bytes for value, 
static const DWORD NVRAM_NUMBER_OF_EGM_METERS = 100;	// Padded. Currently only 89 meters
static const DWORD NVRAM_NUMBER_OF_SUBGAME_METERS = 10;	// No padding here!

static const DWORD NVRAM_GAMES_OFFSET = SPRINKLE1_OFFSET + sizeof(SPRINKLE_VALUE);
static const DWORD NVRAM_GAME_DATA_SIZE = 50;	// No padding left!
static const DWORD NVRAM_EGM_METERS_SIZE =		NVRAM_LOCATION_IS_ACTIVE + sizeof(DWORD) + (NVRAM_NUMBER_OF_EGM_METERS * NVRAM_METER_SIZE);	// DWORD is for count
static const DWORD NVRAM_SUBGAME_METERS_SIZE =	NVRAM_LOCATION_IS_ACTIVE + sizeof(DWORD) + (NVRAM_NUMBER_OF_SUBGAME_METERS * NVRAM_METER_SIZE);
static const DWORD NVRAM_EGM_GAME_SIZE =		NVRAM_LOCATION_IS_ACTIVE + NVRAM_GAME_DATA_SIZE +  NVRAM_EGM_METERS_SIZE;
static const DWORD NVRAM_SUBGAME_SIZE =			NVRAM_LOCATION_IS_ACTIVE + NVRAM_GAME_DATA_SIZE + NVRAM_SUBGAME_METERS_SIZE;

static const DWORD MAX_NUMBER_OF_SUBGAMES = 256;
static const DWORD NVRAM_GAMES_SIZE	= NVRAM_LOCATION_IS_ACTIVE + sizeof(DWORD) + NVRAM_EGM_GAME_SIZE + (NVRAM_SUBGAME_SIZE * MAX_NUMBER_OF_SUBGAMES); // DWORD is for count

//-------------------
//-----SPRINKLE------
static const DWORD SPRINKLE2_OFFSET = NVRAM_GAMES_OFFSET + NVRAM_GAMES_SIZE;

//--------------------------------------------
//-------------CONFIG-------------------------
static const DWORD NVRAM_CONFIG_CHECKBYTE_SIZE = sizeof( byte );
static const byte  NVRAM_CONFIG_CHECKBYTE_VALUE = 0x5c;	// If this is not this value, eerom needs to be set to defaults.
static const DWORD NVRAM_CONFIG_CHECKBYTE_OFFSET = SPRINKLE2_OFFSET + sizeof(SPRINKLE_VALUE);
static const DWORD NVRAM_CONFIG_OFFSET = NVRAM_CONFIG_CHECKBYTE_OFFSET + NVRAM_CONFIG_CHECKBYTE_SIZE;
static const DWORD NVRAM_CONFIG_SIZE = 3000;

static const long NVRAM_CONFIG_PENDING_SLOTMAST_DEFAULT = 0;//TODO: INVALID_SLOT_MAST_ID;

static const DWORD NVRAM_CONFIG_CARD_TIMEOUT_DEFAULT = 3600;

static const LPCTSTR NVRAM_CONFIG_GOOD_CARD_DEFAULT = "Card Accepted";
static const LPCTSTR NVRAM_CONFIG_BAD_CARD_DEFAULT = "Please Reinsert Card";
static const LPCTSTR NVRAM_CONFIG_BIRTHDAY_DEFAULT = "Happy Birthday";
static const LPCTSTR NVRAM_CONFIG_ANNIVERSARY_DEFAULT = "Happy Anniversary";
static const LPCTSTR NVRAM_CONFIG_CONGRATS_DEFAULT = "Congratulations";
static const LPCTSTR NVRAM_CONFIG_WELCOME_DEFAULT = "Welcome";
static const LPCTSTR NVRAM_CONFIG_CASINO_NAME_DEFAULT = "This Casino";
static const LPCTSTR NVRAM_CONFIG_CASINO_ADDRESS1_DEFAULT = "Your Street";
static const LPCTSTR NVRAM_CONFIG_CASINO_ADDRESS2_DEFAULT = "Town / City / State";
static const LPCTSTR NVRAM_CONFIG_NUDGE_IP = "239.10.10.7";
static const long NVRAM_CONFIG_NUDGE_PORT = NUDGE_PORT_DEFAULT;
static const LPCTSTR NVRAM_CONFIG_CACHE_ANNOUNCEMENT_IP = "239.10.10.6";
static const long NVRAM_CONFIG_CACHE_ANNOUNCEMENT_PORT = ANNOUNCEMENT_PORT_DEFAULT;


//-------------------
//-----SPRINKLE------
static const DWORD SPRINKLE3_OFFSET = NVRAM_CONFIG_OFFSET + NVRAM_CONFIG_SIZE;

//--------------------------------------------
//-------------PLAYER-------------------------
static const DWORD NVRAM_PLAYER_OFFSET = SPRINKLE3_OFFSET + sizeof(SPRINKLE_VALUE);
static const DWORD NVRAM_PLAYER_SIZE = 640;			// Padded - room to grow
static const DWORD NVRAM_PLAYER_CHECKBYTE_OFFSET = NVRAM_PLAYER_OFFSET;
static const DWORD NVRAM_PLAYER_CHECKBYTE_SIZE = sizeof ( byte );
static const byte  NVRAM_PLAYER_CHECKBYTE_VALUE = 0x5b;	// If this is not the value, assume player does not currently exist
static const DWORD NVRAM_PLAYER_DATA_OFFSET = NVRAM_PLAYER_CHECKBYTE_OFFSET + NVRAM_PLAYER_CHECKBYTE_SIZE;

//-------------------
//-----SPRINKLE------
static const DWORD SPRINKLE4_OFFSET = NVRAM_PLAYER_OFFSET + NVRAM_PLAYER_SIZE;

//--------------------------------------------
//------------- PLAYER START of SESSION METERS --------
static const DWORD NVRAM_PLAYER_START_METERS_OFFSET = SPRINKLE4_OFFSET + sizeof(SPRINKLE_VALUE);
static const DWORD NVRAM_PLAYER_START_METERS_SIZE = NVRAM_EGM_METERS_SIZE;

//-------------------
//-----SPRINKLE------
static const DWORD SPRINKLE5_OFFSET = NVRAM_PLAYER_START_METERS_OFFSET + NVRAM_PLAYER_START_METERS_SIZE;

//--------------------------------------------
//------------- TRANSACTIONS -----------------
static const DWORD NVRAM_TRANSACTIONS_OFFSET = SPRINKLE5_OFFSET + sizeof(SPRINKLE_VALUE);
static const DWORD NVRAM_TRANSACTION_SIZE = 870;
static const DWORD MAX_NUMBER_OF_TRANSACTIONS = 700;
static const DWORD NVRAM_TRANSACTIONS_SIZE = NVRAM_TRANSACTION_SIZE * MAX_NUMBER_OF_TRANSACTIONS;

//-------------------
//-----SPRINKLE------
static const DWORD SPRINKLE6_OFFSET = NVRAM_TRANSACTIONS_OFFSET + NVRAM_TRANSACTIONS_SIZE;

//--------------------------------------------
//------------- PLAYER BONUS EVENTS --------
static const DWORD NVRAM_PLAYER_BONUS_EVENTS_OFFSET = SPRINKLE6_OFFSET + sizeof(SPRINKLE_VALUE);
static const DWORD NVRAM_PLAYER_BONUS_EVENTS_CHECKBYTE_OFFSET = NVRAM_PLAYER_BONUS_EVENTS_OFFSET;
static const DWORD NVRAM_PLAYER_BONUS_EVENTS_CHECKBYTE_SIZE = sizeof ( byte );
static const byte  NVRAM_PLAYER_BONUS_EVENTS_CHECKBYTE_VALUE = 0x5b;	// If this is not the value, assume events do not currently exist
static const DWORD NVRAM_PLAYER_BONUS_EVENTS_DATA_OFFSET = NVRAM_PLAYER_BONUS_EVENTS_CHECKBYTE_OFFSET + NVRAM_PLAYER_BONUS_EVENTS_CHECKBYTE_SIZE;
static const DWORD NVRAM_PLAYER_BONUS_EVENTS_DATA_SIZE = 40;	// This number is padded.
static const DWORD NVRAM_PLAYER_BONUS_EVENT_OFFSET = NVRAM_PLAYER_BONUS_EVENTS_DATA_OFFSET + NVRAM_PLAYER_BONUS_EVENTS_DATA_SIZE;
static const DWORD NVRAM_PLAYER_BONUS_EVENT_SIZE = 80;			// This number is padded.
static const DWORD NVRAM_MAX_BONUS_EVENTS = 20;		// need 6 - 4 extra events
static const DWORD NVRAM_PLAYER_BONUS_EVENTS_SIZE = NVRAM_PLAYER_BONUS_EVENTS_CHECKBYTE_SIZE + NVRAM_PLAYER_BONUS_EVENTS_DATA_SIZE + (NVRAM_PLAYER_BONUS_EVENT_SIZE * NVRAM_MAX_BONUS_EVENTS);

//-------------------
//-----SPRINKLE------
static const DWORD SPRINKLE7_OFFSET = NVRAM_PLAYER_BONUS_EVENTS_OFFSET + NVRAM_PLAYER_BONUS_EVENTS_SIZE;

//--------------------------------------------
//-------------TRANSACTION LOG----------------
static const DWORD NVRAM_TRANSACTION_LOGS_OFFSET = SPRINKLE7_OFFSET + sizeof(SPRINKLE_VALUE);
static const DWORD NVRAM_TRANSACTION_LOGS_CHECKBYTE_OFFSET = NVRAM_TRANSACTION_LOGS_OFFSET;
static const DWORD NVRAM_TRANSACTION_LOGS_CHECKBYTE_SIZE = sizeof ( byte );
static const byte  NVRAM_TRANSACTION_LOGS_CHECKBYTE_VALUE = 0x5b;	// If this is not the value, assume transaction logs do not currently exist
static const DWORD NVRAM_TRANSACTION_LOGS_IS_LOG_FULL_OFFSET = NVRAM_TRANSACTION_LOGS_CHECKBYTE_OFFSET + NVRAM_TRANSACTION_LOGS_CHECKBYTE_SIZE; //used for log full flag
static const DWORD NVRAM_TRANSACTION_LOGS_INDEX_OFFSET = NVRAM_TRANSACTION_LOGS_IS_LOG_FULL_OFFSET + sizeof ( byte );	// used for current index in log
static const DWORD NVRAM_TRANSACTION_LOGS_DATA_OFFSET = NVRAM_TRANSACTION_LOGS_INDEX_OFFSET + sizeof ( int );
static const DWORD NVRAM_TRANSACTION_LOG_DATA_SIZE = 40;			// This number is padded.
static const DWORD NVRAM_MAX_TRANSACTION_LOGS = 35;		// only have 35 transactions in a log
static const DWORD NVRAM_TRANSACTION_LOGS_SIZE = NVRAM_TRANSACTION_LOG_DATA_SIZE * NVRAM_MAX_TRANSACTION_LOGS;

//-------------------
//-----SPRINKLE------
static const DWORD SPRINKLE8_OFFSET = NVRAM_TRANSACTION_LOGS_DATA_OFFSET + NVRAM_TRANSACTION_LOGS_SIZE;

//--------------------------------------------
//-------------TICKET LOG----------------
static const DWORD NVRAM_TICKET_LOGS_OFFSET = SPRINKLE8_OFFSET + sizeof(SPRINKLE_VALUE);
static const DWORD NVRAM_TICKET_LOGS_CHECKBYTE_OFFSET = NVRAM_TICKET_LOGS_OFFSET;
static const DWORD NVRAM_TICKET_LOGS_CHECKBYTE_SIZE = sizeof ( byte );
static const byte  NVRAM_TICKET_LOGS_CHECKBYTE_VALUE = 0x5b;	// If this is not the value, assume transaction logs do not currently exist
static const DWORD NVRAM_TICKET_LOGS_IS_LOG_FULL_OFFSET = NVRAM_TICKET_LOGS_CHECKBYTE_OFFSET + NVRAM_TICKET_LOGS_CHECKBYTE_SIZE; //used for log full flag
static const DWORD NVRAM_TICKET_LOGS_INDEX_OFFSET = NVRAM_TICKET_LOGS_IS_LOG_FULL_OFFSET + sizeof ( byte );	// used for current index in log
static const DWORD NVRAM_TICKET_LOGS_DATA_OFFSET = NVRAM_TICKET_LOGS_INDEX_OFFSET + sizeof ( int );//start of ticket log data
static const DWORD NVRAM_TICKET_LOG_DATA_SIZE = 60;			// This number is padded.
static const DWORD NVRAM_MAX_TICKET_LOGS = 35;		// only have 35 Tickets in a log
static const DWORD NVRAM_TICKET_LOGS_SIZE = NVRAM_TICKET_LOG_DATA_SIZE * NVRAM_MAX_TICKET_LOGS;

//-------------------
//-----SPRINKLE------
static const DWORD SPRINKLE9_OFFSET = NVRAM_TICKET_LOGS_DATA_OFFSET + NVRAM_TICKET_LOGS_SIZE;

//--------------------------------------------
//--------ATTENDANT PAID PAYOUT LOG-----------
static const DWORD NVRAM_ATT_PAID_LOGS_OFFSET = SPRINKLE9_OFFSET + sizeof(SPRINKLE_VALUE);
static const DWORD NVRAM_ATT_PAID_LOGS_CHECKBYTE_OFFSET = NVRAM_ATT_PAID_LOGS_OFFSET;
static const DWORD NVRAM_ATT_PAID_LOGS_CHECKBYTE_SIZE = sizeof ( byte );
static const byte  NVRAM_ATT_PAID_LOGS_CHECKBYTE_VALUE = 0x5b;	// If this is not the value, assume transaction logs do not currently exist
static const DWORD NVRAM_ATT_PAID_LOGS_IS_LOG_FULL_OFFSET = NVRAM_ATT_PAID_LOGS_CHECKBYTE_OFFSET + NVRAM_ATT_PAID_LOGS_CHECKBYTE_SIZE; //used for log full flag
static const DWORD NVRAM_ATT_PAID_LOGS_INDEX_OFFSET = NVRAM_ATT_PAID_LOGS_IS_LOG_FULL_OFFSET + sizeof ( byte );	// used for current index in log
static const DWORD NVRAM_ATT_PAID_LOGS_DATA_OFFSET = NVRAM_ATT_PAID_LOGS_INDEX_OFFSET + sizeof ( int );//start of ticket log data
static const DWORD NVRAM_ATT_PAID_LOG_DATA_SIZE = 40;			 // This number is padded.
static const DWORD NVRAM_MAX_ATT_PAID_LOGS = 35;		// only have 35 attendant paid payouts in a log
static const DWORD NVRAM_ATT_PAID_LOGS_SIZE = NVRAM_ATT_PAID_LOG_DATA_SIZE * NVRAM_MAX_ATT_PAID_LOGS;

//-------------------
//-----SPRINKLE------
static const DWORD SPRINKLE10_OFFSET = NVRAM_ATT_PAID_LOGS_DATA_OFFSET + NVRAM_ATT_PAID_LOGS_SIZE;

//--------------------------------------------
//-------------PBT LOG------------------------
static const DWORD NVRAM_PBT_LOG_LOGS_OFFSET = SPRINKLE10_OFFSET + sizeof(SPRINKLE_VALUE);
static const DWORD NVRAM_PBT_LOG_LOGS_CHECKBYTE_OFFSET = NVRAM_PBT_LOG_LOGS_OFFSET;
static const DWORD NVRAM_PBT_LOG_LOGS_CHECKBYTE_SIZE = sizeof ( byte );
static const byte  NVRAM_PBT_LOG_LOGS_CHECKBYTE_VALUE = 0x5b;	// If this is not the value, assume transaction logs do not currently exist
static const DWORD NVRAM_PBT_LOG_LOGS_IS_LOG_FULL_OFFSET = NVRAM_PBT_LOG_LOGS_CHECKBYTE_OFFSET + NVRAM_PBT_LOG_LOGS_CHECKBYTE_SIZE; //used for log full flag
static const DWORD NVRAM_PBT_LOG_LOGS_INDEX_OFFSET = NVRAM_PBT_LOG_LOGS_IS_LOG_FULL_OFFSET + sizeof ( byte );	// used for current index in log
static const DWORD NVRAM_PBT_LOG_LOGS_DATA_OFFSET = NVRAM_PBT_LOG_LOGS_INDEX_OFFSET + sizeof ( int );//start of PBT log data
static const DWORD NVRAM_PBT_LOG_LOG_DATA_SIZE = 100;			// This number is padded.
static const DWORD NVRAM_MAX_PBT_LOG_LOGS = 100;		// only have 100 PBT events in a log
static const DWORD NVRAM_PBT_LOG_LOGS_SIZE = NVRAM_PBT_LOG_LOG_DATA_SIZE * NVRAM_MAX_PBT_LOG_LOGS;
static const DWORD NVRAM_PBT_LOG_LOGS_CHECKBYTE2_VALUE = 0x5c; // log entry extension for partial transfer information

//-------------------
//-----SPRINKLE------
static const DWORD SPRINKLE11_OFFSET = NVRAM_PBT_LOG_LOGS_DATA_OFFSET + NVRAM_PBT_LOG_LOGS_SIZE;

//--------------------------------------------
//-------------PBT EVENTS---------------------
static const DWORD NVRAM_PBT_EVENTS_LOGS_OFFSET = SPRINKLE11_OFFSET + sizeof(SPRINKLE_VALUE);
static const DWORD NVRAM_PBT_EVENTS_LOGS_CHECKBYTE_OFFSET = NVRAM_PBT_EVENTS_LOGS_OFFSET;
static const DWORD NVRAM_PBT_EVENTS_LOGS_CHECKBYTE_SIZE = sizeof ( byte );
static const byte  NVRAM_PBT_EVENTS_LOGS_CHECKBYTE_VALUE = 0x5b;	// If this is not the value, assume transaction logs do not currently exist
static const DWORD NVRAM_PBT_EVENTS_LOGS_IS_LOG_FULL_OFFSET = NVRAM_PBT_EVENTS_LOGS_CHECKBYTE_OFFSET + NVRAM_PBT_EVENTS_LOGS_CHECKBYTE_SIZE; //used for log full flag
static const DWORD NVRAM_PBT_EVENTS_LOGS_INDEX_OFFSET = NVRAM_PBT_EVENTS_LOGS_IS_LOG_FULL_OFFSET + sizeof ( byte );	// used for current index in log
static const DWORD NVRAM_PBT_EVENTS_LOGS_DATA_OFFSET = NVRAM_PBT_EVENTS_LOGS_INDEX_OFFSET + sizeof ( int );//start of PBT events log data
static const DWORD NVRAM_PBT_EVENTS_LOG_DATA_SIZE = 100;			// This number is padded.
static const DWORD NVRAM_MAX_PBT_EVENTS_LOGS = 100;		// only have 100 PBT events in a log
static const DWORD NVRAM_PBT_EVENTS_LOGS_SIZE = NVRAM_PBT_EVENTS_LOG_DATA_SIZE * NVRAM_MAX_PBT_EVENTS_LOGS;

//-------------------
//-----SPRINKLE------
static const DWORD SPRINKLE12_OFFSET = NVRAM_PBT_EVENTS_LOGS_DATA_OFFSET + NVRAM_PBT_EVENTS_LOGS_SIZE;

//--------------------------------------------
//-------------COMPOSITE TILTS----------------
static const DWORD NVRAM_COMPOSITE_TILTS_LOGS_OFFSET = SPRINKLE12_OFFSET + sizeof(SPRINKLE_VALUE);
static const DWORD NVRAM_COMPOSITE_TILTS_LOGS_CHECKBYTE_OFFSET = NVRAM_COMPOSITE_TILTS_LOGS_OFFSET;
static const DWORD NVRAM_COMPOSITE_TILTS_LOGS_CHECKBYTE_SIZE = sizeof ( byte );
static const byte  NVRAM_COMPOSITE_TILTS_LOGS_CHECKBYTE_VALUE = 0x5b;	// If this is not the value, assume transaction logs do not currently exist
static const DWORD NVRAM_COMPOSITE_TILTS_LOGS_IS_LOG_FULL_OFFSET = NVRAM_COMPOSITE_TILTS_LOGS_CHECKBYTE_OFFSET + NVRAM_COMPOSITE_TILTS_LOGS_CHECKBYTE_SIZE; //used for log full flag
static const DWORD NVRAM_COMPOSITE_TILTS_LOGS_INDEX_OFFSET = NVRAM_COMPOSITE_TILTS_LOGS_IS_LOG_FULL_OFFSET + sizeof ( byte );	// used for current index in log
static const DWORD NVRAM_COMPOSITE_TILTS_LOGS_DATA_OFFSET = NVRAM_COMPOSITE_TILTS_LOGS_INDEX_OFFSET + sizeof ( int );//start of tilts log data
static const DWORD NVRAM_COMPOSITE_TILTS_LOG_DATA_SIZE = 30;			// This number is padded.
static const DWORD NVRAM_MAX_COMPOSITE_TILTS_LOGS = 35;		// only have 35 composite tilts in a log
static const DWORD NVRAM_COMPOSITE_TILTS_LOGS_SIZE = NVRAM_COMPOSITE_TILTS_LOG_DATA_SIZE * NVRAM_MAX_COMPOSITE_TILTS_LOGS;

//-------------------
//-----SPRINKLE------
static const DWORD SPRINKLE13_OFFSET = NVRAM_COMPOSITE_TILTS_LOGS_DATA_OFFSET + NVRAM_COMPOSITE_TILTS_LOGS_SIZE;

//--------------------------------------------
//-------------REPAIR CODES-------------------
static const DWORD NVRAM_REPAIR_CODES_LOGS_OFFSET = SPRINKLE13_OFFSET + sizeof(SPRINKLE_VALUE);
static const DWORD NVRAM_REPAIR_CODES_LOGS_CHECKBYTE_OFFSET = NVRAM_REPAIR_CODES_LOGS_OFFSET;
static const DWORD NVRAM_REPAIR_CODES_LOGS_CHECKBYTE_SIZE = sizeof ( byte );
static const byte  NVRAM_REPAIR_CODES_LOGS_CHECKBYTE_VALUE = 0x5b;	// If this is not the value, assume transaction logs do not currently exist
static const DWORD NVRAM_REPAIR_CODES_LOGS_IS_LOG_FULL_OFFSET = NVRAM_REPAIR_CODES_LOGS_CHECKBYTE_OFFSET + NVRAM_REPAIR_CODES_LOGS_CHECKBYTE_SIZE; //used for log full flag
static const DWORD NVRAM_REPAIR_CODES_LOGS_INDEX_OFFSET = NVRAM_REPAIR_CODES_LOGS_IS_LOG_FULL_OFFSET + sizeof ( byte );	// used for current index in log
static const DWORD NVRAM_REPAIR_CODES_LOGS_DATA_OFFSET = NVRAM_REPAIR_CODES_LOGS_INDEX_OFFSET + sizeof ( int );//start of repair log data
static const DWORD NVRAM_REPAIR_CODES_LOG_DATA_SIZE = 30;			 // This number is padded.
static const DWORD NVRAM_MAX_REPAIR_CODES_LOGS = 35;		// only have 35 repair codes in a log
static const DWORD NVRAM_REPAIR_CODES_LOGS_SIZE = NVRAM_REPAIR_CODES_LOG_DATA_SIZE * NVRAM_MAX_REPAIR_CODES_LOGS;

//-------------------
//-----SPRINKLE------
static const DWORD SPRINKLE14_OFFSET = NVRAM_REPAIR_CODES_LOGS_DATA_OFFSET + NVRAM_REPAIR_CODES_LOGS_SIZE;

//--------------------------------------------
//-----------------TICKETS--------------------
static const DWORD NVRAM_TICKETS_OFFSET = SPRINKLE14_OFFSET + sizeof(SPRINKLE_VALUE);
static const DWORD NVRAM_TICKETS_CHECKBYTE_OFFSET = NVRAM_TICKETS_OFFSET;
static const DWORD NVRAM_TICKETS_CHECKBYTE_SIZE = sizeof ( byte );
static const byte  NVRAM_TICKETS_CHECKBYTE_VALUE = 0x1a;	// If this is not the value, assume tickets do not currently exist
static const DWORD NVRAM_TICKETS_DATA_OFFSET = NVRAM_TICKETS_CHECKBYTE_OFFSET + NVRAM_TICKETS_CHECKBYTE_SIZE;
static const DWORD NVRAM_TICKETS_DATA_SIZE = 32;
static const DWORD NVRAM_TICKET_SIZE = 128;
static const DWORD NVRAM_TICKET_IN_OFFSET = NVRAM_TICKETS_DATA_OFFSET + NVRAM_TICKETS_DATA_SIZE;
static const DWORD NVRAM_TICKET_OUT_OFFSET = NVRAM_TICKET_IN_OFFSET + NVRAM_TICKET_SIZE + NVRAM_TICKETS_CHECKBYTE_SIZE;
static const DWORD NVRAM_TICKETS_SIZE = (NVRAM_TICKETS_CHECKBYTE_SIZE * 3) + NVRAM_TICKETS_DATA_SIZE + (NVRAM_TICKET_SIZE * 2);

//-------------------
//-----SPRINKLE------
static const DWORD SPRINKLE15_OFFSET = NVRAM_TICKETS_OFFSET + NVRAM_TICKETS_SIZE;

//--------------------------------------------
//-----------------PB TRANSFER----------------
static const DWORD NVRAM_PB_TRANSFER_OFFSET = SPRINKLE15_OFFSET + sizeof(SPRINKLE_VALUE);
static const DWORD NVRAM_PB_TRANSFER_CHECKBYTE_OFFSET = NVRAM_PB_TRANSFER_OFFSET;
static const DWORD NVRAM_PB_TRANSFER_CHECKBYTE_SIZE = sizeof ( byte );
static const byte  NVRAM_PB_TRANSFER_CHECKBYTE_VALUE = 0x1a;	
static const DWORD NVRAM_PB_TRANSFER_SIZE = 192;

//--------------------------------------------
//-----------------PB INFO--------------------
static const DWORD NVRAM_PB_INFO_OFFSET = NVRAM_PB_TRANSFER_OFFSET + NVRAM_PB_TRANSFER_SIZE;
static const DWORD NVRAM_PB_INFO_CHECKBYTE_OFFSET = NVRAM_PB_INFO_OFFSET;
static const DWORD NVRAM_PB_INFO_CHECKBYTE_SIZE = sizeof ( byte );
static const byte  NVRAM_PB_INFO_CHECKBYTE_VALUE = 0x1a;	
static const DWORD NVRAM_PB_INFO_SIZE = 128;	

//-------------------
//-----SPRINKLE------
static const DWORD SPRINKLE16_OFFSET = NVRAM_PB_INFO_OFFSET + NVRAM_PB_INFO_SIZE;

//--------------------------------------------
//---------------HARD PINS--------------------
static const DWORD NVRAM_HARDPIN_OFFSET = SPRINKLE16_OFFSET + sizeof(SPRINKLE_VALUE);
static const DWORD NVRAM_HARDPIN_CHECKBYTE_OFFSET = NVRAM_HARDPIN_OFFSET;
static const DWORD NVRAM_HARDPIN_CHECKBYTE_SIZE = sizeof (byte);
static const byte  NVRAM_HARDPIN_CHECKBYTE_VALUE = 0x2f;
static const DWORD NVRAM_HARDPIN_SIZE = 33;		//check byte + (16 possible pins * (1 byte for active state + 1 byte for meter number))

//--------------------------------------------
//---------------ACCESS SECURITY--------------
static const DWORD NVRAM_CHASSIS_COPY_OFFSET = NVRAM_HARDPIN_OFFSET + NVRAM_HARDPIN_SIZE;
static const DWORD NVRAM_CHASSIS_COPY_SIZE = sizeof(byte);

//--------------------------------------------
//------------------JACKPOT-------------------
static const DWORD NVRAM_JACKPOT_OFFSET = NVRAM_CHASSIS_COPY_OFFSET + NVRAM_CHASSIS_COPY_SIZE;
static const DWORD NVRAM_JACKPOT_CHECKBYTE_OFFSET = NVRAM_JACKPOT_OFFSET;
static const DWORD NVRAM_JACKPOT_CHECKBYTE_SIZE = sizeof (byte);
static const byte  NVRAM_JACKPOT_CHECKBYTE_VALUE = 0x1a;	
static const DWORD NVRAM_JACKPOT_SIZE = 64;
static const DWORD NVRAM_JACKPOT_DATA_SIZE = NVRAM_JACKPOT_SIZE - NVRAM_JACKPOT_CHECKBYTE_SIZE;

//--------------------------------------------
//--------------DEBUG LOGGING-----------------
static const DWORD NVRAM_DEBUG_OFFSET = NVRAM_JACKPOT_OFFSET + NVRAM_JACKPOT_SIZE;
static const DWORD NVRAM_DEBUG_CHECKBYTE_OFFSET = NVRAM_DEBUG_OFFSET;
static const DWORD NVRAM_DEBUG_CHECKBYTE_SIZE = sizeof (byte);
static const byte  NVRAM_DEBUG_CHECKBYTE_VALUE = 0x1a;	
static const DWORD NVRAM_MAX_DEBUG_SIZE = 4096;
static const DWORD NVRAM_DEBUG_DATA_SIZE_OFFSET = NVRAM_DEBUG_CHECKBYTE_OFFSET + NVRAM_DEBUG_CHECKBYTE_SIZE;
static const DWORD NVRAM_DEBUG_DATA_SIZE = sizeof( int );
static const DWORD NVRAM_DEBUG_DATA_OFFSET = NVRAM_DEBUG_DATA_SIZE_OFFSET + NVRAM_DEBUG_DATA_SIZE;

//--------------------------------------------
//-----------SPEEDMEDIA VARIABLES-------------
static const DWORD NVRAM_SPEEDMEDIA_OFFSET = NVRAM_DEBUG_DATA_OFFSET + NVRAM_MAX_DEBUG_SIZE;
static const DWORD NVRAM_SPEEDMEDIA_CHECKBYTE_OFFSET = NVRAM_SPEEDMEDIA_OFFSET;
static const DWORD NVRAM_SPEEDMEDIA_CHECKBYTE_SIZE = sizeof(byte);
static const byte NVRAM_SPEEDMEDIA_CHECKBYTE_VALUE = 0x5b;
static const DWORD NVRAM_SPEEDMEDIA_SIZE = 25; //(checkbyte 1, systemtime 16, type 4, id 4)

//--------------------------------------------
//----------SPEEDMEDIA TRANSACTIONS ----------
static const DWORD NVRAM_SPEEDMEDIA_TRANSACTIONS_OFFSET = NVRAM_SPEEDMEDIA_OFFSET + NVRAM_SPEEDMEDIA_SIZE;
static const DWORD NVRAM_SPEEDMEDIA_TRANSACTION_SIZE = 200;
static const DWORD MAX_NUMBER_OF_SPEEDMEDIA_TRANSACTIONS = 100;
static const DWORD NVRAM_SPEEDMEDIA_TRANSACTIONS_SIZE = NVRAM_SPEEDMEDIA_TRANSACTION_SIZE * MAX_NUMBER_OF_SPEEDMEDIA_TRANSACTIONS;

//--------------------------------------------
//-------------MEDIA WINDOW CODES-------------------
// Intended for Media Window opens and closes.
// Employee-initiatiated changes and frequent changes should have a separate log.
static const DWORD NVRAM_MEDIA_WINDOW_CODES_LOGS_OFFSET = NVRAM_SPEEDMEDIA_TRANSACTIONS_OFFSET + NVRAM_SPEEDMEDIA_TRANSACTIONS_SIZE;
static const DWORD NVRAM_MEDIA_WINDOW_CODES_LOGS_CHECKBYTE_OFFSET = NVRAM_MEDIA_WINDOW_CODES_LOGS_OFFSET;
static const DWORD NVRAM_MEDIA_WINDOW_CODES_LOGS_CHECKBYTE_SIZE = sizeof ( byte );
static const byte  NVRAM_MEDIA_WINDOW_CODES_LOGS_CHECKBYTE_VALUE = 0x6c;	// If this is not the value, assume transaction logs do not currently exist
static const DWORD NVRAM_MEDIA_WINDOW_CODES_LOGS_IS_LOG_FULL_OFFSET = NVRAM_MEDIA_WINDOW_CODES_LOGS_CHECKBYTE_OFFSET + NVRAM_MEDIA_WINDOW_CODES_LOGS_CHECKBYTE_SIZE; //used for log full flag
static const DWORD NVRAM_MEDIA_WINDOW_CODES_LOGS_IS_FULL_SIZE = sizeof ( byte );
static const DWORD NVRAM_MEDIA_WINDOW_CODES_LOGS_INDEX_OFFSET = NVRAM_MEDIA_WINDOW_CODES_LOGS_IS_LOG_FULL_OFFSET + NVRAM_MEDIA_WINDOW_CODES_LOGS_IS_FULL_SIZE;	// used for current index in log
static const DWORD NVRAM_MEDIA_WINDOW_CODES_LOGS_INDEX_SIZE = sizeof ( int );
static const DWORD NVRAM_MEDIA_WINDOW_CODES_LOGS_DATA_OFFSET = NVRAM_MEDIA_WINDOW_CODES_LOGS_INDEX_OFFSET + NVRAM_MEDIA_WINDOW_CODES_LOGS_INDEX_SIZE;//start of media window log data
static const DWORD NVRAM_MEDIA_WINDOW_CODES_LOG_DATA_SIZE = 36;			 // This number is padded.
static const DWORD NVRAM_MAX_MEDIA_WINDOW_CODES_LOGS = 35;		// only have 35 Media Window opens/closes in a log
static const DWORD NVRAM_MEDIA_WINDOW_CODES_LOGS_SIZE = NVRAM_MEDIA_WINDOW_CODES_LOG_DATA_SIZE * NVRAM_MAX_MEDIA_WINDOW_CODES_LOGS + 
	NVRAM_MEDIA_WINDOW_CODES_LOGS_CHECKBYTE_SIZE + NVRAM_MEDIA_WINDOW_CODES_LOGS_IS_FULL_SIZE + NVRAM_MEDIA_WINDOW_CODES_LOGS_INDEX_SIZE;

//--------------------------------------------
//-------------DISPLAY MANAGER MONITOR RESOLUTION-------------------
//  NVRAM_MONITOR_RESOLUTION is stored as a single DWORD for size, plus a DWORD check value.
// See Visual Studio Documentation, "Shared Visual C++ Classes Reference", "CSize::CSize", "Constructs a CSize object.".
// [The resolution size] DWORD used to initialize CSize. The low-order word is the cx member and the high-order word is the cy member.
// The check value DWORD is the value XORed with 0xffffffff, so that 0 == value XOR check.
static const DWORD NVRAM_MONITOR_RESOLUTION_OFFSET = NVRAM_MEDIA_WINDOW_CODES_LOGS_OFFSET + NVRAM_MEDIA_WINDOW_CODES_LOGS_SIZE;
static const DWORD NVRAM_MONITOR_RESOLUTION_SIZE = sizeof(DWORD);
static const DWORD NVRAM_MONITOR_RESOLUTION_CHECK_OFFSET = NVRAM_MONITOR_RESOLUTION_OFFSET + NVRAM_MONITOR_RESOLUTION_SIZE;
static const DWORD NVRAM_MONITOR_RESOLUTION_CHECK_SIZE = sizeof(DWORD);

//--------------------------------------------
//-----------------PB TRANSFER----------------
static const DWORD NVRAM_PB_OFFSET = NVRAM_MONITOR_RESOLUTION_CHECK_OFFSET + NVRAM_MONITOR_RESOLUTION_CHECK_SIZE;
static const DWORD NVRAM_PB_CHECKBYTE_OFFSET = NVRAM_PB_OFFSET;
static const DWORD NVRAM_PB_CHECKBYTE_SIZE = sizeof ( byte );
static const byte  NVRAM_PB_CHECKBYTE_VALUE = 0x1a;	
static const DWORD NVRAM_PB_SIZE = 192;
static const DWORD NVRAM_PB_DATA_OFFSET = NVRAM_PB_OFFSET + NVRAM_PB_CHECKBYTE_SIZE;
static const DWORD NVRAM_PB_DATA_SIZE = NVRAM_PB_SIZE - NVRAM_PB_CHECKBYTE_SIZE;
static const byte  NVRAM_PB_CHECKBYTE2_VALUE = 0x9e; // v1.53.0 extension with persisted m_pbtAuthorizationInProcess.

//----------------------------------------------
//-----------PLAYER GLOBAL BALANCE--------------
static const DWORD NVRAM_PLAYER_GLOBAL_BAL_OFFSET = NVRAM_PB_CHECKBYTE_OFFSET + NVRAM_PB_SIZE;
static const DWORD NVRAM_PLAYER_GLOBAL_BALANCE_SIZE = 64;

//----------------------------------------------
//-----------REBOOT DIAGNOSTICS--------------
static const DWORD NVRAM_REBOOT_DIAGNOSTIC_OFFSET = NVRAM_PLAYER_GLOBAL_BAL_OFFSET + NVRAM_PLAYER_GLOBAL_BALANCE_SIZE;
static const DWORD NVRAM_REBOOT_DIAGNOSTIC_TILTCODE_OFFSET = NVRAM_REBOOT_DIAGNOSTIC_OFFSET;
static const DWORD NVRAM_REBOOT_DIAGNOSTIC_TILTCODE_SIZE = sizeof(WORD);

//--------------------------------------------
//-------------PLAYER INFO-------------------------
// Cannot add another sprinkle, because CMemoryStorage::UpgradeNVRAM() won't do anything unless all the sprinkles are valid.
static const DWORD NVRAM_PLAYER_INFO_OFFSET = NVRAM_REBOOT_DIAGNOSTIC_TILTCODE_OFFSET + NVRAM_REBOOT_DIAGNOSTIC_TILTCODE_SIZE;
static const DWORD NVRAM_PLAYER_INFO_SIZE = 512; // Padded - room to grow.

//--------------------------------------------
//-------------EGM AWARD BONUS (PROGRESSIVE)-------------------------
static const DWORD NVRAM_EGM_AWARD_CHECKBYTE_OFFSET = NVRAM_PLAYER_INFO_OFFSET + NVRAM_PLAYER_INFO_SIZE;
static const DWORD NVRAM_EGM_AWARD_CHECKBYTE_SIZE = sizeof (byte);
static const byte  NVRAM_EGM_AWARD_CHECKBYTE_VALUE = 0x1c;
static const DWORD NVRAM_EGM_AWARD_DATA_OFFSET = NVRAM_EGM_AWARD_CHECKBYTE_OFFSET + NVRAM_EGM_AWARD_CHECKBYTE_SIZE;
static const DWORD NVRAM_EGM_AWARD_DATA_SIZE = 256; // Padded - room to grow.  The persisted instance is responsible for managing upgrades.
static const byte  NVRAM_EGM_AWARD_CHECKBYTE2_VALUE = 0x1e; // v1.50.0 extension with m_methodOfPaymentForBonus.
static const byte  NVRAM_EGM_AWARD_CHECKBYTE3_VALUE = 0x1f; // v1.51.0 extension with m_originalLegacyBonusMeter.


//----------------------------------------------
//-----------CONFIG VERSION 2-------------------
static const DWORD NVRAM_CONFIG_VERSION_2_OFFSET = NVRAM_EGM_AWARD_DATA_OFFSET + NVRAM_EGM_AWARD_DATA_SIZE;
static const DWORD NVRAM_CONFIG_VERSION_2_SIZE = 3000;

// PLAYER SESSION
static const DWORD NVRAM_PLAYER_SESSION2_CHECKBYTE_OFFSET = NVRAM_CONFIG_VERSION_2_OFFSET + NVRAM_CONFIG_VERSION_2_SIZE;
static const DWORD NVRAM_PLAYER_SESSION2_CHECKBYTE_SIZE = sizeof(BYTE);
static const BYTE  NVRAM_PLAYER_SESSION2_CHECKBYTE_VALUE = 0x1d;
static const DWORD NVRAM_PLAYER_SESSION2_DATA_OFFSET = NVRAM_PLAYER_SESSION2_CHECKBYTE_OFFSET + NVRAM_PLAYER_SESSION2_CHECKBYTE_SIZE;
static const DWORD NVRAM_PLAYER_SESSION2_DATA_SIZE = 256; // Padded - room to grow.

//--------------------------------------------
//-------------EGM AWARD STANDARD HIT (SAS PROGRESSIVE)-------------------------
// Each instance gets its own leading check byte.
// The next available NVRAM offset = NVRAM_EGM_AWARD_STANDARD_CHECKBYTE_OFFSET + NVRAM_EGM_AWARD_STANDARD_SIZE.
static const DWORD NVRAM_EGM_AWARD_STANDARD_CHECKBYTE_OFFSET = NVRAM_PLAYER_SESSION2_DATA_OFFSET + NVRAM_PLAYER_SESSION2_DATA_SIZE;
static const DWORD NVRAM_EGM_AWARD_STANDARD_DATA_COUNT = 32;
static const DWORD NVRAM_EGM_AWARD_STANDARD_ITEM_SIZE = NVRAM_EGM_AWARD_CHECKBYTE_SIZE + NVRAM_EGM_AWARD_DATA_SIZE;
static const DWORD NVRAM_EGM_AWARD_STANDARD_SIZE = NVRAM_EGM_AWARD_STANDARD_DATA_COUNT * NVRAM_EGM_AWARD_STANDARD_ITEM_SIZE;

// CUMULATIVE PROGRESSIVE
static const DWORD NVRAM_CUMULATIVE_PROGRESSIVE_CHECKBYTE_OFFSET =
	NVRAM_EGM_AWARD_STANDARD_CHECKBYTE_OFFSET + NVRAM_EGM_AWARD_STANDARD_SIZE;
static const DWORD NVRAM_CUMULATIVE_PROGRESSIVE_CHECKBYTE_SIZE = sizeof(BYTE);
static const BYTE  NVRAM_CUMULATIVE_PROGRESSIVE_CHECKBYTE_VALUE = 0x13;
static const DWORD NVRAM_CUMULATIVE_PROGRESSIVE_DATA_OFFSET =
	NVRAM_CUMULATIVE_PROGRESSIVE_CHECKBYTE_OFFSET + NVRAM_CUMULATIVE_PROGRESSIVE_CHECKBYTE_SIZE;
static const DWORD NVRAM_CUMULATIVE_PROGRESSIVE_DATA_SIZE = 64; // Padded - room to grow.

// LAST STANDARD AWARD PROCESSED.
static const DWORD NVRAM_LAST_STD_AWARD_CHECKBYTE_OFFSET =
	NVRAM_CUMULATIVE_PROGRESSIVE_DATA_OFFSET + NVRAM_CUMULATIVE_PROGRESSIVE_DATA_SIZE;
static const DWORD NVRAM_LAST_STD_AWARD_CHECKBYTE_SIZE = sizeof(BYTE);
static const BYTE  NVRAM_LAST_STD_AWARD_CHECKBYTE_VALUE = 0x15;
static const DWORD NVRAM_LAST_STD_AWARD_DATA_OFFSET =
	NVRAM_LAST_STD_AWARD_CHECKBYTE_OFFSET + NVRAM_LAST_STD_AWARD_CHECKBYTE_SIZE;
static const DWORD NVRAM_LAST_STD_AWARD_DATA_SIZE = NVRAM_EGM_AWARD_DATA_SIZE; // Padded - room to grow.

//--------------------------------------------
//------------- PLAYER START of SESSION METERS CURRENT--------
static const DWORD NVRAM_PLAYER_START_METERS_CURRENT_OFFSET = NVRAM_LAST_STD_AWARD_DATA_OFFSET + NVRAM_LAST_STD_AWARD_DATA_SIZE;
static const DWORD NVRAM_PLAYER_START_METERS_CURRENT_SIZE = NVRAM_EGM_METERS_SIZE;

// GAME LIST CHUNK SIZE CONFIG
static const DWORD NVRAM_GAME_LIST_CHUNKS_CONFIG_OFFSET = NVRAM_PLAYER_START_METERS_CURRENT_OFFSET + NVRAM_PLAYER_START_METERS_CURRENT_SIZE;
static const DWORD NVRAM_GAME_LIST_CHUNKS_CONFIG_SIZE = sizeof(WORD);

static const DWORD NVRAM_SYSTEM_TIME_SPRINKLE_VALUE = 0XABCD1234;

//--------------------------------------------
//--------------EEPROM------------------------

//static const DWORD EEPROM_ALLOWED_SIZE = EEPROM_HOST_ADDRESS_OFFSET + EEPROM_HOST_ADDRESS_SIZE;

static const DWORD EEPROM_CHECKBYTE_OFFSET = EEPROM_OFFSET_START;
static const DWORD EEPROM_CHECKBYTE_SIZE = sizeof( byte );
static const byte  EEPROM_CHECKBYTE_VALUE = 0x30;	// If this is not this value, eerom needs to be set to defaults.

static const DWORD EEPROM_SLOTMAST_ID_OFFSET = EEPROM_CHECKBYTE_OFFSET + EEPROM_CHECKBYTE_SIZE;
static const DWORD EEPROM_SLOTMAST_ID_SIZE = sizeof( int32_t );
static const int32_t  EEPROM_SLOTMAST_ID_DEFAULT = 0;//TODO: INVALID_SLOT_MAST_ID;

static const DWORD EEPROM_CASINO_NUMBER_OFFSET = EEPROM_SLOTMAST_ID_OFFSET + EEPROM_SLOTMAST_ID_SIZE;
static const DWORD EEPROM_CASINO_NUMBER_SIZE = sizeof( byte );
static const byte  EEPROM_CASINO_NUMBER_DEFAULT = 0;

static const DWORD EEPROM_COMM_ID_OFFSET = EEPROM_CASINO_NUMBER_OFFSET + EEPROM_CASINO_NUMBER_SIZE;
static const DWORD EEPROM_COMM_ID_SIZE = sizeof( byte );
static const byte  EEPROM_COMM_ID_DEFAULT = 0;

static const DWORD EEPROM_MACHINE_TYPE_OFFSET = EEPROM_COMM_ID_OFFSET + EEPROM_COMM_ID_SIZE;
static const DWORD EEPROM_MACHINE_TYPE_SIZE = sizeof( byte );
static const byte  EEPROM_MACHINE_TYPE_DEFAULT = 0;

static const DWORD EEPROM_SLOT_NUMBER_OFFSET = EEPROM_MACHINE_TYPE_OFFSET + EEPROM_MACHINE_TYPE_SIZE;
static const DWORD EEPROM_SLOT_NUMBER_SIZE = sizeof ( int32_t );
static const int32_t  EEPROM_SLOT_NUMBER_DEFAULT = 0;

static const DWORD EEPROM_HARD_PIN_TYPES_OFFSET = EEPROM_SLOT_NUMBER_OFFSET + EEPROM_SLOT_NUMBER_SIZE;
static const DWORD EEPROM_HARD_PIN_TYPES_SIZE = sizeof( byte ) * NUM_HARD_PINS;
static const byte  EEPROM_HARD_PIN_TYPES_DEFAULT = 0;

// Each bit specifies if the active state for the pin is high or low.
static const DWORD EEPROM_HARD_PIN_ACTIVE_STATE_OFFSET = EEPROM_HARD_PIN_TYPES_OFFSET + EEPROM_HARD_PIN_TYPES_SIZE;
static const DWORD EEPROM_HARD_PIN_ACTIVE_STATE_SIZE = sizeof( byte );
static const byte  EEPROM_HARD_PIN_ACTIVE_STATE_DEFAULT = 0;

static const DWORD EEPROM_SERIAL_PROTOCOL_OFFSET = EEPROM_HARD_PIN_ACTIVE_STATE_OFFSET + EEPROM_HARD_PIN_ACTIVE_STATE_SIZE;
static const DWORD EEPROM_SERIAL_PROTOCOL_SIZE = sizeof( byte );
static const byte  EEPROM_SERIAL_PROTOCOL_DEFAULT = 0;	// TBD. Don't think we need this.

static const DWORD EEPROM_GAME_DENOM_OFFSET = EEPROM_SERIAL_PROTOCOL_OFFSET + EEPROM_SERIAL_PROTOCOL_SIZE;
static const DWORD EEPROM_GAME_DENOM_SIZE = sizeof( WORD );
static const WORD  EEPROM_GAME_DENOM_DEFAULT = 1;	// 1 cent default

static const DWORD EEPROM_SCREEN_BRIGHTNESS_OFFSET = EEPROM_GAME_DENOM_OFFSET + EEPROM_GAME_DENOM_SIZE;
static const DWORD EEPROM_SCREEN_BRIGHTNESS_SIZE = sizeof( byte );
static const byte  EEPROM_SCREEN_BRIGHTNESS_DEFAULT = 65;

static const DWORD EEPROM_LEFT_SPEAKER_VOLUME_OFFSET = EEPROM_SCREEN_BRIGHTNESS_OFFSET + EEPROM_SCREEN_BRIGHTNESS_SIZE;
static const DWORD EEPROM_LEFT_SPEAKER_VOLUME_SIZE = sizeof( byte );
static const byte  EEPROM_LEFT_SPEAKER_VOLUME_DEFAULT = 60;

static const DWORD EEPROM_RIGHT_SPEAKER_VOLUME_OFFSET = EEPROM_LEFT_SPEAKER_VOLUME_OFFSET + EEPROM_LEFT_SPEAKER_VOLUME_SIZE;
static const DWORD EEPROM_RIGHT_SPEAKER_VOLUME_SIZE = sizeof( byte );
static const byte  EEPROM_RIGHT_SPEAKER_VOLUME_DEFAULT = 50;

static const DWORD EEPROM_GLOBAL_CARD_PASS_OFFSET = EEPROM_RIGHT_SPEAKER_VOLUME_OFFSET + EEPROM_RIGHT_SPEAKER_VOLUME_SIZE;
static const DWORD EEPROM_GLOBAL_CARD_PASS_SIZE = sizeof( WORD );
static const WORD  EEPROM_GLOBAL_CARD_PASS_DEFAULT = 0;

static const DWORD EEPROM_UNUSED1_OFFSET = EEPROM_GLOBAL_CARD_PASS_OFFSET + EEPROM_GLOBAL_CARD_PASS_SIZE; //unused
static const DWORD EEPROM_UNUSED1_SIZE = sizeof ( int32_t );//unused
static const int32_t  EEPROM_UNUSED1_DEFAULT = 1;//unused

static const DWORD EEPROM_UNUSED2_OFFSET = EEPROM_UNUSED1_OFFSET + EEPROM_UNUSED1_SIZE;
static const DWORD EEPROM_UNUSED2_SIZE = sizeof ( int32_t );
static const int32_t  EEPROM_UNUSED2_DEFAULT = 1;

//static const DWORD EEPROM_SENTINEL_OPTIONS_OFFSET = EEPROM_DIVISOR_OFFSET + EEPROM_DIVISOR_SIZE; 
//static const DWORD EEPROM_SENTINEL_OPTIONS_SIZE = sizeof ;

static const DWORD EEPROM_DHCPAUTO_OFFSET = EEPROM_UNUSED2_OFFSET + EEPROM_UNUSED2_SIZE;
static const DWORD EEPROM_DHCPAUTO_SIZE = sizeof ( bool );
static const bool  EEPROM_DHCPAUTO_DEFAULT = true;

static const DWORD EEPROM_HOST_ADDRESS_OFFSET = EEPROM_DHCPAUTO_OFFSET + EEPROM_DHCPAUTO_SIZE;
static const DWORD EEPROM_HOST_ADDRESS_SIZE = SIZE_OF_NAME_IP * sizeof( char );
static const DWORD EEPROM_HOST_ADDRESS_FIRST_BLOCK_SIZE = 26;
static const DWORD EEPROM_HOST_ADDRESS_SECOND_BLOCK_SIZE = 4;
static const char  EEPROM_HOST_ADDRESS_DEFAULT = 0;

static const DWORD EEPROM_HOST_PORT_OFFSET = EEPROM_HOST_ADDRESS_OFFSET + EEPROM_HOST_ADDRESS_SIZE;
static const DWORD EEPROM_HOST_PORT_SIZE = sizeof ( DWORD );
static const DWORD EEPROM_HOST_PORT_DEFAULT = HOST_PORT_DEFAULT;

static const DWORD EEPROM_MY_IP_OFFSET = EEPROM_HOST_PORT_OFFSET + EEPROM_HOST_PORT_SIZE;
static const DWORD EEPROM_MY_IP_SIZE = IP_ADDRESS_SIZE * sizeof ( byte );
static const byte  EEPROM_MY_IP_DEFAULT = 0;

static const DWORD EEPROM_DEFAULT_GATEWAY_OFFSET = EEPROM_MY_IP_OFFSET + EEPROM_MY_IP_SIZE;
static const DWORD EEPROM_DEFAULT_GATEWAY_SIZE = IP_ADDRESS_SIZE * sizeof ( byte );
static const byte  EEPROM_DEFAULT_GATEWAY_DEFAULT = 0;

static const DWORD EEPROM_SUBNET_MASK_OFFSET = EEPROM_DEFAULT_GATEWAY_OFFSET + EEPROM_DEFAULT_GATEWAY_SIZE;
static const DWORD EEPROM_SUBNET_MASK_SIZE = IP_ADDRESS_SIZE * sizeof ( byte );
static const byte  EEPROM_SUBNET_MASK_DEFAULT = 0;

static const DWORD EEPROM_PREFERRED_DNS_OFFSET = EEPROM_SUBNET_MASK_OFFSET + EEPROM_SUBNET_MASK_SIZE;
static const DWORD EEPROM_PREFERRED_DNS_SIZE = IP_ADDRESS_SIZE * sizeof ( byte );
static const byte  EEPROM_PREFERRED_DNS_DEFAULT = 0;

static const DWORD EEPROM_ALT_DNS_OFFSET = EEPROM_PREFERRED_DNS_OFFSET + EEPROM_PREFERRED_DNS_SIZE;
static const DWORD EEPROM_ALT_DNS_SIZE = IP_ADDRESS_SIZE * sizeof ( byte );
static const byte  EEPROM_ALT_DNS_DEFAULT = 0;

static const DWORD EEPROM_EGM_TYPE_OFFSET = EEPROM_ALT_DNS_OFFSET + EEPROM_ALT_DNS_SIZE;
static const DWORD EEPROM_EGM_TYPE_SIZE = sizeof( byte );
static const byte  EEPROM_EGM_TYPE_DEFAULT = (byte)STANDARD;

static const DWORD EEPROM_EGM_POLLING_SPEED_OFFSET = EEPROM_EGM_TYPE_OFFSET + EEPROM_EGM_TYPE_SIZE;
static const DWORD EEPROM_EGM_POLLING_SPEED_SIZE = sizeof( byte );
static const byte  EEPROM_EGM_POLLING_SPEED_DEFAULT = (byte)MS40;

static const DWORD EEPROM_EGM_PROTOCOL_OFFSET = EEPROM_EGM_POLLING_SPEED_OFFSET + EEPROM_EGM_POLLING_SPEED_SIZE;
static const DWORD EEPROM_EGM_PROTOCOL_SIZE = sizeof( byte );
static const byte  EEPROM_EGM_PROTOCOL_DEFAULT = (byte)SAS6xx;

static const DWORD EEPROM_UNUSED3_OFFSET = EEPROM_EGM_PROTOCOL_OFFSET + EEPROM_EGM_PROTOCOL_SIZE;
static const DWORD EEPROM_UNUSED3_SIZE = sizeof( byte );
static const byte  EEPROM_UNUSED3_DEFAULT = 0;

static const DWORD EEPROM_SCREEN_CALIBRATED_FLAG_OFFSET = EEPROM_UNUSED3_OFFSET + EEPROM_UNUSED3_SIZE;
static const DWORD EEPROM_SCREEN_CALIBRATED_FLAG_SIZE = sizeof(byte);
static const byte  EEPROM_SCREEN_CALIBRATED_TRUE = 0xD2;
static const byte  EEPROM_SCREEN_CALIBRATED_FALSE = 0x00;
static const byte  EEPROM_SCREEN_CALIBRATED_DEFAULT = EEPROM_SCREEN_CALIBRATED_FALSE;

static const DWORD EEPROM_EGM_PROTOCOL_STATE_OFFSET = EEPROM_SCREEN_CALIBRATED_FLAG_OFFSET + EEPROM_SCREEN_CALIBRATED_FLAG_SIZE;
static const DWORD EEPROM_EGM_PROTOCOL_STATE_SIZE = sizeof( byte );
static const byte  EEPROM_EGM_PROTOCOL_STATE_DEFAULT = (byte)protocolStateDisabled;

static const DWORD EEPROM_SENTINEL_ONLINE_STATE_OFFSET = EEPROM_EGM_PROTOCOL_STATE_OFFSET + EEPROM_EGM_PROTOCOL_STATE_SIZE;
static const DWORD EEPROM_SENTINEL_ONLINE_STATE_SIZE = sizeof( byte );
static const byte  EEPROM_SENTINEL_ONLINE_STATE_DEFAULT = (byte)sentinelOffline;

static const DWORD EEPROM_BATTERY_STATUS_OFFSET = EEPROM_SENTINEL_ONLINE_STATE_OFFSET + EEPROM_SENTINEL_ONLINE_STATE_SIZE;
static const DWORD EEPROM_BATTERY_STATUS_SIZE = sizeof( byte );
static const byte  EEPROM_BATTERY_STATUS_DEFAULT = (byte)batteryStatusUnknown;

static const DWORD EEPROM_BATTERY_STATUS_TIME_OFFSET = EEPROM_BATTERY_STATUS_OFFSET + EEPROM_BATTERY_STATUS_SIZE;
static const DWORD EEPROM_BATTERY_STATUS_TIME_SIZE = NVRAM_TIME_SIZE;
static const byte  EEPROM_BATTERY_STATUS_TIME_DEFAULT = (byte)batteryStatusUnknown;

static const DWORD EEPROM_SERVICE_WINDOW_SIZE_OFFSET = EEPROM_BATTERY_STATUS_TIME_OFFSET + EEPROM_BATTERY_STATUS_TIME_SIZE;
static const DWORD EEPROM_SERVICE_WINDOW_SIZE_SIZE = sizeof(WORD);
static const WORD  EEPROM_SERVICE_WINDOW_SIZE_DEFAULT = 25;

static const DWORD EEPROM_SERVICE_WINDOW_LOCATION_OFFSET = EEPROM_SERVICE_WINDOW_SIZE_OFFSET + EEPROM_SERVICE_WINDOW_SIZE_SIZE;
static const DWORD EEPROM_SERVICE_WINDOW_LOCATION_SIZE = sizeof(byte);
static const WORD  EEPROM_SERVICE_WINDOW_LOCATION_DEFAULT = 0;

static const DWORD EEPROM_TASKBAR_SIZE_OFFSET = EEPROM_SERVICE_WINDOW_LOCATION_OFFSET + EEPROM_SERVICE_WINDOW_LOCATION_SIZE;
static const DWORD EEPROM_TASKBAR_SIZE = sizeof(WORD);
static const WORD  EEPROM_TASKBAR_SIZE_DEFAULT = 10;

// Touch Screen Protocol settings.
static const DWORD EEPROM_TSPROTO_TYPE_OFFSET = EEPROM_TASKBAR_SIZE_OFFSET + EEPROM_TASKBAR_SIZE;
static const DWORD EEPROM_TSPROTO_TYPE_SIZE = sizeof(byte);
static const byte  EEPROM_TSPROTO_TYPE_DEFAULT = 0;//TODO: TOUCH_SCREEN_PROTOCOL_TYPE_SERIAL;
static const byte  EEPROM_TSPROTO_TYPE_RESET = 0;//TODO: TOUCH_SCREEN_PROTOCOL_TYPE_INVALID;

static const DWORD EEPROM_TSPROTO_VENDOR_ID_OFFSET = EEPROM_TSPROTO_TYPE_OFFSET + EEPROM_TSPROTO_TYPE_SIZE;
static const DWORD EEPROM_TSPROTO_VENDOR_ID_SIZE = sizeof(WORD);
static const WORD  EEPROM_TSPROTO_VENDOR_ID_DEFAULT = 0x0596;
static const WORD  EEPROM_TSPROTO_VENDOR_ID_USB = 0x0000;

static const DWORD EEPROM_TSPROTO_BAUD_OFFSET = EEPROM_TSPROTO_VENDOR_ID_OFFSET + EEPROM_TSPROTO_VENDOR_ID_SIZE;
static const DWORD EEPROM_TSPROTO_BAUD_SIZE = sizeof(DWORD);
static const DWORD EEPROM_TSPROTO_BAUD_DEFAULT = 2400;
static const DWORD EEPROM_TSPROTO_BAUD_DEFAULT_WS = 9600;
static const DWORD EEPROM_TSPROTO_BAUD_USB = 0;

static const LPCWSTR EEPROM_TSPROTO_NAME_DEFAULT = L"Serial: 3M MicroTouch 2400";
static const LPCWSTR EEPROM_TSPROTO_NAME_DEFAULT_WS = L"Serial: 3M MicroTouch 9600";
static const LPCWSTR EEPROM_TSPROTO_NAME_USB = L"USB";

static const DWORD EEPROM_MIXER_REBOOT_COUNT_OFFSET = EEPROM_TSPROTO_BAUD_OFFSET + EEPROM_TSPROTO_BAUD_SIZE;
static const DWORD EEPROM_MIXER_REBOOT_COUNT_SIZE = sizeof( byte );
static const byte  EEPROM_MIXER_REBOOT_COUNT_DEFAULT = 0;
static const byte  EEPROM_MIXER_REBOOT_COUNT_MAX = 3;

static const DWORD EEPROM_VIDEO_INPUT_AUTO_DETECT_OFFSET = EEPROM_MIXER_REBOOT_COUNT_OFFSET + EEPROM_MIXER_REBOOT_COUNT_SIZE;
static const DWORD EEPROM_VIDEO_INPUT_AUTO_DETECT_SIZE = sizeof( byte );
static const byte  EEPROM_VIDEO_INPUT_AUTO_DETECT_AUTO = 0;
static const byte  EEPROM_VIDEO_INPUT_AUTO_DETECT_MANUAL = 0xCF;	// Not likely to be set to this value
static const byte  EEPROM_VIDEO_INPUT_AUTO_DETECT_DEFAULT = EEPROM_VIDEO_INPUT_AUTO_DETECT_AUTO;

static const DWORD EEPROM_VIDEO_OUTPUT_AUTO_CONFIG_OFFSET = EEPROM_VIDEO_INPUT_AUTO_DETECT_OFFSET + EEPROM_VIDEO_INPUT_AUTO_DETECT_SIZE;
static const DWORD EEPROM_VIDEO_OUTPUT_AUTO_CONFIG_SIZE = sizeof( byte );
static const byte  EEPROM_VIDEO_OUTPUT_AUTO_CONFIG_AUTO = 0;
static const byte  EEPROM_VIDEO_OUTPUT_AUTO_CONFIG_NATIVE = 0xCE;
static const byte  EEPROM_VIDEO_OUTPUT_AUTO_CONFIG_MANUAL = 0xCF;	// Not likely to be set to this value
static const byte  EEPROM_VIDEO_OUTPUT_AUTO_CONFIG_DEFAULT = EEPROM_VIDEO_OUTPUT_AUTO_CONFIG_AUTO;

static const DWORD EEPROM_DESKTOP_ORIENTATION_OFFSET = EEPROM_VIDEO_OUTPUT_AUTO_CONFIG_OFFSET + EEPROM_VIDEO_OUTPUT_AUTO_CONFIG_SIZE;
static const DWORD EEPROM_DESKTOP_ORIENTATION_SIZE = sizeof( byte );
static const byte  EEPROM_DESKTOP_ORIENTATION_NONE = 0;
static const byte  EEPROM_DESKTOP_ORIENTATION_90 = 0xDA;	// Not likely to be set to this value
static const byte  EEPROM_DESKTOP_ORIENTATION_180 = 0xDB;	// Not likely to be set to this value
static const byte  EEPROM_DESKTOP_ORIENTATION_270 = 0xDC;	// Not likely to be set to this value
static const byte  EEPROM_DESKTOP_ORIENTATION_DEFAULT = EEPROM_DESKTOP_ORIENTATION_NONE;

static const DWORD EEPROM_MW_EGM_ASPECT_RATIO_OFFSET = EEPROM_DESKTOP_ORIENTATION_OFFSET + EEPROM_DESKTOP_ORIENTATION_SIZE;
static const DWORD EEPROM_MW_EGM_ASPECT_RATIO_SIZE = sizeof( byte );
static const byte  EEPROM_MW_EGM_ASPECT_MAINTAIN = 0xC1;
static const byte  EEPROM_MW_EGM_ASPECT_NO_MAINTAIN = 0xC2;
static const byte  EEPROM_MW_EGM_ASPECT_DEFAULT = EEPROM_MW_EGM_ASPECT_NO_MAINTAIN;

static const DWORD EEPROM_MW_CARD_IN_PLAYER_STATE_OFFSET = EEPROM_MW_EGM_ASPECT_RATIO_OFFSET + EEPROM_MW_EGM_ASPECT_RATIO_SIZE;
static const DWORD EEPROM_MW_CARD_IN_PLAYER_STATE_SIZE = sizeof( byte );
static const byte  EEPROM_MW_CARD_IN_PLAYER_STATE_CLOSE = 0xC1;
static const byte  EEPROM_MW_CARD_IN_PLAYER_STATE_OPEN = 0xC2;
static const byte  EEPROM_MW_CARD_IN_PLAYER_STATE_MAINTAIN = 0xC3;
static const byte  EEPROM_MW_CARD_IN_PLAYER_STATE_DEFAULT = EEPROM_MW_CARD_IN_PLAYER_STATE_OPEN;

static const DWORD EEPROM_MW_CARD_OUT_PLAYER_STATE_OFFSET = EEPROM_MW_CARD_IN_PLAYER_STATE_OFFSET + EEPROM_MW_CARD_IN_PLAYER_STATE_SIZE;
static const DWORD EEPROM_MW_CARD_OUT_PLAYER_STATE_SIZE = sizeof( byte );
static const byte  EEPROM_MW_CARD_OUT_PLAYER_STATE_CLOSE = 0xC1;
static const byte  EEPROM_MW_CARD_OUT_PLAYER_STATE_OPEN = 0xC2;
static const byte  EEPROM_MW_CARD_OUT_PLAYER_STATE_MAINTAIN = 0xC3;
static const byte  EEPROM_MW_CARD_OUT_PLAYER_STATE_DEFAULT = EEPROM_MW_CARD_OUT_PLAYER_STATE_CLOSE;

static const DWORD EEPROM_MW_AUTO_OPEN_OFFSET = EEPROM_MW_CARD_OUT_PLAYER_STATE_OFFSET + EEPROM_MW_CARD_OUT_PLAYER_STATE_SIZE;
static const DWORD EEPROM_MW_AUTO_OPEN_SIZE = sizeof( byte );
static const byte  EEPROM_MW_AUTO_OPEN_YES = 0xB6;
static const byte  EEPROM_MW_AUTO_OPEN_NO = 0xB7;
static const byte  EEPROM_MW_AUTO_OPEN_DEFAULT = EEPROM_MW_AUTO_OPEN_NO;

static const DWORD EEPROM_MW_AUTO_CLOSE_OFFSET = EEPROM_MW_AUTO_OPEN_OFFSET + EEPROM_MW_AUTO_OPEN_SIZE;
static const DWORD EEPROM_MW_AUTO_CLOSE_SIZE = sizeof( byte );
static const byte  EEPROM_MW_AUTO_CLOSE_YES = 0xB6;
static const byte  EEPROM_MW_AUTO_CLOSE_NO = 0xB7;
static const byte  EEPROM_MW_AUTO_CLOSE_DEFAULT = EEPROM_MW_AUTO_CLOSE_YES;

static const DWORD EEPROM_MW_AUTO_MINUTES_OFFSET = EEPROM_MW_AUTO_CLOSE_OFFSET + EEPROM_MW_AUTO_CLOSE_SIZE;
static const DWORD EEPROM_MW_AUTO_MINUTES_SIZE = sizeof( byte );
static const byte  EEPROM_MW_AUTO_MINUTES_DEFAULT = 15;
 
static const DWORD EEPROM_MW_FIRST_PLAY_PLAYER_STATE_OFFSET = EEPROM_MW_AUTO_MINUTES_OFFSET + EEPROM_MW_AUTO_MINUTES_SIZE;
static const DWORD EEPROM_MW_FIRST_PLAY_PLAYER_STATE_SIZE = sizeof( byte );
static const byte  EEPROM_MW_FIRST_PLAY_PLAYER_STATE_CLOSE = 0xC1;
static const byte  EEPROM_MW_FIRST_PLAY_PLAYER_STATE_OPEN = 0xC2;
static const byte  EEPROM_MW_FIRST_PLAY_PLAYER_STATE_MAINTAIN = 0xC3;
static const byte  EEPROM_MW_FIRST_PLAY_PLAYER_STATE_DEFAULT = EEPROM_MW_FIRST_PLAY_PLAYER_STATE_CLOSE;
 
static const DWORD EEPROM_MW_LOCAL_CHANGE_PENDING_MAP_OFFSET = EEPROM_MW_FIRST_PLAY_PLAYER_STATE_OFFSET + EEPROM_MW_FIRST_PLAY_PLAYER_STATE_SIZE;
static const DWORD EEPROM_MW_LOCAL_CHANGE_PENDING_MAP_SIZE = sizeof( DWORD );
static const DWORD EEPROM_MW_LOCAL_CHANGE_PENDING_MAP_DEFAULT = 0x0;
 
static const DWORD EEPROM_REBOOT_DIAGNOSTIC_TILTCODE_OFFSET = EEPROM_MW_LOCAL_CHANGE_PENDING_MAP_OFFSET + EEPROM_MW_LOCAL_CHANGE_PENDING_MAP_SIZE;
static const DWORD EEPROM_REBOOT_DIAGNOSTIC_TILTCODE_SIZE = sizeof(WORD);
static const WORD EEPROM_REBOOT_DIAGNOSTIC_TILTCODE_DEFAULT = 0x0;

static const DWORD EEPROM_MW_BONUS_EVENT_PLAYER_STATE_OFFSET = EEPROM_REBOOT_DIAGNOSTIC_TILTCODE_OFFSET + EEPROM_REBOOT_DIAGNOSTIC_TILTCODE_SIZE;
static const DWORD EEPROM_MW_BONUS_EVENT_PLAYER_STATE_SIZE = sizeof(byte);
static const byte  EEPROM_MW_BONUS_EVENT_PLAYER_STATE_CLOSE = 0xC1;
static const byte  EEPROM_MW_BONUS_EVENT_PLAYER_STATE_OPEN = 0xC2;
static const byte  EEPROM_MW_BONUS_EVENT_PLAYER_STATE_MAINTAIN = 0xC3;
static const byte  EEPROM_MW_BONUS_EVENT_PLAYER_STATE_DEFAULT = EEPROM_MW_BONUS_EVENT_PLAYER_STATE_OPEN;

static const DWORD EEPROM_USED_SIZE = EEPROM_MW_BONUS_EVENT_PLAYER_STATE_OFFSET + EEPROM_MW_BONUS_EVENT_PLAYER_STATE_SIZE;
 

#endif


